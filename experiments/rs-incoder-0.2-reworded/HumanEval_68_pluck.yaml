name: HumanEval_68_pluck
language: rs
prompt: "/// \"Given a vector representing a branch of a tree that has non-negative\
  \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
  \ The plucked node should be the node with the smallest even value.\n/// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n/// The plucked node should be returned in a vector, [ smalest_value,\
  \ its index ],\n/// If there are no even values or the given vector is empty, return\
  \ [].\n/// Example 1:\n/// >>> pluck(vec![4, 2, 3])\n/// vec![2, 1]\n/// Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
  /// >>> pluck(vec![1, 2, 3])\n/// vec![2, 1]\n/// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(vec![])\n\
  /// vec![]\n/// Example 4:\n/// >>> pluck(vec![5, 0, 3, 0, 4, 2])\n/// vec![0, 1]\n\
  /// Explanation: 0 is the smallest value, but  there are two zeros,\n/// so we will\
  \ choose the first zero, which has the smallest index.\n/// Constraints:\n/// *\
  \ 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfn pluck(arr: Vec<isize>) ->\
  \ Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = pluck;\n    assert_eq!(candidate(vec![4,\
  \ 2, 3]), vec![2, 1]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 1]);\n\
  \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5,\
  \ 0, 3, 0, 4, 2]), vec![0, 1]);\n    assert_eq!(candidate(vec![1, 2, 3, 0, 5, 3]),\
  \ vec![0, 3]);\n    assert_eq!(candidate(vec![5, 4, 8, 4, 8]), vec![4, 1]);\n  \
  \  assert_eq!(candidate(vec![7, 6, 7, 1]), vec![6, 1]);\n    assert_eq!(candidate(vec![7,\
  \ 9, 7, 1]), Vec::<isize>::new());\n}\n"
completions: ["    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    let\
    \ mut min_idx2 = 0;\n    let mut min_idx3 = 0;\n    let mut min_idx4 = 0;\n  \
    \  let mut min_idx5 = 0;\n    let mut min_idx6 = 0;\n    let mut min_idx7 = 0;\n\
    \    let mut min_idx8 = 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10 =\
    \ 0;\n    let mut min_idx11 = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13\
    \ = 0;\n    let mut min_idx14 = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16\
    \ = 0;\n    let mut min_idx17 = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19\
    \ = 0;\n    let mut min_idx20 = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22\
    \ = 0;\n    let mut min_idx23 = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25\
    \ = 0;\n    let mut min_idx26 = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28\
    \ = 0;\n    let mut min_idx29 = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31\
    \ = 0;\n    let mut min_idx32 = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34\
    \ = 0;\n    let mut min_idx35 = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37\
    \ = 0;\n    let mut min_idx38 = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40\
    \ = 0;\n    let mut min_idx41 = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43\
    \ = 0;\n    let mut min_idx44 = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46\
    \ = 0;\n    let mut min_idx47 = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49\
    \ = 0;\n    let mut min_idx50 = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52\
    \ = 0;\n    let mut min_idx53 = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55\
    \ = 0;\n    let mut min_idx56 = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58\
    \ = 0;\n    let mut min_idx59 = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61\
    \ = 0;\n    let mut min_idx62 = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value == i {\n              \
    \  min_idx = i;\n            }\n            min_value = i;\n        }\n    }\n\
    \    vec![min_value, min_idx]", "    let mut smallest_value: isize = 0;\n    let\
    \ mut smallest_index: usize = 0;\n    let mut mut_smallest_value: isize = 0;\n\
    \    let mut mut_smallest_index: usize = 0;\n    let mut mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_smallest_index: usize = 0;\n    let mut mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_smallest_index: usize = 0;\n    let mut\
    \ mut_mut_mut_mut_smallest_value: isize = 0;\n    let mut mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_smallest_value: isize = 0;\n   \
    \ let mut mut_mut_mut_mut_mut_smallest_index: usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_smallest_index: usize = 0;\n\
    \    let mut mut_mut_mut_mut_mut_mut_mut_smallest_value: isize = 0;\n    let mut\
    \ mut_mut_mut_mut_mut_mut_mut_mut_smallest_index: usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mu",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value >= i {\n              \
    \  min_value = i;\n                min_idx = i;\n            }\n        }\n  \
    \  }\n    vec![min_value, min_idx]", "    let mut min_value = i32::MAX;\n    let\
    \ mut min_idx = -1;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n    \
    \        if min_value < i {\n                min_value = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    if min_idx == -1 {\n        return\
    \ vec![];\n    }\n    vec![min_value, min_idx]", "    let mut smallest_value =\
    \ arr[0];\n    let mut smallest_index = 0;\n    for i in arr.iter().rev() {\n\
    \        if i % 2 == 0 {\n            if smallest_value < i {\n              \
    \  smallest_value = i;\n                smallest_index = i;\n            }\n \
    \       }\n    }\n    vec![smallest_value, smallest_index]", "    let mut min_value\
    \ = i32::MAX;\n    let mut min_idx = -1;\n    let mut min_idx2 = -1;\n    for\
    \ i in arr.iter() {\n        if i % 2 == 0 {\n            if min_value < i {\n\
    \                min_value = i;\n                min_idx = i;\n            }\n\
    \        } else {\n            if min_idx2 < i {\n                min_idx2 = i;\n\
    \            }\n        }\n    }\n    if min_idx2 == min_idx {\n        return\
    \ vec![];\n    }\n    return vec![min_value, min_idx];", "    let mut smallest_value:\
    \ isize = 0;\n    let mut smallest_index: isize = 0;\n    let mut even_values:\
    \ Vec<isize> = Vec::new();\n    for value in arr {\n        if value % 2 == 0\
    \ {\n            even_values.push(value);\n        }\n        if value == smallest_value\
    \ {\n            smallest_index = arr.iter().position(|&x| x == value).unwrap();\n\
    \        }\n        if value < smallest_value {\n            smallest_value =\
    \ value;\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = smallest_index;\n    for value in even_values {\n        if value < smallest_even_value\
    \ {\n            smallest_even_value = value;\n            smallest_even_index\
    \ = arr.iter().position(|&x| x == value).unwrap();\n        }\n    }\n    vec![smallest_even_value,\n\
    \         smallest_even_index]", "    let mut even_values = vec![];\n    let mut\
    \ smallest_value = vec![];\n    let mut smallest_index = vec![];\n    for i in\
    \ arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n  \
    \          if i < smallest_value.len() {\n                smallest_value[i] =\
    \ i;\n                smallest_index[i] = i;\n            }\n        } else {\n\
    \            if i < smallest_value.len() {\n                smallest_value[i]\
    \ = i;\n                smallest_index[i] = i;\n            }\n        }\n   \
    \ }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n    if even_values.len()\
    \ == 1 {\n        return vec![even_values[0]];\n    }\n    if even_values.len()\
    \ > 1 {\n        let mut smallest_value_iter = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \        let mut smallest_index_iter = smallest_index.iter().cloned().collect::<Vec<_>>();\n\
    \        let mut smallest_value = vec![];\n        let mut smallest_index = vec![];\n\
    \        for i in even_values.iter() {\n            if i < smallest_value.len()\
    \ {\n                smallest_value[i] = i;\n                smallest_index[i]\
    \ = i;\n            }\n        }\n        for i in even_values.iter() {\n    \
    \        if i < smallest_value.len() {\n                smallest_value[i] = i;\n\
    \                smallest_index[i] = i;\n            }\n        }\n        for\
    \ i in even_values.iter() {\n            if i < smallest_value.len() {\n     \
    \           smallest_value[i] = i;\n                smallest_index[i] = i;\n \
    \           }\n        }\n        for i in even_values.iter() {\n            if\
    \ i < smallest_value.len() {\n                smallest_value[i] = i;\n       \
    \         smallest_index[i] = i;\n            }\n        }\n        for i in even_values.iter()\
    \ {\n            if i < smallest_value.len() {\n                smallest_value[i]\
    \ = i;\n                smallest_index[i] = i;\n            }\n        }\n   \
    \     for i in even_values.iter() {\n            if i < smallest_value.len() {\n\
    \                smallest_value[i] = i;\n                smallest_index[i] = i;\n\
    \            }\n        }\n        for i in even_values.iter() {\n           \
    \ if i < smallest_value.len() {\n                smallest_value[i] = i;\n    \
    \            smallest_index[i] = i;\n            }\n        }\n        for i in\
    \ even_values.iter() {\n            if i < smallest_value.len() {\n          \
    \      smallest_value[i] = i;\n                smallest_index[i] = i;\n      \
    \      }\n        }\n        for i in even_values.iter() {\n            if i <\
    \ smallest_value.len() {\n                smallest_value[i] = i;\n           \
    \     smallest_index[i] = i;\n            }\n        }\n        for i in even_values.iter()\
    \ {\n            if ", "    let mut smallest_value: isize = 0;\n    let mut smallest_index:\
    \ usize = 0;\n    let mut smallest_even_value: isize = 0;\n    let mut mut_even_value:\
    \ isize = 0;\n    let mut mut_index: usize = 0;\n    let mut mut_index: usize\
    \ = 0;\n    let mut mut_index: usize = 0;\n    let mut mut_index: usize = 0;\n\
    \    let mut mut_index: usize = 0;\n    let mut mut_index: usize = 0;\n    let\
    \ mut mut_index: usize = 0;\n    let mut mut_index: usize = 0;\n    let mut mut_index:\
    \ usize = 0;\n    let mut mut_index: usize = 0;\n    let mut mut_index: usize\
    \ = 0;\n    let mut mut_index: usize = 0;\n    let mut mut_index: usize = 0;\n\
    \    let mut mut_index: usize = 0;\n    let mut mut_index: usize = 0;\n    let\
    \ mut mut_index: usize = 0;\n    let mut mut_index: usize = 0;\n    let mut mut_index:\
    \ usize = 0;\n    let mut mut_index: usize = 0;\n    let mut mut_index: usize\
    \ = 0;\n    let mut mut_index: usize = 0;\n    let mut mut_index: usize = 0;\n\
    \    let mut mut_index: usize = 0;\n    let mut mut_index: usize = 0;\n    let\
    \ mut mut_index: usize = 0;\n    let mut mut_index: usize = 0;\n    let mut mut_index:\
    \ usize = 0;\n    let mut mut_index: usize = 0;\n    let mut mut_index: usize\
    \ = 0;\n    let mut mut_index: usize = 0;\n    let mut mut_index: usize = 0;\n\
    \    let mut mut_index: usize = 0;\n    let mut mut_index: usize = 0;\n    let\
    \ mut mut_index: usize = 0;\n    let mut mut_index: usize = 0;\n    let mut mut_index:\
    \ usize = 0;\n    let mut mut_index: usize = 0;\n    let mut mut_index: usize\
    \ = 0;\n    let mut mut_index: usize = 0;\n    let mut mut_index: usize = 0;\n\
    \    let mut mut_index: usize = 0;\n    let mut mut_index: usize = 0;\n    let\
    \ mut mut_index: usize = 0;\n    let mut mut_index: usize = 0;\n    let mut mut_index:\
    \ usize = 0;\n    let mut mut_index: usize = 0;\n    let mut mut_index: usize",
  "    let mut even_values = vec![];\n    let mut smallest_value = vec![];\n    let\
    \ mut smallest_index = vec![];\n    for i in arr.iter() {\n        if i % 2 ==\
    \ 0 {\n            even_values.push(i);\n            if i < smallest_value.len()\
    \ {\n                smallest_value[i] = i;\n                smallest_index[i]\
    \ = i;\n            }\n        } else {\n            if i < smallest_value.len()\
    \ {\n                smallest_value[i] = i;\n                smallest_index[i]\
    \ = i;\n            }\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    if even_values.len() > 1 {\n        let mut smallest_even_value =\
    \ even_values[0];\n        let mut smallest_even_index = even_values[0];\n   \
    \     for i in even_values.iter().rev() {\n            if i % 2 == 0 {\n     \
    \           if i < smallest_even_value.len() {\n                    smallest_even_value\
    \ = i;\n                    smallest_even_index = i;\n                }\n    \
    \        } else {\n                if i < smallest_even_value.len() {\n      \
    \              smallest_even_value = i;\n                    smallest_even_index\
    \ = i;\n                }\n            }\n        }\n        return vec![smallest_even_value];\n\
    \    }", "    let mut smallest_value: isize = 0;\n    let mut smallest_index:\
    \ usize = 0;\n    let mut even_values = Vec::new();\n    let mut even_values_index:\
    \ Vec<usize> = Vec::new();\n    for &node in arr {\n        if node.value % 2\
    \ == 0 {\n            even_values.push(node.value);\n            even_values_index.push(node.index);\n\
    \        }\n        if node.value < smallest_value {\n            smallest_value\
    \ = node.value;\n            smallest_index = node.index;\n        }\n    }\n\
    \    if even_values.len() == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value\
    \ = even_values[0];\n    let mut smallest_even_index = even_values_index[0];\n\
    \    for &node in even_values.iter().rev() {\n        if node < smallest_even_value\
    \ {\n            smallest_even_value = node;\n            smallest_even_index\
    \ = even_values_index[even_values.iter().rev().position(|&x| x == node).unwrap()];\n\
    \        }\n    }\n    even_values.clear();\n    even_values_index.clear();\n\
    \    even_values.push(smallest_even_value);\n    even_values_index.push(smallest_even_index);\n\
    \    even_values.sort_unstable();\n    even_values_index.sort_unstable();\n  \
    \  even_values.iter().cloned().collect()", "    let mut even_values = vec![];\n\
    \    let mut smallest_value = vec![];\n    let mut smallest_index = vec![];\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value.len() {\n                smallest_value.push(smallest_value[i]);\n\
    \                smallest_index.push(smallest_index[i]);\n            }\n    \
    \    }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n\
    \    if even_values.len() == 1 {\n        return vec![even_values[0]];\n    }\n\
    \    if even_values.len() == 2 {\n        if even_values[0] < even_values[1] {\n\
    \            return vec![even_values[0], even_values[1]];\n        } else {\n\
    \            return vec![even_values[1], even_values[0]];\n        }\n    }\n\
    \    if even_values.len() == 3 {\n        if even_values[0] < even_values[1] &&\
    \ even_values[0] < even_values[2] {\n            return vec![even_values[0], even_values[1]];\n\
    \        }\n        if even_values[1] < even_values[2] {\n            return vec![even_values[1],\
    \ even_values[2]];\n        }\n        if even_values[0] < even_values[1] && even_values[1]\
    \ < even_values[2] {\n            return vec![even_values[0], even_values[2]];\n\
    \        }\n        if even_values[0] < even_values[1] && even_values[2] < even_values[2]\
    \ {\n            return vec![even_values[1], even_values[2]];\n        }\n   \
    \ }\n    if even_values.len() == 4 {\n        if even_values[0] < even_values[1]\
    \ && even_values[0] < even_values[2] && even_values[0] < even_values[3] {\n  \
    \          return vec![even_values[0], even_values[1]];\n        }\n        if\
    \ even_values[1] < even_values[2] && even_values[1] < even_values[3] {\n     \
    \       return vec![even_values[1], even_values[2]];\n        }\n        if even_values[2]\
    \ < even_values[3] {\n            return vec![even_values[2], even_values[3]];\n\
    \        }\n    }\n    if even_values.len() == 5 {\n        if even_values[0]\
    \ < even_values[1] && even_values[0] < even_values[2] && even_values[0] < even_values[3]\
    \ && even_values[0] < even_values[4] {\n            return vec![even_values[0],\
    \ even_values[1]];\n        }\n        if even_values[1] < even_values[2] && even_values[1]\
    \ < even_values[3] && even_values[1] < even_values[4] {\n            return vec![even_values[1],\
    \ even_values[2]];\n        }\n        if even_values[2] < even_values[3] && even_values[2]\
    \ < even_value", "    let mut min_value = arr[0];\n    let mut min_idx = -1;\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value\
    \ < i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    if min_idx == -1 {\n        return vec![];\n \
    \   }\n    vec![min_value, min_idx]", "    let mut min_val = arr[0];\n    let\
    \ mut min_idx = 0;\n    let mut min_idx2 = 0;\n    let mut min_idx3 = 0;\n   \
    \ let mut min_idx4 = 0;\n    let mut min_idx5 = 0;\n    let mut min_idx6 = 0;\n\
    \    let mut min_idx7 = 0;\n    let mut min_idx8 = 0;\n    let mut min_idx9 =\
    \ 0;\n    let mut min_idx10 = 0;\n    let mut min_idx11 = 0;\n    let mut min_idx12\
    \ = 0;\n    let mut min_idx13 = 0;\n    let mut min_idx14 = 0;\n    let mut min_idx15\
    \ = 0;\n    let mut min_idx16 = 0;\n    let mut min_idx17 = 0;\n    let mut min_idx18\
    \ = 0;\n    let mut min_idx19 = 0;\n    let mut min_idx20 = 0;\n    let mut min_idx21\
    \ = 0;\n    let mut min_idx22 = 0;\n    let mut min_idx23 = 0;\n    let mut min_idx24\
    \ = 0;\n    let mut min_idx25 = 0;\n    let mut min_idx26 = 0;\n    let mut min_idx27\
    \ = 0;\n    let mut min_idx28 = 0;\n    let mut min_idx29 = 0;\n    let mut min_idx30\
    \ = 0;\n    let mut min_idx31 = 0;\n    let mut min_idx32 = 0;\n    let mut min_idx33\
    \ = 0;\n    let mut min_idx34 = 0;\n    let mut min_idx35 = 0;\n    let mut min_idx36\
    \ = 0;\n    let mut min_idx37 = 0;\n    let mut min_idx38 = 0;\n    let mut min_idx39\
    \ = 0;\n    let mut min_idx40 = 0;\n    let mut min_idx41 = 0;\n    let mut min_idx42\
    \ = 0;\n    let mut min_idx43 = 0;\n    let mut min_idx44 = 0;\n    let mut min_idx45\
    \ = 0;\n    let mut min_idx46 = 0;\n    let mut min_idx47 = 0;\n    let mut min_idx48\
    \ = 0;\n    let mut min_idx49 = 0;\n    let mut min_idx50 = 0;\n    let mut min_idx51\
    \ = 0;\n    let mut min_idx52 = 0;\n    let mut min_idx53 = 0;\n    let mut min_idx54\
    \ = 0;\n    let mut min_idx55 = 0;\n    let mut min_idx56 = 0;\n    let mut min_idx57\
    \ = 0;\n    let mut min_idx58 = 0;\n    let mut min_idx59 = 0;\n    let mut min_idx60\
    \ = 0;\n    let mut min_idx61 = 0;\n    let mut min_idx62 = 0;\n    let mut min_idx63\
    \ = 0;\n    let mut min_idx", "    let mut min_value = arr[0];\n    let mut min_idx\
    \ = 0;\n    let mut min_idx2 = 0;\n    for i in arr.iter().rev() {\n        if\
    \ i % 2 == 0 {\n            if min_value >= i {\n                min_value = i;\n\
    \                min_idx = i;\n            }\n        } else {\n            if\
    \ min_value >= i {\n                min_value = i;\n                min_idx2 =\
    \ i;\n            }\n        }\n    }\n    if min_idx2 == min_idx {\n        min_idx2\n\
    \    } else {\n        min_idx\n    }", "    let mut even_values = vec![];\n \
    \   let mut smallest_value = vec![];\n    let mut smallest_index = vec![];\n \
    \   for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value.len() {\n                smallest_value[i]\
    \ = i;\n                smallest_index[i] = i;\n            }\n        }\n   \
    \ }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n    let mut\
    \ smallest_value_len = even_values.len();\n    for i in even_values.iter() {\n\
    \        if smallest_value[smallest_value_len - 1] == i {\n            smallest_value_len--;\n\
    \        }\n    }\n    for i in 0..smallest_value_len {\n        if even_values[i]\
    \ == smallest_value[i] {\n            smallest_index[i] = even_values[i];\n  \
    \      }\n    }\n    smallest_value", "    let mut smallest_value = arr[0];\n\
    \    let mut smallest_index = 0;\n    for i in arr.iter().rev() {\n        if\
    \ i % 2 == 0 {\n            if smallest_value < i {\n                smallest_value\
    \ = i;\n                smallest_index = i;\n            }\n        }\n    }\n\
    \    vec![smallest_value, smallest_index]", "    let mut smallest_value: isize\
    \ = 0;\n    let mut smallest_index: usize = 0;\n    let mut smallest_even_value:\
    \ isize = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            smallest_even_value\
    \ = i;\n        }\n        if i == smallest_value {\n            smallest_index\
    \ = i;\n        }\n        if i == smallest_even_value {\n            smallest_value\
    \ = i;\n        }\n    }\n    smallest_value\n        .clone()\n        .to_vec()\n\
    \        .iter()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n  \
    \      .cloned()\n        .cloned()\n        .cloned()\n        .", "    let mut\
    \ smallest_value = arr[0];\n    let mut smallest_index = 0;\n    let mut even_value\
    \ = false;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_value\
    \ = true;\n        }\n        if i == smallest_value {\n            smallest_index\
    \ = i;\n        }\n        if even_value\n            && smallest_value == i\n\
    \            && smallest_index == i\n        {\n            smallest_value = i;\n\
    \            smallest_index = i;\n            even_value = false;\n        }\n\
    \    }\n    if even_value\n        && smallest_value == smallest_index\n     \
    \   && smallest_index == arr.len() - 1\n    {\n        smallest_value = smallest_index;\n\
    \        smallest_index = arr.len() - 1;\n    }\n    vec![smallest_value, smallest_index]",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for idx in 0..arr.len()\
    \ {\n        if arr[idx] % 2 == 0 {\n            if min_value < arr[idx] {\n \
    \               min_value = arr[idx];\n                min_idx = idx;\n      \
    \      }\n        }\n    }\n    vec![min_value, min_idx]", "    let mut smalest_value\
    \ = arr[0];\n    let mut smalest_index = 0;\n    let mut even_values = Vec::new();\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \        }\n        if i == smalest_value {\n            smalest_index = even_values.len();\n\
    \        }\n        if i == smalest_value {\n            smalest_value = i;\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    even_values.sort_unstable_by_key(|x| x);\n    even_values.reverse();\n\
    \    even_values.first().unwrap()", "    let mut min_value = i32::MAX;\n    let\
    \ mut min_idx = -1;\n    for i in arr.iter() {\n        if min_value < i {\n \
    \           min_value = i;\n            min_idx = i;\n        }\n    }\n    if\
    \ min_value == i32::MAX {\n        return vec![];\n    }\n    let mut mut_arr\
    \ = arr.to_vec();\n    mut_arr[min_idx] = i32::MAX;\n    return mut_arr;", " \
    \   let mut smallest_value: isize = 0;\n    let mut smallest_index: usize = 0;\n\
    \    let mut even_value: isize = 0;\n    let mut even_index: usize = 0;\n    let\
    \ mut index: usize = 0;\n    let mut value: isize = 0;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            even_value = i;\n            even_index\
    \ = index;\n        }\n        if i < smallest_value {\n            smallest_value\
    \ = i;\n            smallest_index = index;\n        }\n        if i == smallest_value\
    \ {\n            index = smallest_index;\n        }\n        index += 1;\n   \
    \ }\n    if even_index == 0 {\n        return vec![];\n    }\n    return vec![even_index,\
    \ even_value];", "    let mut smallest_value: isize = 0;\n    let mut smallest_index:\
    \ usize = 0;\n    let mut even_values = false;\n    for &i in arr {\n        if\
    \ i % 2 == 0 {\n            even_values = true;\n        }\n        if even_values\
    \ {\n            if smallest_value < i {\n                smallest_value = i;\n\
    \                smallest_index = i;\n            }\n        } else {\n      \
    \      if smallest_value < i {\n                smallest_value = i;\n        \
    \        smallest_index = i;\n            }\n        }\n    }\n    if even_values\
    \ {\n        vec![smallest_value, smallest_index]\n    } else {\n        vec![]\n\
    \    }", "    let mut min_value = arr[0];\n    let mut min_idx = -1;\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value ==\
    \ i {\n                min_idx = i;\n            } else {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    if\
    \ min_idx == -1 || min_value == arr[0] {\n        return vec![];\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut smallest_value: isize = 0;\n    let mut smallest_index:\
    \ isize = 0;\n    let mut even_values = Vec::new();\n    for &i in arr {\n   \
    \     if i % 2 == 0 {\n            even_values.push(i);\n        }\n        if\
    \ i == smallest_value {\n            smallest_index = i;\n        }\n        if\
    \ i == smallest_value {\n            smallest_value = i;\n        }\n    }\n \
    \   if even_values.len() == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value\
    \ = even_values[0];\n    let mut smallest_even_index = even_values[0];\n    for\
    \ &i in even_values {\n        if i < smallest_even_value {\n            smallest_even_value\
    \ = i;\n            smallest_even_index = i;\n        }\n    }\n    vec![smallest_even_index,\
    \ smallest_even_value]", "    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = -1;\n    let mut min_even_index_in_vec = 0;\n    let mut min_even_index_in_vec_prev\
    \ = 0;\n    let mut min_even_index_in_vec_next = 0;\n    let mut min_even_index_in_vec_next2\
    \ = 0;\n    let mut min_even_index_in_vec_next3 = 0;\n    let mut min_even_index_in_vec_next4\
    \ = 0;\n    let mut min_even_index_in_vec_next5 = 0;\n    let mut min_even_index_in_vec_next6\
    \ = 0;\n    let mut min_even_index_in_vec_next7 = 0;\n    let mut min_even_index_in_vec_next8\
    \ = 0;\n    let mut min_even_index_in_vec_next9 = 0;\n    let mut min_even_index_in_vec_next10\
    \ = 0;\n    let mut min_even_index_in_vec_next11 = 0;\n    let mut min_even_index_in_vec_next12\
    \ = 0;\n    let mut min_even_index_in_vec_next13 = 0;\n    let mut min_even_index_in_vec_next14\
    \ = 0;\n    let mut min_even_index_in_vec_next15 = 0;\n    let mut min_even_index_in_vec_next16\
    \ = 0;\n    let mut min_even_index_in_vec_next17 = 0;\n    let mut min_even_index_in_vec_next18\
    \ = 0;\n    let mut min_even_index_in_vec_next19 = 0;\n    let mut min_even_index_in_vec_next20\
    \ = 0;\n    let mut min_even_index_in_vec_next21 = 0;\n    let mut min_even_index_in_vec_next22\
    \ = 0;\n    let mut min_even_index_in_vec_next23 = 0;\n    let mut min_even_index_in_vec_next24\
    \ = 0;\n    let mut min_even_index_in_vec_next25 = 0;\n    let mut min_even_index_in_vec_next26\
    \ = 0;\n    let mut min_even_index_in_vec_next27 = 0;\n    let mut min_even_index_in_vec_next28\
    \ = 0;\n    let mut min_even_index_in_vec_next29 = 0;\n    let mut min_even_index_in_vec_next30\
    \ = 0;\n    let mut min_even_index_in_vec_next31 = 0;\n    let mut min_even_index_in_vec_next32\
    \ = 0;\n    let mut min_even_index_in_vec_next33 = 0;\n    let mut min_even_index_in_vec_next34\
    \ = 0;\n    let mut min_even_index_in_vec_next35 = 0;\n    let mut min_even_index_in_vec_next36\
    \ = 0;\n    let mut min_even_index_in_vec_next37 = 0;\n    let mut min_even_index_in_vec_next38\
    \ = 0;\n    let mut min_even_index_in_vec_next39 = 0;\n    let mut min_even_index_in_vec_next40\
    \ = 0;", "    let mut min_val = arr[0];\n    let mut min_idx = 1;\n    let mut\
    \ min_idx2 = 0;\n    let mut min_idx3 = 0;\n    let mut min_idx4 = 0;\n    let\
    \ mut min_idx5 = 0;\n    let mut min_idx6 = 0;\n    let mut min_idx7 = 0;\n  \
    \  let mut min_idx8 = 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10 = 0;\n\
    \    let mut min_idx11 = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13\
    \ = 0;\n    let mut min_idx14 = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16\
    \ = 0;\n    let mut min_idx17 = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19\
    \ = 0;\n    let mut min_idx20 = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22\
    \ = 0;\n    let mut min_idx23 = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25\
    \ = 0;\n    let mut min_idx26 = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28\
    \ = 0;\n    let mut min_idx29 = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31\
    \ = 0;\n    let mut min_idx32 = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34\
    \ = 0;\n    let mut min_idx35 = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37\
    \ = 0;\n    let mut min_idx38 = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40\
    \ = 0;\n    let mut min_idx41 = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43\
    \ = 0;\n    let mut min_idx44 = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46\
    \ = 0;\n    let mut min_idx47 = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49\
    \ = 0;\n    let mut min_idx50 = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52\
    \ = 0;\n    let mut min_idx53 = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55\
    \ = 0;\n    let mut min_idx56 = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58\
    \ = 0;\n    let mut min_idx59 = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61\
    \ = 0;\n    let mut min_idx62 = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx2\
    \ = 0;\n    let mut min_idx3 = 0;\n    let mut min_idx4 = 0;\n    let mut min_idx5\
    \ = 0;\n    let mut min_idx6 = 0;\n    let mut min_idx7 = 0;\n    let mut min_idx8\
    \ = 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10 = 0;\n    let mut min_idx11\
    \ = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13 = 0;\n    let mut min_idx14\
    \ = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16 = 0;\n    let mut min_idx17\
    \ = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19 = 0;\n    let mut min_idx20\
    \ = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22 = 0;\n    let mut min_idx23\
    \ = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25 = 0;\n    let mut min_idx26\
    \ = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28 = 0;\n    let mut min_idx29\
    \ = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31 = 0;\n    let mut min_idx32\
    \ = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34 = 0;\n    let mut min_idx35\
    \ = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37 = 0;\n    let mut min_idx38\
    \ = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40 = 0;\n    let mut min_idx41\
    \ = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43 = 0;\n    let mut min_idx44\
    \ = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46 = 0;\n    let mut min_idx47\
    \ = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49 = 0;\n    let mut min_idx50\
    \ = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52 = 0;\n    let mut min_idx53\
    \ = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55 = 0;\n    let mut min_idx56\
    \ = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58 = 0;\n    let mut min_idx59\
    \ = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61 = 0;\n    let mut min_idx62\
    \ = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx", "    let mut smallest_value:\
    \ isize = 0;\n    let mut smallest_index: usize = 0;\n    let mut even_values\
    \ = Vec::new();\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \        }\n        if i == smallest_value {\n            smallest_index = arr.iter().position(|&i|\
    \ i == smallest_value).unwrap();\n        }\n        if i == smallest_value {\n\
    \            smallest_value = i;\n        }\n    }\n    if even_values.len() ==\
    \ 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = smallest_index;\n    for &i in even_values\
    \ {\n        if i < smallest_even_value {\n            smallest_even_value = i;\n\
    \            smallest_even_index = arr.iter().position(|&i| i == smallest_even_value).unwrap();\n\
    \        }\n    }\n    vec![smallest_even_value,smallest_even_index]", "    let\
    \ mut min_value = arr[0];\n    let mut min_idx = 1;\n    let mut min_even_val\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            min_even_val\
    \ = i;\n        }\n        if min_even_val < i {\n            min_value = i;\n\
    \            min_idx = i;\n            min_even_val = i;\n        }\n    }\n \
    \   if min_even_val == 0 {\n        return vec![];\n    }\n    let mut min_even_val_idx\
    \ = 1;\n    let mut min_even_val_idx = 1;\n    for &i in arr {\n        if i %\
    \ 2 == 0 {\n            if min_even_val_idx == min_even_val {\n              \
    \  min_even_val_idx = i;\n            }\n        } else {\n            if min_even_val_idx\
    \ == min_even_val {\n                min_even_val_idx = i;\n            }\n  \
    \      }\n    }\n    let mut min_even_val_idx = 1;\n    let mut min_even_val_idx\
    \ = 1;\n    for &i in arr {\n        if i % 2 == 0 {\n            if min_even_val_idx\
    \ == min_even_val {\n                min_even_val_idx = i;\n            }\n  \
    \      } else {\n            if min_even_val_idx == min_even_val {\n         \
    \       min_even_val_idx = i;\n            }\n        }\n    }\n    if min_even_val_idx\
    \ == min_even_val {\n        return vec![min_even_val, min_even_val_idx];\n  \
    \  }\n    return vec![];", "    let mut min_value = arr[0];\n    let mut min_idx\
    \ = 0;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n           \
    \ if min_value > i {\n                min_value = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    vec![min_value, min_idx]", "    let\
    \ mut even_values = vec![];\n    let mut smallest_value = vec![];\n    let mut\
    \ smallest_index = vec![];\n    for i in arr {\n        if i % 2 == 0 {\n    \
    \        even_values.push(i);\n            if i < smallest_value.len() {\n   \
    \             smallest_value[i] = i;\n                smallest_index[i] = i;\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    for i in even_values {\n        if smallest_value[i] ==\
    \ i {\n            smallest_index[i] = i;\n        }\n    }\n    for i in even_values\
    \ {\n        if smallest_value[i] == i {\n            smallest_index[i] = i;\n\
    \        }\n    }\n    for i in even_values {\n        if smallest_value[i] ==\
    \ i {\n            smallest_index[i] = i;\n        }\n    }\n    for i in even_values\
    \ {\n        if smallest_value[i] == i {\n            smallest_index[i] = i;\n\
    \        }\n    }\n    for i in even_values {\n        if smallest_value[i] ==\
    \ i {\n            smallest_index[i] = i;\n        }\n    }\n    for i in even_values\
    \ {\n        if smallest_value[i] == i {\n            smallest_index[i] = i;\n\
    \        }\n    }\n    for i in even_values {\n        if smallest_value[i] ==\
    \ i {\n            smallest_index[i] = i;\n        }\n    }\n    for i in even_values\
    \ {\n        if smallest_value[i] == i {\n            smallest_index[i] = i;\n\
    \        }\n    }\n    for i in even_values {\n        if smallest_value[i] ==\
    \ i {\n            smallest_index[i] = i;\n        }\n    }\n    for i in even_values\
    \ {\n        if smallest_value[i] == i {\n            smallest_index[i] = i;\n\
    \        }\n    }\n    for i in even_values {\n        if smallest_value[i] ==\
    \ i {\n            smallest_index[i] = i;\n        }\n    }\n    for i in even_values\
    \ {\n        if smallest_value[i] == i {\n            smallest_index[i] = i;\n\
    \        }\n    }\n    for i in even_values {\n        if smallest_value[i] ==\
    \ i {\n            smallest_index[i] = i;\n        }\n    }\n    for i in even_values\
    \ {\n        if smallest_value[i] == i {\n            smallest_index[i] = i;\n\
    \        }\n    }\n    for i in even_values {\n        if smallest_value[i] ==\
    \ i {\n            smallest_index[i] = i;\n        }\n    }\n    for i in even_values\
    \ {\n        if smallest_value[i] == i {\n            smallest_index[i] = i;\n\
    \        }\n    }\n    for i in even_values {\n        if smallest_value[i] ==\
    \ i {\n            smallest_index[i] = i;\n        }\n    }\n    for i in even_values\
    \ {\n        if smallest_value[i] == i {\n            smallest_", "    let mut\
    \ min_val = std::i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            if min_val < i {\n                min_val\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    if\
    \ min_val == std::i32::MAX {\n        return vec![];\n    }\n    let mut result\
    \ = vec![];\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            result.push(min_val);\n\
    \            break;\n        }\n    }\n    if result.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut min_val = std::i32::MAX;\n    let mut min_idx =\
    \ -1;\n    for i in result.iter() {\n        if i < min_val {\n            min_val\
    \ = i;\n            min_idx = i;\n        }\n    }\n    vec![min_val, min_idx]",
  "    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    let\
    \ mut smallest_even_value = false;\n    for &i in arr {\n        if i % 2 == 0\
    \ {\n            if smallest_even_value\n                || (smallest_value >=\
    \ i && smallest_index == 0)\n            {\n                smallest_even_value\
    \ = true;\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        } else {\n            smallest_even_value = false;\n\
    \        }\n    }\n    smallest_index\n        .iter()\n        .map(|i| arr[i])\n\
    \        .collect()", "    let mut smallest_value: isize = 0;\n    let mut smallest_index:\
    \ usize = 0;\n    let mut even_values: Vec<isize> = Vec::new();\n    for i in\
    \ arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n        }\n\
    \        if i == smallest_value {\n            smallest_index = i;\n        }\n\
    \        if i == smallest_value {\n            smallest_value = i;\n        }\n\
    \    }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n    if\
    \ even_values.len() == 1 {\n        return vec![even_values[0]];\n    }\n    if\
    \ even_values.len() == 2 {\n        return vec![even_values[0], even_values[1]];\n\
    \    }\n    if even_values.len() == 3 {\n        return vec![even_values[0], even_values[1],\
    \ even_values[2]];\n    }\n    if even_values.len() == 4 {\n        return vec![even_values[0],\
    \ even_values[1], even_values[2], even_values[3]];\n    }\n    if even_values.len()\
    \ == 5 {\n        return vec![even_values[0], even_values[1], even_values[2],\
    \ even_values[3], even_values[4]];\n    }\n    if even_values.len() == 6 {\n \
    \       return vec![even_values[0], even_values[1], even_values[2], even_values[3],\
    \ even_values[4], even_values[5]];\n    }\n    if even_values.len() == 7 {\n \
    \       return vec![even_values[0], even_values[1], even_values[2], even_values[3],\
    \ even_values[4], even_values[5], even_values[6]];\n    }\n    if even_values.len()\
    \ == 8 {\n        return vec![even_values[0], even_values[1], even_values[2],\
    \ even_values[3], even_values[4], even_values[5], even_values[6], even_values[7]];\n\
    \    }\n    if even_values.len() == 9 {\n        return vec![even_values[0], even_values[1],\
    \ even_values[2], even_values[3], even_values[4], even_values[5], even_values[6],\
    \ even_values[7], even_values[8]];\n    }\n    if even_values.len() == 10 {\n\
    \        return vec![even_values[0], even_values[1], even_values[2], even_values[3],\
    \ even_values[4], even_values[5], even_values[6], even_values[7], even_values[8],\
    \ even_values[9]];\n    }\n    if even_values.len() == 11 {\n        return vec![even_values[0],\
    \ even_values[1], even_values[2], even_values[3], even_values[4], even_values[5],\
    \ even_values[6], even_values[7], even_values[8], even_values[9], even_values[10]",
  "    let mut min_value = arr[0];\n    let mut min_idx = 1;\n    for i in 1..arr.len()\
    \ {\n        if arr[i] < min_value {\n            min_value = arr[i];\n      \
    \      min_idx = i;\n        }\n    }\n    vec![min_value, min_idx]", "    let\
    \ mut smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n \
    \   let mut smallest_even_index_in_vec = -1;\n    for i in arr.iter().cloned()\
    \ {\n        if i % 2 == 0 {\n            if smallest_even_index == -1 || smallest_even_value\
    \ < i {\n                smallest_even_value = i;\n                smallest_even_index\
    \ = i;\n                smallest_even_index_in_vec = i;\n            } else {\n\
    \                if smallest_even_index_in_vec < i {\n                    smallest_even_index_in_vec\
    \ = i;\n                }\n            }\n        }\n    }\n    if smallest_even_index\
    \ == -1 {\n        return vec![];\n    }\n    let mut result = vec![smallest_even_value];\n\
    \    for i in 0..smallest_even_index_in_vec {\n        result.push(i);\n    }\n\
    \    result", "    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            if smallest_value\
    \ < i {\n                smallest_value = i;\n                smallest_index =\
    \ i;\n            }\n        }\n    }\n    vec![smallest_value, smallest_index]",
  "    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n\
    \    let mut smallest_index = -1;\n    let mut even_value_count = 0;\n    for\
    \ &i in arr {\n        if i % 2 == 0 {\n            even_value_count += 1;\n \
    \           if even_value_count == 1 {\n                smallest_even_value =\
    \ i;\n                smallest_even_index = i;\n                smallest_index\
    \ = i;\n            }\n        } else {\n            even_value_count -= 1;\n\
    \        }\n    }\n    if even_value_count == 0 {\n        return vec![];\n  \
    \  }\n    let mut even_values = vec![];\n    for i in 0..even_value_count {\n\
    \        even_values.push(smallest_even_index);\n    }\n    even_values.push(smallest_index);\n\
    \    return even_values;", "    let mut min_val = arr[0];\n    let mut min_idx\
    \ = 0;\n    let mut min_idx = arr.iter().enumerate().min_by_key(|(_, v)| {\n \
    \       if v < min_val {\n            min_val = v;\n            min_idx = *;\n\
    \        }\n    });\n    min_idx", "    let mut min_value = arr[0];\n    let mut\
    \ min_index = 0;\n    for i in arr.iter().cloned() {\n        if i % 2 == 0 {\n\
    \            if min_value < i {\n                min_value = i;\n            \
    \    min_index = i;\n            }\n        }\n    }\n    vec![min_value, min_index]",
  "    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n\
    \    let mut smallest_index = -1;\n    for &i in arr {\n        if i % 2 == 0\
    \ {\n            if smallest_even_value < i {\n                smallest_even_value\
    \ = i;\n                smallest_even_index = i;\n            }\n        }\n \
    \       if smallest_even_value == i {\n            if smallest_index < i {\n \
    \               smallest_index = i;\n            }\n        }\n    }\n    if smallest_even_value\
    \ == 0 {\n        vec![]\n    } else {\n        vec![smallest_even_index, smallest_index]\n\
    \    }", "    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index\
    \ = -1;\n    let mut smallest_even_value_found = false;\n    for &mut value in\
    \ arr.iter_mut() {\n        if value % 2 == 0 {\n            if smallest_even_value_found\
    \ {\n                smallest_even_index = arr.iter().position(|&x| x == smallest_even_value).unwrap();\n\
    \                break;\n            }\n            smallest_even_value = value;\n\
    \            smallest_even_value_found = true;\n        }\n    }\n    if smallest_even_value_found\
    \ {\n        arr.iter_mut().enumerate().filter(|&(i, &v)| v == smallest_even_value).map(|&(i,\
    \ &v)| i).collect()\n    } else {\n        vec![]\n    }", "    let mut min_value\
    \ = arr[0];\n    let mut min_idx = 1;\n    for i in 1..arr.len() {\n        if\
    \ arr[i] < min_value {\n            min_value = arr[i];\n            min_idx =\
    \ i;\n        }\n    }\n    vec![min_value, min_idx]", "    let mut min_even_value\
    \ = arr[0];\n    let mut min_even_index = -1;\n    let mut min_even_index_in_arr\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value = -1;\n    let\
    \ mut min_even_index_in_arr_with_min_even_value_in_arr = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value\
    \ = -1;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value\
    \ = -1;\n    let mut ", "    let mut even_values = vec![];\n    let mut smallest_value\
    \ = vec![];\n    let mut smallest_index = vec![];\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value.len() {\n                smallest_value[i] = i;\n           \
    \     smallest_index[i] = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values.len() == 1 {\n   \
    \     return vec![even_values[0]];\n    }\n    if even_values.len() > 1 {\n  \
    \      let mut smallest_value = vec![];\n        let mut smallest_index = vec![];\n\
    \        for i in even_values.iter() {\n            if i < smallest_value.len()\
    \ {\n                smallest_value[i] = i;\n                smallest_index[i]\
    \ = i;\n            }\n        }\n        let mut smallest_value_iter = smallest_value.iter();\n\
    \        let mut smallest_index_iter = smallest_index.iter();\n        let mut\
    \ smallest_value = vec![];\n        let mut smallest_index = vec![];\n       \
    \ for i in even_values.iter() {\n            if i < smallest_value.len() {\n \
    \               smallest_value.push(smallest_value_iter.next().unwrap());\n  \
    \              smallest_index.push(smallest_index_iter.next().unwrap());\n   \
    \         }\n        }\n        return vec![smallest_value[smallest_value.len()\
    \ - 1], smallest_index[smallest_index.len() - 1]];\n    }\n    return vec![];",
  "    let mut min_value = arr[0];\n    let mut min_idx = -1;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value < i {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    if min_idx == -1 {\n        return vec![];\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    let mut mut_smallest_value = smallest_value;\n    let mut mut_smallest_index\
    \ = smallest_index;\n    let mut mut_mut_smallest_value = mut_smallest_value;\n\
    \    let mut mut_mut_smallest_index = mut_smallest_index;\n    let mut mut_mut_mut_smallest_value\
    \ = mut_mut_smallest_value;\n    let mut mut_mut_mut_smallest_index = mut_mut_smallest_index;\n\
    \    let mut mut_mut_mut_mut_smallest_value = mut_mut_mut_smallest_value;\n  \
    \  let mut mut_mut_mut_mut_smallest_index = mut_mut_mut_smallest_index;\n    let\
    \ mut mut_mut_mut_mut_mut_smallest_value = mut_mut_mut_mut_smallest_value;\n \
    \   let mut mut_mut_mut_mut_mut_smallest_index = mut_mut_mut_mut_smallest_index;\n\
    \    let mut mut_mut_mut_mut_mut_mut_smallest_value = mut_mut_mut_mut_smallest_value;\n\
    \    let mut mut_mut_mut_mut_mut_mut_smallest_index = mut_mut_mut_mut_mut_smallest_index;\n\
    \    let mut mut_mut_mut_mut_mut_mut_mut_smallest_value = mut_mut_mut_mut_mut_smallest_value;\n\
    \    let mut mut_mut_mut_mut_mut_mut_mut_smallest_index = mut_mut_mut_mut_mut_mut_smallest_index;\n\
    \    let mut mut_mut_mut_mut_mut_mut_mut_mut_smallest_value = mut_mut_mut_mut_mut_mut_smallest_value;\n\
    \    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index = mut_mut_mut_mut_mut_mut_mut_smallest_index;\n\
    \    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value = mut_mut_mut_mut_mut_mut_mut_mut_smallest_value;\n\
    \    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index = mut_mut_mut_mut_mu",
  "    let mut even_values = vec![];\n    let mut smallest_value = vec![];\n    let\
    \ mut smallest_index = vec![];\n    for i in arr.iter() {\n        if i % 2 ==\
    \ 0 {\n            even_values.push(i);\n            if smallest_value.len() ==\
    \ 0 || i < smallest_value[0] {\n                smallest_value.push(i);\n    \
    \            smallest_index.push(i);\n            }\n        }\n    }\n    if\
    \ even_values.len() == 0 {\n        return vec![];\n    }\n    if smallest_value.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values.len() == 1 {\n   \
    \     return vec![smallest_value[0], smallest_index[0]];\n    }\n    if even_values.len()\
    \ == smallest_value.len() {\n        return vec![smallest_value[0], smallest_index[0]];\n\
    \    }\n    if even_values.len() == smallest_value.len() + 1 {\n        return\
    \ vec![smallest_value[even_values.len() - 1], smallest_index[even_values.len()\
    \ - 1]];\n    }\n    if even_values.len() == smallest_value.len() + 2 {\n    \
    \    return vec![smallest_value[even_values.len() - 2], smallest_index[even_values.len()\
    \ - 2]];\n    }\n    if even_values.len() == smallest_value.len() + 3 {\n    \
    \    return vec![smallest_value[even_values.len() - 3], smallest_index[even_values.len()\
    \ - 3]];\n    }\n    if even_values.len() == smallest_value.len() + 4 {\n    \
    \    return vec![smallest_value[even_values.len() - 4], smallest_index[even_values.len()\
    \ - 4]];\n    }\n    if even_values.len() == smallest_value.len() + 5 {\n    \
    \    return vec![smallest_value[even_values.len() - 5], smallest_index[even_values.len()\
    \ - 5]];\n    }\n    if even_values.len() == smallest_value.len() + 6 {\n    \
    \    return vec![smallest_value[even_values.len() - 6], smallest_index[even_values.len()\
    \ - 6]];\n    }\n    if even_values.len() == smallest_value.len() + 7 {\n    \
    \    return vec![smallest_value[even_values.len() - 7], smallest_index[even_values.len()\
    \ - 7]];\n    }\n    if even_values.len() == smallest_value.len() + 8 {\n    \
    \    return vec![smallest_value[even_values.len() - 8], smallest_index[even_values.len()\
    \ - 8]];\n    }\n    if even_values.len() == smallest_value.len() + 9 {\n    \
    \    return vec![smallest_value[even_values.len(", "    let mut min_value = arr[0];\n\
    \    let mut min_idx = 0;\n    for i in arr.iter().rev() {\n        if i % 2 ==\
    \ 0 {\n            min_value = i;\n            min_idx = i;\n        }\n    }\n\
    \    vec![min_value, min_idx]", "    let mut even_values = vec![];\n    let mut\
    \ smallest_value = vec![];\n    let mut smallest_index = vec![];\n    for i in\
    \ arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n  \
    \          if i < smallest_value.len() {\n                smallest_value[i] =\
    \ i;\n                smallest_index[i] = i;\n            } else {\n         \
    \       smallest_value[i] = i;\n                smallest_index[i] = i;\n     \
    \       }\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    let mut smallest_value_pos = 0;\n    for i in even_values.iter() {\n\
    \        if smallest_value[smallest_value_pos] < i {\n            smallest_value_pos\
    \ = i;\n        }\n    }\n    for i in even_values.iter() {\n        if i == smallest_value_pos\
    \ {\n            smallest_value.push(smallest_value_pos);\n            smallest_index.push(smallest_value_pos);\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if i == smallest_value_pos\
    \ {\n            smallest_value.push(smallest_value_pos);\n            smallest_index.push(smallest_value_pos);\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if i == smallest_value_pos\
    \ {\n            smallest_value.push(smallest_value_pos);\n            smallest_index.push(smallest_value_pos);\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if i == smallest_value_pos\
    \ {\n            smallest_value.push(smallest_value_pos);\n            smallest_index.push(smallest_value_pos);\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if i == smallest_value_pos\
    \ {\n            smallest_value.push(smallest_value_pos);\n            smallest_index.push(smallest_value_pos);\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if i == smallest_value_pos\
    \ {\n            smallest_value.push(smallest_value_pos);\n            smallest_index.push(smallest_value_pos);\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if i == smallest_value_pos\
    \ {\n            smallest_value.push(smallest_value_pos);\n            smallest_index.push(smallest_value_pos);\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if i == smallest_value_pos\
    \ {\n            smallest_value.push(smallest_value_pos);\n            smallest_index.push(smallest_value_pos);\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if i == smallest_value_pos\
    \ {\n            smallest_value.push(smalle", "    let mut min_value = arr[0];\n\
    \    let mut min_index = 0;\n    let mut min_even_value = false;\n    for &i in\
    \ arr {\n        if i % 2 == 0 {\n            min_even_value = true;\n       \
    \     min_value = i;\n            min_index = i;\n        }\n    }\n    if min_even_value\n\
    \        && min_value > 0\n        && min_index > 0\n        && min_value < arr.len()\
    \ {\n        vec![min_value, min_index]\n    } else {\n        vec![]\n    }",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            if min_value > i {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = 0;\n    let mut min_even_index_in_arr = 0;\n    let mut min_even_index_in_arr2\
    \ = 0;\n    let mut min_even_index_in_arr3 = 0;\n    let mut min_even_index_in_arr4\
    \ = 0;\n    let mut min_even_index_in_arr5 = 0;\n    let mut min_even_index_in_arr6\
    \ = 0;\n    let mut min_even_index_in_arr7 = 0;\n    let mut min_even_index_in_arr8\
    \ = 0;\n    let mut min_even_index_in_arr9 = 0;\n    let mut min_even_index_in_arr10\
    \ = 0;\n    let mut min_even_index_in_arr11 = 0;\n    let mut min_even_index_in_arr12\
    \ = 0;\n    let mut min_even_index_in_arr13 = 0;\n    let mut min_even_index_in_arr14\
    \ = 0;\n    let mut min_even_index_in_arr15 = 0;\n    let mut min_even_index_in_arr16\
    \ = 0;\n    let mut min_even_index_in_arr17 = 0;\n    let mut min_even_index_in_arr18\
    \ = 0;\n    let mut min_even_index_in_arr19 = 0;\n    let mut min_even_index_in_arr20\
    \ = 0;\n    let mut min_even_index_in_arr21 = 0;\n    let mut min_even_index_in_arr22\
    \ = 0;\n    let mut min_even_index_in_arr23 = 0;\n    let mut min_even_index_in_arr24\
    \ = 0;\n    let mut min_even_index_in_arr25 = 0;\n    let mut min_even_index_in_arr26\
    \ = 0;\n    let mut min_even_index_in_arr27 = 0;\n    let mut min_even_index_in_arr28\
    \ = 0;\n    let mut min_even_index_in_arr29 = 0;\n    let mut min_even_index_in_arr30\
    \ = 0;\n    let mut min_even_index_in_arr31 = 0;\n    let mut min_even_index_in_arr32\
    \ = 0;\n    let mut min_even_index_in_arr33 = 0;\n    let mut min_even_index_in_arr34\
    \ = 0;\n    let mut min_even_index_in_arr35 = 0;\n    let mut min_even_index_in_arr36\
    \ = 0;\n    let mut min_even_index_in_arr37 = 0;\n    let mut min_even_index_in_arr38\
    \ = 0;\n    let mut min_even_index_in_arr39 = 0;\n    let mut min_even_index_in_arr40\
    \ = 0;\n    let mut min_even_index_in_arr41 = 0;\n    let mut min_even_index_in_arr42\
    \ = 0;\n    let mut min_even_index_in_arr43 = 0;\n    let mut min_even_index_in_arr44\
    \ = 0;\n    let mut min_even_index_in_arr45 = 0;\n    let mut min_even", "   \
    \ let mut min_value = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx2\
    \ = 0;\n    let mut min_idx3 = 0;\n    let mut min_idx4 = 0;\n    let mut min_idx5\
    \ = 0;\n    let mut min_idx6 = 0;\n    let mut min_idx7 = 0;\n    let mut min_idx8\
    \ = 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10 = 0;\n    let mut min_idx11\
    \ = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13 = 0;\n    let mut min_idx14\
    \ = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16 = 0;\n    let mut min_idx17\
    \ = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19 = 0;\n    let mut min_idx20\
    \ = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22 = 0;\n    let mut min_idx23\
    \ = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25 = 0;\n    let mut min_idx26\
    \ = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28 = 0;\n    let mut min_idx29\
    \ = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31 = 0;\n    let mut min_idx32\
    \ = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34 = 0;\n    let mut min_idx35\
    \ = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37 = 0;\n    let mut min_idx38\
    \ = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40 = 0;\n    let mut min_idx41\
    \ = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43 = 0;\n    let mut min_idx44\
    \ = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46 = 0;\n    let mut min_idx47\
    \ = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49 = 0;\n    let mut min_idx50\
    \ = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52 = 0;\n    let mut min_idx53\
    \ = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55 = 0;\n    let mut min_idx56\
    \ = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58 = 0;\n    let mut min_idx59\
    \ = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61 = 0;\n    let mut min_idx62\
    \ = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx", "    let mut min_even_value\
    \ = arr[0];\n    let mut min_even_index = -1;\n    let mut min_even_index_count\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            if min_even_index\
    \ == -1 || min_even_index > i {\n                min_even_index = i;\n       \
    \         min_even_index_count = 1;\n            } else {\n                min_even_index_count\
    \ += 1;\n            }\n        }\n    }\n    if min_even_index_count == 0 {\n\
    \        return vec![];\n    }\n    if min_even_index == min_even_value {\n  \
    \      return vec![];\n    }\n    let mut min_even_index_value = min_even_index;\n\
    \    let mut min_even_index_value_count = 0;\n    for &i in arr {\n        if\
    \ i == min_even_index_value {\n            if min_even_index_value_count == 0\
    \ {\n                return vec![];\n            }\n            min_even_index_value_count\
    \ += 1;\n        } else {\n            min_even_index_value = i;\n           \
    \ min_even_index_value_count = 1;\n        }\n    }\n    if min_even_index_value_count\
    \ == 0 {\n        return vec![];\n    }\n    let mut min_even_index_value = min_even_index;\n\
    \    let mut min_even_index_value_count = 0;\n    for &i in arr {\n        if\
    \ i == min_even_index_value {\n            if min_even_index_value_count == 0\
    \ {\n                return vec![];\n            }\n            min_even_index_value_count\
    \ += 1;\n        } else {\n            min_even_index_value = i;\n           \
    \ min_even_index_value_count = 1;\n        }\n    }\n    if min_even_index_value_count\
    \ == 0 {\n        return vec![];\n    }\n    let mut min_even_index_value = min_even_index;\n\
    \    let mut min_even_index_value_count = 0;\n    for &i in arr {\n        if\
    \ i == min_even_index_value {\n            if min_even_index_value_count == 0\
    \ {\n                return vec![];\n            }\n            min_even_index_value_count\
    \ += 1;\n        } else {\n            min_even_index_value = i;\n           \
    \ min_even_index_value_count = 1;\n        }\n    }\n    if min_even_index_value_count\
    \ == 0 {\n        return vec![];\n    }\n    let mut min_even_index_value = min_even_index;\n\
    \    let mut min_even_index_value_count = 0;\n    for &i in arr {\n        if\
    \ i == min_even_index_value {\n            if min_even_index_value_count == 0\
    \ {\n                return vec![];\n            }\n            min_even_index_value_count\
    \ += 1;\n        } else {\n            min_even_index_value = i;\n           \
    \ min_even_index_value_count = 1;\n        }\n    }\n    if min_even_index_value_count\
    \ == 0 {\n        return vec![];\n    }\n    let mut min_even_index_value = min_even_index;\n\
    \    let mut min_even_index_value_count = 0;\n    for &i in arr {\n        if\
    \ i == min_even_index_value ", "    let mut min_even_value = arr[0];\n    let\
    \ mut min_even_index = -1;\n    let mut min_even_index_in_arr = 0;\n    let mut\
    \ min_even_index_in_arr2 = 0;\n    let mut min_even_index_in_arr3 = 0;\n    let\
    \ mut min_even_index_in_arr4 = 0;\n    let mut min_even_index_in_arr5 = 0;\n \
    \   let mut min_even_index_in_arr6 = 0;\n    let mut min_even_index_in_arr7 =\
    \ 0;\n    let mut min_even_index_in_arr8 = 0;\n    let mut min_even_index_in_arr9\
    \ = 0;\n    let mut min_even_index_in_arr10 = 0;\n    let mut min_even_index_in_arr11\
    \ = 0;\n    let mut min_even_index_in_arr12 = 0;\n    let mut min_even_index_in_arr13\
    \ = 0;\n    let mut min_even_index_in_arr14 = 0;\n    let mut min_even_index_in_arr15\
    \ = 0;\n    let mut min_even_index_in_arr16 = 0;\n    let mut min_even_index_in_arr17\
    \ = 0;\n    let mut min_even_index_in_arr18 = 0;\n    let mut min_even_index_in_arr19\
    \ = 0;\n    let mut min_even_index_in_arr20 = 0;\n    let mut min_even_index_in_arr21\
    \ = 0;\n    let mut min_even_index_in_arr22 = 0;\n    let mut min_even_index_in_arr23\
    \ = 0;\n    let mut min_even_index_in_arr24 = 0;\n    let mut min_even_index_in_arr25\
    \ = 0;\n    let mut min_even_index_in_arr26 = 0;\n    let mut min_even_index_in_arr27\
    \ = 0;\n    let mut min_even_index_in_arr28 = 0;\n    let mut min_even_index_in_arr29\
    \ = 0;\n    let mut min_even_index_in_arr30 = 0;\n    let mut min_even_index_in_arr31\
    \ = 0;\n    let mut min_even_index_in_arr32 = 0;\n    let mut min_even_index_in_arr33\
    \ = 0;\n    let mut min_even_index_in_arr34 = 0;\n    let mut min_even_index_in_arr35\
    \ = 0;\n    let mut min_even_index_in_arr36 = 0;\n    let mut min_even_index_in_arr37\
    \ = 0;\n    let mut min_even_index_in_arr38 = 0;\n    let mut min_even_index_in_arr39\
    \ = 0;\n    let mut min_even_index_in_arr40 = 0;\n    let mut min_even_index_in_arr41\
    \ = 0;\n    let mut min_even_index_in_arr42 = 0;\n    let mut min_even_index_in_arr43\
    \ = 0;\n    let mut min_even_index_in_arr44 = 0;\n    let mut min_even_index_in_arr45\
    \ = 0;\n    let mut min_even", "    let mut smallest_value = arr[0];\n    let\
    \ mut smallest_index = 0;\n    let mut mut_smallest_value = smallest_value;\n\
    \    let mut mut_smallest_index = smallest_index;\n    let mut mut_mut_smallest_value\
    \ = mut_smallest_value;\n    let mut mut_mut_smallest_index = mut_smallest_index;\n\
    \    let mut mut_mut_mut_smallest_value = mut_mut_smallest_value;\n    let mut\
    \ mut_mut_mut_smallest_index = mut_mut_smallest_index;\n    let mut mut_mut_mut_mut_smallest_value\
    \ = mut_mut_mut_smallest_value;\n    let mut mut_mut_mut_mut_smallest_index =\
    \ mut_mut_mut_smallest_index;\n    let mut mut_mut_mut_mut_mut_smallest_value\
    \ = mut_mut_mut_mut_smallest_value;\n    let mut mut_mut_mut_mut_mut_smallest_index\
    \ = mut_mut_mut_mut_smallest_index;\n    let mut mut_mut_mut_mut_mut_mut_smallest_value\
    \ = mut_mut_mut_mut_mut_smallest_value;\n    let mut mut_mut_mut_mut_mut_mut_smallest_index\
    \ = mut_mut_mut_mut_mut_smallest_index;\n    let mut mut_mut_mut_mut_mut_mut_mut_smallest_value\
    \ = mut_mut_mut_mut_mut_mut_smallest_value;\n    let mut mut_mut_mut_mut_mut_mut_mut_smallest_index\
    \ = mut_mut_mut_mut_mut_mut_smallest_index;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_smallest_value\
    \ = mut_mut_mut_mut_mut_mut_mut_smallest_value;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index\
    \ = mut_mut_mut_mut_mut_mut_mut_smallest_index;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value\
    \ = mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index\
    \ = mu", "    let mut min_even_value = arr[0];\n    let mut min_even_index = -1;\n\
    \    let mut min_even_index_in_vec = -1;\n    for &i in arr {\n        if i %\
    \ 2 == 0 {\n            if min_even_index == -1 || min_even_index > i {\n    \
    \            min_even_value = i;\n                min_even_index = i;\n      \
    \          min_even_index_in_vec = i;\n            }\n        } else {\n     \
    \       if min_even_index == -1 || min_even_index > i {\n                min_even_value\
    \ = i;\n                min_even_index = i;\n                min_even_index_in_vec\
    \ = i;\n            }\n        }\n    }\n    if min_even_index == -1 {\n     \
    \   return vec![];\n    }\n    let mut vec: Vec<isize> = vec![];\n    for i in\
    \ 0..min_even_index {\n        vec.push(i);\n    }\n    vec", "    let mut smallest_value:\
    \ isize = 0;\n    let mut smallest_index: usize = 0;\n    let mut mut_smallest_value:\
    \ isize = 0;\n    let mut mut_smallest_index: usize = 0;\n    let mut mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_smallest_index: usize = 0;\n    let mut mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_smallest_index: usize = 0;\n    let mut\
    \ mut_mut_mut_mut_smallest_value: isize = 0;\n    let mut mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_smallest_value: isize = 0;\n   \
    \ let mut mut_mut_mut_mut_mut_smallest_index: usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_smallest_index: usize = 0;\n\
    \    let mut mut_mut_mut_mut_mut_mut_mut_smallest_value: isize = 0;\n    let mut\
    \ mut_mut_mut_mut_mut_mut_mut_mut_smallest_index: usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mu",
  "    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n    for &i in arr {\n\
    \        if i % 2 == 0 {\n            if min_val > i {\n                min_val\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    if\
    \ min_val == i32::MAX {\n        return vec![];\n    }\n    vec![min_val, min_idx]",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx2\
    \ = 0;\n    let mut min_idx3 = 0;\n    for i in arr.iter() {\n        if i % 2\
    \ == 0 {\n            if min_value == i {\n                min_idx2 = min_idx;\n\
    \                min_idx3 = min_idx;\n            } else {\n                if\
    \ min_value > i {\n                    min_value = i;\n                    min_idx\
    \ = i;\n                }\n            }\n        } else {\n            if min_value\
    \ > i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    if min_idx2 == min_idx {\n        min_idx2 = min_idx3;\n\
    \    }\n    let mut vec: Vec<isize> = vec![];\n    for i in arr.iter() {\n   \
    \     if i % 2 == 0 {\n            if min_idx2 == min_idx {\n                vec.push(min_idx);\n\
    \            } else {\n                vec.push(min_idx2);\n            }\n  \
    \      } else {\n            if min_idx2 == min_idx {\n                vec.push(min_idx3);\n\
    \            } else {\n                vec.push(min_idx2);\n            }\n  \
    \      }\n    }\n    vec", "    let mut min_value = arr[0];\n    let mut min_idx\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            if min_value\
    \ % 2 == 0 {\n                min_value = i;\n                min_idx = i;\n \
    \           }\n        }\n    }\n    vec![min_value, min_idx]", "    let mut min_even_value:\
    \ isize = 0;\n    let mut min_even_index: usize = 0;\n    let mut min_value: isize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize\
    \ = 0;\n    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n\
    \    let mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let\
    \ mut min_index: usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_index:\
    \ usize = 0;\n    let mut min_index: usize = 0;\n    let mut min_", "    let mut\
    \ smallest_value: isize = 0;\n    let mut smallest_index: usize = 0;\n    let\
    \ mut even_value: isize = 0;\n    let mut even_index: usize = 0;\n    for &i in\
    \ arr {\n        if i % 2 == 0 {\n            even_value = i;\n            even_index\
    \ = i;\n        } else {\n            if smallest_value < i {\n              \
    \  smallest_value = i;\n                smallest_index = i;\n            }\n \
    \       }\n    }\n    if even_index == 0 {\n        return vec![];\n    }\n  \
    \  let mut even_values = vec![];\n    even_values.push(even_value);\n    even_values.push(even_index);\n\
    \    even_values.push(smallest_value);\n    even_values.push(smallest_index);\n\
    \    return even_values;", "    let mut smallest_value: isize = 0;\n    let mut\
    \ smallest_index: usize = 0;\n    let mut even_values: Vec<isize> = Vec::new();\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \        }\n        if i == smallest_value {\n            smallest_index = i;\n\
    \        }\n        if i == smallest_value {\n            smallest_value = i;\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = even_values[0];\n    for i in even_values.iter() {\n        if i < smallest_even_value\
    \ {\n            smallest_even_value = i;\n            smallest_even_index = i;\n\
    \        }\n    }\n    vec![smallest_value, smallest_index]", "    let mut min_val\
    \ = arr[0];\n    let mut min_idx = -1;\n    let mut min_even_val = false;\n  \
    \  for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_even_val\
    \ {\n                min_even_val = false;\n                min_idx = i;\n   \
    \         } else {\n                min_even_val = true;\n                min_val\
    \ = i;\n            }\n        }\n    }\n    if min_even_val {\n        min_even_val\
    \ = false;\n        min_idx = min_val;\n    }\n    vec![min_val, min_idx]", " \
    \   let mut min_value = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx2\
    \ = 0;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n           \
    \ if min_value == i {\n                min_idx2 = min_idx;\n            }\n  \
    \          min_idx = i;\n            min_value = i;\n        }\n    }\n    if\
    \ min_idx2 == min_idx {\n        vec![]\n    } else {\n        vec![min_value,\
    \ min_idx]\n    }", "    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index\
    \ = 0;\n    let mut smallest_even_index_in_arr = 0;\n    let mut smallest_even_index_in_arr2\
    \ = 0;\n    let mut smallest_even_index_in_arr3 = 0;\n    let mut smallest_even_index_in_arr4\
    \ = 0;\n    let mut smallest_even_index_in_arr5 = 0;\n    let mut smallest_even_index_in_arr6\
    \ = 0;\n    let mut smallest_even_index_in_arr7 = 0;\n    let mut smallest_even_index_in_arr8\
    \ = 0;\n    let mut smallest_even_index_in_arr9 = 0;\n    let mut smallest_even_index_in_arr10\
    \ = 0;\n    let mut smallest_even_index_in_arr11 = 0;\n    let mut smallest_even_index_in_arr12\
    \ = 0;\n    let mut smallest_even_index_in_arr13 = 0;\n    let mut smallest_even_index_in_arr14\
    \ = 0;\n    let mut smallest_even_index_in_arr15 = 0;\n    let mut smallest_even_index_in_arr16\
    \ = 0;\n    let mut smallest_even_index_in_arr17 = 0;\n    let mut smallest_even_index_in_arr18\
    \ = 0;\n    let mut smallest_even_index_in_arr19 = 0;\n    let mut smallest_even_index_in_arr20\
    \ = 0;\n    let mut smallest_even_index_in_arr21 = 0;\n    let mut smallest_even_index_in_arr22\
    \ = 0;\n    let mut smallest_even_index_in_arr23 = 0;\n    let mut smallest_even_index_in_arr24\
    \ = 0;\n    let mut smallest_even_index_in_arr25 = 0;\n    let mut smallest_even_index_in_arr26\
    \ = 0;\n    let mut smallest_even_index_in_arr27 = 0;\n    let mut smallest_even_index_in_arr28\
    \ = 0;\n    let mut smallest_even_index_in_arr29 = 0;\n    let mut smallest_even_index_in_arr30\
    \ = 0;\n    let mut smallest_even_index_in_arr31 = 0;\n    let mut smallest_even_index_in_arr32\
    \ = 0;\n    let mut smallest_even_index_in_arr33 = 0;\n    let mut smallest_even_index_in_arr34\
    \ = 0;\n    let mut smallest_even_index_in_arr35 = 0;\n    let mut smallest_even_index_in_arr36\
    \ = 0;\n    let mut smallest_even_index_in_arr37 = 0;\n    let mut smallest_even_index_in_arr38\
    \ = 0;\n    let mut smallest_even_index_in_arr39 = 0;\n    let mut smallest_even_index_in_arr40\
    \ = 0;\n    let mut smallest_even_index_in_arr41 = 0;\n    let mut smallest_even",
  "    let mut min_even_value = arr[0];\n    let mut min_even_index = -1;\n    let\
    \ mut min_even_index_in_vec = -1;\n    for i in arr.iter().rev() {\n        if\
    \ i % 2 == 0 {\n            if min_even_value == i {\n                min_even_index\
    \ = i;\n                min_even_index_in_vec = i;\n            } else {\n   \
    \             min_even_value = i;\n                min_even_index = i;\n     \
    \           min_even_index_in_vec = i;\n            }\n        }\n    }\n    if\
    \ min_even_index == -1 {\n        return vec![];\n    }\n    let mut vec: Vec<isize>\
    \ = vec![];\n    for i in 0..min_even_index {\n        vec.push(i);\n    }\n \
    \   vec", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            min_value = i;\n\
    \            min_idx = i;\n        }\n    }\n    vec![min_value, min_idx]", " \
    \   let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if smallest_value\
    \ < i {\n                smallest_value = i;\n                smallest_index =\
    \ i;\n            }\n        }\n    }\n    vec![smallest_value, smallest_index]",
  "    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n\
    \    let mut smallest_index = -1;\n    let mut smallest_value = -1;\n    for i\
    \ in arr.iter().cloned() {\n        if i % 2 == 0 {\n            if smallest_value\
    \ == -1 || smallest_value > i {\n                smallest_even_value = i;\n  \
    \              smallest_even_index = i;\n                smallest_value = i;\n\
    \                smallest_index = i;\n            }\n        } else {\n      \
    \      if smallest_value == -1 || smallest_value < i {\n                smallest_even_value\
    \ = i;\n                smallest_even_index = i;\n                smallest_value\
    \ = i;\n                smallest_index = i;\n            }\n        }\n    }\n\
    \    if smallest_even_index == -1 || smallest_even_index == arr.len() {\n    \
    \    return vec![];\n    }\n    return vec![smallest_even_index, smallest_value];",
  "    let mut min_even_value = arr[0];\n    let mut min_even_index = 0;\n    let\
    \ mut min_even_index_in_arr = 0;\n    let mut min_even_index_in_arr2 = 0;\n  \
    \  let mut min_even_index_in_arr3 = 0;\n    let mut min_even_index_in_arr4 = 0;\n\
    \    let mut min_even_index_in_arr5 = 0;\n    let mut min_even_index_in_arr6 =\
    \ 0;\n    let mut min_even_index_in_arr7 = 0;\n    let mut min_even_index_in_arr8\
    \ = 0;\n    let mut min_even_index_in_arr9 = 0;\n    let mut min_even_index_in_arr10\
    \ = 0;\n    let mut min_even_index_in_arr11 = 0;\n    let mut min_even_index_in_arr12\
    \ = 0;\n    let mut min_even_index_in_arr13 = 0;\n    let mut min_even_index_in_arr14\
    \ = 0;\n    let mut min_even_index_in_arr15 = 0;\n    let mut min_even_index_in_arr16\
    \ = 0;\n    let mut min_even_index_in_arr17 = 0;\n    let mut min_even_index_in_arr18\
    \ = 0;\n    let mut min_even_index_in_arr19 = 0;\n    let mut min_even_index_in_arr20\
    \ = 0;\n    let mut min_even_index_in_arr21 = 0;\n    let mut min_even_index_in_arr22\
    \ = 0;\n    let mut min_even_index_in_arr23 = 0;\n    let mut min_even_index_in_arr24\
    \ = 0;\n    let mut min_even_index_in_arr25 = 0;\n    let mut min_even_index_in_arr26\
    \ = 0;\n    let mut min_even_index_in_arr27 = 0;\n    let mut min_even_index_in_arr28\
    \ = 0;\n    let mut min_even_index_in_arr29 = 0;\n    let mut min_even_index_in_arr30\
    \ = 0;\n    let mut min_even_index_in_arr31 = 0;\n    let mut min_even_index_in_arr32\
    \ = 0;\n    let mut min_even_index_in_arr33 = 0;\n    let mut min_even_index_in_arr34\
    \ = 0;\n    let mut min_even_index_in_arr35 = 0;\n    let mut min_even_index_in_arr36\
    \ = 0;\n    let mut min_even_index_in_arr37 = 0;\n    let mut min_even_index_in_arr38\
    \ = 0;\n    let mut min_even_index_in_arr39 = 0;\n    let mut min_even_index_in_arr40\
    \ = 0;\n    let mut min_even_index_in_arr41 = 0;\n    let mut min_even_index_in_arr42\
    \ = 0;\n    let mut min_even_index_in_arr43 = 0;\n    let mut min_even_index_in_arr44\
    \ = 0;\n    let mut min_even_index_in_arr45 = 0;\n    let mut min_even", "   \
    \ let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            min_value = i;\n            min_idx\
    \ = i;\n        }\n    }\n    vec![min_value, min_idx]", "    let mut min_value\
    \ = arr[0];\n    let mut min_index = 0;\n    let mut min_even_value = false;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            if min_even_value\n\
    \                || (min_even_value = true)\n                || (min_value = i)\n\
    \                || (min_index = arr.iter().position(|&i| i % 2 == 0).unwrap())\
    \ {\n                continue;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_index]", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n  \
    \  let mut min_idx2 = 0;\n    let mut min_idx3 = 0;\n    for &i in arr {\n   \
    \     if i % 2 == 0 {\n            if min_value % 2 == 0 {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n            if min_idx ==\
    \ i {\n                min_idx2 = i;\n            }\n            if min_idx2 ==\
    \ i {\n                min_idx3 = i;\n            }\n        }\n    }\n    if\
    \ min_idx3 == min_idx2 {\n        min_idx3 = min_idx2;\n    }\n    if min_idx3\
    \ == min_idx {\n        min_idx3 = min_idx;\n    }\n    if min_idx3 == min_idx\
    \ {\n        min_idx3 = min_idx;\n    }\n    if min_idx3 == min_idx {\n      \
    \  min_idx3 = min_idx;\n    }\n    if min_idx3 == min_idx {\n        min_idx3\
    \ = min_idx;\n    }\n    if min_idx3 == min_idx {\n        min_idx3 = min_idx;\n\
    \    }\n    if min_idx3 == min_idx {\n        min_idx3 = min_idx;\n    }\n   \
    \ if min_idx3 == min_idx {\n        min_idx3 = min_idx;\n    }\n    if min_idx3\
    \ == min_idx {\n        min_idx3 = min_idx;\n    }\n    if min_idx3 == min_idx\
    \ {\n        min_idx3 = min_idx;\n    }\n    if min_idx3 == min_idx {\n      \
    \  min_idx3 = min_idx;\n    }\n    if min_idx3 == min_idx {\n        min_idx3\
    \ = min_idx;\n    }\n    if min_idx3 == min_idx {\n        min_idx3 = min_idx;\n\
    \    }\n    if min_idx3 == min_idx {\n        min_idx3 = min_idx;\n    }\n   \
    \ if min_idx3 == min_idx {\n        min_idx3 = min_idx;\n    }\n    if min_idx3\
    \ == min_idx {\n        min_idx3 = min_idx;\n    }\n    if min_idx3 == min_idx\
    \ {\n        min_idx3 = min_idx;\n    }\n    if min_idx3 == min_idx {\n      \
    \  min_idx3 = min_idx;\n    }\n    if min_idx3 == min_idx {\n        min_idx3\
    \ = min_idx;\n    }\n    if min_idx3 == min_idx {\n        min_idx3 = min_idx;\n\
    \    }\n    if min_idx3 == min_idx {\n        min_idx3 = min_idx;\n    }\n   \
    \ if min_idx3 == min_idx {\n        min_idx3 = min_idx;\n    }\n    if min_idx3\
    \ == min_idx {\n        min_idx3 = min_idx;\n    }\n    if min_idx3 == min_idx\
    \ {\n        min_idx3 = min_idx;\n    }\n    if min_idx3 == min_idx {\n      \
    \  min_idx3 = ", "    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index\
    \ = -1;\n    let mut smallest_even_index_in_vec = -1;\n    let mut smallest_even_index_in_vec2\
    \ = -1;\n    let mut smallest_even_index_in_vec3 = -1;\n    let mut smallest_even_index_in_vec4\
    \ = -1;\n    let mut smallest_even_index_in_vec5 = -1;\n    let mut smallest_even_index_in_vec6\
    \ = -1;\n    let mut smallest_even_index_in_vec7 = -1;\n    let mut smallest_even_index_in_vec8\
    \ = -1;\n    let mut smallest_even_index_in_vec9 = -1;\n    let mut smallest_even_index_in_vec10\
    \ = -1;\n    let mut smallest_even_index_in_vec11 = -1;\n    let mut smallest_even_index_in_vec12\
    \ = -1;\n    let mut smallest_even_index_in_vec13 = -1;\n    let mut smallest_even_index_in_vec14\
    \ = -1;\n    let mut smallest_even_index_in_vec15 = -1;\n    let mut smallest_even_index_in_vec16\
    \ = -1;\n    let mut smallest_even_index_in_vec17 = -1;\n    let mut smallest_even_index_in_vec18\
    \ = -1;\n    let mut smallest_even_index_in_vec19 = -1;\n    let mut smallest_even_index_in_vec20\
    \ = -1;\n    let mut smallest_even_index_in_vec21 = -1;\n    let mut smallest_even_index_in_vec22\
    \ = -1;\n    let mut smallest_even_index_in_vec23 = -1;\n    let mut smallest_even_index_in_vec24\
    \ = -1;\n    let mut smallest_even_index_in_vec25 = -1;\n    let mut smallest_even_index_in_vec26\
    \ = -1;\n    let mut smallest_even_index_in_vec27 = -1;\n    let mut smallest_even_index_in_vec28\
    \ = -1;\n    let mut smallest_even_index_in_vec29 = -1;\n    let mut smallest_even_index_in_vec30\
    \ = -1;\n    let mut smallest_even_index_in_vec31 = -1;\n    let mut smallest_even_index_in_vec32\
    \ = -1;\n    let mut smallest_even_index_in_vec33 = -1;\n    let mut smallest_even_index_in_vec34\
    \ = -1;\n    let mut smallest_even_index_in_vec35 = -1;\n    let mut smallest_even_index_in_vec36\
    \ = -1;\n    let mut smallest_even_index_in_vec37 = -1;\n    let mut smallest_even_index_in_vec38\
    \ = -1;\n    let mut smallest_even_index_in_vec39 = -1;", "    let mut even_values\
    \ = vec![];\n    let mut smallest_value = vec![];\n    let mut smallest_index\
    \ = vec![];\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value.len() {\n                smallest_value[i]\
    \ = i;\n                smallest_index[i] = i;\n            }\n        }\n   \
    \ }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n    if even_values.len()\
    \ == 1 {\n        return vec![even_values[0]];\n    }\n    if even_values.len()\
    \ > 1 {\n        let mut smallest_even_value = even_values[0];\n        let mut\
    \ smallest_even_index = even_values[0];\n        for i in even_values.iter().rev()\
    \ {\n            if i % 2 == 0 {\n                if i < smallest_even_value.len()\
    \ {\n                    smallest_even_value = i;\n                    smallest_even_index\
    \ = i;\n                }\n            }\n        }\n        smallest_value.push(smallest_even_value);\n\
    \        smallest_index.push(smallest_even_index);\n    }\n    smallest_value",
  "    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    let\
    \ mut even_values = Vec::new();\n    for i in arr.iter().rev() {\n        if i\
    \ % 2 == 0 {\n            even_values.push(i);\n        }\n        if i == smallest_value\
    \ {\n            smallest_index = even_values.len();\n        }\n        if i\
    \ == smallest_value {\n            smallest_value = i;\n        }\n    }\n   \
    \ if even_values.len() == 0 {\n        return vec![];\n    }\n    if even_values.len()\
    \ == 1 {\n        return vec![even_values[0]];\n    }\n    even_values.sort();\n\
    \    return vec![even_values[0], even_values[smallest_index]];", "    let mut\
    \ min_value = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            if min_value == i32::MAX {\n           \
    \     min_value = i;\n                min_idx = i;\n            } else {\n   \
    \             if i < min_value {\n                    min_value = i;\n       \
    \             min_idx = i;\n                }\n            }\n        }\n    }\n\
    \    vec![min_value, min_idx]", "    let mut min_value = arr[0];\n    let mut\
    \ min_idx = 0;\n    let mut min_idx2 = 0;\n    let mut min_idx3 = 0;\n    let\
    \ mut min_idx4 = 0;\n    let mut min_idx5 = 0;\n    let mut min_idx6 = 0;\n  \
    \  let mut min_idx7 = 0;\n    let mut min_idx8 = 0;\n    let mut min_idx9 = 0;\n\
    \    let mut min_idx10 = 0;\n    let mut min_idx11 = 0;\n    let mut min_idx12\
    \ = 0;\n    let mut min_idx13 = 0;\n    let mut min_idx14 = 0;\n    let mut min_idx15\
    \ = 0;\n    let mut min_idx16 = 0;\n    let mut min_idx17 = 0;\n    let mut min_idx18\
    \ = 0;\n    let mut min_idx19 = 0;\n    let mut min_idx20 = 0;\n    let mut min_idx21\
    \ = 0;\n    let mut min_idx22 = 0;\n    let mut min_idx23 = 0;\n    let mut min_idx24\
    \ = 0;\n    let mut min_idx25 = 0;\n    let mut min_idx26 = 0;\n    let mut min_idx27\
    \ = 0;\n    let mut min_idx28 = 0;\n    let mut min_idx29 = 0;\n    let mut min_idx30\
    \ = 0;\n    let mut min_idx31 = 0;\n    let mut min_idx32 = 0;\n    let mut min_idx33\
    \ = 0;\n    let mut min_idx34 = 0;\n    let mut min_idx35 = 0;\n    let mut min_idx36\
    \ = 0;\n    let mut min_idx37 = 0;\n    let mut min_idx38 = 0;\n    let mut min_idx39\
    \ = 0;\n    let mut min_idx40 = 0;\n    let mut min_idx41 = 0;\n    let mut min_idx42\
    \ = 0;\n    let mut min_idx43 = 0;\n    let mut min_idx44 = 0;\n    let mut min_idx45\
    \ = 0;\n    let mut min_idx46 = 0;\n    let mut min_idx47 = 0;\n    let mut min_idx48\
    \ = 0;\n    let mut min_idx49 = 0;\n    let mut min_idx50 = 0;\n    let mut min_idx51\
    \ = 0;\n    let mut min_idx52 = 0;\n    let mut min_idx53 = 0;\n    let mut min_idx54\
    \ = 0;\n    let mut min_idx55 = 0;\n    let mut min_idx56 = 0;\n    let mut min_idx57\
    \ = 0;\n    let mut min_idx58 = 0;\n    let mut min_idx59 = 0;\n    let mut min_idx60\
    \ = 0;\n    let mut min_idx61 = 0;\n    let mut min_idx62 = 0;\n    let mut min_idx63\
    \ = 0;\n    let mut min_idx", "    let mut smallest_value = arr[0];\n    let mut\
    \ smallest_index = 0;\n    let mut mut_smallest_value = smallest_value;\n    let\
    \ mut mut_smallest_index = smallest_index;\n    let mut mut_mut_smallest_value\
    \ = mut_smallest_value;\n    let mut mut_mut_smallest_index = mut_smallest_index;\n\
    \    let mut mut_mut_mut_smallest_value = mut_mut_smallest_value;\n    let mut\
    \ mut_mut_mut_smallest_index = mut_mut_smallest_index;\n    let mut mut_mut_mut_mut_smallest_value\
    \ = mut_mut_mut_smallest_value;\n    let mut mut_mut_mut_mut_smallest_index =\
    \ mut_mut_mut_smallest_index;\n    let mut mut_mut_mut_mut_mut_smallest_value\
    \ = mut_mut_mut_mut_smallest_value;\n    let mut mut_mut_mut_mut_mut_smallest_index\
    \ = mut_mut_mut_mut_smallest_index;\n    let mut mut_mut_mut_mut_mut_mut_smallest_value\
    \ = mut_mut_mut_mut_smallest_value;\n    let mut mut_mut_mut_mut_mut_mut_smallest_index\
    \ = mut_mut_mut_mut_mut_smallest_index;\n    let mut mut_mut_mut_mut_mut_mut_mut_smallest_value\
    \ = mut_mut_mut_mut_mut_smallest_value;\n    let mut mut_mut_mut_mut_mut_mut_mut_smallest_index\
    \ = mut_mut_mut_mut_mut_mut_smallest_index;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_smallest_value\
    \ = mut_mut_mut_mut_mut_mut_smallest_value;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index\
    \ = mut_mut_mut_mut_mut_mut_mut_smallest_index;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value\
    \ = mut_mut_mut_mut_mut_mut_mut_mut_smallest_value;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index\
    \ = mut_mut_mut_mut_mu", "    let mut even_values = vec![];\n    let mut smallest_value\
    \ = vec![];\n    let mut smallest_index = vec![];\n    for i in arr.iter() {\n\
    \        if i % 2 == 0 {\n            even_values.push(i);\n        }\n      \
    \  if even_values.len() == 1 {\n            smallest_value.push(even_values[0]);\n\
    \            smallest_index.push(i);\n        }\n        if even_values.len()\
    \ > 1 {\n            if even_values[0] < smallest_value[0] {\n               \
    \ smallest_value.push(even_values[0]);\n                smallest_index.push(i);\n\
    \            }\n        }\n    }\n    smallest_value", "    let mut smallest_value:\
    \ isize = 0;\n    let mut smallest_index: usize = 0;\n    let mut even_value:\
    \ isize = 0;\n    let mut even_index: usize = 0;\n    let mut index: usize = 0;\n\
    \    let mut even_values: Vec<isize> = vec![];\n    let mut values: Vec<isize>\
    \ = vec![];\n    for value in arr {\n        if value % 2 == 0 {\n           \
    \ even_values.push(value);\n            even_index += 1;\n        } else {\n \
    \           even_value = 0;\n            even_index = 0;\n            values.push(value);\n\
    \            smallest_value = value;\n            smallest_index = index;\n  \
    \      }\n        index += 1;\n    }\n    if even_values.len() == 0 {\n      \
    \  return vec![];\n    }\n    if even_values.len() == 1 {\n        return vec![even_values[0],\
    \ even_index];\n    }\n    if even_values.len() > 1 {\n        let mut smallest_even_value:\
    \ isize = 0;\n        let mut smallest_even_index: usize = 0;\n        for value\
    \ in even_values {\n            if value < smallest_value {\n                smallest_even_value\
    \ = value;\n                smallest_even_index = even_index;\n            }\n\
    \            even_index += 1;\n        }\n        return vec![smallest_even_value,\n\
    \                    smallest_even_index];\n    }\n    return vec![];", "    let\
    \ mut even_values = vec![];\n    let mut smallest_value = vec![];\n    let mut\
    \ smallest_index = vec![];\n    for i in arr.iter() {\n        if i % 2 == 0 {\n\
    \            even_values.push(i);\n            if smallest_value.len() == 0 ||\
    \ i < smallest_value[0] {\n                smallest_value.push(i);\n         \
    \       smallest_index.push(i);\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if smallest_value.len() == 0 {\n\
    \        return vec![];\n    }\n    if even_values.len() == 1 {\n        return\
    \ vec![even_values[0]];\n    }\n    if even_values.len() > 1 {\n        let mut\
    \ smallest_even_value = even_values[0];\n        let mut smallest_even_index =\
    \ smallest_index[0];\n        for i in even_values.iter().rev() {\n          \
    \  if i < smallest_even_value {\n                smallest_even_value = i;\n  \
    \              smallest_even_index = i;\n            }\n        }\n        return\
    \ vec![smallest_even_value];\n    }\n    return vec![];", "    let mut smallest_value:\
    \ isize = 0;\n    let mut smallest_index: usize = 0;\n    let mut even_value:\
    \ isize = 0;\n    let mut even_index: usize = 0;\n    let mut index: usize = 0;\n\
    \    let mut value: isize = 0;\n    let mut even: isize = 0;\n    let mut even_index:\
    \ usize = 0;\n    let mut even_value: isize = 0;\n    let mut even_index: usize\
    \ = 0;\n    let mut even_value: isize = 0;\n    let mut even_index: usize = 0;\n\
    \    let mut even_value: isize = 0;\n    let mut even_index: usize = 0;\n    let\
    \ mut even_value: isize = 0;\n    let mut even_index: usize = 0;\n    let mut\
    \ even_value: isize = 0;\n    let mut even_index: usize = 0;\n    let mut even_value:\
    \ isize = 0;\n    let mut even_index: usize = 0;\n    let mut even_value: isize\
    \ = 0;\n    let mut even_index: usize = 0;\n    let mut even_value: isize = 0;\n\
    \    let mut even_index: usize = 0;\n    let mut even_value: isize = 0;\n    let\
    \ mut even_index: usize = 0;\n    let mut even_value: isize = 0;\n    let mut\
    \ even_index: usize = 0;\n    let mut even_value: isize = 0;\n    let mut even_index:\
    \ usize = 0;\n    let mut even_value: isize = 0;\n    let mut even_index: usize\
    \ = 0;\n    let mut even_value: isize = 0;\n    let mut even_index: usize = 0;\n\
    \    let mut even_value: isize = 0;\n    let mut even_index: usize = 0;\n    let\
    \ mut even_value: isize = 0;\n    let mut even_index: usize = 0;\n    let mut\
    \ even_value: isize = 0;\n    let mut even_index: usize = 0;\n    let mut even_value:\
    \ isize = 0;\n    let mut even_index: usize = 0;\n    let mut even_value: isize\
    \ = 0;\n    let mut even_index: usize = 0;\n    let mut even_value: isize = 0;\n\
    \    let mut even_index: usize = 0;\n    let mut even_value: isize = 0;\n    let\
    \ mut even_index: usize = 0;\n    let mut even_value: isize = 0;\n    let mut\
    \ even_index: usize = 0;\n    let mut even_value: isize = 0;\n    let mut even_index:\
    \ u", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    let mut\
    \ min_idx2 = 0;\n    let mut min_idx3 = 0;\n    for i in arr.iter().rev() {\n\
    \        if i % 2 == 0 {\n            if min_value == i {\n                min_idx2\
    \ = min_idx;\n                min_idx3 = min_idx2;\n            } else {\n   \
    \             min_idx2 = min_idx;\n                min_idx3 = min_idx2;\n    \
    \        }\n            min_idx = i;\n            min_value = i;\n        } else\
    \ {\n            if min_value == i {\n                min_idx2 = min_idx;\n  \
    \              min_idx3 = min_idx2;\n            } else {\n                min_idx2\
    \ = min_idx;\n                min_idx3 = min_idx2;\n            }\n          \
    \  min_idx = i;\n            min_value = i;\n        }\n    }\n    if min_idx3\
    \ == min_idx2 {\n        min_idx2 = min_idx;\n    }\n    if min_idx3 == min_idx\
    \ {\n        min_idx3 = min_idx2;\n    }\n    if min_idx3 == min_idx {\n     \
    \   min_idx3 = min_idx2;\n    }\n    if min_idx3 == min_idx {\n        min_idx3\
    \ = min_idx2;\n    }\n    if min_idx3 == min_idx {\n        min_idx3 = min_idx2;\n\
    \    }\n    if min_idx3 == min_idx {\n        min_idx3 = min_idx2;\n    }\n  \
    \  if min_idx3 == min_idx {\n        min_idx3 = min_idx2;\n    }\n    if min_idx3\
    \ == min_idx {\n        min_idx3 = min_idx2;\n    }\n    if min_idx3 == min_idx\
    \ {\n        min_idx3 = min_idx2;\n    }\n    if min_idx3 == min_idx {\n     \
    \   min_idx3 = min_idx2;\n    }\n    if min_idx3 == min_idx {\n        min_idx3\
    \ = min_idx2;\n    }\n    if min_idx3 == min_idx {\n        min_idx3 = min_idx2;\n\
    \    }\n    if min_idx3 == min_idx {\n        min_idx3 = min_idx2;\n    }\n  \
    \  if min_idx3 == min_idx {\n        min_idx3 = min_idx2;\n    }\n    if min_idx3\
    \ == min_idx {\n        min_idx3 = min_idx2;\n    }\n    if min_idx3 == min_idx\
    \ {\n        min_idx3 = min_idx2;\n    }\n    if min_idx3 == min_idx {\n     \
    \   min_idx3 = min_idx2;\n    }\n    if min_idx3 == min_idx {\n        min_idx3\
    \ = min_idx2;\n    }\n    if min_idx3 == min_idx {\n        min_idx3 = min_idx2;\n\
    \    }\n    if min_idx3 == min_idx {\n        min_idx3 = min_idx2;\n    }\n  \
    \  if min_idx3 == min_idx {\n        min_idx3 = min_idx2;\n    }\n    if min_idx3\
    \ == min_idx {\n", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value\
    \ < i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    vec![min_value, min_idx]", "    let mut min_value\
    \ = arr[0];\n    let mut min_idx = 0;\n    let mut min_even_count = 0;\n    for\
    \ &i in arr {\n        if i % 2 == 0 {\n            min_even_count += 1;\n   \
    \         if min_even_count > min_value {\n                min_value = i;\n  \
    \              min_idx = i;\n            }\n        }\n    }\n    if min_even_count\
    \ == 0 {\n        return vec![];\n    }\n    vec![min_value, min_idx]", "    let\
    \ mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value < i {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    vec![min_value, min_idx]", "    let mut even_values = vec![];\n    let\
    \ mut smallest_value = vec![];\n    let mut smallest_index = vec![];\n    for\
    \ i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if smallest_value.len() == 0 || smallest_value[0] < i {\n       \
    \         smallest_value.push(i);\n                smallest_index.push(i);\n \
    \           }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    if even_values.len() > 1 {\n        let mut smallest_value = vec![];\n\
    \        let mut smallest_index = vec![];\n        for i in even_values.iter()\
    \ {\n            if i % 2 == 0 {\n                if smallest_value.len() == 0\
    \ || smallest_value[0] < i {\n                    smallest_value.push(i);\n  \
    \                  smallest_index.push(i);\n                }\n            }\n\
    \        }\n        if smallest_value.len() == 1 {\n            return vec![smallest_value[0]];\n\
    \        }\n    }\n    return smallest_index;", "    let mut smallest_value: isize\
    \ = 0;\n    let mut smallest_index: usize = 0;\n    let mut even_values: Vec<isize>\
    \ = Vec::new();\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \        }\n        if i == smallest_value {\n            smallest_index = arr.iter().position(|&i|\
    \ i == i).unwrap();\n        }\n        if i == smallest_value {\n           \
    \ smallest_value = i;\n        }\n    }\n    if even_values.len() == 0 {\n   \
    \     return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = arr.iter().position(|&i| i == smallest_even_value).unwrap();\n\
    \    for i in even_values.iter().rev() {\n        if i == smallest_value {\n \
    \           smallest_even_value = i;\n            smallest_even_index = arr.iter().position(|&i|\
    \ i == i).unwrap();\n        }\n    }\n    let mut result = vec![smallest_value,\
    \ smallest_index];\n    for i in even_values.iter().rev() {\n        if i == smallest_value\
    \ {\n            result.push(smallest_even_index);\n        }\n    }\n    result",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for &x in arr {\n\
    \        if x % 2 == 0 {\n            if min_value < x {\n                min_value\
    \ = x;\n                min_idx = x;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut even_values = vec![];\n    let mut smallest_value =\
    \ vec![];\n    let mut smallest_index = vec![];\n    for i in arr.iter() {\n \
    \       if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value.len() {\n                smallest_value[i] = i;\n           \
    \     smallest_index[i] = i;\n            }\n        } else {\n            if\
    \ i < smallest_value.len() {\n                smallest_value[i] = i;\n       \
    \         smallest_index[i] = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values.len() == 1 {\n   \
    \     return vec![even_values[0]];\n    }\n    let mut smallest_value_pos = 0;\n\
    \    for i in even_values.iter() {\n        if smallest_value[smallest_value_pos]\
    \ < i {\n            smallest_value_pos = i;\n        }\n    }\n    let mut smallest_value_neg\
    \ = 0;\n    for i in even_values.iter() {\n        if smallest_value[smallest_value_neg]\
    \ > i {\n            smallest_value_neg = i;\n        }\n    }\n    if smallest_value_neg\
    \ < smallest_value_pos {\n        smallest_value_neg += 1;\n    }\n    smallest_value[smallest_value_pos]",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value < i {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    vec![min_value, min_idx]", "    let mut smallest_even_value = arr[0];\n\
    \    let mut smallest_even_index = 0;\n    let mut smallest_even_index_in_vec\
    \ = 0;\n    let mut smallest_even_index_in_vec_to_return = 0;\n    for &i in arr\
    \ {\n        if i % 2 == 0 {\n            if smallest_even_index == i {\n    \
    \            smallest_even_index_in_vec++;\n                smallest_even_index_in_vec_to_return\
    \ = i;\n            }\n            if smallest_even_index < i {\n            \
    \    smallest_even_index = i;\n                smallest_even_index_in_vec = 0;\n\
    \                smallest_even_index_in_vec_to_return = i;\n            }\n  \
    \      }\n    }\n    if smallest_even_index_in_vec == 0 {\n        return vec![];\n\
    \    }\n    let mut returned_vec = vec![smallest_even_value];\n    for &i in arr\
    \ {\n        if i % 2 == 0 {\n            if smallest_even_index_in_vec_to_return\
    \ == i {\n                smallest_even_index_in_vec_to_return = i;\n        \
    \    }\n            if smallest_even_index_in_vec_to_return < i {\n          \
    \      smallest_even_index_in_vec_to_return = i;\n            }\n        }\n \
    \   }\n    returned_vec.push(smallest_even_index_in_vec_to_return);\n    return\
    \ returned_vec;", "    let mut smallest_value: isize = 0;\n    let mut smallest_index:\
    \ usize = 0;\n    for &node in &arr {\n        if node.value % 2 == 0 {\n    \
    \        if smallest_value == 0 {\n                smallest_value = node.value;\n\
    \                smallest_index = node.index;\n            } else {\n        \
    \        if node.value < smallest_value {\n                    smallest_value\
    \ = node.value;\n                    smallest_index = node.index;\n          \
    \      }\n            }\n        }\n    }\n    if smallest_value == 0 {\n    \
    \    return vec![];\n    }\n    let mut result = vec![smallest_value, smallest_index];\n\
    \    let mut current_index = 0;\n    for &node in &arr {\n        if node.value\
    \ % 2 == 0 {\n            if node.index == current_index {\n                result.push(node.value);\n\
    \            } else {\n                result.push(node.value);\n            \
    \    current_index = node.index;\n            }\n        }\n    }\n    result",
  "    let mut smallest_value: isize = 0;\n    let mut smallest_index: usize = 0;\n\
    \    let mut even_values = false;\n    let mut even_values_index = 0;\n    let\
    \ mut even_values_index2 = 0;\n    let mut even_values_index3 = 0;\n    let mut\
    \ even_values_index4 = 0;\n    let mut even_values_index5 = 0;\n    let mut even_values_index6\
    \ = 0;\n    let mut even_values_index7 = 0;\n    let mut even_values_index8 =\
    \ 0;\n    let mut even_values_index9 = 0;\n    let mut even_values_index10 = 0;\n\
    \    let mut even_values_index11 = 0;\n    let mut even_values_index12 = 0;\n\
    \    let mut even_values_index13 = 0;\n    let mut even_values_index14 = 0;\n\
    \    let mut even_values_index15 = 0;\n    let mut even_values_index16 = 0;\n\
    \    let mut even_values_index17 = 0;\n    let mut even_values_index18 = 0;\n\
    \    let mut even_values_index19 = 0;\n    let mut even_values_index20 = 0;\n\
    \    let mut even_values_index21 = 0;\n    let mut even_values_index22 = 0;\n\
    \    let mut even_values_index23 = 0;\n    let mut even_values_index24 = 0;\n\
    \    let mut even_values_index25 = 0;\n    let mut even_values_index26 = 0;\n\
    \    let mut even_values_index27 = 0;\n    let mut even_values_index28 = 0;\n\
    \    let mut even_values_index29 = 0;\n    let mut even_values_index30 = 0;\n\
    \    let mut even_values_index31 = 0;\n    let mut even_values_index32 = 0;\n\
    \    let mut even_values_index33 = 0;\n    let mut even_values_index34 = 0;\n\
    \    let mut even_values_index35 = 0;\n    let mut even_values_index36 = 0;\n\
    \    let mut even_values_index37 = 0;\n    let mut even_values_index38 = 0;\n\
    \    let mut even_values_index39 = 0;\n    let mut even_values_index40 = 0;\n\
    \    let mut even_values_index41 = 0;\n    let mut even_values_index42 = 0;\n\
    \    let mut even_values_index43 = 0;\n    let mut even_values_index44 = 0;\n\
    \    let mut even_values_index45 = 0;\n    let mut even_values_index46 = 0;\n\
    \    let mut even_values_index47 = 0;\n    let mut even_values_index48 = 0;\n\
    \    let mut even_values_index49 = 0;", "    let mut min_value = arr[0];\n   \
    \ let mut min_idx = 1;\n    let mut min_idx = 1;\n    for &x in arr {\n      \
    \  if x % 2 == 0 {\n            if min_value % 2 == 0 {\n                min_value\
    \ = x;\n                min_idx = 1;\n            } else {\n                min_value\
    \ = x;\n                min_idx = 2;\n            }\n        }\n    }\n    if\
    \ min_value == 0 {\n        return vec![];\n    }\n    vec![min_value, min_idx]",
  "    let mut even_values = Vec::new();\n    let mut min_value = i32::MAX;\n    let\
    \ mut min_value_index = -1;\n    for i in arr.iter() {\n        if i % 2 == 0\
    \ {\n            even_values.push(i);\n            if i < min_value {\n      \
    \          min_value = i;\n                min_value_index = i;\n            }\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    let mut smallest_value = i32::MAX;\n    let mut smallest_value_index\
    \ = -1;\n    for i in even_values.iter() {\n        if i < smallest_value {\n\
    \            smallest_value = i;\n            smallest_value_index = i;\n    \
    \    }\n    }\n    let mut result = vec![];\n    for i in even_values.iter() {\n\
    \        if i == smallest_value {\n            result.push(smallest_value_index);\n\
    \        }\n    }\n    result", "    let mut even_values = vec![];\n    let mut\
    \ smallest_value = vec![];\n    let mut smallest_index = vec![];\n    let mut\
    \ smallest_index_value = vec![];\n    for i in arr.iter() {\n        if i % 2\
    \ == 0 {\n            even_values.push(i);\n            if i < smallest_value.len()\
    \ {\n                smallest_value.push(i);\n                smallest_index.push(i);\n\
    \                smallest_index_value.push(i);\n            }\n        } else\
    \ {\n            if i < smallest_value.len() {\n                smallest_value.push(i);\n\
    \                smallest_index.push(i);\n                smallest_index_value.push(i);\n\
    \            }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    if even_values.len() > 1 {\n        let mut smallest_value_iter =\
    \ smallest_value.iter();\n        let mut smallest_index_iter = smallest_index.iter();\n\
    \        let mut smallest_index_value_iter = smallest_index_value.iter();\n  \
    \      let mut even_values_iter = even_values.iter();\n        if even_values_iter.next().unwrap()\
    \ == even_values_iter.next().unwrap() {\n            smallest_value_iter.next();\n\
    \            smallest_index_iter.next();\n            smallest_index_value_iter.next();\n\
    \        }\n        let mut smallest_value = vec![];\n        let mut smallest_index\
    \ = vec![];\n        let mut smallest_index_value = vec![];\n        for i in\
    \ even_values.iter() {\n            if i % 2 == 0 {\n                smallest_value.push(i);\n\
    \                if i < smallest_value.len() {\n                    smallest_index.push(i);\n\
    \                    smallest_index_value.push(i);\n                }\n      \
    \      } else {\n                if i < smallest_value.len() {\n             \
    \       smallest_value.push(i);\n                    smallest_index.push(i);\n\
    \                    smallest_index_value.push(i);\n                }\n      \
    \      }\n        }\n        if smallest_value.len() == 0 {\n            return\
    \ vec![];\n        }\n        if smallest_value.len() == 1 {\n            return\
    \ vec![smallest_value[0]];\n        }\n        if smallest_value.len() > 1 {\n\
    \            let mut smallest_value_iter = smallest_value.iter();\n          \
    \  let mut smallest_index_iter = smallest_index.iter();\n            let mut smallest_index_value_iter\
    \ = smallest_index_value.iter();\n            let mut even_values_iter = even_values.iter();\n\
    \            if even_values_iter.next().unwrap() == even_values_iter.next().unwrap()\
    \ {\n                smallest_value_iter.next();\n                smallest_index_iter.next();\n\
    \                smallest_index_value_iter.next();\n            }\n          \
    \  let ", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    let\
    \ mut min_idx2 = 0;\n    let mut min_idx3 = 0;\n    let mut min_idx4 = 0;\n  \
    \  let mut min_idx5 = 0;\n    let mut min_idx6 = 0;\n    let mut min_idx7 = 0;\n\
    \    let mut min_idx8 = 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10 =\
    \ 0;\n    let mut min_idx11 = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13\
    \ = 0;\n    let mut min_idx14 = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16\
    \ = 0;\n    let mut min_idx17 = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19\
    \ = 0;\n    let mut min_idx20 = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22\
    \ = 0;\n    let mut min_idx23 = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25\
    \ = 0;\n    let mut min_idx26 = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28\
    \ = 0;\n    let mut min_idx29 = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31\
    \ = 0;\n    let mut min_idx32 = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34\
    \ = 0;\n    let mut min_idx35 = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37\
    \ = 0;\n    let mut min_idx38 = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40\
    \ = 0;\n    let mut min_idx41 = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43\
    \ = 0;\n    let mut min_idx44 = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46\
    \ = 0;\n    let mut min_idx47 = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49\
    \ = 0;\n    let mut min_idx50 = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52\
    \ = 0;\n    let mut min_idx53 = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55\
    \ = 0;\n    let mut min_idx56 = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58\
    \ = 0;\n    let mut min_idx59 = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61\
    \ = 0;\n    let mut min_idx62 = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    let mut min_even_count\
    \ = 0;\n    for &v in arr.iter().rev() {\n        if v % 2 == 0 {\n          \
    \  min_even_count += 1;\n            if min_even_count > min_value {\n       \
    \         min_value = v;\n                min_idx = arr.len() - 1 - v;\n     \
    \       }\n        }\n    }\n    vec![min_value, min_idx]", "    let mut min_value\
    \ = arr[0];\n    let mut min_idx = -1;\n    let mut min_idx2 = -1;\n    let mut\
    \ min_idx3 = -1;\n    let mut min_idx4 = -1;\n    let mut min_idx5 = -1;\n   \
    \ let mut min_idx6 = -1;\n    let mut min_idx7 = -1;\n    let mut min_idx8 = -1;\n\
    \    let mut min_idx9 = -1;\n    let mut min_idx10 = -1;\n    let mut min_idx11\
    \ = -1;\n    let mut min_idx12 = -1;\n    let mut min_idx13 = -1;\n    let mut\
    \ min_idx14 = -1;\n    let mut min_idx15 = -1;\n    let mut min_idx16 = -1;\n\
    \    let mut min_idx17 = -1;\n    let mut min_idx18 = -1;\n    let mut min_idx19\
    \ = -1;\n    let mut min_idx20 = -1;\n    let mut min_idx21 = -1;\n    let mut\
    \ min_idx22 = -1;\n    let mut min_idx23 = -1;\n    let mut min_idx24 = -1;\n\
    \    let mut min_idx25 = -1;\n    let mut min_idx26 = -1;\n    let mut min_idx27\
    \ = -1;\n    let mut min_idx28 = -1;\n    let mut min_idx29 = -1;\n    let mut\
    \ min_idx30 = -1;\n    let mut min_idx31 = -1;\n    let mut min_idx32 = -1;\n\
    \    let mut min_idx33 = -1;\n    let mut min_idx34 = -1;\n    let mut min_idx35\
    \ = -1;\n    let mut min_idx36 = -1;\n    let mut min_idx37 = -1;\n    let mut\
    \ min_idx38 = -1;\n    let mut min_idx39 = -1;\n    let mut min_idx40 = -1;\n\
    \    let mut min_idx41 = -1;\n    let mut min_idx42 = -1;\n    let mut min_idx43\
    \ = -1;\n    let mut min_idx44 = -1;\n    let mut min_idx45 = -1;\n    let mut\
    \ min_idx46 = -1;\n    let mut min_idx47 = -1;\n    let mut min_idx48 = -1;\n\
    \    let mut min_idx49 = -1;\n    let mut min_idx50 = -1;\n    let mut min_idx51\
    \ = -1;\n    let mut min_idx52 = -1;\n    let mut min_idx53 = -1;\n    let mut\
    \ min_idx54 = -1;\n    let mut min_idx55 = -1;\n    let mut min_idx56 = -1;\n\
    \    let mut min_idx57 = -1;\n    let mut min_", "    let mut min_value = arr[0];\n\
    \    let mut min_idx = 0;\n    for i in arr.iter().rev() {\n        if i % 2 ==\
    \ 0 {\n            min_value = i;\n            min_idx = i;\n        }\n    }\n\
    \    vec![min_value, min_idx]", "    let mut min_value = arr[0];\n    let mut\
    \ min_idx = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            if min_value\
    \ == i {\n                min_idx = i;\n            }\n            else {\n  \
    \              min_value = i;\n                min_idx = i;\n            }\n \
    \       }\n    }\n    vec![min_value, min_idx]", "    let mut min_even_value =\
    \ arr[0];\n    let mut min_even_index = -1;\n    let mut min_even_index2 = -1;\n\
    \    let mut min_even_index3 = -1;\n    let mut min_even_index4 = -1;\n    let\
    \ mut min_even_index5 = -1;\n    let mut min_even_index6 = -1;\n    let mut min_even_index7\
    \ = -1;\n    let mut min_even_index8 = -1;\n    let mut min_even_index9 = -1;\n\
    \    let mut min_even_index10 = -1;\n    let mut min_even_index11 = -1;\n    let\
    \ mut min_even_index12 = -1;\n    let mut min_even_index13 = -1;\n    let mut\
    \ min_even_index14 = -1;\n    let mut min_even_index15 = -1;\n    let mut min_even_index16\
    \ = -1;\n    let mut min_even_index17 = -1;\n    let mut min_even_index18 = -1;\n\
    \    let mut min_even_index19 = -1;\n    let mut min_even_index20 = -1;\n    let\
    \ mut min_even_index21 = -1;\n    let mut min_even_index22 = -1;\n    let mut\
    \ min_even_index23 = -1;\n    let mut min_even_index24 = -1;\n    let mut min_even_index25\
    \ = -1;\n    let mut min_even_index26 = -1;\n    let mut min_even_index27 = -1;\n\
    \    let mut min_even_index28 = -1;\n    let mut min_even_index29 = -1;\n    let\
    \ mut min_even_index30 = -1;\n    let mut min_even_index31 = -1;\n    let mut\
    \ min_even_index32 = -1;\n    let mut min_even_index33 = -1;\n    let mut min_even_index34\
    \ = -1;\n    let mut min_even_index35 = -1;\n    let mut min_even_index36 = -1;\n\
    \    let mut min_even_index37 = -1;\n    let mut min_even_index38 = -1;\n    let\
    \ mut min_even_index39 = -1;\n    let mut min_even_index40 = -1;\n    let mut\
    \ min_even_index41 = -1;\n    let mut min_even_index42 = -1;\n    let mut min_even_index43\
    \ = -1;\n    let mut min_even_index44 = -1;\n    let mut min_even_index45 = -1;\n\
    \    let mut min_even_index46 = -1;\n    let mut min_even_index47 = -1;\n    let\
    \ mut min_even_index48 = -1;\n    let mut min_even_index49 = -1;\n    let mut\
    \ min_even_index50 = -1;\n    let mut min_even_index51 = -1;\n    let mut min_even_index",
  "    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n\
    \    let mut smallest_index = -1;\n    for i in arr.iter().rev() {\n        if\
    \ i % 2 == 0 {\n            if smallest_even_index == -1 || smallest_even_index\
    \ > i {\n                smallest_even_value = i;\n                smallest_even_index\
    \ = i;\n                smallest_index = i;\n            } else {\n          \
    \      if smallest_even_index > i {\n                    smallest_even_index =\
    \ i;\n                    smallest_index = i;\n                }\n           \
    \ }\n        }\n    }\n    if smallest_even_index == -1 {\n        return vec![];\n\
    \    }\n    let mut result = vec![smallest_even_value];\n    if smallest_index\
    \ != -1 {\n        result.push(smallest_index);\n    }\n    result", "    let\
    \ mut smallest_value: isize = 0;\n    let mut smallest_index: usize = 0;\n   \
    \ for &i in arr {\n        if i % 2 == 0 {\n            if smallest_value == i\
    \ {\n                smallest_index = i;\n            } else {\n             \
    \   smallest_value = i;\n                smallest_index = i;\n            }\n\
    \        }\n    }\n    vec![smallest_value, smallest_index]", "    let mut min_value\
    \ = arr[0];\n    let mut min_index = 0;\n    let mut min_even_value = false;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            min_even_value = true;\n\
    \        }\n        if min_even_value\n            && (min_value == 0 || min_value\
    \ < i)\n        {\n            min_value = i;\n            min_even_value = false;\n\
    \            min_index = i;\n        }\n    }\n    if min_even_value\n       \
    \ && (min_value == 0 || min_value < min_index)\n    {\n        min_value = min_index;\n\
    \    }\n    min_value\n        .to_vec()\n        .iter()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n\
    \        .cloned()\n        .cloned()\n        .cloned()\n        .clone", " \
    \   let mut min_even_value = arr[0];\n    let mut min_even_index = 0;\n    let\
    \ mut min_even_index_in_vec = 0;\n    let mut min_even_index_in_vec_to_pluck_from\
    \ = 0;\n    let mut min_even_index_in_vec_to_pluck_to = 0;\n    let mut min_even_index_in_vec_to_pluck_to_increment\
    \ = 0;\n    let mut min_even_index_in_vec_to_pluck_to_increment_increment = 0;\n\
    \    let mut min_even_index_in_vec_to_pluck_to_increment_increment_increment =\
    \ 0;\n    let mut min_even_index_in_vec_to_pluck_to_increment_increment_increment_increment\
    \ = 0;\n    let mut min_even_index_in_vec_to_pluck_to_increment_increment_increment_increment_increment\
    \ = 0;\n    let mut min_even_index_in_vec_to_pluck_to_increment_increment_increment_increment_increment_increment\
    \ = 0;\n    let mut min_even_index_in_vec_to_pluck_to_increment_increment_increment_increment_increment_increment_increment\
    \ = 0;\n    let mut min_even_index_in_vec_to_pluck_to_increment_increment_increment_increment_increment_increment_increment_increment\
    \ = 0;\n    let mut min_even_index_in_vec_to_pluck_to_increment_increment_increment_increment_increment_increment_increment_increment_increment\
    \ = 0;\n    let mut min_even_index_in_vec_to_pluck_to_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment\
    \ = 0;\n    let mut min_even_index_in_vec_to_pluck_to_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment\
    \ = 0;\n    let mut min_even_index_in_vec_to_pluck_to_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment\
    \ = 0;\n    let mut min_even_index_in_vec_to_pluck_to_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment\
    \ = 0;\n    let mut min_even_index_in_vec_to_pluck_to_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment\
    \ = 0;\n    let mut min_even_index_in_vec_to_pluck_to_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment\
    \ = 0;\n    let mut min_even_index_in_vec_to_pluck_to_increment_increment_increment_increment_increment_increment_increment_increment_",
  "    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            if min_val < i {\n                min_val\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    if\
    \ min_val == i32::MAX {\n        return vec![];\n    }\n    let mut vec: Vec<isize>\
    \ = vec![];\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            vec.push(i);\n\
    \        }\n    }\n    vec.push(min_val);\n    vec.push(min_idx);\n    vec", " \
    \   let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value >= i {\n              \
    \  min_value = i;\n                min_idx = i;\n            }\n        }\n  \
    \  }\n    vec![min_value, min_idx]", "    let mut min_value = arr[0];\n    let\
    \ mut min_idx = 1;\n    let mut min_idx2 = 1;\n    let mut min_idx3 = 1;\n   \
    \ let mut min_idx4 = 1;\n    let mut min_idx5 = 1;\n    let mut min_idx6 = 1;\n\
    \    let mut min_idx7 = 1;\n    let mut min_idx8 = 1;\n    let mut min_idx9 =\
    \ 1;\n    let mut min_idx10 = 1;\n    let mut min_idx11 = 1;\n    let mut min_idx12\
    \ = 1;\n    let mut min_idx13 = 1;\n    let mut min_idx14 = 1;\n    let mut min_idx15\
    \ = 1;\n    let mut min_idx16 = 1;\n    let mut min_idx17 = 1;\n    let mut min_idx18\
    \ = 1;\n    let mut min_idx19 = 1;\n    let mut min_idx20 = 1;\n    let mut min_idx21\
    \ = 1;\n    let mut min_idx22 = 1;\n    let mut min_idx23 = 1;\n    let mut min_idx24\
    \ = 1;\n    let mut min_idx25 = 1;\n    let mut min_idx26 = 1;\n    let mut min_idx27\
    \ = 1;\n    let mut min_idx28 = 1;\n    let mut min_idx29 = 1;\n    let mut min_idx30\
    \ = 1;\n    let mut min_idx31 = 1;\n    let mut min_idx32 = 1;\n    let mut min_idx33\
    \ = 1;\n    let mut min_idx34 = 1;\n    let mut min_idx35 = 1;\n    let mut min_idx36\
    \ = 1;\n    let mut min_idx37 = 1;\n    let mut min_idx38 = 1;\n    let mut min_idx39\
    \ = 1;\n    let mut min_idx40 = 1;\n    let mut min_idx41 = 1;\n    let mut min_idx42\
    \ = 1;\n    let mut min_idx43 = 1;\n    let mut min_idx44 = 1;\n    let mut min_idx45\
    \ = 1;\n    let mut min_idx46 = 1;\n    let mut min_idx47 = 1;\n    let mut min_idx48\
    \ = 1;\n    let mut min_idx49 = 1;\n    let mut min_idx50 = 1;\n    let mut min_idx51\
    \ = 1;\n    let mut min_idx52 = 1;\n    let mut min_idx53 = 1;\n    let mut min_idx54\
    \ = 1;\n    let mut min_idx55 = 1;\n    let mut min_idx56 = 1;\n    let mut min_idx57\
    \ = 1;\n    let mut min_idx58 = 1;\n    let mut min_idx59 = 1;\n    let mut min_idx60\
    \ = 1;\n    let mut min_idx61 = 1;\n    let mut min_idx62 = 1;\n    let mut min_idx",
  "    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for\
    \ i in 1..arr.len() {\n        if arr[i] < smallest_value {\n            smallest_value\
    \ = arr[i];\n            smallest_index = i;\n        }\n    }\n    vec![smallest_value,\
    \ smallest_index]", "    let mut min_value = i32::MAX;\n    let mut min_idx =\
    \ -1;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_value\
    \ < i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    if min_idx == -1 {\n        return vec![];\n \
    \   }\n    vec![min_value, min_idx]", "    let mut smallest_value = arr[0];\n\
    \    let mut smallest_index = 0;\n    let mut mut_counter = 0;\n    for i in arr.iter().cloned()\
    \ {\n        if i % 2 == 0 {\n            smallest_value = i;\n            smallest_index\
    \ = mut_counter;\n        }\n        mut_counter += 1;\n    }\n    smallest_index\n\
    \        .clone()\n        .into_iter()\n        .cloned()\n        .collect::<Vec<_>>()",
  "    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter()\
    \ {\n        if i % 2 == 0 {\n            if min_val < i {\n                min_val\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    if\
    \ min_val == i32::MAX {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_val ==\
    \ i {\n                result.push(min_idx);\n            } else {\n         \
    \       result.push(i);\n            }\n        }\n    }\n    result", "    let\
    \ mut min_even_value = arr[0];\n    let mut min_even_index = -1;\n    let mut\
    \ min_even_index_in_vec = -1;\n    for i in arr.iter().rev() {\n        if i %\
    \ 2 == 0 {\n            if min_even_index == -1 || min_even_index > i {\n    \
    \            min_even_value = i;\n                min_even_index = i;\n      \
    \          min_even_index_in_vec = i;\n            }\n        } else {\n     \
    \       if min_even_index != -1 && min_even_index > i {\n                min_even_index_in_vec\
    \ = i;\n            }\n        }\n    }\n    if min_even_index == -1 {\n     \
    \   return vec![];\n    }\n    if min_even_index_in_vec == -1 {\n        return\
    \ vec![min_even_value];\n    }\n    vec![min_even_value,\n          min_even_index_in_vec]",
  "    let mut smallest_value: isize = 0;\n    let mut smallest_index: usize = 0;\n\
    \    let mut even_value: isize = 0;\n    let mut even_index: usize = 0;\n    for\
    \ &i in arr {\n        if i % 2 == 0 {\n            even_value = i;\n        \
    \    even_index = i;\n        } else {\n            if smallest_value == 0 {\n\
    \                smallest_value = i;\n                smallest_index = i;\n  \
    \          } else {\n                if smallest_value < i {\n               \
    \     smallest_value = i;\n                    smallest_index = i;\n         \
    \       }\n            }\n        }\n    }\n    if smallest_value == 0 {\n   \
    \     return vec![];\n    }\n    let mut vec: Vec<isize> = vec![];\n    vec.push(smallest_value);\n\
    \    vec.push(smallest_index);\n    vec.push(even_value);\n    vec.push(even_index);\n\
    \    vec", "    let mut smallest_value = arr[0];\n    let mut smallest_index =\
    \ 0;\n    let mut even_values = Vec::new();\n    for i in arr.iter() {\n     \
    \   if i % 2 == 0 {\n            even_values.push(i);\n        }\n        if i\
    \ == smallest_value {\n            smallest_index = i;\n        }\n        if\
    \ i == smallest_value {\n            smallest_value = i;\n        }\n    }\n \
    \   if even_values.len() == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value\
    \ = even_values[0];\n    let mut smallest_even_index = 0;\n    for i in even_values.iter()\
    \ {\n        if i == smallest_even_value {\n            smallest_even_index =\
    \ i;\n        }\n        if i == smallest_even_value {\n            smallest_even_value\
    \ = i;\n        }\n    }\n    vec![smallest_value, smallest_index]", "    let\
    \ mut min_value = arr.iter().min();\n    let mut min_idx = 0;\n    let mut min_even_val\
    \ = false;\n    let mut min_even_val_idx = -1;\n    let mut min_even_val_idx =\
    \ -1;\n    for idx in arr.iter().rev() {\n        if idx % 2 == 0 {\n        \
    \    if min_even_val {\n                if min_even_val_idx == idx {\n       \
    \             min_even_val_idx = idx;\n                }\n            } else {\n\
    \                min_even_val = true;\n                min_even_val_idx = idx;\n\
    \            }\n        } else {\n            min_value = idx;\n            min_idx\
    \ = idx;\n            min_even_val = false;\n            min_even_val_idx = -1;\n\
    \        }\n    }\n    if min_even_val {\n        vec![min_even_val_idx, min_even_val_idx]\n\
    \    } else {\n        vec![min_idx, min_idx]\n    }", "    let mut even_values\
    \ = Vec::new();\n    let mut smallest_value = vec![0; arr.len()];\n    let mut\
    \ smallest_index = vec![0; arr.len()];\n    let mut smallest_index_value = vec![0;\
    \ arr.len()];\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n   \
    \         even_values.push(i);\n            if arr[i] < smallest_value[0] {\n\
    \                smallest_value[0] = arr[i];\n                smallest_index[0]\
    \ = i;\n            }\n            if arr[i] < smallest_index_value[0] {\n   \
    \             smallest_index_value[0] = arr[i];\n            }\n        }\n  \
    \  }\n    if even_values.len() == 0 {\n        return vec![];\n    }\n    for\
    \ i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n            if arr[i] < smallest_value[0]\
    \ {\n                smallest_value[0] = arr[i];\n                smallest_index[0]\
    \ = i;\n            }\n            if arr[i] < smallest_index_value[0] {\n   \
    \             smallest_index_value[0] = arr[i];\n            }\n        }\n  \
    \  }\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n            if\
    \ arr[i] < smallest_value[0] {\n                smallest_value[0] = arr[i];\n\
    \                smallest_index[0] = i;\n            }\n            if arr[i]\
    \ < smallest_index_value[0] {\n                smallest_index_value[0] = arr[i];\n\
    \            }\n        }\n    }\n    for i in 0..arr.len() {\n        if arr[i]\
    \ % 2 == 0 {\n            if arr[i] < smallest_value[0] {\n                smallest_value[0]\
    \ = arr[i];\n                smallest_index[0] = i;\n            }\n         \
    \   if arr[i] < smallest_index_value[0] {\n                smallest_index_value[0]\
    \ = arr[i];\n            }\n        }\n    }\n    for i in 0..arr.len() {\n  \
    \      if arr[i] % 2 == 0 {\n            if arr[i] < smallest_value[0] {\n   \
    \             smallest_value[0] = arr[i];\n                smallest_index[0] =\
    \ i;\n            }\n            if arr[i] < smallest_index_value[0] {\n     \
    \           smallest_index_value[0] = arr[i];\n            }\n        }\n    }\n\
    \    for i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n            if arr[i]\
    \ < smallest_value[0] {\n                smallest_value[0] = arr[i];\n       \
    \         smallest_index[0] = i;\n            }\n            if arr[i] < smallest_index_value[0]\
    \ {\n                smallest_index_value[0] = arr[i];\n            }\n      \
    \  }\n    }\n    for i in 0..arr.len() {\n        if arr[i] % 2 == 0 {\n     \
    \       if arr[i] < smallest_value[0] {\n                smallest_value[0] = arr[i];\n\
    \                smallest_index[0] = i;", "    let mut min_value = arr[0];\n \
    \   let mut min_idx = 0;\n    for i in arr.iter().rev() {\n        if i % 2 ==\
    \ 0 {\n            if min_value > i {\n                min_value = i;\n      \
    \          min_idx = i;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut even_values = vec![];\n    let mut smallest_value =\
    \ vec![];\n    let mut smallest_index = vec![];\n    for i in arr.iter() {\n \
    \       if i % 2 == 0 {\n            even_values.push(i);\n            if i <\
    \ smallest_value.len() {\n                smallest_value.push(i);\n          \
    \      smallest_index.push(i);\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values.len() == 1 {\n   \
    \     return vec![even_values[0]];\n    }\n    if even_values.len() > 1 {\n  \
    \      let mut smallest_even_value = even_values[0];\n        let mut smallest_even_index\
    \ = even_values[0];\n        for i in even_values.iter().rev() {\n           \
    \ if i % 2 == 0 {\n                if i < smallest_even_value.len() {\n      \
    \              smallest_even_value = i;\n                    smallest_even_index\
    \ = i;\n                }\n            }\n        }\n        return vec![smallest_even_value,\n\
    \                    smallest_even_index];\n    }\n    return vec![];", "    let\
    \ mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n    let mut even_values\
    \ = Vec::new();\n    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \        }\n        if i == smallest_value {\n            smallest_index = even_values.len();\n\
    \        }\n        if i == smallest_value {\n            smallest_value = i;\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    if even_values.len() == 2 {\n        return vec![even_values[0], even_values[1]];\n\
    \    }\n    if even_values.len() == 3 {\n        return vec![even_values[0], even_values[1],\
    \ even_values[2]];\n    }\n    if even_values.len() == 4 {\n        return vec![even_values[0],\
    \ even_values[1], even_values[2], even_values[3]];\n    }\n    if even_values.len()\
    \ == 5 {\n        return vec![even_values[0], even_values[1], even_values[2],\
    \ even_values[3], even_values[4]];\n    }\n    if even_values.len() == 6 {\n \
    \       return vec![even_values[0], even_values[1], even_values[2], even_values[3],\
    \ even_values[4], even_values[5]];\n    }\n    if even_values.len() == 7 {\n \
    \       return vec![even_values[0], even_values[1], even_values[2], even_values[3],\
    \ even_values[4], even_values[5], even_values[6]];\n    }\n    if even_values.len()\
    \ == 8 {\n        return vec![even_values[0], even_values[1], even_values[2],\
    \ even_values[3], even_values[4], even_values[5], even_values[6], even_values[7]];\n\
    \    }\n    if even_values.len() == 9 {\n        return vec![even_values[0], even_values[1],\
    \ even_values[2], even_values[3], even_values[4], even_values[5], even_values[6],\
    \ even_values[7], even_values[8]];\n    }\n    if even_values.len() == 10 {\n\
    \        return vec![even_values[0], even_values[1], even_values[2], even_values[3],\
    \ even_values[4], even_values[5], even_values[6], even_values[7], even_values[8],\
    \ even_values[9]];\n    }\n    if even_values.len() == 11 {\n        return vec![even_values[0],\
    \ even_values[1], even_values[2], even_values[3], even_values[4], even_values[5],\
    \ even_values[6], even_values[7], even_values[8], even_values[9], even_values[10]];\n\
    \    }", "    let mut smallest_value = arr[0];\n    let mut smallest_index = 0;\n\
    \    let mut even_values = Vec::new();\n    for i in arr.iter().rev() {\n    \
    \    if i % 2 == 0 {\n            even_values.push(i);\n        }\n        if\
    \ i == smallest_value {\n            smallest_index = even_values.iter().rev().next().unwrap();\n\
    \        }\n        if i == smallest_value {\n            smallest_value = i;\n\
    \        }\n    }\n    even_values.iter().rev().next().unwrap()", "    let mut\
    \ smallest_value = arr[0];\n    let mut smallest_index = 0;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if smallest_value >= i {\n         \
    \       smallest_value = i;\n                smallest_index = i;\n           \
    \ }\n        }\n    }\n    vec![smallest_value, smallest_index]", "    let mut\
    \ min_value = i32::MAX;\n    let mut min_idx = 0;\n    let mut even_values = Vec::new();\n\
    \    for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \        }\n        if i < min_value {\n            min_value = i;\n         \
    \   min_idx = i;\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut min_even_val = i32::MAX;\n    let mut min_even_val_idx\
    \ = 0;\n    for i in even_values.iter() {\n        if i < min_even_val {\n   \
    \         min_even_val = i;\n            min_even_val_idx = i;\n        }\n  \
    \  }\n    let mut result = vec![];\n    for i in even_values.iter() {\n      \
    \  if i == min_even_val {\n            result.push(min_even_val_idx);\n      \
    \  }\n    }\n    result", "    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = -1;\n    let mut min_even_index_in_vec = -1;\n    let mut min_even_index_in_vec_vec\
    \ = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n            if min_even_index\
    \ == -1 || min_even_index > i {\n                min_even_index = i;\n       \
    \         min_even_index_in_vec = i;\n                min_even_index_in_vec_vec\
    \ = i;\n            }\n        } else {\n            if min_even_index != -1 &&\
    \ min_even_index < i {\n                min_even_index_in_vec_vec = min_even_index_in_vec;\n\
    \                min_even_index_in_vec = i;\n            }\n        }\n    }\n\
    \    if min_even_index == -1 {\n        return vec![];\n    }\n    let mut vec:\
    \ Vec<isize> = vec![];\n    for i in 0..arr.len() {\n        if i == min_even_index\
    \ {\n            vec.push(min_even_index_in_vec);\n        } else {\n        \
    \    vec.push(i);\n        }\n    }\n    return vec;", "    let mut min_value\
    \ = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev() {\n     \
    \   if i % 2 == 0 {\n            if min_value > i {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut min_val = arr[0];\n    let mut min_idx = -1;\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_val < i\
    \ {\n                min_val = i;\n                min_idx = i;\n            }\n\
    \        }\n    }\n    if min_val == arr[0] {\n        return vec![];\n    }\n\
    \    vec![min_val, min_idx]", "    let mut min_value = arr[0];\n    let mut min_idx\
    \ = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n            if min_value\
    \ == i {\n                min_idx = i;\n            } else {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    vec![min_value, min_idx]", "    let mut min_value = arr[0];\n    let\
    \ mut min_index = 0;\n    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n\
    \            if min_value < i {\n                min_value = i;\n            \
    \    min_index = i;\n            }\n        }\n    }\n    vec![min_value, min_index]",
  "    let mut min_val = arr[0];\n    let mut min_idx = -1;\n    let mut min_even_val\
    \ = false;\n    for &x in arr.iter() {\n        if x % 2 == 0 {\n            if\
    \ min_even_val {\n                min_even_val = false;\n                min_idx\
    \ = x;\n            } else {\n                min_even_val = true;\n         \
    \       min_val = x;\n            }\n        }\n    }\n    if min_even_val {\n\
    \        min_even_val = false;\n        min_idx = min_val;\n    }\n    vec![min_val,\
    \ min_idx]", "    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n   \
    \ for i in arr.iter() {\n        if i % 2 == 0 {\n            if min_val > i {\n\
    \                min_val = i;\n                min_idx = i;\n            }\n \
    \       }\n    }\n    if min_val == i32::MAX {\n        return vec![];\n    }\n\
    \    let mut ret = vec![];\n    for i in arr.iter() {\n        if i % 2 == 0 {\n\
    \            if min_val > i {\n                min_val = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    ret = vec![min_val, min_idx];\n \
    \   ret", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for\
    \ i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value <\
    \ i {\n                min_value = i;\n                min_idx = i;\n        \
    \    }\n        }\n    }\n    vec![min_value, min_idx]", "    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    for i in arr.iter().rev() {\n\
    \        if i % 2 == 0 {\n            if smallest_value < i {\n              \
    \  smallest_value = i;\n                smallest_index = i;\n            }\n \
    \       }\n    }\n    vec![smallest_value, smallest_index]", "    let mut smalest_value\
    \ = arr[0];\n    let mut smalest_index = 0;\n    for i in 1..arr.len() {\n   \
    \     if arr[i] < smalest_value {\n            smalest_value = arr[i];\n     \
    \       smalest_index = i;\n        }\n    }\n    vec![smalest_value, smalest_index]",
  "    let mut smallest_value: isize = 0;\n    let mut smallest_index: usize = 0;\n\
    \    let mut mut_smallest_value: isize = 0;\n    let mut mut_smallest_index: usize\
    \ = 0;\n    let mut mut_mut_smallest_value: isize = 0;\n    let mut mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_smallest_value: isize = 0;\n    let mut\
    \ mut_mut_mut_smallest_index: usize = 0;\n    let mut mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_smallest_index: usize = 0;\n    let\
    \ mut mut_mut_mut_mut_mut_smallest_value: isize = 0;\n    let mut mut_mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_smallest_value: isize = 0;\n\
    \    let mut mut_mut_mut_mut_mut_mut_smallest_index: usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_smallest_index: usize\
    \ = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value: isize\
    \ = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index: usize\
    \ = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mu",
  "    let mut min_value = arr[0];\n    let mut min_idx = 1;\n    let mut min_idx2\
    \ = 1;\n    let mut min_idx3 = 1;\n    let mut min_idx4 = 1;\n    let mut min_idx5\
    \ = 1;\n    let mut min_idx6 = 1;\n    let mut min_idx7 = 1;\n    let mut min_idx8\
    \ = 1;\n    let mut min_idx9 = 1;\n    let mut min_idx10 = 1;\n    let mut min_idx11\
    \ = 1;\n    let mut min_idx12 = 1;\n    let mut min_idx13 = 1;\n    let mut min_idx14\
    \ = 1;\n    let mut min_idx15 = 1;\n    let mut min_idx16 = 1;\n    let mut min_idx17\
    \ = 1;\n    let mut min_idx18 = 1;\n    let mut min_idx19 = 1;\n    let mut min_idx20\
    \ = 1;\n    let mut min_idx21 = 1;\n    let mut min_idx22 = 1;\n    let mut min_idx23\
    \ = 1;\n    let mut min_idx24 = 1;\n    let mut min_idx25 = 1;\n    let mut min_idx26\
    \ = 1;\n    let mut min_idx27 = 1;\n    let mut min_idx28 = 1;\n    let mut min_idx29\
    \ = 1;\n    let mut min_idx30 = 1;\n    let mut min_idx31 = 1;\n    let mut min_idx32\
    \ = 1;\n    let mut min_idx33 = 1;\n    let mut min_idx34 = 1;\n    let mut min_idx35\
    \ = 1;\n    let mut min_idx36 = 1;\n    let mut min_idx37 = 1;\n    let mut min_idx38\
    \ = 1;\n    let mut min_idx39 = 1;\n    let mut min_idx40 = 1;\n    let mut min_idx41\
    \ = 1;\n    let mut min_idx42 = 1;\n    let mut min_idx43 = 1;\n    let mut min_idx44\
    \ = 1;\n    let mut min_idx45 = 1;\n    let mut min_idx46 = 1;\n    let mut min_idx47\
    \ = 1;\n    let mut min_idx48 = 1;\n    let mut min_idx49 = 1;\n    let mut min_idx50\
    \ = 1;\n    let mut min_idx51 = 1;\n    let mut min_idx52 = 1;\n    let mut min_idx53\
    \ = 1;\n    let mut min_idx54 = 1;\n    let mut min_idx55 = 1;\n    let mut min_idx56\
    \ = 1;\n    let mut min_idx57 = 1;\n    let mut min_idx58 = 1;\n    let mut min_idx59\
    \ = 1;\n    let mut min_idx60 = 1;\n    let mut min_idx61 = 1;\n    let mut min_idx62\
    \ = 1;\n    let mut min_idx", "    let mut smallest_value = arr[0];\n    let mut\
    \ smallest_index = 0;\n    let mut mut_counter = 0;\n    for &i in arr {\n   \
    \     if i % 2 == 0 {\n            if smallest_value == i {\n                smallest_index\
    \ = mut_counter;\n            }\n            smallest_value = i;\n           \
    \ mut_counter = 1;\n        } else {\n            mut_counter += 1;\n        }\n\
    \    }\n    if mut_counter == 0 {\n        return vec![];\n    }\n    vec![smallest_value,\
    \ smallest_index]", "    let mut smallest_value = arr[0];\n    let mut smallest_index\
    \ = 0;\n    let mut even_values = Vec::new();\n    for &x in arr {\n        if\
    \ x % 2 == 0 {\n            even_values.push(x);\n        }\n        if x < smallest_value\
    \ {\n            smallest_value = x;\n            smallest_index = even_values.len();\n\
    \        }\n        if x == smallest_value {\n            smallest_index += even_values.len();\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    let mut smallest_even_value = even_values[0];\n    let mut smallest_even_index\
    \ = 0;\n    for &x in even_values {\n        if x < smallest_even_value {\n  \
    \          smallest_even_value = x;\n            smallest_even_index = even_values.len();\n\
    \        }\n        if x == smallest_even_value {\n            smallest_even_index\
    \ += even_values.len();\n        }\n    }\n    vec![smallest_value, smallest_index].into_iter().collect()",
  "    let mut even_values = vec![];\n    let mut smallest_value = vec![];\n    let\
    \ mut smallest_index = vec![];\n    for i in arr.iter() {\n        if i % 2 ==\
    \ 0 {\n            even_values.push(i);\n            if i < smallest_value.len()\
    \ {\n                smallest_value.push(smallest_value[i]);\n               \
    \ smallest_index.push(smallest_index[i]);\n            }\n        }\n    }\n \
    \   if even_values.len() == 0 {\n        return vec![];\n    }\n    if even_values.len()\
    \ == 1 {\n        smallest_value.push(even_values[0]);\n        smallest_index.push(0);\n\
    \        return vec![smallest_value[smallest_index.len()], smallest_index.len()];\n\
    \    }\n    let mut smallest_value_len = even_values.len();\n    for i in even_values.iter()\
    \ {\n        if i < smallest_value.len() {\n            smallest_value_len = i;\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if i < smallest_value.len()\
    \ {\n            smallest_value.push(smallest_value[i]);\n            smallest_index.push(smallest_index[i]);\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if i < smallest_value_len\
    \ {\n            smallest_value.push(even_values[i]);\n            smallest_index.push(even_values.iter().position(|&x|\
    \ x == i).unwrap());\n        }\n    }\n    smallest_value.push(even_values[smallest_value_len]);\n\
    \    smallest_index.push(even_values.iter().position(|&x| x == smallest_value_len).unwrap());\n\
    \    smallest_value", "    let mut min_value = arr[0];\n    let mut min_idx =\
    \ 0;\n    let mut min_idx = arr.iter().enumerate().min_by_key(|(_, v)| {\n   \
    \     if v < min_value {\n            min_value = v;\n            min_idx = *v;\n\
    \        }\n    });\n    min_idx", "    let mut smallest_value = arr[0];\n   \
    \ let mut smallest_index = 0;\n    for i in arr.iter().rev() {\n        if i %\
    \ 2 == 0 {\n            if smallest_value < i {\n                smallest_value\
    \ = i;\n                smallest_index = i;\n            }\n        }\n    }\n\
    \    vec![smallest_value, smallest_index]", "    let mut smallest_value: isize\
    \ = 0;\n    let mut smallest_index: usize = 0;\n    let mut smallest_even_value:\
    \ isize = 0;\n    let mut even_values: Vec<isize> = vec![];\n    for i in arr\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n            if\
    \ smallest_even_value < i {\n                smallest_even_value = i;\n      \
    \          smallest_index = i;\n            }\n        } else {\n            if\
    \ smallest_even_value < i {\n                smallest_even_value = i;\n      \
    \          smallest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    if even_values.len() == 1 {\n   \
    \     return vec![smallest_even_value];\n    }\n    if even_values.len() > 1 {\n\
    \        let mut smallest_even_value: isize = even_values[0];\n        let mut\
    \ smallest_index: usize = 0;\n        for i in even_values.iter().rev() {\n  \
    \          if i % 2 == 0 {\n                if smallest_even_value < i {\n   \
    \                 smallest_even_value = i;\n                    smallest_index\
    \ = i;\n                }\n            } else {\n                if smallest_even_value\
    \ < i {\n                    smallest_even_value = i;\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        return vec![smallest_even_value,smallest_index];\n\
    \    }", "    let mut even_values = vec![];\n    let mut smallest_value = vec![];\n\
    \    let mut smallest_index = vec![];\n    for i in arr.iter() {\n        if i\
    \ % 2 == 0 {\n            even_values.push(i);\n        }\n        if even_values.len()\
    \ == 1 {\n            smallest_value.push(even_values[0]);\n            smallest_index.push(i);\n\
    \        }\n        if even_values.len() > 1 {\n            if even_values[0]\
    \ < smallest_value[0] {\n                smallest_value.push(even_values[0]);\n\
    \                smallest_index.push(i);\n            }\n        }\n    }\n  \
    \  if even_values.len() == 0 {\n        return vec![];\n    }\n    if even_values.len()\
    \ == 1 {\n        return vec![smallest_value[0], smallest_index[0]];\n    }\n\
    \    if even_values.len() > 1 {\n        if even_values[0] < smallest_value[0]\
    \ {\n            return vec![smallest_value[0], smallest_index[0]];\n        }\n\
    \    }\n    return vec![];", "    let mut smallest_value = arr[0];\n    let mut\
    \ smallest_index = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n        \
    \    if smallest_value < i {\n                smallest_value = i;\n          \
    \      smallest_index = i;\n            }\n        }\n    }\n    vec![smallest_value,\
    \ smallest_index]", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            min_value\
    \ = i;\n            min_idx = i;\n        }\n    }\n    vec![min_value, min_idx]",
  "    let mut min_value = arr[0];\n    let mut min_index = 0;\n    for i in arr.iter().cloned()\
    \ {\n        if i % 2 == 0 {\n            if min_value % 2 == 0 {\n          \
    \      min_value = i;\n                min_index = i;\n            } else {\n\
    \                min_value = min_value + i;\n                min_index = i;\n\
    \            }\n        }\n    }\n    vec![min_value, min_index]", "    let mut\
    \ min_value = arr[0];\n    let mut min_idx = -1;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value == i {\n              \
    \  min_idx = i;\n            }\n            min_value = i;\n        }\n    }\n\
    \    vec![min_value, min_idx]", "    let mut smallest_even_value = arr[0];\n \
    \   let mut smallest_even_index = -1;\n    let mut smallest_value_index = -1;\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            if smallest_even_index\
    \ == -1 || smallest_even_index > i {\n                smallest_even_value = i;\n\
    \                smallest_even_index = i;\n            }\n        } else {\n \
    \           if smallest_value_index == -1 || smallest_value_index > i {\n    \
    \            smallest_value_index = i;\n            }\n        }\n    }\n    if\
    \ smallest_even_index == -1 {\n        return vec![];\n    }\n    let mut result\
    \ = vec![smallest_even_value];\n    if smallest_value_index != -1 {\n        result.push(smallest_value_index);\n\
    \    }\n    result", "    let mut min_val = i32::MAX;\n    let mut min_idx = -1;\n\
    \    for i in arr {\n        if i % 2 == 0 {\n            if min_val > i {\n \
    \               min_val = i;\n                min_idx = i;\n            }\n  \
    \      }\n    }\n    if min_val == i32::MAX {\n        return vec![];\n    }\n\
    \    let mut result = vec![];\n    for i in arr {\n        if i == min_val {\n\
    \            result.push(min_idx);\n        }\n    }\n    result", "    let mut\
    \ min_value = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value < i {\n               \
    \ min_value = i;\n                min_idx = i;\n            }\n        }\n   \
    \ }\n    vec![min_value, min_idx]", "    let mut min_value = arr[0];\n    let\
    \ mut min_idx = -1;\n    let mut min_idx2 = -1;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_idx2 == -1 || min_value > min_value\
    \ {\n                min_value = i;\n                min_idx = i;\n          \
    \      min_idx2 = i;\n            } else {\n                min_idx2 = i;\n  \
    \          }\n        }\n    }\n    if min_idx2 == -1 {\n        return vec![];\n\
    \    }\n    vec![min_value, min_idx2]", "    let mut min_value = arr[0];\n   \
    \ let mut min_idx = 0;\n    for &i in arr {\n        if i % 2 == 0 {\n       \
    \     if min_value > i {\n                min_value = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    vec![min_value, min_idx]", "    let\
    \ mut min_val = arr[0];\n    let mut min_idx = 0;\n    let mut min_even_val =\
    \ false;\n    for &i in arr {\n        if i % 2 == 0 {\n            if min_even_val\
    \ {\n                min_even_val = false;\n            }\n            min_even_val\
    \ = true;\n            min_val = i;\n            min_idx = i;\n        }\n   \
    \ }\n    if min_even_val {\n        min_even_val = false;\n    }\n    vec![min_val,\
    \ min_idx]", "    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = -1;\n    let mut min_even_index_in_vec = -1;\n    for i in arr.iter().cloned()\
    \ {\n        if i % 2 == 0 {\n            if min_even_index == -1 || min_even_index\
    \ > i {\n                min_even_index = i;\n                min_even_index_in_vec\
    \ = i;\n            }\n        } else {\n            if min_even_index != -1 &&\
    \ min_even_index == i {\n                min_even_index_in_vec++;\n          \
    \  }\n        }\n    }\n    if min_even_index == -1 {\n        return vec![];\n\
    \    }\n    let mut result = vec![min_even_value];\n    if min_even_index_in_vec\
    \ == 1 {\n        result.push(min_even_index);\n    }\n    result", "    let mut\
    \ smallest_value = arr[0];\n    let mut smallest_index = 0;\n    let mut even_values\
    \ = Vec::new();\n    for &value in arr {\n        if value % 2 == 0 {\n      \
    \      even_values.push(value);\n        }\n        if value < smallest_value\
    \ {\n            smallest_value = value;\n            smallest_index = even_values.iter().position(|&x|\
    \ x == smallest_value).unwrap();\n        }\n    }\n    if even_values.len() ==\
    \ 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values.iter().position(|&x| x == smallest_even_value).unwrap();\n\
    \    for &value in even_values {\n        if value < smallest_even_value {\n \
    \           smallest_even_value = value;\n            smallest_even_index = even_values.iter().position(|&x|\
    \ x == smallest_even_value).unwrap();\n        }\n    }\n    vec![smallest_value,\
    \ smallest_index]", "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value\
    \ > i {\n                min_value = i;\n                min_idx = i;\n      \
    \      }\n        }\n    }\n    vec![min_value, min_idx]", "    let mut min_val\
    \ = arr[0];\n    let mut min_idx = -1;\n    for i in arr.iter().rev() {\n    \
    \    if i % 2 == 0 {\n            if min_val < i {\n                min_val =\
    \ i;\n                min_idx = i;\n            }\n        }\n    }\n    if min_idx\
    \ == -1 {\n        return vec![];\n    }\n    vec![min_val, min_idx]", "    let\
    \ mut smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n \
    \   let mut smallest_value_index = -1;\n    for &mut value in arr.iter_mut() {\n\
    \        if value % 2 == 0 {\n            if smallest_even_index == -1 || value\
    \ < smallest_even_value\n                || smallest_even_index == value {\n \
    \               smallest_even_value = value;\n                smallest_even_index\
    \ = value;\n                smallest_value_index = arr.iter().position(|&x| x\
    \ == value);\n            }\n        } else {\n            if smallest_even_index\
    \ == -1 || value < smallest_even_value\n                || smallest_even_index\
    \ == value {\n                smallest_even_value = value;\n                smallest_even_index\
    \ = value;\n            }\n        }\n    }\n    if smallest_even_index == -1\
    \ {\n        return vec![];\n    }\n    let mut result = vec![smallest_even_value];\n\
    \    result[smallest_value_index] = smallest_even_index;\n    result", "    let\
    \ mut smallest_value: isize = 0;\n    let mut smallest_index: usize = 0;\n   \
    \ let mut even_values: Vec<isize> = Vec::new();\n    for &i in arr {\n       \
    \ if i % 2 == 0 {\n            even_values.push(i);\n        }\n        if i ==\
    \ smallest_value {\n            smallest_index = arr.iter().position(|&i| i ==\
    \ i).unwrap();\n        }\n        if i == smallest_value {\n            smallest_value\
    \ = i;\n        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n\
    \    }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    if even_values.len() == 2 {\n        return vec![even_values[0], even_values[1]];\n\
    \    }\n    if even_values.len() == 3 {\n        return vec![even_values[0], even_values[1],\
    \ even_values[2]];\n    }\n    if even_values.len() == 4 {\n        return vec![even_values[0],\
    \ even_values[1], even_values[2], even_values[3]];\n    }\n    if even_values.len()\
    \ == 5 {\n        return vec![even_values[0], even_values[1], even_values[2],\
    \ even_values[3], even_values[4]];\n    }\n    if even_values.len() == 6 {\n \
    \       return vec![even_values[0], even_values[1], even_values[2], even_values[3],\
    \ even_values[4], even_values[5]];\n    }\n    if even_values.len() == 7 {\n \
    \       return vec![even_values[0], even_values[1], even_values[2], even_values[3],\
    \ even_values[4], even_values[5], even_values[6]];\n    }\n    if even_values.len()\
    \ == 8 {\n        return vec![even_values[0], even_values[1], even_values[2],\
    \ even_values[3], even_values[4], even_values[5], even_values[6], even_values[7]];\n\
    \    }\n    if even_values.len() == 9 {\n        return vec![even_values[0], even_values[1],\
    \ even_values[2], even_values[3], even_values[4], even_values[5], even_values[6],\
    \ even_values[7], even_values[8]];\n    }\n    if even_values.len() == 10 {\n\
    \        return vec![even_values[0], even_values[1], even_values[2], even_values[3],\
    \ even_values[4], even_values[5], even_values[6], even_values[7], even_values[8],\
    \ even_values[9]];\n    }\n    if even_values.len() == 11 {\n        return vec![even_values[0],\
    \ even_values[1], even_values[2], even_values[3], even_values[4], even_values[5],\
    \ even_values[6], even_values[7], ", "    let mut min_value = arr[0];\n    let\
    \ mut min_idx = -1;\n    for &i in arr {\n        if i % 2 == 0 {\n          \
    \  if min_value >= i {\n                min_value = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    if min_value == arr[0] {\n      \
    \  vec![]\n    } else {\n        vec![min_value, min_idx]\n    }", "    let mut\
    \ smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n    let\
    \ mut smallest_even_index_value = arr[0];\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_value = arr[0];\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_value = arr[0];\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_value = arr[0];\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_value = arr[0];\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_value = arr[0];\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_value = arr[0];\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_value = arr[0];\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_value = arr[0];\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_value = arr[0];\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_value = arr[0];\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_value = arr[0];\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_value = arr[0];\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_value = arr[0];\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_value = arr[0];\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_value = arr[0];\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_value = arr[0];\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_value = arr[0];\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_value = arr[0];\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_value = arr[0];\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_value = arr[0];\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_value = arr[0];\n    let mut smallest_even_index_value\
    \ = arr[0];\n    let mut smallest_even_index_value = arr", "    let mut min_even_value\
    \ = arr[0];\n    let mut min_even_index = 0;\n    let mut min_even_index_in_arr\
    \ = 0;\n    let mut min_even_index_in_arr2 = 0;\n    let mut min_even_index_in_arr3\
    \ = 0;\n    let mut min_even_index_in_arr4 = 0;\n    let mut min_even_index_in_arr5\
    \ = 0;\n    let mut min_even_index_in_arr6 = 0;\n    let mut min_even_index_in_arr7\
    \ = 0;\n    let mut min_even_index_in_arr8 = 0;\n    let mut min_even_index_in_arr9\
    \ = 0;\n    let mut min_even_index_in_arr10 = 0;\n    let mut min_even_index_in_arr11\
    \ = 0;\n    let mut min_even_index_in_arr12 = 0;\n    let mut min_even_index_in_arr13\
    \ = 0;\n    let mut min_even_index_in_arr14 = 0;\n    let mut min_even_index_in_arr15\
    \ = 0;\n    let mut min_even_index_in_arr16 = 0;\n    let mut min_even_index_in_arr17\
    \ = 0;\n    let mut min_even_index_in_arr18 = 0;\n    let mut min_even_index_in_arr19\
    \ = 0;\n    let mut min_even_index_in_arr20 = 0;\n    let mut min_even_index_in_arr21\
    \ = 0;\n    let mut min_even_index_in_arr22 = 0;\n    let mut min_even_index_in_arr23\
    \ = 0;\n    let mut min_even_index_in_arr24 = 0;\n    let mut min_even_index_in_arr25\
    \ = 0;\n    let mut min_even_index_in_arr26 = 0;\n    let mut min_even_index_in_arr27\
    \ = 0;\n    let mut min_even_index_in_arr28 = 0;\n    let mut min_even_index_in_arr29\
    \ = 0;\n    let mut min_even_index_in_arr30 = 0;\n    let mut min_even_index_in_arr31\
    \ = 0;\n    let mut min_even_index_in_arr32 = 0;\n    let mut min_even_index_in_arr33\
    \ = 0;\n    let mut min_even_index_in_arr34 = 0;\n    let mut min_even_index_in_arr35\
    \ = 0;\n    let mut min_even_index_in_arr36 = 0;\n    let mut min_even_index_in_arr37\
    \ = 0;\n    let mut min_even_index_in_arr38 = 0;\n    let mut min_even_index_in_arr39\
    \ = 0;\n    let mut min_even_index_in_arr40 = 0;\n    let mut min_even_index_in_arr41\
    \ = 0;\n    let mut min_even_index_in_arr42 = 0;\n    let mut min_even_index_in_arr43\
    \ = 0;\n    let mut min_even_index_in_arr44 = 0;\n    let mut min_even_index_in_arr45\
    \ = 0;\n    let mut min_even", "    let mut min_even_value = arr[0];\n    let\
    \ mut min_even_index = -1;\n    let mut min_even_index_in_arr = -1;\n    let mut\
    \ min_even_index_in_arr2 = -1;\n    let mut min_even_index_in_arr3 = -1;\n   \
    \ let mut min_even_index_in_arr4 = -1;\n    let mut min_even_index_in_arr5 = -1;\n\
    \    let mut min_even_index_in_arr6 = -1;\n    let mut min_even_index_in_arr7\
    \ = -1;\n    let mut min_even_index_in_arr8 = -1;\n    let mut min_even_index_in_arr9\
    \ = -1;\n    let mut min_even_index_in_arr10 = -1;\n    let mut min_even_index_in_arr11\
    \ = -1;\n    let mut min_even_index_in_arr12 = -1;\n    let mut min_even_index_in_arr13\
    \ = -1;\n    let mut min_even_index_in_arr14 = -1;\n    let mut min_even_index_in_arr15\
    \ = -1;\n    let mut min_even_index_in_arr16 = -1;\n    let mut min_even_index_in_arr17\
    \ = -1;\n    let mut min_even_index_in_arr18 = -1;\n    let mut min_even_index_in_arr19\
    \ = -1;\n    let mut min_even_index_in_arr20 = -1;\n    let mut min_even_index_in_arr21\
    \ = -1;\n    let mut min_even_index_in_arr22 = -1;\n    let mut min_even_index_in_arr23\
    \ = -1;\n    let mut min_even_index_in_arr24 = -1;\n    let mut min_even_index_in_arr25\
    \ = -1;\n    let mut min_even_index_in_arr26 = -1;\n    let mut min_even_index_in_arr27\
    \ = -1;\n    let mut min_even_index_in_arr28 = -1;\n    let mut min_even_index_in_arr29\
    \ = -1;\n    let mut min_even_index_in_arr30 = -1;\n    let mut min_even_index_in_arr31\
    \ = -1;\n    let mut min_even_index_in_arr32 = -1;\n    let mut min_even_index_in_arr33\
    \ = -1;\n    let mut min_even_index_in_arr34 = -1;\n    let mut min_even_index_in_arr35\
    \ = -1;\n    let mut min_even_index_in_arr36 = -1;\n    let mut min_even_index_in_arr37\
    \ = -1;\n    let mut min_even_index_in_arr38 = -1;\n    let mut min_even_index_in_arr39\
    \ = -1;\n    let mut min_even_index_in_arr40 = -1;\n    let mut min_even_index_in_arr41\
    \ = -1;\n    let mut min_even_index_in_arr42 = -1;\n    let mut min_", "    let\
    \ mut min_value = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx = arr.iter().enumerate().min_by_key(|(_,\
    \ v)| {\n        if v < min_value {\n            min_value = v;\n            min_idx\
    \ = v;\n        }\n    });\n    vec![min_value, min_idx]", "    let mut min_value\
    \ = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx = arr.iter().enumerate().min_by_key(|(_,\
    \ v)| {\n        if v < min_value {\n            min_value = v;\n            min_idx\
    \ = _;\n        }\n        v\n    });\n    min_idx\n        .unwrap()\n      \
    \  .1\n        .clone()\n        .unwrap()", "    let mut smalest_value = arr[0];\n\
    \    let mut smalest_index = 0;\n    let mut even_values = Vec::new();\n    for\
    \ i in arr.iter().cloned() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \        }\n        if i == smalest_value {\n            smalest_index = even_values.iter().enumerate().min_by_key(|(_,\
    \ v)| v).unwrap().0;\n        }\n        if i == smalest_value {\n           \
    \ smalest_value = i;\n        }\n    }\n    if even_values.len() == 0 {\n    \
    \    return vec![];\n    }\n    even_values[smalest_index];", "    let mut min_value\
    \ = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx2 = 0;\n    let mut\
    \ min_idx3 = 0;\n    let mut min_idx4 = 0;\n    let mut min_idx5 = 0;\n    let\
    \ mut min_idx6 = 0;\n    let mut min_idx7 = 0;\n    let mut min_idx8 = 0;\n  \
    \  let mut min_idx9 = 0;\n    let mut min_idx10 = 0;\n    let mut min_idx11 =\
    \ 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13 = 0;\n    let mut min_idx14\
    \ = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16 = 0;\n    let mut min_idx17\
    \ = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19 = 0;\n    let mut min_idx20\
    \ = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22 = 0;\n    let mut min_idx23\
    \ = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25 = 0;\n    let mut min_idx26\
    \ = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28 = 0;\n    let mut min_idx29\
    \ = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31 = 0;\n    let mut min_idx32\
    \ = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34 = 0;\n    let mut min_idx35\
    \ = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37 = 0;\n    let mut min_idx38\
    \ = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40 = 0;\n    let mut min_idx41\
    \ = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43 = 0;\n    let mut min_idx44\
    \ = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46 = 0;\n    let mut min_idx47\
    \ = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49 = 0;\n    let mut min_idx50\
    \ = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52 = 0;\n    let mut min_idx53\
    \ = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55 = 0;\n    let mut min_idx56\
    \ = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58 = 0;\n    let mut min_idx59\
    \ = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61 = 0;\n    let mut min_idx62\
    \ = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx", "    let mut smallest_value:\
    \ isize = 0;\n    let mut smallest_index: usize = 0;\n    let mut smallest_even_value:\
    \ isize = 0;\n    let mut even_values: Vec<isize> = vec![];\n    for i in arr\
    \ {\n        if i % 2 == 0 {\n            even_values.push(i);\n        }\n  \
    \      if i == smallest_value {\n            smallest_even_value = i;\n      \
    \  }\n        if i == smallest_value {\n            smallest_index = i;\n    \
    \    }\n        if i == smallest_value {\n            smallest_value = i;\n  \
    \      }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n   \
    \ }\n    if even_values.len() == 1 {\n        return vec![smallest_even_value];\n\
    \    }\n    if even_values.len() == 2 {\n        if even_values[0] < even_values[1]\
    \ {\n            return vec![even_values[0], smallest_index];\n        }\n   \
    \     return vec![even_values[1], smallest_index];\n    }\n    if even_values.len()\
    \ == 3 {\n        if even_values[0] < even_values[1] {\n            if even_values[0]\
    \ < even_values[2] {\n                return vec![even_values[0], even_values[1],\
    \ smallest_index];\n            }\n            return vec![even_values[1], even_values[2],\
    \ smallest_index];\n        }\n        if even_values[1] < even_values[2] {\n\
    \            return vec![even_values[0], even_values[1], smallest_index];\n  \
    \      }\n        return vec![even_values[0], even_values[2], smallest_index];\n\
    \    }\n    if even_values.len() == 4 {\n        if even_values[0] < even_values[1]\
    \ {\n            if even_values[0] < even_values[2] {\n                if even_values[0]\
    \ < even_values[3] {\n                    return vec![even_values[0], even_values[1],\
    \ even_values[2], smallest_index];\n                }\n                return\
    \ vec![even_values[0], even_values[1], even_values[3], smallest_index];\n    \
    \        }\n            if even_values[1] < even_values[2] {\n               \
    \ return vec![even_values[0], even_values[1], even_values[2], smallest_index];\n\
    \            }\n            return vec![even_values[0], even_values[2], even_values[3],\
    \ smallest_index];\n        }\n        if even_values[1] < even_values[2] {\n\
    \            if even_values[1] < even_values[3] {\n                return vec![even_values[0],\
    \ even_values[1], even_values[2], even_values[3], smallest_index];\n         \
    \   }\n            return vec![even_values[0], even_values[1], even_values[3],\
    \ even_values[4], smallest_index];\n        }\n        if even_values[2] < even_values[3]\
    \ {\n            return vec![even_values[0], even_values[1], even", "    let mut\
    \ smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n    let\
    \ mut smallest_index = -1;\n    let mut smallest_value = arr[0];\n    for &x in\
    \ arr.iter() {\n        if x % 2 == 0 {\n            if smallest_even_value <\
    \ x {\n                smallest_even_value = x;\n                smallest_even_index\
    \ = smallest_index;\n            }\n            smallest_value = x;\n        \
    \    smallest_index = x;\n        }\n    }\n    if smallest_even_value == 0 {\n\
    \        return vec![];\n    }\n    let mut result = vec![smallest_even_value];\n\
    \    if smallest_even_index != -1 {\n        result.push(smallest_even_index);\n\
    \    }\n    if smallest_index != -1 {\n        result.push(smallest_index);\n\
    \    }\n    result", "    let mut min_even_value = arr[0];\n    let mut min_even_index\
    \ = 0;\n    let mut min_even_index_in_arr = 0;\n    let mut min_even_index_in_arr_with_min_even_value\
    \ = 0;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr = 0;\n  \
    \  let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value\
    \ = 0;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr\
    \ = 0;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value\
    \ = 0;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr\
    \ = 0;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value\
    \ = 0;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr\
    \ = 0;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value\
    \ = 0;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr\
    \ = 0;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value\
    \ = 0;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr\
    \ = 0;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value\
    \ = 0;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value_in_arr_with_min_even_value\
    \ = 0;\n    let mut min_even_index_in_arr_with_min_even_value_in_arr_with_min_even_value_in_",
  "    let mut smalest_value = arr[0];\n    let mut smallest_index = 0;\n    let mut\
    \ smallest_even_value = false;\n    for &mut i in arr.iter_mut() {\n        if\
    \ i % 2 == 0 {\n            if smallest_even_value\n                || (smallest_even_value\
    \ = true)\n                || (smallest_index = i) {\n                smalest_value\
    \ = i;\n            }\n        } else {\n            smallest_even_value = false;\n\
    \        }\n    }\n    vec![smalest_value, smallest_index]", "    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    let mut even_values = Vec::new();\n\
    \    for &i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \        }\n        if i == smallest_value {\n            smallest_index = i;\n\
    \        }\n        if i == smallest_value {\n            smallest_value = i;\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    even_values.sort();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_values.dedup();\n    even_values.dedup();\n\
    \    even_values.dedup();\n    even_value", "    let mut smallest_value: isize\
    \ = 0;\n    let mut smallest_index: usize = 0;\n    let mut mut_smallest_value:\
    \ isize = 0;\n    let mut mut_smallest_index: usize = 0;\n    let mut mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_smallest_index: usize = 0;\n    let mut mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_smallest_index: usize = 0;\n    let mut\
    \ mut_mut_mut_mut_smallest_value: isize = 0;\n    let mut mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_smallest_value: isize = 0;\n   \
    \ let mut mut_mut_mut_mut_mut_smallest_index: usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_smallest_index: usize = 0;\n\
    \    let mut mut_mut_mut_mut_mut_mut_mut_smallest_value: isize = 0;\n    let mut\
    \ mut_mut_mut_mut_mut_mut_mut_mut_smallest_index: usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mu",
  "    let mut smallest_value: isize = 0;\n    let mut smallest_index: usize = 0;\n\
    \    let mut even_values = vec![];\n    let mut even_values_index: Vec<usize>\
    \ = vec![];\n    for i in arr {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            even_values_index.push(i);\n        } else {\n            if smallest_value\
    \ == 0 {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            } else {\n                if i < smallest_value {\n      \
    \              smallest_value = i;\n                    smallest_index = i;\n\
    \                }\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_value_index = even_values_index[0];\n    for i in even_values_index\
    \ {\n        if i < smallest_even_value_index {\n            smallest_even_value\
    \ = even_values[i];\n            smallest_even_value_index = i;\n        }\n \
    \   }\n    vec![smallest_value, smallest_even_value_index]", "    let mut min_value\
    \ = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev() {\n     \
    \   if i % 2 == 0 {\n            if min_value < i {\n                min_value\
    \ = i;\n                min_idx = i;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index\
    \ = -1;\n    let mut smallest_value_index = -1;\n    for &i in arr {\n       \
    \ if i % 2 == 0 {\n            if smallest_even_index == -1 || smallest_even_index\
    \ > i {\n                smallest_even_value = i;\n                smallest_even_index\
    \ = i;\n                smallest_value_index = i;\n            } else {\n    \
    \            if smallest_value_index == -1 || smallest_value_index > i {\n   \
    \                 smallest_value_index = i;\n                }\n            }\n\
    \        }\n    }\n    vec![smallest_even_index, smallest_value_index]", "   \
    \ let mut min_value = arr[0];\n    let mut min_idx = 0;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value == i {\n              \
    \  min_idx = i;\n            } else {\n                min_value = i;\n      \
    \          min_idx = i;\n            }\n        }\n    }\n    vec![min_value,\
    \ min_idx]", "    let mut even_values = vec![];\n    let mut min_value = i32::MAX;\n\
    \    let mut min_value_index = -1;\n    for &i in arr {\n        if i % 2 == 0\
    \ {\n            even_values.push(i);\n            if i < min_value {\n      \
    \          min_value = i;\n                min_value_index = i;\n            }\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    let mut even_values_sorted = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    even_values_sorted.sort();\n    let mut even_values_sorted_index = even_values.iter().cloned().collect::<Vec<_>>();\n\
    \    even_values_sorted_index.sort();\n    let mut min_value_index = -1;\n   \
    \ for i in even_values_sorted_index {\n        if i == min_value_index {\n   \
    \         continue;\n        }\n        if min_value_index == -1 || i < min_value_index\
    \ {\n            min_value_index = i;\n        }\n    }\n    if min_value_index\
    \ == -1 {\n        return vec![];\n    }\n    let mut min_value = even_values_sorted[min_value_index];\n\
    \    for i in even_values_sorted_index {\n        if i == min_value_index {\n\
    \            continue;\n        }\n        if min_value % 2 == 0 {\n         \
    \   min_value = i;\n        }\n    }\n    let mut min_value_index = -1;\n    for\
    \ i in even_values_sorted_index {\n        if i == min_value_index {\n       \
    \     continue;\n        }\n        if min_value_index == -1 || i < min_value_index\
    \ {\n            min_value_index = i;\n        }\n    }\n    if min_value_index\
    \ == -1 {\n        return vec![];\n    }\n    let mut min_value = even_values_sorted[min_value_index];\n\
    \    for i in even_values_sorted_index {\n        if i == min_value_index {\n\
    \            continue;\n        }\n        if min_value % 2 == 0 {\n         \
    \   min_value = i;\n        }\n    }\n    let mut min_value_index = -1;\n    for\
    \ i in even_values_sorted_index {\n        if i == min_value_index {\n       \
    \     continue;\n        }\n        if min_value_index == -1 || i < min_value_index\
    \ {\n            min_value_index = i;\n        }\n    }\n    if min_value_index\
    \ == -1 {\n        return vec![];\n    }\n    let mut min_value = even_values_sorted[min_value_index];\n\
    \    for i in even_values_sorted_index {\n        if i == min_value_index {\n\
    \            continue;\n        }\n        if min_value % 2 == 0 {\n         \
    \   min_value = i;\n        }\n    }\n    let mut ", "    let mut smallest_value\
    \ = arr[0];\n    let mut smallest_index = 0;\n    let mut smallest_even_value\
    \ = false;\n    for &mut value in arr.iter_mut() {\n        if value == 0 {\n\
    \            smallest_even_value = true;\n        }\n        if smallest_even_value\n\
    \            && smallest_value > 0\n            && value < smallest_value\n  \
    \      {\n            smallest_even_value = false;\n            smallest_value\
    \ = value;\n            smallest_index = arr.iter().position(|&x| x == value);\n\
    \        }\n    }\n    if smallest_even_value\n        && smallest_value > 0\n\
    \        && smallest_index == 0\n    {\n        smallest_index = 1;\n    }\n \
    \   vec![smallest_value, smallest_index]", "    let mut smallest_value = arr[0];\n\
    \    let mut smallest_index = 0;\n    let mut even_values = Vec::new();\n    for\
    \ i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \        }\n        if i == smallest_value {\n            smallest_index = i;\n\
    \        }\n        if i == smallest_value {\n            smallest_value = i;\n\
    \        }\n    }\n    if even_values.len() == 0 {\n        return vec![];\n \
    \   }\n    if even_values.len() == 1 {\n        return vec![even_values[0]];\n\
    \    }\n    if even_values.len() > 1 {\n        let mut smallest_even_value =\
    \ even_values[0];\n        let mut smallest_even_index = 0;\n        for i in\
    \ even_values.iter() {\n            if i < smallest_even_value {\n           \
    \     smallest_even_value = i;\n                smallest_even_index = i;\n   \
    \         }\n        }\n        return vec![smallest_even_index, smallest_even_value];\n\
    \    }\n    return vec![];", "    let mut min_value = arr[0];\n    let mut min_idx\
    \ = -1;\n    let mut min_idx2 = -1;\n    for i in arr.iter().rev() {\n       \
    \ if i % 2 == 0 {\n            if min_value == i {\n                min_idx2 =\
    \ min_idx;\n            }\n            min_idx = i;\n            min_value = i;\n\
    \        } else {\n            if min_value == i {\n                min_idx2 =\
    \ min_idx;\n            }\n        }\n    }\n    if min_idx2 == -1 {\n       \
    \ return vec![];\n    }\n    let mut min_idx3 = -1;\n    for i in arr.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            if min_value == i {\n              \
    \  min_idx3 = min_idx2;\n            }\n            min_idx2 = min_idx;\n    \
    \        min_idx = i;\n            min_value = i;\n        } else {\n        \
    \    if min_value == i {\n                min_idx3 = min_idx2;\n            }\n\
    \        }\n    }\n    if min_idx3 == -1 {\n        return vec![];\n    }\n  \
    \  let mut min_idx4 = -1;\n    for i in arr.iter().rev() {\n        if i % 2 ==\
    \ 0 {\n            if min_value == i {\n                min_idx4 = min_idx3;\n\
    \            }\n            min_idx3 = min_idx;\n            min_idx = i;\n  \
    \          min_value = i;\n        } else {\n            if min_value == i {\n\
    \                min_idx4 = min_idx3;\n            }\n        }\n    }\n    if\
    \ min_idx4 == -1 {\n        return vec![];\n    }\n    let mut min_idx5 = -1;\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value\
    \ == i {\n                min_idx5 = min_idx4;\n            }\n            min_idx4\
    \ = min_idx;\n            min_idx = i;\n            min_value = i;\n        }\
    \ else {\n            if min_value == i {\n                min_idx5 = min_idx4;\n\
    \            }\n        }\n    }\n    if min_idx5 == -1 {\n        return vec![];\n\
    \    }\n    let mut min_idx6 = -1;\n    for i in arr.iter().rev() {\n        if\
    \ i % 2 == 0 {\n            if min_value == i {\n                min_idx6 = min_idx5;\n\
    \            }\n            min_idx5 = min_idx;\n            min_idx = i;\n  \
    \          min_value = i;\n        } else {\n            if min_value == i {\n\
    \                min_idx6 = min_idx5;\n            }\n        }\n    }\n    if\
    \ min_idx6 == -1 {\n        return vec![];\n    }\n    let mut min_idx7 = -1;\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            if min_value\
    \ == i {\n                min_idx7 = min_idx6;\n            }\n            min_idx6\
    \ = min_idx;\n            min_idx = i;\n            min_value = i;\n        }\
    \ else {\n            if min_value == i {\n                min_idx7 = min_idx6;\n\
    \            }\n        }\n", "    let mut smallest_value: isize = 0;\n    let\
    \ mut smallest_index: usize = 0;\n    let mut mut_smallest_value: isize = 0;\n\
    \    let mut mut_smallest_index: usize = 0;\n    let mut mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_smallest_index: usize = 0;\n    let mut mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_smallest_index: usize = 0;\n    let mut\
    \ mut_mut_mut_mut_smallest_value: isize = 0;\n    let mut mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_smallest_value: isize = 0;\n   \
    \ let mut mut_mut_mut_mut_mut_smallest_index: usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_smallest_index: usize = 0;\n\
    \    let mut mut_mut_mut_mut_mut_mut_mut_smallest_value: isize = 0;\n    let mut\
    \ mut_mut_mut_mut_mut_mut_mut_mut_smallest_index: usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_value:\
    \ isize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_smallest_index:\
    \ usize = 0;\n    let mut mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mut_mu",
  "    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index = -1;\n\
    \    let mut smallest_index = -1;\n    for i in arr.iter().rev() {\n        if\
    \ i % 2 == 0 {\n            if smallest_even_index == -1 || smallest_even_index\
    \ > i {\n                smallest_even_index = i;\n                smallest_even_value\
    \ = arr[i];\n            }\n        } else {\n            if smallest_index ==\
    \ -1 || smallest_index > i {\n                smallest_index = i;\n          \
    \  }\n        }\n    }\n    smallest_even_index\n        .iter()\n        .cloned()\n\
    \        .filter(|&x| x % 2 == 0)\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()\n        .cloned()\n    \
    \    .cloned()\n        .cloned()\n        .cloned()", "    let mut min_value\
    \ = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx2 = 0;\n    for &i in\
    \ arr {\n        if i % 2 == 0 {\n            if min_value == i {\n          \
    \      min_idx2 = min_idx;\n            } else {\n                min_value =\
    \ i;\n                min_idx = i;\n                min_idx2 = i;\n          \
    \  }\n        }\n    }\n    if min_idx2 == min_idx {\n        min_idx2 = min_idx;\n\
    \    }\n    vec![min_value, min_idx2]", "    let mut even_values = vec![];\n \
    \   let mut smallest_value = vec![];\n    let mut smallest_index = vec![];\n \
    \   for i in arr.iter() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smallest_value.len() {\n                smallest_value[i]\
    \ = i;\n                smallest_index[i] = i;\n            } else {\n       \
    \         smallest_value[i] = i;\n                smallest_index[i] = i;\n   \
    \         }\n        }\n    }\n    if even_values.len() == 0 {\n        return\
    \ vec![];\n    }\n    for i in even_values.iter() {\n        if smallest_value[i]\
    \ < i {\n            smallest_value[i] = i;\n            smallest_index[i] = i;\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if smallest_value[i]\
    \ == i {\n            smallest_index[i] = i;\n        }\n    }\n    for i in even_values.iter()\
    \ {\n        if smallest_value[i] < i {\n            smallest_value[i] = i;\n\
    \            smallest_index[i] = i;\n        }\n    }\n    for i in even_values.iter()\
    \ {\n        if smallest_value[i] == i {\n            smallest_index[i] = i;\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if smallest_value[i]\
    \ < i {\n            smallest_value[i] = i;\n            smallest_index[i] = i;\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if smallest_value[i]\
    \ == i {\n            smallest_index[i] = i;\n        }\n    }\n    for i in even_values.iter()\
    \ {\n        if smallest_value[i] < i {\n            smallest_value[i] = i;\n\
    \            smallest_index[i] = i;\n        }\n    }\n    for i in even_values.iter()\
    \ {\n        if smallest_value[i] == i {\n            smallest_index[i] = i;\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if smallest_value[i]\
    \ < i {\n            smallest_value[i] = i;\n            smallest_index[i] = i;\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if smallest_value[i]\
    \ == i {\n            smallest_index[i] = i;\n        }\n    }\n    for i in even_values.iter()\
    \ {\n        if smallest_value[i] < i {\n            smallest_value[i] = i;\n\
    \            smallest_index[i] = i;\n        }\n    }\n    for i in even_values.iter()\
    \ {\n        if smallest_value[i] == i {\n            smallest_index[i] = i;\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if smallest_value[i]\
    \ < i {\n            smallest_value[i] = i;\n            smallest_index[i] = i;\n\
    \        }\n    }\n    for i in even_values.iter() {\n        if smallest_value[i]\
    \ == i ", "    let mut smallest_even_value = arr[0];\n    let mut smallest_even_index\
    \ = -1;\n    let mut smallest_index = -1;\n    for i in arr.iter().rev() {\n \
    \       if i % 2 == 0 {\n            if smallest_even_index == -1 || smallest_even_index\
    \ > i {\n                smallest_even_index = i;\n                smallest_even_value\
    \ = arr[i];\n            }\n        } else {\n            if smallest_index ==\
    \ -1 || smallest_index > i {\n                smallest_index = i;\n          \
    \  }\n        }\n    }\n    if smallest_even_index == -1 {\n        return vec![];\n\
    \    }\n    vec![smallest_even_index, smallest_even_value]", "    let mut min_val\
    \ = std::i32::MAX;\n    let mut min_idx = -1;\n    for i in arr.iter() {\n   \
    \     if *i % 2 == 0 {\n            if *i < min_val {\n                min_val\
    \ = *i;\n                min_idx = i;\n            }\n        }\n    }\n    vec![min_val,\
    \ min_idx]", "    let mut min_val = arr[0];\n    let mut min_idx = -1;\n    let\
    \ mut min_even_val = false;\n    for i in arr.iter().cloned() {\n        if i\
    \ % 2 == 0 {\n            if min_even_val {\n                min_even_val = false;\n\
    \                min_idx = i;\n            } else {\n                min_even_val\
    \ = true;\n                min_val = i;\n            }\n        } else {\n   \
    \         min_even_val = false;\n            min_idx = -1;\n            min_val\
    \ = i;\n        }\n    }\n    if min_even_val {\n        min_even_val = false;\n\
    \        min_idx = min_val;\n    } else {\n        min_even_val = true;\n    \
    \    min_idx = -1;\n        min_val = min_val;\n    }\n    vec![min_val, min_idx]",
  "    let mut min_value = arr[0];\n    let mut min_idx = 0;\n    let mut min_idx2\
    \ = 0;\n    let mut min_idx3 = 0;\n    let mut min_idx4 = 0;\n    let mut min_idx5\
    \ = 0;\n    let mut min_idx6 = 0;\n    let mut min_idx7 = 0;\n    let mut min_idx8\
    \ = 0;\n    let mut min_idx9 = 0;\n    let mut min_idx10 = 0;\n    let mut min_idx11\
    \ = 0;\n    let mut min_idx12 = 0;\n    let mut min_idx13 = 0;\n    let mut min_idx14\
    \ = 0;\n    let mut min_idx15 = 0;\n    let mut min_idx16 = 0;\n    let mut min_idx17\
    \ = 0;\n    let mut min_idx18 = 0;\n    let mut min_idx19 = 0;\n    let mut min_idx20\
    \ = 0;\n    let mut min_idx21 = 0;\n    let mut min_idx22 = 0;\n    let mut min_idx23\
    \ = 0;\n    let mut min_idx24 = 0;\n    let mut min_idx25 = 0;\n    let mut min_idx26\
    \ = 0;\n    let mut min_idx27 = 0;\n    let mut min_idx28 = 0;\n    let mut min_idx29\
    \ = 0;\n    let mut min_idx30 = 0;\n    let mut min_idx31 = 0;\n    let mut min_idx32\
    \ = 0;\n    let mut min_idx33 = 0;\n    let mut min_idx34 = 0;\n    let mut min_idx35\
    \ = 0;\n    let mut min_idx36 = 0;\n    let mut min_idx37 = 0;\n    let mut min_idx38\
    \ = 0;\n    let mut min_idx39 = 0;\n    let mut min_idx40 = 0;\n    let mut min_idx41\
    \ = 0;\n    let mut min_idx42 = 0;\n    let mut min_idx43 = 0;\n    let mut min_idx44\
    \ = 0;\n    let mut min_idx45 = 0;\n    let mut min_idx46 = 0;\n    let mut min_idx47\
    \ = 0;\n    let mut min_idx48 = 0;\n    let mut min_idx49 = 0;\n    let mut min_idx50\
    \ = 0;\n    let mut min_idx51 = 0;\n    let mut min_idx52 = 0;\n    let mut min_idx53\
    \ = 0;\n    let mut min_idx54 = 0;\n    let mut min_idx55 = 0;\n    let mut min_idx56\
    \ = 0;\n    let mut min_idx57 = 0;\n    let mut min_idx58 = 0;\n    let mut min_idx59\
    \ = 0;\n    let mut min_idx60 = 0;\n    let mut min_idx61 = 0;\n    let mut min_idx62\
    \ = 0;\n    let mut min_idx63 = 0;\n    let mut min_idx", "    let mut smalest_value\
    \ = arr[0];\n    let mut smalest_index = 0;\n    let mut even_values = Vec::new();\n\
    \    for i in arr.iter().rev() {\n        if i % 2 == 0 {\n            even_values.push(i);\n\
    \            if i < smalest_value {\n                smalest_value = i;\n    \
    \            smalest_index = i;\n            }\n        }\n    }\n    if even_values.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut smallest_even_value = even_values[0];\n\
    \    let mut smallest_even_index = even_values[0];\n    for i in even_values.iter().rev()\
    \ {\n        if i < smallest_even_value {\n            smallest_even_value = i;\n\
    \            smallest_even_index = i;\n        }\n    }\n    let mut result =\
    \ vec![];\n    for i in even_values.iter().rev() {\n        if i == smallest_even_value\
    \ {\n            result.push(i);\n        }\n    }\n    if result.len() == 0 {\n\
    \        return vec![];\n    }\n    result.push(smallest_even_index);\n    result",
  "    let mut smallest_value: isize = 0;\n    let mut smallest_index: usize = 0;\n\
    \    let mut even_value_count: usize = 0;\n    let mut even_values: Vec<isize>\
    \ = Vec::new();\n    for &node in &arr {\n        if node.value % 2 == 0 {\n \
    \           even_values.push(node.value);\n            even_value_count = even_values.len();\n\
    \        }\n        if node.value < smallest_value {\n            smallest_value\
    \ = node.value;\n            smallest_index = even_values.iter().position(|&x|\
    \ x == node.value).unwrap();\n        }\n    }\n    if even_values.len() == 0\
    \ {\n        return vec![];\n    }\n    if even_values.len() == 1 {\n        return\
    \ vec![even_values[0]];\n    }\n    if even_values.len() > 1 {\n        let mut\
    \ smallest_even_value = even_values[0];\n        let mut smallest_even_index =\
    \ even_values.iter().position(|&x| x == smallest_even_value).unwrap();\n     \
    \   for &node in &arr {\n            if node.value % 2 == 0 {\n              \
    \  if node.value < smallest_even_value {\n                    smallest_even_value\
    \ = node.value;\n                    smallest_even_index = even_values.iter().position(|&x|\
    \ x == node.value).unwrap();\n                }\n            }\n        }\n  \
    \      return vec![smallest_even_value];\n    }", "    let mut min_val = i32::MAX;\n\
    \    let mut min_idx = -1;\n    for i in arr.iter() {\n        if i % 2 == 0 {\n\
    \            if min_val < i {\n                min_val = i;\n                min_idx\
    \ = i;\n            }\n        }\n    }\n    if min_val == i32::MAX {\n      \
    \  return vec![];\n    }\n    let mut result = vec![];\n    for i in arr.iter()\
    \ {\n        if i == min_val {\n            result.push(min_idx);\n        }\n\
    \    }\n    result"]
stop_tokens:
- "\n}"
