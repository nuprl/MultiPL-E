name: HumanEval_88_sort_array
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given an array of non-negative integers, return a copy of\
  \ the given array after sorting,\n    // you will sort the given array in ascending\
  \ order if the sum( first index value, last index value) is odd,\n    // or sort\
  \ it in descending order if the sum( first index value, last index value) is even.\n\
  \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
  \ >>> sortArray((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
  \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    // (new\
  \ ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
  \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
  \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static ArrayList<Long>\
  \ sortArray(ArrayList<Long> array) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
  \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
  \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
  \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
  \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
  \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
  \    }\n\n}\n"
completions: []
stop_tokens:
- "\n    }\n"
