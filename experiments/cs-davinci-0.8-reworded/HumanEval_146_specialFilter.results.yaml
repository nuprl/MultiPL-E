language: cs
name: HumanEval_146_specialFilter
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(x => IsOdd(x) && x > 10).Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6doqv8q3.cs(18,32): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    '
  timestamp: 1659976797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        foreach (long num in nums) {\n            if (num > 10) {\n
    \               string numstr = num.ToString();\n                if ((numstr[0]
    - '0') % 2 == 1 && (numstr[numstr.Length - 1] - '0') % 2 == 1) {\n                    count++;\n
    \               }\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        if
    (nums.Count < 1) return 0;\n        long count = 0;\n        foreach (long num
    in nums) {\n            if (num > 10 && (num % 10) % 2 == 1 && num / 10 % 2 ==
    1) {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e303676e338846b997a4fb534794f6ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e303676e338846b997a4fb534794f6ba>:0
    \n"
  stdout: ''
  timestamp: 1659976797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(x => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last()
    % 2 != 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        int
    count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i]
    > 10 && nums[i] % 2 != 0 && nums[i] / 10 % 2 != 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,
    (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3486917a74c46eaa3c288128ed1c68e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3486917a74c46eaa3c288128ed1c68e>:0
    \n"
  stdout: ''
  timestamp: 1659976797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(n => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last()
    % 2 != 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    your code here\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9b327c30d65949bfa395446de9d0d51f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9b327c30d65949bfa395446de9d0d51f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    nbLong = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i]
    > 10) {\n                string s = nums[i].ToString();\n                if (long.Parse(s[0].ToString())
    % 2 != 0 && long.Parse(s[s.Length - 1].ToString()) % 2 != 0) {\n                    nbLong++;\n
    \               }\n            }\n        }\n        return nbLong;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    YOUR CODE HERE\n        return -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39dd50619f87440a808e177cce37d51a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39dd50619f87440a808e177cce37d51a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(n => Math.Abs(n) > 10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1).Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <28bea0d6eb4a461ab6d74d7740c95301>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <28bea0d6eb4a461ab6d74d7740c95301>:0
    \n"
  stdout: ''
  timestamp: 1659976797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        if
    (nums.Count == 0) {\n            return 0;\n        }\n        return nums.Where(x
    => (x > 10) && (x % 2 == 1) && \n            ((x % 10) % 2 == 1) && ((x / 10)
    % 2 == 1)).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4c9e9ab835504341adc12666a01652a5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4c9e9ab835504341adc12666a01652a5>:0
    \n"
  stdout: ''
  timestamp: 1659976797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    c = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i]
    > 10) {\n                if (nums[i] % 2 == 1) {\n                    string s
    = nums[i].ToString();\n                    if (s[0] % 2 == 1 && s[s.Length - 1]
    % 2 == 1) {\n                        c++;\n                    }\n                }\n
    \           }\n        }\n        return c;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    number = 0;\n        foreach (var item in nums) {\n            if (((item > 10)
    && (item.ToString()[0] % 2 != 0) && (item.ToString()[item.ToString().Length -
    1] % 2 != 0))) {\n                number++;\n            }\n        }\n        return
    number;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        foreach (long num in nums) {\n            if (num > 10) {\n
    \               string s = num.ToString();\n                if (s[0] % 2 != 0
    && s[s.Length - 1] % 2 != 0) {\n                    count++;\n                }\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,
    (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(n =>\n            (n > 10) &&\n            (n % 2 == 1) &&\n            (n
    / 10 % 2 == 1) &&\n            (n % 10 == 1 || n % 10 == 3 || n % 10 == 5 || n
    % 10 == 7 || n % 10 == 9)\n        );\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64e7d3e79d1942d899aa32e05819daea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64e7d3e79d1942d899aa32e05819daea>:0
    \n"
  stdout: ''
  timestamp: 1659976797
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(x => x > 10 && Odd(x)).Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpibq9j7c2.cs(18,42): error CS0103: The name ''Odd'' does not exist in the
    current context

    '
  timestamp: 1659976797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(x => x >= 10 &&\n                               x.ToString().First()
    % 2 != 0 &&\n                               x.ToString().Last() % 2 != 0).Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976797
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    BEGIN\n        throw new NotImplementedException(\"Not implemented\");\n        //
    END\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: Not implemented\n
    \ at Problem.Main (System.String[] args) [0x00017] in <9f403fe76c5a43adaba157e2c5e13a8d>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: Not implemented\n
    \ at Problem.Main (System.String[] args) [0x00017] in <9f403fe76c5a43adaba157e2c5e13a8d>:0
    \n"
  stdout: ''
  timestamp: 1659976797
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        var
    count = 0;\n        foreach (var n in nums) {\n            var digits = n.ToString().ToCharArray();\n
    \           if (digits.Length > 2 && int.Parse(digits[0].ToString()) % 2 != 0
    &&\n                int.Parse(digits[digits.Length - 1].ToString()) % 2 != 0 &&\n
    \               n > 10) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.Specialfilter (System.Collections.Generic.List`1[T] nums) [0x00035]
    in <eed30ee4353f4a619d4e5c67bc240eed>:0 \n  at Problem.Main (System.String[] args)
    [0x0003c] in <eed30ee4353f4a619d4e5c67bc240eed>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.Specialfilter (System.Collections.Generic.List`1[T] nums) [0x00035]
    in <eed30ee4353f4a619d4e5c67bc240eed>:0 \n  at Problem.Main (System.String[] args)
    [0x0003c] in <eed30ee4353f4a619d4e5c67bc240eed>:0 \n"
  stdout: ''
  timestamp: 1659976797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        int
    count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i]
    > 10) {\n                int fd = (int)nums[i] % 10;\n                int ld =
    (int)nums[i] / 10;\n                if (fd % 2 != 0 && ld % 2 != 0) {\n                    count++;\n
    \               }\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <80618fd4e0c5481d9bee1f22b33d1729>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <80618fd4e0c5481d9bee1f22b33d1729>:0
    \n"
  stdout: ''
  timestamp: 1659976797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        foreach (long n in nums) {\n            if (n > 10 && n %
    2 == 1 && n / 10 % 2 == 1)\n                count++;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e6363082acf94e6ba9452b0a99114d52>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e6363082acf94e6ba9452b0a99114d52>:0
    \n"
  stdout: ''
  timestamp: 1659976797
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        var
    output = 0L;\n        for (var i = 0; i < nums.Count; i++) {\n            var
    num = nums[i];\n            var lastDigit = num % 10;\n            var firstDigit
    = 0;\n            for (var j = 0; j < 10; j++) {\n                if (num < 10)
    {\n                    firstDigit = num;\n                    break;\n                }\n
    \               num /= 10;\n            }\n            if (num > 10 && (firstDigit
    % 2 != 0) && (lastDigit % 2 != 0)) {\n                output++;\n            }\n
    \       }\n        return output;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpocxwvzqg.cs(25,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976797
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        throw
    new NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <2c7fe167b0ee41c8a46612172f376413>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <2c7fe167b0ee41c8a46612172f376413>:0 \n"
  stdout: ''
  timestamp: 1659976797
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    Declare a variable to count the result.\n        long count = 0;\n        // Iterate
    through the list of numbers.\n        foreach (long num in nums) {\n            //
    Get the digits.\n            List<int> digits = GetDigits(num);\n            //
    If the first and last digits are odd, and the number is greater than 10, increase
    the count.\n            if (digits[0] % 2 != 0 && digits[digits.Count - 1] % 2
    != 0 && num > 10) {\n                count++;\n            }\n        }\n        //
    Return the count.\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqd7ntms6.cs(23,32): error CS0103: The name ''GetDigits'' does not exist
    in the current context

    '
  timestamp: 1659976798
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(n => \n                n > 10 && \n                (n % 10) % 2 ==
    1 && \n                (n / (long)Math.Pow(10, NumDigits(n) - 1)) % 2 == 1);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp82ylvh0c.cs(21,41): error CS0103: The name ''NumDigits'' does not exist
    in the current context

    '
  timestamp: 1659976798
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    (long)nums.Where(n => n > 10).Where(n => IsOdd(n / 10) && IsOdd(n % 10)).Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnp5r_ku5.cs(18,57): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    /tmp/tmpnp5r_ku5.cs(18,74): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    '
  timestamp: 1659976798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    Write your code here.\n        var result = nums.Where(x => Math.Abs(x) > 10 &&
    x % 2 != 0 && x > 0);\n        return result.Count();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5652420a64f34159ade6cbbdfdeaad77>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5652420a64f34159ade6cbbdfdeaad77>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    write code here\n        int result = 0;\n        foreach (long i in nums) {\n
    \           if (i > 10) {\n                long firstdigit = i / 10;\n                while
    (firstdigit > 10) {\n                    firstdigit = firstdigit / 10;\n                }\n
    \               long lastdigit = i % 10;\n                if (firstdigit % 2 !=
    0 && lastdigit % 2 != 0) {\n                    result++;\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,
    (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0b11673469e54025942eb103cadc7cc8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0b11673469e54025942eb103cadc7cc8>:0
    \n"
  stdout: ''
  timestamp: 1659976798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        foreach (long n in nums) {\n            if (n > 10) {\n                long
    n2 = n;\n                long n3 = n;\n                long n1 = n;\n                long
    n4 = n;\n                long d1 = n1 % 10;\n                long d2 = n2 % 10;\n
    \               long d3 = n3 % 10;\n                long d4 = n4 % 10;\n                if
    (d1 == d2 && d3 == d4) {\n                    count++;\n                }\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <262ccc8981444e7d9e84867fca186476>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <262ccc8981444e7d9e84867fca186476>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    write your code here ...\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c321ea57299e4877be525037dd64fc66>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c321ea57299e4877be525037dd64fc66>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976798
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    Write your code here!\n        return nums.Count(x => x > 10 && isFirstLastOdd(x));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5q83ez1k.cs(19,42): error CS0103: The name ''isFirstLastOdd'' does not
    exist in the current context

    '
  timestamp: 1659976798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    cnt = 0;\n        foreach (long i in nums) {\n            if (i > 10) {\n                string
    str = i.ToString();\n                int start = Convert.ToInt32(str[0].ToString());\n
    \               int end = Convert.ToInt32(str[str.Length - 1].ToString());\n                if
    (start % 2 != 0 && end % 2 != 0) {\n                    cnt++;\n                }\n
    \           }\n        }\n        return cnt;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976798
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    result = 0;\n        foreach (var n in nums) {\n            if (n >= 10 && HasFirstAndLastOddDigits(n))\n
    \               result++;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kxtht3m.cs(20,28): error CS0103: The name ''HasFirstAndLastOddDigits''
    does not exist in the current context

    '
  timestamp: 1659976798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(n => (n > 10) && (n.ToString().First() % 2 != 0) && (n.ToString().Last()
    % 2 != 0)).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976798
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        int
    count = 0;\n        foreach (long num in nums) {\n            if (num > 10) {\n
    \               if (num < 0) {\n                    num = num * -1;\n                }\n
    \               string numStr = num.ToString();\n                if (int.Parse(numStr[0].ToString())
    % 2 != 0) {\n                    if (int.Parse(numStr[numStr.Length - 1].ToString())
    % 2 != 0) {\n                        count++;\n                    }\n                }\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,
    (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa0xkws39.cs(22,21): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659976798
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        foreach (long num in nums) {\n            if (num > 10) {\n
    \               if (num < 0) {\n                    num = -num;\n                }\n
    \               long first = num;\n                long last = num % 10;\n                while
    (first >= 10) {\n                    first /= 10;\n                }\n                if
    (first % 2 == 1 && last % 2 == 1) {\n                    count++;\n                }\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,
    (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl7gky3ln.cs(22,21): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659976798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.FindAll(x => (x>10) && (x%2!=0) && ((x%10)%2!=0) && ((x/10)%2!=0)).Count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <90cf3b8130a446e4bc8d7b862137ca8c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <90cf3b8130a446e4bc8d7b862137ca8c>:0
    \n"
  stdout: ''
  timestamp: 1659976798
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        int
    counter = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            string
    checkString = nums[i].ToString();\n            char[] checkChars = checkString.ToCharArray();\n
    \           char first = checkChars[0];\n            char last = checkChars[checkChars.Length
    - 1];\n            long firstnum = Convert.ToInt64(first.ToString());\n            long
    lastnum = Convert.ToInt64(last.ToString());\n            if (nums[i] > 10 && firstnum
    % 2 != 0 && lastnum % 2 != 0) {\n                counter++;\n            }\n        }\n
    \       return counter;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt64 (System.String
    value) [0x0000c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Specialfilter
    (System.Collections.Generic.List`1[T] nums) [0x00035] in <0d69847753304649996c0d284bc1d076>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <0d69847753304649996c0d284bc1d076>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt64 (System.String
    value) [0x0000c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Specialfilter
    (System.Collections.Generic.List`1[T] nums) [0x00035] in <0d69847753304649996c0d284bc1d076>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <0d69847753304649996c0d284bc1d076>:0
    \n"
  stdout: ''
  timestamp: 1659976798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(x => x > 10 && (x.ToString()[0] % 2 == 1 && x.ToString()[x.ToString().Length
    - 1] % 2 == 1)).Count();\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(n => (n >= 10) && ((n / 10) % 2 != 0) && (n % 2 != 0));\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cbacf998fbd945999c2a0fca1b4c6670>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cbacf998fbd945999c2a0fca1b4c6670>:0
    \n"
  stdout: ''
  timestamp: 1659976798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(x => x > 10 && (x % 10) % 2 == 1 && (x / 10) % 2 == 1);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5de1f464a14fc3a247895a8ae196b7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5de1f464a14fc3a247895a8ae196b7>:0
    \n"
  stdout: ''
  timestamp: 1659976798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    n = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i]
    > 10) {\n                string first = nums[i].ToString().Substring(0, 1);\n
    \               string last = nums[i].ToString().Substring(nums[i].ToString().Length
    - 1, 1);\n                if (long.Parse(first) % 2 != 0 && long.Parse(last) %
    2 != 0) {\n                    n++;\n                }\n            }\n        }\n
    \       return n;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(x => x > 10 && x.ToString().Last() % 2 != 0 && x.ToString().First()
    % 2 != 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(n => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last()
    % 2 != 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i]
    > 10) {\n                long n = nums[i];\n                if (n % 2 == 1) {\n
    \                   while (n >= 10) {\n                        n /= 10;\n                    }\n
    \                   if (n % 2 == 1) {\n                        count++;\n                    }\n
    \               }\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        int
    c = 0;\n        foreach (long n in nums) {\n            if (n > 10) {\n                string
    s = n.ToString();\n                if (s[0] % 2 != 0 && s[s.Length - 1] % 2 !=
    0)\n                    c++;\n            }\n        }\n        return c;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        var
    count = 0;\n        foreach (var num in nums) {\n            if (num >= 10 &&
    num.ToString().First() % 2 != 0 && num.ToString().Last() % 2 != 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,
    (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef668fcf0d234a8a86507438a6ec7583>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef668fcf0d234a8a86507438a6ec7583>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(num => num >= 10 && (num % 10) % 2 == 1 && num / 10 % 2 == 1);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <37c83f22b32f40aaaa58c82a987cec40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <37c83f22b32f40aaaa58c82a987cec40>:0
    \n"
  stdout: ''
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(n => Math.Abs(n) > 10 &&\n                               Math.Abs(n).ToString().First()
    % 2 != 0 &&\n                               Math.Abs(n).ToString().Last() % 2
    != 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a71951d361914187aefbc965f77a5fd5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a71951d361914187aefbc965f77a5fd5>:0
    \n"
  stdout: ''
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(n => n > 10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1).Count();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a98d81d96b74f2c99f6e37baa2eca8b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a98d81d96b74f2c99f6e37baa2eca8b>:0
    \n"
  stdout: ''
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    Your code goes here!\n        return -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2185c377f184e8eb3ae9753ce115f0b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2185c377f184e8eb3ae9753ce115f0b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        var
    query = nums.Where(x => x > 10).Where(x => (x/10)%2 == 1).Where(x => x%2 == 1);\n
    \       return query.Count();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4fcae784ec054a21967a2f0bbdef7573>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4fcae784ec054a21967a2f0bbdef7573>:0
    \n"
  stdout: ''
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        if
    (nums.Count == 0) return 0;\n        return nums.Where(n => {\n            var
    digits = n.ToString().ToCharArray();\n            if (digits.Length < 2) return
    false;\n            return Math.Abs(n) > 10 && digits[0] % 2 == 1 && digits[digits.Length
    - 1] % 2 == 1;\n        }).Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ddadc955dc1e4dd48346d02393e5d274>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ddadc955dc1e4dd48346d02393e5d274>:0
    \n"
  stdout: ''
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(n => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last()
    % 2 != 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(n => n > 10 && n % 2 == 1 && n % 10 == 1);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <009352c4b6604eba93e775ae679c1bd5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <009352c4b6604eba93e775ae679c1bd5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i]
    > 10) {\n                string s = nums[i].ToString();\n                if ((s[0]
    - '0') % 2 == 1 && (s[s.Length - 1] - '0') % 2 == 1) {\n                    count++;\n
    \               }\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    Type your answer here\n\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47c481e29b7a4cc3be3061e3de3ec35e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47c481e29b7a4cc3be3061e3de3ec35e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976799
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    ans = 0;\n        foreach (long num in nums) {\n            if (num >= 10) {\n
    \               if (IsOdd(num % 10) && IsOdd(num / 10)) {\n                    ans++;\n
    \               }\n            }\n        }\n        return ans;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnblkcjim.cs(21,21): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    /tmp/tmpnblkcjim.cs(21,40): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    '
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Select(x =>\n        {\n            if (x < 10 || x > 10)\n            {\n
    \               return (x.ToString()[0].ToString() != \"1\" && x.ToString()[0].ToString()
    != \"3\" && x.ToString()[0].ToString() != \"5\" && x.ToString()[0].ToString()
    != \"7\" && x.ToString()[0].ToString() != \"9\") || (x.ToString()[x.ToString().Length
    - 1].ToString() != \"1\" && x.ToString()[x.ToString().Length - 1].ToString() !=
    \"3\" && x.ToString()[x.ToString().Length - 1].ToString() != \"5\" && x.ToString()[x.ToString().Length
    - 1].ToString() != \"7\" && x.ToString()[x.ToString().Length - 1].ToString() !=
    \"9\") ? 0 : 1;\n            }\n            else\n            {\n                return
    0;\n            }\n        }).Sum();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <758eacdc9f6745728d2c96ce4b91d1db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <758eacdc9f6745728d2c96ce4b91d1db>:0
    \n"
  stdout: ''
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    ret = 0;\n        foreach (long num in nums) {\n            if (num > 10 && (num
    % 10 % 2 == 1) && (num / 10 / 10 % 10 % 2 == 1)) {\n                ret++;\n            }\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0fb8633fa55d4bed8c98f360c4b3dc01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0fb8633fa55d4bed8c98f360c4b3dc01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976799
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        foreach (long num in nums) {\n            if (num > 10) {\n
    \               if (isOdd(num) && isOdd(getFirstDigit(num)) && isOdd(getLastDigit(num)))
    {\n                    count++;\n                }\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4cl6jt4c.cs(21,21): error CS0103: The name ''isOdd'' does not exist in
    the current context

    /tmp/tmp4cl6jt4c.cs(21,35): error CS0103: The name ''isOdd'' does not exist in
    the current context

    /tmp/tmp4cl6jt4c.cs(21,41): error CS0103: The name ''getFirstDigit'' does not
    exist in the current context

    /tmp/tmp4cl6jt4c.cs(21,64): error CS0103: The name ''isOdd'' does not exist in
    the current context

    /tmp/tmp4cl6jt4c.cs(21,70): error CS0103: The name ''getLastDigit'' does not exist
    in the current context

    '
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    result = 0;\n        foreach (long num in nums) {\n            // filter odd number\n
    \           if (num % 2 == 0) continue;\n            // filter last digit\n            if
    (num % 10 % 2 == 0) continue;\n            // filter first digit\n            if
    (num % (long)Math.Pow(10, num.ToString().Length - 1) % 2 == 0) continue;\n            //
    filter 10\n            if (num <= 10) continue;\n            result++;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed90722cefb04578bb37470fcbd453d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed90722cefb04578bb37470fcbd453d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    Insert your code here\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <66939418440a4769bb329e35fe2fed24>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <66939418440a4769bb329e35fe2fed24>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    n = 0;\n        foreach (long num in nums) {\n            if (num > 10 && (num
    / 10) % 2 != 0 && num % 2 != 0)\n                n++;\n        }\n        return
    n;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <de7733de11264e00a9c822784c9ddd85>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <de7733de11264e00a9c822784c9ddd85>:0
    \n"
  stdout: ''
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    Write your code here\n        // To print results to the standard output you can
    use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n
    \       long res = 0;\n        foreach (var num in nums) {\n            if (num
    >= 10) {\n                string str = num.ToString();\n                int a
    = int.Parse(str[0].ToString());\n                int b = int.Parse(str[str.Length
    - 1].ToString());\n                if (a % 2 != 0 && b % 2 != 0) {\n                    res++;\n
    \               }\n            }\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976799
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        for (long i = 0; i < nums.Count; i++) {\n            if (nums[(int)i]
    > 10L) {\n                List<long> digits = MathService.DigitsOf(nums[(int)i]);\n
    \               if (MathService.IsOdd(digits[0]) && MathService.IsOdd(digits[digits.Count
    - 1])) {\n                    count++;\n                }\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphvispzzx.cs(21,37): error CS0103: The name ''MathService'' does not exist
    in the current context

    /tmp/tmphvispzzx.cs(22,21): error CS0103: The name ''MathService'' does not exist
    in the current context

    /tmp/tmphvispzzx.cs(22,53): error CS0103: The name ''MathService'' does not exist
    in the current context

    '
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(p => p > 10 && (p / 10) % 2 == 1 && p % 2 == 1);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5f08189427b43cc87468c7473f4e361>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5f08189427b43cc87468c7473f4e361>:0
    \n"
  stdout: ''
  timestamp: 1659976799
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(x => x > 10).Where(x => x.ToString().Length > 1).Where(x => IsOdd(x.ToString()[0])).Where(x
    => IsOdd(x.ToString()[x.ToString().Length - 1])).Count();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8ctpmy6g.cs(18,87): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    /tmp/tmp8ctpmy6g.cs(18,122): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    '
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(n => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last()
    % 2 != 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976797
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        foreach (long num in nums) {\n            if (num > 10 &&
    num % 2 == 1 && GetLastDigit(num) % 2 == 1) {\n                count++;\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppcdb4i6d.cs(20,45): error CS0103: The name ''GetLastDigit'' does not exist
    in the current context

    '
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(x => x > 10 && x.ToString().Select(y => long.Parse(y.ToString())).Where(y
    => y % 2 == 1).Count() == 2).Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    result = 0;\n        foreach (long num in nums) {\n            if (num <= 10)
    continue;\n            if (num % 2 == 0) continue;\n            if ((num / 10)
    % 2 == 0) continue;\n            if (num % 10 == 0) continue;\n            result++;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd748dec9e094ed392edc66287de597c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd748dec9e094ed392edc66287de597c>:0
    \n"
  stdout: ''
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long[]
    numsArr = nums.ToArray();\n        long cnt = 0;\n        for (int i = 0; i <
    numsArr.Length; i++) {\n            if ((numsArr[i] > 10) && (numsArr[i] % 2 ==
    1) && ((numsArr[i] % 10) % 2 == 1)) {\n                cnt++;\n            }\n
    \       }\n        return cnt;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fbde7a0505f243c58bfd47fb9ba666ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fbde7a0505f243c58bfd47fb9ba666ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976799
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(x => x > 10 && x.FirstDigit() % 2 != 0 && x.LastDigit() % 2 != 0).Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptm41h3v3.cs(18,44): error CS1061: ''long'' does not contain a definition
    for ''FirstDigit'' and no accessible extension method ''FirstDigit'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmptm41h3v3.cs(18,71): error CS1061: ''long'' does not contain a definition
    for ''LastDigit'' and no accessible extension method ''LastDigit'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    (\n            from num in nums\n            where (10 < num && 0 < num.ToString().Length
    && num.ToString().First() % 2 != 0 && num.ToString().Last() % 2 != 0)\n            select
    num\n        ).Count();\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(n => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last()
    % 2 != 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        int
    count = 0;\n        foreach (long num in nums) {\n            if (num > 10 &&
    (num.ToString()[0] % 2 != 0 && num.ToString()[num.ToString().Length - 1] % 2 !=
    0)) {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    total = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i]
    > 10) {\n                string number = nums[i].ToString();\n                if
    (number[0] % 2 != 0 && number[number.Length - 1] % 2 != 0) {\n                    total++;\n
    \               }\n            }\n        }\n        return total;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L, (long)14L,
    (long)-15L})))\n        return nums.Count(n => n > 10 && n % 2 == 1 && n / 10
    % 2 == 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f0a1a2e219274795a1be41686eb7fda8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f0a1a2e219274795a1be41686eb7fda8>:0
    \n"
  stdout: ''
  timestamp: 1659976800
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(num => num > 10 && IsOdd(num) && IsOdd(num % 10)).Count();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpecbpz1sl.cs(18,46): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    /tmp/tmpecbpz1sl.cs(18,60): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    '
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    your code goes here\n        long count = 0;\n        foreach (long num in nums)
    {\n            if (num >= 10 && (num.ToString()[0] % 2 == 1) && (num.ToString()[num.ToString().Length
    - 1] % 2 == 1)) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(n => {\n            if (n < 10) return false;\n            int l =
    (int)Math.Log10(n);\n            long a = n / (long)Math.Pow(10, l);\n            long
    b = n % 10;\n            return a % 2 == 1 && b % 2 == 1;\n        });\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    result = 0;\n        foreach (long num in nums) {\n            if (num > 10 &&
    Math.Abs(num) % 2 == 1 && ((num % 10) % 2 == 1 || (num / 10) % 2 == 1)) {\n                result
    += 1;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c8cc468abc3a4da88d87d9d7e3e808f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c8cc468abc3a4da88d87d9d7e3e808f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    Your solution here!\n        return nums.Where(n => n > 10 && (n % 10) % 2 ==
    1 && ((n / Math.Pow(10, Math.Floor(Math.Log10(n)))) % 10) % 2 == 1).Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <935282ea82464aedb5b84388b1084103>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <935282ea82464aedb5b84388b1084103>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    result = 0;\n        foreach (long n in nums) {\n            string s = n.ToString();\n
    \           if (n > 10 && (s[0] == '1' || s[0] == '3' || s[0] == '5' || s[0] ==
    '7' || s[0] == '9') && (s[s.Length - 1] == '1' || s[s.Length - 1] == '3' || s[s.Length
    - 1] == '5' || s[s.Length - 1] == '7' || s[s.Length - 1] == '9'))\n                result++;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976800
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    Your code goes here\n        long count = 0;\n        for (int i = 0; i < nums.Count;
    i++) {\n            if (nums[i] > 10 && IsOdd(nums[i])) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,
    (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx32xztmp.cs(21,33): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    '
  timestamp: 1659976799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(number => (number > 10 && (number.ToString()[0] - '0') % 2 != 0\n            &&
    (number.ToString()[number.ToString().Length - 1] - '0') % 2 != 0));\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        int
    cnt = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            string num
    = Math.Abs(nums[i]).ToString();\n            if (num.Length > 1 && (num[0]-'0')
    % 2 == 1 && (num[num.Length-1]-'0') % 2 == 1 && nums[i] > 10) {\n                cnt++;\n
    \           }\n        }\n        return cnt;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    if the first digit is odd, the last digit must be odd\n        return nums.Where(num
    => num % 2 != 0 && num > 10).Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b84a8905d7f491c9859c63cc6b984a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b84a8905d7f491c9859c63cc6b984a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    k = 0;\n        foreach (long a in nums) {\n            if (a > 10) {\n                long
    x = a;\n                while (x > 0) {\n                    long t = x % 10;\n
    \                   if (t % 2 == 0) {\n                        break;\n                    }\n
    \                   if (x == a) {\n                        k++;\n                    }\n
    \                   x /= 10;\n                }\n            }\n        }\n        return
    k;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a30a84fcc1d9419292c15fec358aa510>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a30a84fcc1d9419292c15fec358aa510>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976800
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        int
    count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i]
    > 10 && IsBothFirstAndLastDigitsOdd(nums[i])) {\n                count++;\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi95o3jat.cs(20,33): error CS0103: The name ''IsBothFirstAndLastDigitsOdd''
    does not exist in the current context

    '
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(x => x > 10 && x % 2 == 1 && x.ToString().First() % 2 == 1 && x.ToString().Last()
    % 2 == 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    Insert code here\n        return nums.Where(n => n > 10 && (n.ToString()[0] %
    2 != 0 && n.ToString()[n.ToString().Length - 1] % 2 != 0)).Count();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976800
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        var
    ret = 0L;\n        if (nums == null) {\n            return ret;\n        }\n        foreach
    (var num in nums) {\n            if (Math.Abs(num) > 10 && IsFirstDigitOdd(num)
    && IsLastDigitOdd(num)) {\n                ret++;\n            }\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp64cr836x.cs(23,39): error CS0103: The name ''IsFirstDigitOdd'' does not
    exist in the current context

    /tmp/tmp64cr836x.cs(23,63): error CS0103: The name ''IsLastDigitOdd'' does not
    exist in the current context

    '
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(x =>\n            x > 10\n            && (x % 10) % 2 == 1\n            &&
    (x / 10) % 2 == 1\n        );\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1e98cf0f00db4aa08ee57b613b2562f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1e98cf0f00db4aa08ee57b613b2562f7>:0
    \n"
  stdout: ''
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(x => (x > 10) && (x > 0 ? (x % 10) % 2 != 0 : (x * -1) % 10 % 2 !=
    0) && (x / 10) % 2 != 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7c3b075439924a0faa03942a2ebe0968>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7c3b075439924a0faa03942a2ebe0968>:0
    \n"
  stdout: ''
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        List<long>
    nums2 = new List<long>();\n        foreach (var n in nums) {\n            if (n
    > 10 && n % 2 == 1) {\n                nums2.Add(n);\n            }\n        }\n
    \       return nums2.Count;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5864811e08ca40cc88ec28f474de1e67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5864811e08ca40cc88ec28f474de1e67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(x => x > 10 && x % 2 == 1 && (x / 10) % 2 == 1).Count();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8965ccb0a4f3476b8c79214addc9f9b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8965ccb0a4f3476b8c79214addc9f9b5>:0
    \n"
  stdout: ''
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(n => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last()
    % 2 != 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(x => (x > 10 && x % 2 == 1 && x.ToString().Last() == '1'));\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d43998d6f8547389d0fe24eb38a9fb1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d43998d6f8547389d0fe24eb38a9fb1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i]
    > 10) {\n                var digits = Math.Abs(nums[i]).ToString().ToCharArray();\n
    \               if (digits[0] % 2 != 0 && digits[digits.Length - 1] % 2 != 0)
    {\n                    count++;\n                }\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    result = 0;\n        foreach (var num in nums) {\n            if (num > 10 &&\n
    \               (num % 10) % 2 == 1 &&\n                (num / (long)Math.Pow(10,
    Math.Floor(Math.Log10(num)))) % 2 == 1) {\n                result++;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(x => x > 10 && x % 2 == 1 && (x % 10) % 2 == 1);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4c6900e0225c4c6da90538292d8449fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4c6900e0225c4c6da90538292d8449fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976800
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    s = 0;\n        foreach (long num in nums) {\n            if (num > 10 && IsOdd(num)
    && IsOdd(num/10)) {\n                s += 1;\n            }\n        }\n        return
    s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnv5_nwkn.cs(20,29): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    /tmp/tmpnv5_nwkn.cs(20,43): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    '
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    TODO: implement function.\n        long x = 0;\n        foreach (long num in nums)
    {\n            string numStr = num.ToString();\n            if (numStr.Length
    > 1 && num > 10) {\n                if (int.Parse(numStr[0].ToString()) % 2 !=
    0 && int.Parse(numStr[numStr.Length - 1].ToString()) % 2 != 0) {\n                    x++;\n
    \               }\n            }\n        }\n        return x;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976800
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(num =>\n            num > 10\n            && FirstDigit(num) % 2 ==
    1\n            && LastDigit(num) % 2 == 1\n        ).Count();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp619jlyyn.cs(20,16): error CS0103: The name ''FirstDigit'' does not exist
    in the current context

    /tmp/tmp619jlyyn.cs(21,16): error CS0103: The name ''LastDigit'' does not exist
    in the current context

    '
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        var
    ans = 0L;\n        foreach (var num in nums) {\n            if (num > 10) {\n
    \               var isFirstOdd = ((num % 10) == 1 || (num % 10) == 3 || (num %
    10) == 5 || (num % 10) == 7 || (num % 10) == 9);\n                var isLastOdd
    = ((num / 10) == 1 || (num / 10) == 3 || (num / 10) == 5 || (num / 10) == 7 ||
    (num / 10) == 9);\n                if (isFirstOdd && isLastOdd) {\n                    ans++;\n
    \               }\n            }\n        }\n        return ans;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b068e39162a7451e83840da75f3c58e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b068e39162a7451e83840da75f3c58e5>:0
    \n"
  stdout: ''
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(x => \n            x > 10 && Math.Abs(x) > 10 && \n            Math.Abs(x)
    % 10 % 2 != 0 && \n            Math.Abs(x) / 10 % 10 % 2 != 0);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8d2f8aef2b247a1b1cd70a8a2cd9a19>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8d2f8aef2b247a1b1cd70a8a2cd9a19>:0
    \n"
  stdout: ''
  timestamp: 1659976800
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(n => n > 10 && IsSpecial(n));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkd25vjqa.cs(18,42): error CS0103: The name ''IsSpecial'' does not exist
    in the current context

    '
  timestamp: 1659976800
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    Implement the function here\n        throw new NotImplementedException();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <eb42f4b7c5324be988ad5b21cf3b1aec>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <eb42f4b7c5324be988ad5b21cf3b1aec>:0 \n"
  stdout: ''
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    total = 0;\n        foreach (long num in nums) {\n            if (num > 10 &&
    (num % 10) % 2 == 1 && (num / 10) % 2 == 1) {\n                total++;\n            }\n
    \       }\n        return total;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f83fb42ce2034c1aad733d0b994c134f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f83fb42ce2034c1aad733d0b994c134f>:0
    \n"
  stdout: ''
  timestamp: 1659976801
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(x => x > 10 && x % 2 == 1 && x.ToString().Length > 1 && x.ToString().First()
    == x.ToString().Last()).Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db7fc3849c89429191d76337bb1e7fb4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db7fc3849c89429191d76337bb1e7fb4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976801
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(n => (n % 2 != 0 && n / 10 % 2 != 0 && n > 10)).Count();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <18f4282fc28649ad8ad63db103553382>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <18f4282fc28649ad8ad63db103553382>:0
    \n"
  stdout: ''
  timestamp: 1659976801
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (IsGreaterThan10(nums[i])
    && IsFirstAndLastDigitOdd(nums[i])) {\n                count++;\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmponaw8sm8.cs(20,17): error CS0103: The name ''IsGreaterThan10'' does not
    exist in the current context

    /tmp/tmponaw8sm8.cs(20,45): error CS0103: The name ''IsFirstAndLastDigitOdd''
    does not exist in the current context

    '
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(e => (e > 10) && (e % 2 == 1) && ((e % 10) % 2 == 1));\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5631781c9294ac589e3a159b7f51d48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5631781c9294ac589e3a159b7f51d48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976801
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    counter = 0;\n        foreach (long num in nums) {\n            if (num > 10)
    {\n                long firstDigit = num % 10;\n                long lastDigit
    = num / 10;\n                if (Math.Abs(firstDigit) % 2 == 1 && Math.Abs(lastDigit)
    % 2 == 1) {\n                    counter++;\n                }\n            }\n
    \       }\n        return counter;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6492ecee69384b369655892a309e7100>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6492ecee69384b369655892a309e7100>:0
    \n"
  stdout: ''
  timestamp: 1659976801
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return\n
    \           nums.Where(num => num > 10)\n                .Where(num => FirstDigitIsOdd(num))\n
    \               .Where(num => LastDigitIsOdd(num))\n                .Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph_oiimph.cs(20,31): error CS0103: The name ''FirstDigitIsOdd'' does not
    exist in the current context

    /tmp/tmph_oiimph.cs(21,31): error CS0103: The name ''LastDigitIsOdd'' does not
    exist in the current context

    '
  timestamp: 1659976800
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(n => n > 10 && n % 2 == 1 && (n / 10) % 2 == 1).Count();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <07002cfc89cf4e16ad1dfca8b9e3a467>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <07002cfc89cf4e16ad1dfca8b9e3a467>:0
    \n"
  stdout: ''
  timestamp: 1659976801
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    numcount = 0;\n        foreach (long num in nums) {\n            if (num > 10
    && num < 100) {\n                numcount++;\n            }\n            else
    if (num > 100) {\n                if (num % 10 % 2 != 0 && num / (long)Math.Pow(10,
    (int)Math.Log10(num)) % 2 != 0) {\n                    numcount++;\n                }\n
    \           }\n        }\n        return numcount;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,
    (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b260d155b1d436497977b78f75eea84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b260d155b1d436497977b78f75eea84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976801
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i]
    > 10 && (nums[i] / 100000000 % 10) % 2 != 0 && (nums[i] % 10) % 2 != 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,
    (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <54f96a9d8bcf4f7192fe360b19fc3b37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <54f96a9d8bcf4f7192fe360b19fc3b37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976801
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(n => n > 10 && n % 2 == 1 && (n / 10) % 2 == 1);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abd42bd6b5fe447c9db8026672c6499d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abd42bd6b5fe447c9db8026672c6499d>:0
    \n"
  stdout: ''
  timestamp: 1659976801
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    counter = 0;\n        foreach (long n in nums) {\n            if (n > 10 && n
    % 2 != 0 && n % 5 != 0)\n                counter++;\n        }\n        return
    counter;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04708c3e6ad444508117ebdf83cf94cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04708c3e6ad444508117ebdf83cf94cd>:0
    \n"
  stdout: ''
  timestamp: 1659976801
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    ret = 0;\n        foreach (long num in nums) {\n            int first_digit =
    (int)(num / Math.Pow(10, (int)Math.Log10(num)));\n            int last_digit =
    (int)(num % 10);\n            if (num > 10 && first_digit % 2 == 1 && last_digit
    % 2 == 1) {\n                ret += 1;\n            }\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976801
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(i => i > 10).Where(i => IsOdd(i % 10) && IsOdd(i / (int)Math.Pow(10,
    Math.Floor(Math.Log10(i))))).Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbebrysd7.cs(18,51): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    /tmp/tmpbebrysd7.cs(18,68): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    '
  timestamp: 1659976801
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    c = 0;\n        foreach (var num in nums) {\n            if (num > 10 && num.ToString().Length
    > 1) {\n                int f = int.Parse(num.ToString()[0].ToString());\n                int
    l = int.Parse(num.ToString()[num.ToString().Length - 1].ToString());\n                if
    (f % 2 != 0 && l % 2 != 0) {\n                    c++;\n                }\n            }\n
    \       }\n        return c;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976801
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    cnt = 0;\n        foreach (long n in nums) {\n            if (Math.Abs(n) > 10
    && n % 2 != 0) {\n                long m = n;\n                while (m >= 10)
    {\n                    m /= 10;\n                }\n                if (m % 2
    != 0) {\n                    cnt++;\n                }\n            }\n        }\n
    \       return cnt;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c82cbf9d98148f9924c85bae54e7ad0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c82cbf9d98148f9924c85bae54e7ad0>:0
    \n"
  stdout: ''
  timestamp: 1659976801
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        foreach (long num in nums) {\n            if (num > 10 &&
    isOdd(num) && isOdd(firstDigit(num)) && isOdd(lastDigit(num))) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,
    (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeqliamt9.cs(20,29): error CS0103: The name ''isOdd'' does not exist in
    the current context

    /tmp/tmpeqliamt9.cs(20,43): error CS0103: The name ''isOdd'' does not exist in
    the current context

    /tmp/tmpeqliamt9.cs(20,49): error CS0103: The name ''firstDigit'' does not exist
    in the current context

    /tmp/tmpeqliamt9.cs(20,69): error CS0103: The name ''isOdd'' does not exist in
    the current context

    /tmp/tmpeqliamt9.cs(20,75): error CS0103: The name ''lastDigit'' does not exist
    in the current context

    '
  timestamp: 1659976801
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    your code goes here\n        int count = 0;\n        long last_digit = 0;\n        foreach
    (long num in nums) {\n            if (num > 10) {\n                string s =
    num.ToString();\n                if (s.Length > 1) {\n                    last_digit
    = long.Parse(s.Substring(s.Length - 1));\n                    if (last_digit %
    2 != 0) {\n                        last_digit = long.Parse(s.Substring(0, 1));\n
    \                       if (last_digit % 2 != 0) {\n                            count++;\n
    \                       }\n                    }\n                }\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976801
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(i => i > 10 && IsOdd(i) && IsOdd(Math.Abs(i) % 10)).Count();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsyf486qq.cs(18,42): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    /tmp/tmpsyf486qq.cs(18,54): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    '
  timestamp: 1659976801
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        int
    count = 0;\n        foreach (long num in nums) {\n            if (num > 10) {\n
    \               if (num % 2 == 1) {\n                    // Parse to string and
    get the first digit\n                    if (long.Parse(num.ToString()[0].ToString())
    % 2 == 1) {\n                        count++;\n                    }\n                }\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,
    (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976801
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.FindAll(x => x > 10 && firstDigit(x) % 2 != 0 && lastDigit(x) % 2 != 0).Count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprlzn6ukt.cs(18,44): error CS0103: The name ''firstDigit'' does not exist
    in the current context

    /tmp/tmprlzn6ukt.cs(18,70): error CS0103: The name ''lastDigit'' does not exist
    in the current context

    '
  timestamp: 1659976801
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    Note: you may use the list.filter method\n        return nums.Where(n => {\n            return\n
    \               n > 10 &&\n                n % 2 == 1 &&\n                (n %
    10) % 2 == 1;\n        }).Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2fd886a0c1824a3d9848a61d0271681d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2fd886a0c1824a3d9848a61d0271681d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976801
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(n => n > 10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dce3a5381b8d4ce393775e49fa0ecd56>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dce3a5381b8d4ce393775e49fa0ecd56>:0
    \n"
  stdout: ''
  timestamp: 1659976801
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(e => e > 10 && e % 2 == 1 && e / 10 % 2 == 1).Count();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d057b2a31b843c6828ddaf1ec3c957c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d057b2a31b843c6828ddaf1ec3c957c>:0
    \n"
  stdout: ''
  timestamp: 1659976801
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        var
    res = nums.Where(x => x > 10 && Math.Abs(x) % 10 % 2 != 0).ToList();\n        return
    res.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd21d40eafa34541bd509e34a718c20b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd21d40eafa34541bd509e34a718c20b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976802
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(n => (Math.Abs(n) > 10) && IsOdd(n)).Count();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptgvgvgl9.cs(18,54): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    '
  timestamp: 1659976801
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    result = 0;\n        foreach (long num in nums) {\n            if (num >= 10 &&
    DigitsAreOdd(num) && FirstDigitIsOdd(num)) {\n                result++;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp12yu1dt5.cs(20,30): error CS0103: The name ''DigitsAreOdd'' does not exist
    in the current context

    /tmp/tmp12yu1dt5.cs(20,51): error CS0103: The name ''FirstDigitIsOdd'' does not
    exist in the current context

    '
  timestamp: 1659976801
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    Write your code here.\n        int count = 0;\n        foreach (long num in nums)
    {\n            if (num > 10 && first_digit(num)%2 != 0 && last_digit(num)%2 !=
    0) {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9tq7nhuv.cs(21,29): error CS0103: The name ''first_digit'' does not exist
    in the current context

    /tmp/tmp9tq7nhuv.cs(21,56): error CS0103: The name ''last_digit'' does not exist
    in the current context

    '
  timestamp: 1659976801
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    Your code here\n        // int x = 1;\n        // int y = 1;\n        // int b
    = 1;\n        // int o = 0;\n        // for (int i = 0; i < nums.Count; i++)\n
    \       // {\n        //     if (nums[i] > 10)\n        //     {\n        //         b
    = 1;\n        //         x = (int)nums[i];\n        //         y = (int)nums[i];\n
    \       //         for (int j = 0; j < (int)Math.Floor(Math.Log10(x) + 1); j++)\n
    \       //         {\n        //             if (x % 2 == 0)\n        //             {\n
    \       //                 b = 0;\n        //                 break;\n        //
    \            }\n        //             x = x / 10;\n        //         }\n        //
    \        for (int j = 0; j < (int)Math.Floor(Math.Log10(y) + 1); j++)\n        //
    \        {\n        //             if (y % 2 == 0)\n        //             {\n
    \       //                 b = 0;\n        //                 break;\n        //
    \            }\n        //             y = y % 10;\n        //         }\n        //
    \        if (b == 1)\n        //         {\n        //             o = o + 1;\n
    \       //         }\n        //     }\n        // }\n        // return o;\n        //
    for (int i = 0; i < nums.Count; i++)\n        // {\n        //     if (nums[i]
    > 10)\n        //     {\n        //         if (nums[i] % 2 == 1)\n        //
    \        {\n        //             x = (int)nums[i];\n        //             for
    (int j = 0; j < (int)Math.Floor(Math.Log10(x) + 1); j++)\n        //             {\n
    \       //                 if (x % 2 == 0)\n        //                 {\n        //
    \                    break;\n        //                 }\n        //                 x
    = x / 10;\n        //             }\n        //             if (x % 2 == 1)\n
    \       //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmv0ab3bf.cs(17,24): error CS0161: ''Problem.Specialfilter(List<long>)'':
    not all code paths return a value

    '
  timestamp: 1659976801
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    Write your code here\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <109319a623694015959fe3436e8ea02b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <109319a623694015959fe3436e8ea02b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976802
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    TODO: Write your code here!\n        return (long)0L;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <734aa15c049944fa97184d387c0a9825>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <734aa15c049944fa97184d387c0a9825>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976802
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            long firstDigit
    = nums[i] % 10;\n            if ((firstDigit % 2 == 1) && (nums[i] > 10)) {\n
    \               long num = nums[i];\n                long digit = 0;\n                while
    (num > 0) {\n                    digit = num % 10;\n                    num =
    num / 10;\n                }\n                if (digit % 2 == 1) {\n                    count++;\n
    \               }\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976802
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(num => num > 10 && num.ToString().First() % 2 != 0 && num.ToString().Last()
    % 2 != 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976802
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    return nums.Where(n => n > 10 && (n % 10) % 2 == 1 && (n / (long)Math.Pow(10,
    Math.Floor(Math.Log10(n)))) % 2 == 1).Count();\n        return nums.Where(n =>
    n > 10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1).Count();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f80b321e574430aa34c53d1ef4ffd68>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f80b321e574430aa34c53d1ef4ffd68>:0
    \n"
  stdout: ''
  timestamp: 1659976802
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    TODO: implement here\n        long result = 0;\n        foreach (long i in nums)
    {\n            if (isGreaterThan10(i) && isOddFirst(i) && isOddLast(i)) {\n                result++;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,
    (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1jxlr_bf.cs(21,17): error CS0103: The name ''isGreaterThan10'' does not
    exist in the current context

    /tmp/tmp1jxlr_bf.cs(21,39): error CS0103: The name ''isOddFirst'' does not exist
    in the current context

    /tmp/tmp1jxlr_bf.cs(21,56): error CS0103: The name ''isOddLast'' does not exist
    in the current context

    '
  timestamp: 1659976802
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    f = 0;\n        foreach (var i in nums) {\n            bool b = true;\n            var
    c = i;\n            if (i < 0) c = -i;\n            if (c < 10) b = false;\n            if
    (c % 10 % 2 == 0) b = false;\n            while (c > 10) c /= 10;\n            if
    (c % 2 == 0) b = false;\n            if (b) f++;\n        }\n        return f;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46334468184f484cba9c9ca72248ea6a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46334468184f484cba9c9ca72248ea6a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976802
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    Implement this function\n        int count = 0;\n        for (int i = 0; i < nums.Count;
    i++) {\n            if (nums[i] < 10) continue;\n            string numStr = nums[i].ToString();\n
    \           int first = int.Parse(numStr[0].ToString());\n            int last
    = int.Parse(numStr[numStr.Length - 1].ToString());\n            if (first % 2
    != 0 && last % 2 != 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976802
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(num => num > 10 && num.ToString().ToCharArray().First() % 2 != 0 &&
    num.ToString().ToCharArray().Last() % 2 != 0).Count();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976802
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    Replace this with your solution.\n        return (long)0L;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5e7bb11950d4df080f0e467525a841a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5e7bb11950d4df080f0e467525a841a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976802
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(n => Math.Abs(n) > 10 && n.ToString().Last() % 2 == 1 && n.ToString().First()
    % 2 == 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <36fd4da5ed0144a18b5f65e9df2a13ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <36fd4da5ed0144a18b5f65e9df2a13ba>:0
    \n"
  stdout: ''
  timestamp: 1659976802
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        int
    count = 0;\n        foreach (var i in nums) {\n            if (i > 10) {\n                if
    (Math.Abs(i) % 10 % 2 != 0 && (i % 10 != 0)) {\n                    count++;\n
    \               }\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38dbde2747b541219e902632619372c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38dbde2747b541219e902632619372c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976802
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        var
    res = 0L;\n        foreach (var n in nums) {\n            if (n < 10) {\n                continue;\n
    \           }\n            var a = n / 10;\n            var r = n % 10;\n            if
    (a % 2 == 0 || r % 2 == 0) {\n                continue;\n            }\n            res++;\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <026ef581a42442dc97926702196a881b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <026ef581a42442dc97926702196a881b>:0
    \n"
  stdout: ''
  timestamp: 1659976802
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    res = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i]
    > 10 && isodd(nums[i] / 10) && isodd(nums[i] % 10)) {\n                res++;\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsgmnamtv.cs(20,33): error CS0103: The name ''isodd'' does not exist in
    the current context

    /tmp/tmpsgmnamtv.cs(20,56): error CS0103: The name ''isodd'' does not exist in
    the current context

    '
  timestamp: 1659976802
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(n => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last()
    % 2 != 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976797
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        foreach (long num in nums) {\n            if (num > 10 &&
    IsOdd(num) && IsOdd(GetFirstDigit(num)) && IsOdd(GetLastDigit(num))) {\n                count
    += 1;\n            }\n        }\n        return count;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5_6ramzm.cs(20,29): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    /tmp/tmp5_6ramzm.cs(20,43): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    /tmp/tmp5_6ramzm.cs(20,49): error CS0103: The name ''GetFirstDigit'' does not
    exist in the current context

    /tmp/tmp5_6ramzm.cs(20,72): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    /tmp/tmp5_6ramzm.cs(20,78): error CS0103: The name ''GetLastDigit'' does not exist
    in the current context

    '
  timestamp: 1659976802
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Aggregate(0L, (acc, x) => {\n            var f = x;\n            while (f
    > 10) f /= 10;\n            var l = x % 10;\n            if (f % 2 == 1 && l %
    2 == 1 && x > 10) acc++;\n            return acc;\n        });\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00f50db4b31a488a8efa6212f829bc36>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00f50db4b31a488a8efa6212f829bc36>:0
    \n"
  stdout: ''
  timestamp: 1659976802
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(x => x > 10 && x % 2 == 1 && (x / 10) % 2 == 1);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <100a35688e324d5a8b4af28fbb07586c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <100a35688e324d5a8b4af28fbb07586c>:0
    \n"
  stdout: ''
  timestamp: 1659976802
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(n => {\n            var val = Math.Abs(n);\n            return val
    > 10 && (val % 10) % 2 == 1 && (val / 10) % 2 == 1;\n        }).Count();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f75f7385eb824f2e9941822eb64046cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f75f7385eb824f2e9941822eb64046cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976802
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        int
    count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i]
    > 10 && FirstDigit(nums[i]) % 2 != 0 && LastDigit(nums[i]) % 2 != 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,
    (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1n3rwe2b.cs(20,33): error CS0103: The name ''FirstDigit'' does not exist
    in the current context

    /tmp/tmp1n3rwe2b.cs(20,65): error CS0103: The name ''LastDigit'' does not exist
    in the current context

    '
  timestamp: 1659976802
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        foreach (long n in nums) {\n            if (n > 10) {\n                long
    first = Math.Abs(n);\n                long last = n % 10;\n                if
    (first % 2 != 0 && last % 2 != 0) {\n                    count++;\n                }\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,
    (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <983da8adc1f640dfadfb4a0c4029a5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <983da8adc1f640dfadfb4a0c4029a5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976802
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        nums
    = nums.Where(num => num > 10 && num.ToString().First() % 2 != 0 && num.ToString().Last()
    % 2 != 0).ToList();\n        return nums.Count();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,
    (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976802
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(n => n > 10 && n % 2 == 1 && n.ToString().Last() % 2 == 1).Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f4dd06f469684cb9b9d3b507a6211c33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f4dd06f469684cb9b9d3b507a6211c33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976802
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(n => (n > 10) && (FirstDigit(n) % 2 == 1) && (LastDigit(n) % 2 == 1)).Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmurhksfw.cs(18,45): error CS0103: The name ''FirstDigit'' does not exist
    in the current context

    /tmp/tmpmurhksfw.cs(18,73): error CS0103: The name ''LastDigit'' does not exist
    in the current context

    '
  timestamp: 1659976802
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i]
    > 10 && (getFirstDigit(nums[i]) % 2 != 0) && (getLastDigit(nums[i]) % 2 != 0))
    {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwkurjp6s.cs(20,34): error CS0103: The name ''getFirstDigit'' does not
    exist in the current context

    /tmp/tmpwkurjp6s.cs(20,71): error CS0103: The name ''getLastDigit'' does not exist
    in the current context

    '
  timestamp: 1659976802
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(x => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last()
    % 2 != 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    TODO:\n        // return -1;\n        long count = 0;\n        foreach (long num
    in nums) {\n            if (num > 10 && num.ToString().First() % 2 != 0 && num.ToString().Last()
    % 2 != 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976802
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        var
    oddDigits = new List<int> {1, 3, 5, 7, 9};\n        var x = 0;\n        for (var
    i = 0; i < nums.Count; i++) {\n            if (nums[i] < 10) {\n                continue;\n
    \           }\n            if (nums[i] > 10) {\n                if (nums[i] %
    10 == 0) {\n                    continue;\n                }\n                var
    m = nums[i];\n                var lastDigit = (int)m % 10;\n                while
    (m > 0) {\n                    m /= 10;\n                }\n                if
    (oddDigits.Contains(lastDigit) &&\n                    oddDigits.Contains((int)m))
    {\n                    x++;\n                }\n            }\n        }\n        return
    x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <302e2fc465e84311be07eff742b25a5f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <302e2fc465e84311be07eff742b25a5f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        var
    solution = nums.Where(n => n > 10).Where(n => (n % 10) % 2 == 1 && (n / 10) %
    2 == 1).Count();\n        return solution;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a244a60719fb454da4426337f37f2149>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a244a60719fb454da4426337f37f2149>:0
    \n"
  stdout: ''
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(x =>\n            x > 10 &&\n            x % 2 == 1 &&\n            (x
    / 10) % 2 == 1 &&\n            (x / 100) % 2 == 1);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd8c3f2b14b54f5a9ae5697c17f60c4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd8c3f2b14b54f5a9ae5697c17f60c4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(n => n > 10 &&\n                               n.ToString().First()
    % 2 != 0 &&\n                               n.ToString().Last() % 2 != 0).Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        foreach (long i in nums) {\n            if (i > 10) {\n                long
    digits = (long)Math.Floor(Math.Log10(i)) + 1;\n                long first = (long)Math.Floor(i
    / Math.Pow(10, digits - 1));\n                long last = i % 10;\n                if
    (first % 2 != 0 && last % 2 != 0) {\n                    count++;\n                }\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,
    (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(num => (((num / 10) % 10) % 2 != 0 && (num % 10) % 2 != 0 && num >
    10)).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6bb8b7888f7b4f778fb6c810dbae30f9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6bb8b7888f7b4f778fb6c810dbae30f9>:0
    \n"
  stdout: ''
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    (long)nums.Count(n => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last()
    % 2 != 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(x => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last()
    % 2 != 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(x => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last()
    % 2 != 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i]
    < 0) {\n                nums[i] = nums[i] * -1;\n            }\n            long
    temp = nums[i];\n            int lastdigit = (int)(temp % 10);\n            int
    firstdigit = 0;\n            while (temp > 0) {\n                firstdigit =
    (int)(temp % 10);\n                temp = temp / 10;\n            }\n            if
    (firstdigit % 2 != 0 && lastdigit % 2 != 0 && nums[i] > 10) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,
    (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d94bd8e4baf44646aab6fbbdbd6b5e12>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d94bd8e4baf44646aab6fbbdbd6b5e12>:0
    \n"
  stdout: ''
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        int
    l = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i]
    > 10) {\n                int f = nums[i].ToString()[0];\n                int ff
    = nums[i].ToString()[nums[i].ToString().Length - 1];\n                if (f %
    2 != 0 && ff % 2 != 0) {\n                    l++;\n                }\n            }\n
    \       }\n        return l;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976803
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n      //
    Enter your code here\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaph0khdw.cs(17,24): error CS0161: ''Problem.Specialfilter(List<long>)'':
    not all code paths return a value

    '
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    num = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i]
    > 10 && Math.Abs(nums[i]) % 2 == 1 && Math.Abs(nums[i] % 10) % 2 == 1) {\n                num++;\n
    \           }\n        }\n        return num;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8219d81763734a3980ff1f8bc2095f5d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8219d81763734a3980ff1f8bc2095f5d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        foreach (long num in nums) {\n            if (num > 10 &&
    num.ToString().First() % 2 != 0 && num.ToString().Last() % 2 != 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,
    (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    Your code goes here\n        long total = 0;\n        for (int i = 0; i < nums.Count;
    i++) {\n            if ((nums[i] > 10) && (nums[i] % 2 != 0) && (nums[i] % 10
    != 0)) {\n                total++;\n            }\n        }\n        return total;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <152ef4ecf63f490eac49c25b0c5a5cb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <152ef4ecf63f490eac49c25b0c5a5cb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976803
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        nums
    = nums.Where(n => n > 10).ToList();\n        nums = nums.Where(n => \n            IsOdd(n.ToString()[0])
    && IsOdd(n.ToString()[n.ToString().Length - 1])\n        ).ToList();\n        return
    nums.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_asggfa4.cs(20,13): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    /tmp/tmp_asggfa4.cs(20,39): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    '
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        nums.ForEach(num => {\n            var first = num.ToString()[0];\n
    \           var last = num.ToString()[num.ToString().Length - 1];\n            if
    (num > 10 && int.Parse(first.ToString()) % 2 != 0 && int.Parse(last.ToString())
    % 2 != 0) {\n                count++;\n            }\n        });\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976803
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    (\n            from n in nums\n            where n > 10 && first(n) % 2 == 1 &&
    last(n) % 2 == 1\n            select n\n        ).Count();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdild_w9s.cs(20,29): error CS0103: The name ''first'' does not exist in
    the current context

    /tmp/tmpdild_w9s.cs(20,50): error CS0103: The name ''last'' does not exist in
    the current context

    '
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(x => x >= 10 && x % 2 == 1 && x / 10 % 2 == 1);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <080ff0ac4b3149a2839e1de41f8ac1f2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <080ff0ac4b3149a2839e1de41f8ac1f2>:0
    \n"
  stdout: ''
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    ret = 0;\n        foreach (long n in nums) {\n            if (n < 0) continue;\n
    \           long first = n % 10;\n            long last = n / 10;\n            last
    = last % 10;\n            if (n > 10 && first % 2 == 1 && last % 2 == 1) {\n                ret++;\n
    \           }\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afc89b12f73343fa90a71b9ebb5d9882>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afc89b12f73343fa90a71b9ebb5d9882>:0
    \n"
  stdout: ''
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i]
    >= 10) {\n                long lastDigit = nums[i] % 10;\n                if (lastDigit
    % 2 == 1) {\n                    long firstDigit = 0;\n                    while
    (nums[i] != 0) {\n                        firstDigit = nums[i] % 10;\n                        nums[i]
    /= 10;\n                    }\n                    if (firstDigit % 2 == 1) {\n
    \                       count++;\n                    }\n                }\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(x => x > 10 && Math.Abs(x) > 10 && (x % 10) % 2 == 1 && (x / 10) %
    2 == 1).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e84645feb3c143f7b7295e155c6eda69>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e84645feb3c143f7b7295e155c6eda69>:0
    \n"
  stdout: ''
  timestamp: 1659976803
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(x => x >= 10 && IsOdd(x) && IsOdd(First(x)) && IsOdd(Last(x))).Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmhdw05af.cs(18,43): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    /tmp/tmpmhdw05af.cs(18,55): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    /tmp/tmpmhdw05af.cs(18,61): error CS0103: The name ''First'' does not exist in
    the current context

    /tmp/tmpmhdw05af.cs(18,74): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    /tmp/tmpmhdw05af.cs(18,80): error CS0103: The name ''Last'' does not exist in
    the current context

    '
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(x => x >= 10 && x.ToString().First() % 2 != 0 && x.ToString().Last()
    % 2 != 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    Convert nums to a List<String>\n        List<String> numsAsStrings = nums.ConvertAll(new
    Converter<long, String>(Convert.ToString));\n        // Filter out all numbers
    not greater than 10\n        List<String> numsAsStringsGreaterThan10 = numsAsStrings.FindAll(delegate(String
    num){\n            return Convert.ToInt64(num) > 10;\n        });\n        //
    Filter out all numbers whose first and last digits are even\n        List<String>
    numsAsStringsFirstAndLastDigitsOdd = numsAsStringsGreaterThan10.FindAll(delegate(String
    num){\n            return (num[0] % 2 != 0) && (num[num.Length - 1] % 2 != 0);\n
    \       });\n        // Return the length of the filtered list\n        return
    numsAsStringsFirstAndLastDigitsOdd.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    cnt = 0;\n        foreach (long n in nums) {\n            if (n > 10) {\n                string
    s = n.ToString();\n                char l = s[0];\n                char h = s[s.Length
    - 1];\n                if (\n                    (l == '1' || l == '3' || l ==
    '5' || l == '7' || l == '9') &&\n                    (h == '1' || h == '3' ||
    h == '5' || h == '7' || h == '9')\n                ) {\n                    cnt
    += 1;\n                }\n            }\n        }\n        return cnt;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    write your code here\n        long ret = 0;\n        foreach (long n in nums)
    {\n            if (n > 10 && n < 100) {\n                if (n % 2 == 1) {\n                    ret++;\n
    \               }\n            } else if (n > 100) {\n                string s
    = n.ToString();\n                if (s[0] % 2 == 1 && s[s.Length - 1] % 2 == 1)
    {\n                    ret++;\n                }\n            }\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4cd1b6845115428e99f593f602d5800c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4cd1b6845115428e99f593f602d5800c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976804
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Where(x => x > 10 && x.ToString().Substring(0, 1) % 2 != 0 && x.ToString().Substring(x.ToString().Length
    - 1, 1) % 2 != 0).Count();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp190du767.cs(18,42): error CS0019: Operator ''%'' cannot be applied to
    operands of type ''string'' and ''int''

    /tmp/tmp190du767.cs(18,83): error CS0019: Operator ''%'' cannot be applied to
    operands of type ''string'' and ''int''

    '
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(n => n > 10 && n % 2 == 1 && (n / 10) % 2 == 1);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abd42bd6b5fe447c9db8026672c6499d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abd42bd6b5fe447c9db8026672c6499d>:0
    \n"
  stdout: ''
  timestamp: 1659976801
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long
    num_good = 0;\n        // write your code here\n        return num_good;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==
    (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,
    (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9bee32a95e34a108d4f6d65aedc2178>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9bee32a95e34a108d4f6d65aedc2178>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976804
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(n => Math.Abs(n) > 10 &&\n                               IsOdd(n) &&\n
    \                              IsOdd(n % 10));\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,
    (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbhyn04xd.cs(19,32): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    /tmp/tmpbhyn04xd.cs(20,32): error CS0103: The name ''IsOdd'' does not exist in
    the current context

    '
  timestamp: 1659976803
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        return
    nums.Count(x => Math.Abs(x) >= 10 && IsFirstLastOdd(x));\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n
    \   Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,
    (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,
    (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,
    (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new
    List<long>())) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0g0xt0q4.cs(18,53): error CS0103: The name ''IsFirstLastOdd'' does not
    exist in the current context

    '
  timestamp: 1659976803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a list of numbers as input and returns
    \n    // the number of elements in the list that are greater than 10 and both
    \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For
    example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,
    (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new
    long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n
    \   // (2L)\n    public static long Specialfilter(List<long> nums) {\n        //
    Your solution here\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,
    (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new
    long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))
    == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,
    (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new
    List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,
    (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))
    == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <58741296281748c78a10518f871c907b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <58741296281748c78a10518f871c907b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976804
