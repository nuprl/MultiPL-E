name: HumanEval_68_pluck
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // \"Given a list representing a branch of a tree that has non-negative\
  \ integer nodes\n    // your task is to pluck one of the nodes and return it.\n\
  \    // The plucked node should be the node with the smallest even value.\n    //\
  \ If multiple nodes with the same smallest even value are found return the node\
  \ that has smallest index.\n    // The plucked node should be returned in a list,\
  \ [ smalest_value, its index ],\n    // If there are no even values or the given\
  \ list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new\
  \ long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,\
  \ (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n\
  \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
  \    // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n\
  \    // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
  \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
  \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n\
  \    // so we will choose the first zero, which has the smallest index.\n    //\
  \ Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
  \    public static List<long> Pluck(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
  \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,\
  \ (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,\
  \ (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        var min = arr.Where(x\
    \ => x % 2 == 0).DefaultIfEmpty().Min();\n        if (min == 0) {\n          \
    \  result.Add(min);\n            result.Add(arr.FindIndex(x => x == min));\n \
    \       } else if (min == int.MaxValue) {\n            return result;\n      \
    \  } else {\n            result.Add(min);\n            result.Add(arr.FindIndex(x\
    \ => x == min));\n        }\n        return result;", "        long m = Int64.MaxValue;\n\
    \        int i = -1;\n        for (int j = 0; j < arr.Count; j++) {\n        \
    \    long n = arr[j];\n            if (n < m && n % 2 == 0) {\n              \
    \  m = n;\n                i = j;\n            }\n        }\n        if (i ==\
    \ -1) {\n            return new List<long>();\n        }\n        return new List<long>()\
    \ { m, i };", "        if (arr.Count <= 0) {\n            return new List<long>();\n\
    \        }\n        long min = long.MaxValue;\n        List<long> res = new List<long>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n                min = arr[i];\n                res.Clear();\n\
    \                res.Add(min);\n                res.Add(i);\n            }\n \
    \       }\n        if (res.Count == 0) {\n            return new List<long>();\n\
    \        }\n        return res;", "        long minE = long.MaxValue;\n      \
    \  long minI = long.MaxValue;\n        for (long i = 0; i < arr.Count; i++) {\n\
    \            long e = arr[(int)i];\n            if (e % 2 == 0 && e < minE) {\n\
    \                minE = e;\n                minI = i;\n            }\n       \
    \ }\n        if (minE != long.MaxValue) {\n            return new List<long>(new\
    \ long[]{minE, minI});\n        }\n        return new List<long>();", '        return
    null;', "        // First we check if there are any even numbers in the array\n\
    \        bool containsEven = false;\n        foreach (long l in arr) {\n     \
    \       if (l % 2 == 0) {\n                containsEven = true;\n            \
    \    break;\n            }\n        }\n        // If not return an empty list\n\
    \        if (!containsEven) {\n            return new List<long>();\n        }\n\
    \        // Otherwise we need to find the smallest even number\n        long minEven\
    \ = long.MaxValue;\n        int minEvenIndex = -1;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < minEven) {\n\
    \                minEven = arr[i];\n                minEvenIndex = i;\n      \
    \      }\n        }\n        // And return a list containing the value and index\
    \ of the smallest even\n        return new List<long> { minEven, minEvenIndex\
    \ };", '        return new List<long>();', '        return new List<long>();',
  "        long lowest = long.MaxValue;\n        long index = -1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < lowest)\
    \ {\n                lowest = arr[i];\n                index = i;\n          \
    \  }\n        }\n        return index == -1 ? new List<long>() : new List<long>{\
    \ lowest, index + 1 };", "        if (arr.Count == 0) {\n            return new\
    \ List<long>();\n        }\n        long min = long.MaxValue;\n        int minIdx\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ minIdx = i;\n            }\n        }\n        if (minIdx == -1) {\n       \
    \     return new List<long>();\n        }\n        return new List<long>() { min,\
    \ minIdx };", "        // This problem is easy to solve.\n        // It gets harder,\
    \ when you have to consider the performance.\n        // So, let's pretend that\
    \ we have to solve it in the most efficient way possible.\n        // The first\
    \ thing we can do is to sort the array.\n        // Sort is O(n log n), so we\
    \ can do that.\n        // Then we can iterate over the array and return the first\
    \ even number.\n        // That's O(n) time, so the solution has time complexity\
    \ of O(n log n).\n        // But can we make the solution faster?\n        //\
    \ We know that the array is sorted.\n        // If there are no even numbers in\
    \ the array, then it doesn't matter, because we'll return an empty list anyway.\n\
    \        // If there are even numbers in the array, then they are somewhere in\
    \ the middle.\n        // The highest even number is probably somewhere at the\
    \ end of the array.\n        // If we check if the last element is even, and if\
    \ it is, we can return it.\n        // That would be O(1) time, but it is highly\
    \ unlikely that the highest even number is in the end of the array.\n        //\
    \ It's more likely to be the last even number.\n        // But we don't know how\
    \ many even numbers there are.\n        // Let's make an assumption, that there\
    \ are at least 4 even numbers.\n        // The first even number is at the index\
    \ 1, and the last even number is at the index n.\n        // If that's the case,\
    \ we can start from the index n/2, and then go left and right, until we find an\
    \ even number.\n        // For example, if n = 10, the even numbers are (1, 2,\
    \ 3, 4, 6, 7, 8, 9).\n        // We can start from the index 5 (n/2 = 10/2 = 5),\
    \ then go left and find the index 4, and then go right and find the index 6.\n\
    \        // By doing this, we go left and right and find the first even number\
    \ in O(log n) time.\n        // We can implement the algorithm, which we described\
    \ above.\n        // If we know that there are at least 4 even numbers, then that's\
    \ all we need.\n        // If we don't know that there are at least 4", "    \
    \    long min = -1;\n        long index = -1;\n        long i = 0;\n        foreach\
    \ (long l in arr) {\n            i += 1;\n            if (l % 2 == 0) {\n    \
    \            if (min < 0 || l < min) {\n                    min = l;\n       \
    \             index = i;\n                }\n            }\n        }\n      \
    \  if (min < 0) {\n            return new List<long>();\n        }\n        return\
    \ new List<long> { min, index };", "        // Write code here\n        return\
    \ new List<long>();", "        // Code here :)\n        List<long> result = new\
    \ List<long>();\n        List<long> even = new List<long>();\n        for (long\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[(int)i] % 2 == 0) {\n    \
    \            even.Add(arr[(int)i]);\n            }\n        }\n        if (even.Count\
    \ != 0) {\n            long smallest = even[0];\n            long idx = 0;\n \
    \           for (long i = 0; i < even.Count; i++) {\n                if (even[(int)i]\
    \ < smallest) {\n                    smallest = even[(int)i];\n              \
    \      idx = i;\n                }\n            }\n            result.Add(smallest);\n\
    \            result.Add(idx);\n        }\n        return result;", "        long\
    \ smallest = long.MaxValue;\n        long index = -1;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < smallest)\
    \ {\n                smallest = arr[i];\n                index = i;\n        \
    \    }\n        }\n        if (index == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { smallest, index };", "        long\
    \ minIdx = -1;\n        long minVal = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            long val = arr[i];\n            if (val == 0) {\n      \
    \          if (minIdx == -1) {\n                    minIdx = i;\n            \
    \        minVal = val;\n                }\n            } else if (val % 2 == 0)\
    \ {\n                if (minIdx == -1 || val < minVal) {\n                   \
    \ minIdx = i;\n                    minVal = val;\n                }\n        \
    \    }\n        }\n        if (minIdx == -1) {\n            return new List<long>();\n\
    \        } else {\n            return new List<long>() { minVal, minIdx };\n \
    \       }", "        // smallest even value\n        long smallest = long.MaxValue;\n\
    \        List<long> smallestArr = new List<long>();\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < smallest) {\n\
    \                smallest = arr[i];\n                smallestArr = new List<long>()\
    \ { smallest, i };\n            }\n        }\n        return smallestArr;", " \
    \       List<long> list = new List<long>();\n        // your code here\n     \
    \   return list;", "        return arr.Where(i => i % 2 == 0).DefaultIfEmpty().Min()\
    \ switch {\n            0 => new List<long>(),\n            var a => new List<long>\
    \ { a, arr.IndexOf(a) + 1 },\n        };", "        if(arr.Count() == 0) {\n \
    \           return new List<long>();\n        }\n        else {\n            //\
    \ int idx = 0;\n            long minval = 10000;\n            int minidx = 10000;\n\
    \            for(int i = 0; i < arr.Count(); i++) {\n                if(arr[i]\
    \ % 2 == 0 && arr[i] < minval) {\n                    minval = arr[i];\n     \
    \               minidx = i;\n                }\n            }\n            if(minval\
    \ != 10000) {\n                return new List<long> { minval, minidx };\n   \
    \         }\n            else {\n                return new List<long>();\n  \
    \          }\n        }", '        return new List<long> {0, 0};', "        //\
    \ Your solution begins here.\n        return null;", '        return arr.Select((num,
    i) => (num, i)).Where(tup => tup.num % 2 == 0).OrderBy(tup => tup.num).ThenBy(tup
    => tup.i).Select(tup => new List<long>{tup.num, tup.i}).FirstOrDefault() ?? new
    List<long>();', "        int min = int.MaxValue;\n        int min_index = -1;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n                min = (int)arr[i];\n                min_index\
    \ = i;\n            }\n        }\n        if (min_index == -1) return new List<long>();\n\
    \        return new List<long> { min, min_index };", "        var list = new List<long>();\n\
    \        var arrL = arr.ToList();\n        for (var i = 0; i < arrL.Count; i++)\
    \ {\n            if (arrL[i] % 2 == 0) {\n                list.Add(arrL[i]);\n\
    \            }\n        }\n        if (list.Count == 0) {\n            return\
    \ new List<long>();\n        }\n        var s = list.Min();\n        var ind =\
    \ arrL.IndexOf(s);\n        var l = new List<long>();\n        l.Add(s);\n   \
    \     l.Add(ind);\n        return l;", "        var minEven = arr.FirstOrDefault(e\
    \ => e % 2 == 0);\n        var minEvenIdx = arr.IndexOf(minEven);\n        if\
    \ (minEvenIdx < 0) {\n            return new List<long>();\n        }\n      \
    \  return new List<long> { minEven, minEvenIdx };", "        List<long> outList\
    \ = new List<long>();\n        bool oddFound = false;\n        bool evenFound\
    \ = false;\n        foreach (long l in arr) {\n            if (l % 2 == 0) {\n\
    \                if (!evenFound) {\n                    outList.Add(l);\n    \
    \                outList.Add(arr.IndexOf(l));\n                    evenFound =\
    \ true;\n                } else if (l < outList[0]) {\n                    outList[0]\
    \ = l;\n                    outList[1] = arr.IndexOf(l);\n                }\n\
    \            } else {\n                oddFound = true;\n            }\n     \
    \   }\n        if (oddFound)\n            return new List<long>();\n        return\
    \ outList;", "        long min = long.MaxValue;\n        int index = -1;\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == 0 && index\
    \ == -1) {\n                index = i;\n            }\n            if (arr[i]\
    \ > 0 && arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n \
    \               index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>\
    \ { min, index };", "        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        var min_even = arr.Where(n => n % 2 == 0).Min();\n       \
    \ var min_even_index = arr.IndexOf(min_even);\n        return new List<long>{min_even,\
    \ min_even_index};", "        // Your code here\n        return arr;", "     \
    \   if (arr.Count == 0) {\n            return new List<long>();\n        }\n \
    \       long min = -1;\n        int minIndex = -1;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                if\
    \ (min == -1 || arr[i] < min) {\n                    min = arr[i];\n         \
    \           minIndex = i;\n                }\n            }\n        }\n     \
    \   if (min == -1) {\n            return new List<long>();\n        }\n      \
    \  return new List<long>() { min, minIndex };", "        long even = 0;\n    \
    \    var smallest = arr.Where(x => x % 2 == 0).OrderBy(x => x).FirstOrDefault();\n\
    \        var result = new List<long> {\n            smallest,\n            arr.FindIndex(x\
    \ => x == smallest)\n        };\n        return result;", "        long min =\
    \ long.MaxValue;\n        int index = -1;\n        int ind = 0;\n        foreach\
    \ (long x in arr) {\n            if (x % 2 == 0 && x < min) {\n              \
    \  min = x;\n                index = ind;\n            }\n            ind++;\n\
    \        }\n        if (index == -1)\n            return new List<long>();\n \
    \       return new List<long>() { min, index };", "        // your code goes here\n\
    \        List<long> plucked = new List<long>();\n        if (arr.Count == 0) return\
    \ plucked;\n        int index = -1;\n        long val = 0;\n        bool found\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (!found) {\n                    index = i;\n\
    \                    val = arr[i];\n                    found = true;\n      \
    \          } else {\n                    if (arr[i] < val) {\n               \
    \         index = i;\n                        val = arr[i];\n                \
    \    }\n                }\n            }\n        }\n        if (found) {\n  \
    \          plucked.Add(val);\n            plucked.Add(index);\n        }\n   \
    \     return plucked;", "        List<long> result = new List<long>();\n     \
    \   result.Add(0);\n        result.Add(0);\n        // get even values and their\
    \ indices\n        var evens = arr.Select((x, i) => new { Value = x, Index = i\
    \ }).Where(x => x.Value % 2 == 0);\n        // check if empty list was passed\n\
    \        if (evens.Count() == 0) {\n            return result;\n        }\n  \
    \      // get min even value\n        long minEven = evens.Select(x => x.Value).Min();\n\
    \        // get indices of even values\n        List<long> evensIndices = evens.Where(x\
    \ => x.Value == minEven).Select(x => x.Index).ToList();\n        // get minimum\
    \ index\n        long minIndex = evensIndices.Min();\n        // add even values\
    \ to result\n        result[0] = minEven;\n        result[1] = minIndex;\n   \
    \     return result;", "        long minValue = long.MaxValue;\n        long minIndex\
    \ = long.MaxValue;\n        for (int i = 0; i < arr.Count; i++) {\n          \
    \  long n = arr[i];\n            if (n % 2 == 0 && n < minValue) {\n         \
    \       minValue = n;\n                minIndex = i;\n            }\n        }\n\
    \        if (minValue == long.MaxValue) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { minValue, minIndex };", "      \
    \  // sort the array\n        arr.Sort();\n        // create a list that holds\
    \ the indices of all the even elements in the list\n        List<long> evenIndices\
    \ = new List<long>();\n        // loop through the list arr and find all the even\
    \ indices\n        // add the indices of the even elements to the list evenIndices\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                evenIndices.Add(i);\n            }\n        }\n      \
    \  // initialise the variable that will hold the index of the smallest even element\
    \ in the list\n        long smallestEven = 0;\n        // check if the list evenIndices\
    \ is empty\n        if (evenIndices.Count == 0) {\n            // if it is empty\
    \ then return an empty list\n            return new List<long>();\n        } else\
    \ {\n            // if it is not empty then set the smallestEven to the first\
    \ index in the list\n            smallestEven = evenIndices[0];\n        }\n \
    \       // loop through the list evenIndices and find the smallest index\n   \
    \     // assign the value of the smallest index to the variable smallestEven\n\
    \        for (int i = 0; i < evenIndices.Count; i++) {\n            if (evenIndices[i]\
    \ < smallestEven) {\n                smallestEven = evenIndices[i];\n        \
    \    }\n        }\n        // create a list to hold the even values and the indices\n\
    \        List<long> result = new List<long>();\n        // add the value at smallestEven\
    \ to the result list\n        result.Add(arr[smallestEven]);\n        // add the\
    \ smallestEven index to the result list\n        result.Add(smallestEven);\n \
    \       // return the result list\n        return result;", "        // TODO:\
    \ Write some code here to return the correct value.\n        return null;", " \
    \       List<long> res = new List<long>();\n        int idx = 0;\n        foreach\
    \ (long x in arr) {\n            if (x % 2 == 0) {\n                if (res.Count\
    \ == 0) res.Add(x);\n                else if (res[0] > x) {\n                \
    \    res[0] = x;\n                    res.Add(idx);\n                }\n     \
    \       }\n            idx++;\n        }\n        return res;", "        long\
    \ smallest = long.MaxValue;\n        int index = -1;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < smallest)\
    \ {\n                smallest = arr[i];\n                index = i;\n        \
    \    }\n        }\n        if (index != -1) {\n            List<long> ret = new\
    \ List<long>();\n            ret.Add(smallest);\n            ret.Add(index);\n\
    \            return ret;\n        }\n        return new List<long>();", "    \
    \    return arr.Select((val, ind) => new Tuple<long, long>(val, ind))\n      \
    \      .Where(tup => tup.Item1 % 2 == 0)\n            .OrderBy(tup => tup.Item1)\n\
    \            .ThenBy(tup => tup.Item2)\n            .Select(tup => new List<long>()\
    \ { tup.Item1, tup.Item2 })\n            .FirstOrDefault() ?? new List<long>();",
  "        if (arr.Count == 0) return new List<long>();\n        long? min = null;\n\
    \        long? minIndex = null;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                if (min == null || arr[i]\
    \ < min) {\n                    min = arr[i];\n                    minIndex =\
    \ i;\n                }\n            }\n        }\n        if (min == null) return\
    \ new List<long>();\n        return new List<long> { min.Value, minIndex.Value\
    \ };", "        if(arr.Count == 0) return new List<long>();\n        var evenValues\
    \ = arr.Where(x => x % 2 == 0).ToList();\n        if(evenValues.Count == 0) return\
    \ new List<long>();\n        long lowestEven = evenValues.Min();\n        long\
    \ index = arr.IndexOf(lowestEven);\n        return new List<long> { lowestEven,\
    \ index };", "        long? minEven = arr.Where(x => x % 2 == 0).Min();\n    \
    \    if (minEven == null) {\n            return new List<long>();\n        }\n\
    \        return new List<long>() { (long)minEven, arr.IndexOf((long)minEven) };",
  "        if (arr.Count() == 0) {\n            return new List<long>();\n       \
    \ }\n        if (arr.Count() == 1) {\n            if (arr[0] % 2 == 0) {\n   \
    \             return new List<long>() { arr[0], 0 };\n            } else {\n \
    \               return new List<long>();\n            }\n        }\n        long\
    \ min = arr[0];\n        long minIndex = 0;\n        for (long i = 0; i < arr.Count();\
    \ i++) {\n            if (arr[(int)i] % 2 == 0) {\n                if (arr[(int)i]\
    \ < min) {\n                    min = arr[(int)i];\n                    minIndex\
    \ = i;\n                }\n            }\n        }\n        if (min % 2 == 0)\
    \ {\n            return new List<long>() { min, minIndex };\n        } else {\n\
    \            return new List<long>();\n        }", "        if (arr.Count == 0)\
    \ {\n            return new List<long>();\n        }\n        long minIndex =\
    \ long.MaxValue;\n        long minEven = long.MaxValue;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < minEven)\
    \ {\n                minEven = arr[i];\n                minIndex = i;\n      \
    \      }\n        }\n        if (minIndex == long.MaxValue) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>() { minEven, minIndex\
    \ };", "        // your code here\n        return new List<long>();", "      \
    \  if (arr.Count == 0) {\n            return new List<long>();\n        }\n  \
    \      var even = arr.Where(x => x % 2 == 0).OrderBy(x => x).First();\n      \
    \  if (even == 0) {\n            return new List<long> { even, arr.IndexOf(even)\
    \ };\n        }\n        var i = arr.IndexOf(even);\n        return new List<long>\
    \ { even, i };", "        var evens = arr.Where(e => e % 2 == 0).ToList();\n \
    \       if(evens.Count == 0) {\n            return new List<long>();\n       \
    \ }\n        var min = evens.Min();\n        var idx = arr.IndexOf(min);\n   \
    \     return new List<long>() { min, idx };", '        return arr.Select((x, i)
    => (x, i)).Where(x => x.x % 2 == 0).OrderBy(x => x.x).ThenBy(x => x.i).Select(x
    => new List<long>() { x.x, x.i }).FirstOrDefault() ?? new List<long>();', "  \
    \      long min = 0;\n        int index = 0;\n        bool found = false;\n  \
    \      for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                if (!found) {\n                    found = true;\n      \
    \              min = arr[i];\n                    index = i;\n               \
    \ } else {\n                    if (arr[i] < min) {\n                        min\
    \ = arr[i];\n                        index = i;\n                    }\n     \
    \           }\n            }\n        }\n        if (found) {\n            return\
    \ new List<long>() {min, index};\n        } else {\n            return new List<long>();\n\
    \        }", "        // your code goes here\n        int len = arr.Count;\n \
    \       if (len == 0) {\n            return new List<long>();\n        }\n   \
    \     long evenMin = Int64.MaxValue;\n        int evenMinIndex = -1;\n       \
    \ for (int i = 0; i < len; i++) {\n            long val = arr[i];\n          \
    \  if (val % 2 == 0 && val < evenMin) {\n                evenMin = val;\n    \
    \            evenMinIndex = i;\n            }\n        }\n        if (evenMinIndex\
    \ != -1) {\n            return new List<long> { evenMin, evenMinIndex };\n   \
    \     }\n        return new List<long>();", "        var evens = arr.Where(a =>\
    \ a % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return new\
    \ List<long>();\n        }\n        var minEven = evens.Min();\n        var index\
    \ = arr.IndexOf(minEven);\n        return new List<long> { minEven, index };",
  "        long smallestEven = int.MaxValue;\n        int minIndex = int.MaxValue;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] < smallestEven) {\n                smallestEven = arr[i];\n    \
    \            minIndex = i;\n            }\n        }\n        if (smallestEven\
    \ == int.MaxValue) return new List<long>();\n        return new List<long>() {\
    \ smallestEven, minIndex };", "        long min = long.MaxValue;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ index = i;\n            }\n        }\n        if (index == -1) {\n         \
    \   return new List<long>();\n        }\n        return new List<long>() { min,\
    \ index };", "        // your code here\n        var even = arr.Select((long node,\
    \ int index) => {\n            return new Tuple<long, int, long>(node, index,\
    \ node % 2L);\n        }).Where((t) => {\n            return t.Item3 == 0L;\n\
    \        }).OrderBy((t) => {\n            return t.Item1;\n        }).ThenBy((t)\
    \ => {\n            return t.Item2;\n        }).ToList();\n        return even.Count\
    \ == 0 ? new List<long>() : new List<long>() {\n            even[0].Item1,\n \
    \           even[0].Item2\n        };", "        // This was fun; I wanted to\
    \ try writing a problem that sort of depended on a\n        // particular function\
    \ being tail recursive.  I think it worked.\n        long idx = 1;\n        long\
    \ min = 0;\n        bool found = false;\n        foreach (long val in arr) {\n\
    \            if (val % 2 == 0) {\n                if (!found) {\n            \
    \        min = val;\n                    found = true;\n                } else\
    \ if (val < min) {\n                    min = val;\n                    idx =\
    \ 1;\n                } else if (val == min) {\n                    idx += 1;\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   return new List<long>(new long[] {min, idx});\n        } else {\n        \
    \    return new List<long>();\n        }", "        List<long> smallestEven =\
    \ new List<long>();\n        List<long> nullList = new List<long>();\n       \
    \ if (arr.Count == 0) {\n            return nullList;\n        }\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            smallestEven.Add(arr[i]);\n            }\n        }\n        if (smallestEven.Count\
    \ == 0) {\n            return nullList;\n        }\n        long smallestEvenIndex\
    \ = smallestEven.Min();\n        List<long> result = new List<long>();\n     \
    \   result.Add(smallestEvenIndex);\n        result.Add(arr.IndexOf(smallestEvenIndex));\n\
    \        return result;", "        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0) {\n                return new List<long>() { arr[i],\
    \ i };\n            }\n        }\n        return new List<long>();", "       \
    \ long smallestEven = long.MaxValue;\n        int index = -1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < smallestEven)\
    \ {\n                smallestEven = arr[i];\n                index = i;\n    \
    \        }\n        }\n        if (index == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long> { smallestEven, index };", "       \
    \ int l = arr.Count;\n        if (l == 0) return new List<long>();\n        long\
    \ smalestEven = arr[0];\n        int smalestEvenIndex = 0;\n        for (int i\
    \ = 0; i < l; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < smalestEven)\
    \ {\n                smalestEven = arr[i];\n                smalestEvenIndex =\
    \ i;\n            }\n        }\n        if (smalestEven % 2 == 0) return new List<long>{smalestEven,\
    \ smalestEvenIndex};\n        return new List<long>();", "        long minval\
    \ = Int64.MaxValue;\n        long minindex = -1;\n        long index = 0;\n  \
    \      foreach (long x in arr) {\n            if (x % 2 == 0 && x < minval) {\n\
    \                minval = x;\n                minindex = index;\n            }\n\
    \            index++;\n        }\n        if (minindex == -1) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>() { minval, minindex\
    \ };", "        var evens = from value in arr where value % 2 == 0 select value;\n\
    \        if (!evens.Any()) {\n            return new List<long>();\n        }\n\
    \        long min = evens.Min();\n        int index = arr.IndexOf(min);\n    \
    \    return new List<long>() { min, index };", "        List<long> ret = new List<long>();\n\
    \        long smallest_even = arr.Where(x => x % 2 == 0).DefaultIfEmpty(long.MaxValue).Min();\n\
    \        if (smallest_even < long.MaxValue) {\n            int index = arr.IndexOf(smallest_even);\n\
    \            ret.Add(smallest_even);\n            ret.Add(index);\n        }\n\
    \        return ret;", "        List<long> ans = new List<long>();\n        if\
    \ (arr.Count == 0) return ans;\n        long minimum = arr[0];\n        long minimumindex\
    \ = 0;\n        bool seen = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            long item = arr[i];\n            if (item == 0) {\n         \
    \       if (!seen) {\n                    minimum = item;\n                  \
    \  minimumindex = i;\n                    seen = true;\n                }\n  \
    \          } else if (item % 2 == 0) {\n                if (!seen) {\n       \
    \             minimum = item;\n                    minimumindex = i;\n       \
    \             seen = true;\n                } else if (item < minimum) {\n   \
    \                 minimum = item;\n                    minimumindex = i;\n   \
    \             }\n            }\n        }\n        if (seen) {\n            ans.Add(minimum);\n\
    \            ans.Add(minimumindex);\n        }\n        return ans;", "      \
    \  long? smallest_even = null;\n        int smallest_even_index = -1;\n      \
    \  int index = 0;\n        foreach (long e in arr) {\n            if (e % 2 ==\
    \ 0) {\n                if (smallest_even == null || e < smallest_even) {\n  \
    \                  smallest_even = e;\n                    smallest_even_index\
    \ = index;\n                }\n            }\n            index++;\n        }\n\
    \        if (smallest_even == null) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { smallest_even.Value, smallest_even_index\
    \ };", "        List<long> t = new List<long>();\n        if (arr.Count == 0)\
    \ return t;\n        long minVal = Int64.MaxValue;\n        long idx = -1;\n \
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0\
    \ && arr[i] < minVal) {\n                minVal = arr[i];\n                idx\
    \ = i;\n            }\n        }\n        if (idx != -1) {\n            t.Add(minVal);\n\
    \            t.Add(idx);\n        }\n        return t;", "        // Write your\
    \ code here.\n        long min = 0;\n        bool found = false;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            if (!found) {\n                    min = arr[i];\n              \
    \      found = true;\n                } else {\n                    if (arr[i]\
    \ < min) {\n                        min = arr[i];\n                    }\n   \
    \             }\n            }\n        }\n        List<long> ret = new List<long>();\n\
    \        if (found) {\n            ret.Add(min);\n            ret.Add(arr.IndexOf(min));\n\
    \        }\n        return ret;", "        if (arr.Count == 0) return new List<long>();\n\
    \        var evens = arr.Where(x => x % 2 == 0).ToList();\n        if (evens.Count\
    \ == 0) return new List<long>();\n        var min = evens.Min();\n        return\
    \ new List<long>{min, arr.IndexOf(min)};", "        long smallestEven = long.MaxValue;\n\
    \        int smallestEvenIndex = -1;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0 && arr[i] < smallestEven) {\n           \
    \     smallestEven = arr[i];\n                smallestEvenIndex = i;\n       \
    \     }\n        }\n        if (smallestEvenIndex == -1) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>() { smallestEven,\
    \ smallestEvenIndex };", "        // your code here!\n        return new List<long>();",
  "        if (arr.Count() == 0) return new List<long>();\n        List<long> ret\
    \ = new List<long>();\n        long val = -1, idx = -1;\n        for (int i =\
    \ 0; i < arr.Count(); i++) {\n            if (arr[i] % 2 == 0) {\n           \
    \     if (val == -1 || arr[i] < val) {\n                    val = arr[i];\n  \
    \                  idx = i;\n                }\n            }\n        }\n   \
    \     if (val != -1) {\n            ret.Add(val);\n            ret.Add(idx);\n\
    \        }\n        return ret;", "        long[] values = arr.ToArray();\n  \
    \      int? smallestIndex = null;\n        long smallestValue = -1;\n        for\
    \ (int i = 0; i < values.Length; i++) {\n            if (values[i] % 2 == 0) {\n\
    \                if (smallestIndex == null || values[i] < smallestValue) {\n \
    \                   smallestIndex = i;\n                    smallestValue = values[i];\n\
    \                }\n            }\n        }\n        if (smallestIndex == null)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>()\
    \ { smallestValue, smallestIndex.Value };", '        return arr.Select((x, i)
    => (x, i)).Where(x => x.x % 2 == 0).OrderBy(x => x.x).ThenBy(x => x.i).Select(x
    => x.x).Take(1).Concat(arr.Select((x, i) => (x, i)).Where(x => x.x % 2 == 0).OrderBy(x
    => x.x).ThenBy(x => x.i).Select(x => x.i).Take(1)).ToList();', "        int len\
    \ = arr.Count;\n        int minVal = int.MaxValue;\n        int minIndex = -1;\n\
    \        int minVal2 = int.MaxValue;\n        int minIndex2 = -1;\n        bool\
    \ hasZero = false;\n        bool hasEven = false;\n        bool hasOdd = false;\n\
    \        for (int i = 0; i < len; i++) {\n            if (arr[i] == 0) {\n   \
    \             hasZero = true;\n                if (minVal2 > arr[i]) {\n     \
    \               minVal2 = (int)arr[i];\n                    minIndex2 = i;\n \
    \               }\n            } else if (arr[i] % 2 == 0) {\n               \
    \ hasEven = true;\n                if (minVal > arr[i]) {\n                  \
    \  minVal = (int)arr[i];\n                    minIndex = i;\n                }\n\
    \            } else {\n                hasOdd = true;\n            }\n       \
    \ }\n        if (hasZero && !hasEven) {\n            return new List<long> { minVal2,\
    \ minIndex2 };\n        } else if (hasZero && hasEven) {\n            return new\
    \ List<long> { minVal, minIndex };\n        } else if (!hasZero && hasEven) {\n\
    \            return new List<long> { minVal, minIndex };\n        } else {\n \
    \           return new List<long>();\n        }", "        long min = arr.Count\
    \ > 0 ? arr[0] : 0;\n        for (int i = 0; i < arr.Count; i++) {\n         \
    \   if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n  \
    \          }\n        }\n        return new List<long>() { min, arr.IndexOf(min)\
    \ };", "        List<long> result = new List<long>();\n        int idx = 0;\n\
    \        long smallestEvenValue = 0;\n        bool hasEvenValue = false;\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                hasEvenValue = true;\n                if (arr[i] < smallestEvenValue\
    \ || smallestEvenValue == 0) {\n                    smallestEvenValue = arr[i];\n\
    \                    idx = i;\n                }\n            }\n        }\n \
    \       if (hasEvenValue) {\n            result.Add(smallestEvenValue);\n    \
    \        result.Add(idx);\n        }\n        return result;", "        // Write\
    \ your code here\n        if (arr.Count < 1) {\n            return new List<long>();\n\
    \        }\n\n        if (arr.Count < 2) {\n            if (arr[0] % 2 == 0) {\n\
    \                return new List<long> { arr[0], 1 };\n            }\n       \
    \     return new List<long>();\n        }\n\n        // check if all even number\n\
    \        bool allEven = true;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 != 0) {\n                allEven = false;\n      \
    \          break;\n            }\n        }\n\n        if (allEven) {\n      \
    \      // find minimum\n            long min = arr[0];\n            int minIndex\
    \ = 0;\n            for (int i = 1; i < arr.Count; i++) {\n                if\
    \ (arr[i] < min) {\n                    min = arr[i];\n                    minIndex\
    \ = i;\n                }\n            }\n            return new List<long> {\
    \ min, minIndex + 1 };\n        }\n\n        // find first even number\n     \
    \   for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n\
    \                return new List<long> { arr[i], i + 1 };\n            }\n   \
    \     }\n\n        return new List<long>();", "        if (arr.Count == 0) return\
    \ new List<long>();\n        int index = 0;\n        long min = long.MaxValue;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n                found = true;\n            }\n  \
    \      }\n        if (found) {\n            return new List<long>() { min, index\
    \ };\n        }\n        return new List<long>();", "        long min = long.MaxValue;\n\
    \        int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        return index ==\
    \ -1 ? new List<long>() : new List<long>() { min, index };", "        // your\
    \ code here\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n\n        // sort the array\n        arr.Sort();\n\n        // find\
    \ the first even number\n        int firstEvenIndex = arr.FindIndex(x => x % 2\
    \ == 0);\n\n        // if firstEvenIndex < 0, there are no even numbers, return\n\
    \        if (firstEvenIndex < 0) {\n            return new List<long>();\n   \
    \     }\n\n        // return the even number\n        return new List<long>()\
    \ { arr[firstEvenIndex], firstEvenIndex };", "        long smallest = arr.FirstOrDefault(x\
    \ => x % 2 == 0);\n        if (smallest == 0) return new List<long>();\n     \
    \   return new List<long> { arr.First(x => x == smallest), arr.IndexOf(smallest)\
    \ };", "        List<long> res = new List<long>();\n        long min = arr.Where(x\
    \ => x % 2 == 0).DefaultIfEmpty().Min();\n        int minIndex = arr.FindIndex(x\
    \ => x == min);\n        res.Add(min);\n        res.Add(minIndex);\n        return\
    \ res;", "        long smallest = long.MaxValue;\n        long smallestIndex =\
    \ -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %\
    \ 2 == 0 && arr[i] < smallest) {\n                smallest = arr[i];\n       \
    \         smallestIndex = i;\n            }\n        }\n        if (smallestIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>() { smallest, smallestIndex };", '        return arr.Where(x => x
    % 2 == 0).OrderBy(x => x).Select((x, i) => new {x, i}).Take(1).Select(x => new
    List<long>{x.x, x.i}).FirstOrDefault() ?? new List<long>();', "        int i =\
    \ 0;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n     \
    \           // We found the smallest even value\n                return new List<long>\
    \ { n, i };\n            }\n            i++;\n        }\n        return new List<long>();",
  "        if (arr.Count == 0) {\n            return new List<long>();\n        }\n\
    \        long min = Int64.MaxValue;\n        long min_idx = Int64.MaxValue;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                min_idx = i;\n                found = true;\n            }\n\
    \        }\n        if (found) {\n            return new List<long>() { min, min_idx\
    \ };\n        }\n        return new List<long>();", "        var l = arr.Count();\n\
    \        var min = arr.Where(i => i % 2 == 0).DefaultIfEmpty().Min();\n      \
    \  if (min == 0 && !arr.Contains(0)) return new List<long>();\n        return\
    \ new List<long>() { arr.FindIndex(i => i == min), min };", "        if (arr.Count()\
    \ == 0) {\n            return new List<long>();\n        }\n        var even =\
    \ new List<long>();\n        for (int i = 0; i < arr.Count(); i++) {\n       \
    \     if (arr[i] % 2 == 0) {\n                even.Add(arr[i]);\n            }\n\
    \        }\n        if (even.Count() == 0) {\n            return new List<long>();\n\
    \        }\n        var min = even.Min();\n        for (int i = 0; i < arr.Count();\
    \ i++) {\n            if (arr[i] == min) {\n                return new List<long>()\
    \ { arr[i], i };\n            }\n        }\n        return new List<long>();",
  "        // Write your code here.\n        List<long> result = new List<long>();\n\
    \        int smallest_even_value = -1;\n        int smallest_even_value_index\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (smallest_even_value == -1) {\n            \
    \        smallest_even_value = (int)arr[i];\n                    smallest_even_value_index\
    \ = i;\n                } else if (arr[i] < smallest_even_value) {\n         \
    \           smallest_even_value = (int)arr[i];\n                    smallest_even_value_index\
    \ = i;\n                }\n            }\n        }\n        if (smallest_even_value_index\
    \ != -1) {\n            result.Add(smallest_even_value);\n            result.Add(smallest_even_value_index);\n\
    \        }\n        return result;", "        long min = long.MaxValue;\n    \
    \    long min_index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                min_index = i;\n            }\n        }\n        if (min ==\
    \ long.MaxValue) {\n            return new List<long>();\n        }\n        return\
    \ new List<long> { min, min_index };", "        long minVal = long.MaxValue;\n\
    \        long minValIndex = long.MaxValue;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < minVal) {\n            \
    \    minVal = arr[i];\n                minValIndex = i;\n            }\n     \
    \   }\n        if (minVal == long.MaxValue) return new List<long>();\n       \
    \ return new List<long>() { minVal, minValIndex };", "        List<long> result\
    \ = new List<long>();\n        // if the array is empty, return an empty list\n\
    \        if (arr.Count == 0) return result;\n        // otherwise, find the first\
    \ even value\n        int i = 0;\n        while (i < arr.Count && arr[i] % 2 !=\
    \ 0) i++;\n        // if the loop ended, there are no even numbers in the list\n\
    \        if (i == arr.Count) return result;\n        // otherwise, we have found\
    \ the first even number, so store its index and value\n        long minVal = arr[i];\n\
    \        int minIndex = i;\n        // loop through the rest of the list looking\
    \ for smaller even numbers\n        for (; i < arr.Count; i++) {\n           \
    \ if (arr[i] % 2 == 0 && arr[i] < minVal) {\n                minVal = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        // return the\
    \ list containing the smallest even value and its index\n        result.Add(minVal);\n\
    \        result.Add(minIndex);\n        return result;", "        List<long> ret\
    \ = new List<long>();\n        long idx = 0;\n        long? val = null;\n    \
    \    long lastIdx = 0;\n        bool bHasEven = false;\n        foreach (long\
    \ i in arr) {\n            if (i % 2 == 0) {\n                bHasEven = true;\n\
    \                if (val == null || i < val) {\n                    val = i;\n\
    \                    idx = lastIdx;\n                }\n            }\n      \
    \      lastIdx++;\n        }\n        if (bHasEven) {\n            ret.Add(val.Value);\n\
    \            ret.Add(idx);\n        }\n        return ret;", "        var ret\
    \ = new List<long>();\n        long? minEven = null;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                if\
    \ (minEven == null || arr[i] < minEven) {\n                    minEven = arr[i];\n\
    \                    ret.Clear();\n                    ret.Add(minEven.Value);\n\
    \                    ret.Add(i);\n                }\n            }\n        }\n\
    \        return ret;", "        int smallestIndex = -1;\n        long smallestValue\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (smallestIndex == -1 || arr[i] < smallestValue)\
    \ {\n                    smallestIndex = i;\n                    smallestValue\
    \ = arr[i];\n                }\n            }\n        }\n        if (smallestIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>{ smallestValue, smallestIndex };", "        // Your code goes here.\n\
    \        return new List<long>();", "        List<long> ret = new List<long>();\n\
    \        long smallest = -1;\n        long smallest_idx = -1;\n        for (long\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[(int)i] % 2 == 0) {\n    \
    \            if (smallest == -1 || arr[(int)i] < smallest) {\n               \
    \     smallest = arr[(int)i];\n                    smallest_idx = i;\n       \
    \         }\n            }\n        }\n        if (smallest == -1) {\n       \
    \     return ret;\n        }\n        ret.Add(smallest);\n        ret.Add(smallest_idx);\n\
    \        return ret;", "        List<long> result = new List<long>();\n      \
    \  long smallest_even = Int64.MaxValue;\n        long smallest_index = 0;\n  \
    \      for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0\
    \ && arr[i] < smallest_even) {\n                smallest_even = arr[i];\n    \
    \            smallest_index = i;\n            }\n        }\n        if (smallest_even\
    \ == Int64.MaxValue) {\n            return result;\n        }\n        result.Add(smallest_even);\n\
    \        result.Add(smallest_index);\n        return result;", "        var min_even\
    \ = long.MaxValue;\n        var min_even_index = -1;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min_even)\
    \ {\n                min_even = arr[i];\n                min_even_index = i;\n\
    \            }\n        }\n        if (min_even_index == -1) return new List<long>();\n\
    \        return new List<long>{min_even, min_even_index};", "        // Your code\
    \ here\n        return new List<long>();", "        // your code here\n      \
    \  return arr;", "        //Your code here\n        long min = long.MaxValue;\n\
    \        int idx = -1;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                idx = i;\n            }\n        }\n        return idx == -1\
    \ ? new List<long>() : new List<long> { min, idx };", "        // Your code here!\n\
    \        int smallestValueIndex = arr.FindIndex(x => x % 2 == 0);\n        //\
    \ if(smallestValueIndex == -1)\n        // {\n        //     return new List<long>();\n\
    \        // }\n        return arr.Select((value, index) => new { Value = value,\
    \ Index = index })\n        .Where(x => x.Value % 2 == 0)\n        .OrderBy(x\
    \ => x.Value)\n        .ThenBy(x => x.Index)\n        .Select(x => new List<long>{x.Value,\
    \ (long)x.Index})\n        .FirstOrDefault();", "        var min = arr.Where(x\
    \ => x % 2 == 0).Min();\n        if (min == 0 && arr.IndexOf(min) != arr.LastIndexOf(min))\
    \ {\n            return new List<long>{min, arr.IndexOf(min)};\n        }\n  \
    \      if (min == 0) {\n            return new List<long>{};\n        }\n    \
    \    return new List<long>{min, arr.IndexOf(min)};", "        var nodes = new\
    \ List<Node>();\n        var targetNode = new Node();\n        var i = 1;\n  \
    \      foreach (var e in arr) {\n            var node = new Node();\n        \
    \    node.value = e;\n            node.index = i;\n            nodes.Add(node);\n\
    \            i++;\n        }\n        if (nodes.Count == 0) {\n            return\
    \ new List<long>();\n        }\n        if (nodes.Count == 1) {\n            if\
    \ (nodes[0].value % 2 == 0) {\n                return new List<long> { nodes[0].value,\
    \ nodes[0].index };\n            } else {\n                return new List<long>();\n\
    \            }\n        }\n\n        targetNode = nodes[0];\n        for (i =\
    \ 1; i < nodes.Count; i++) {\n            if (nodes[i].value % 2 == 0) {\n   \
    \             if (targetNode.value % 2 == 0) {\n                    if (nodes[i].value\
    \ < targetNode.value) {\n                        targetNode = nodes[i];\n    \
    \                }\n                } else {\n                    targetNode =\
    \ nodes[i];\n                }\n            }\n        }\n        if (targetNode.value\
    \ % 2 == 0) {\n            return new List<long> { targetNode.value, targetNode.index\
    \ };\n        } else {\n            return new List<long>();\n        }", "  \
    \      if (arr.Count == 0) {\n            return new List<long>();\n        }\n\
    \        var indexes = new List<long>();\n        long minVal = long.MaxValue;\n\
    \        for (long i = 0; i < arr.Count; i++) {\n            if (arr[(int)i] %\
    \ 2 == 0 && arr[(int)i] < minVal) {\n                minVal = arr[(int)i];\n \
    \               indexes.Clear();\n                indexes.Add(i);\n          \
    \  } else if (arr[(int)i] % 2 == 0 && arr[(int)i] == minVal) {\n             \
    \   indexes.Add(i);\n            }\n        }\n        if (indexes.Count == 0)\
    \ {\n            return new List<long>();\n        }\n        long minIndex =\
    \ indexes[0];\n        for (long i = 1; i < indexes.Count; i++) {\n          \
    \  if (indexes[(int)i] < minIndex) {\n                minIndex = indexes[(int)i];\n\
    \            }\n        }\n        return new List<long>() { minVal, minIndex\
    \ };", "        List<long> result = new List<long>();\n        long minVal = long.MaxValue;\n\
    \        long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0 && arr[i] < minVal) {\n                minVal =\
    \ arr[i];\n                index = i;\n            }\n        }\n        if (index\
    \ != -1) {\n            result.Add(minVal);\n            result.Add(index);\n\
    \        }\n        return result;", "        var min = long.MaxValue;\n     \
    \   var minIndex = -1;\n        var index = 0;\n        foreach (var item in arr)\
    \ {\n            if (item > 0 && item % 2 == 0 && item < min) {\n            \
    \    min = item;\n                minIndex = index;\n            }\n         \
    \   index++;\n        }\n        if (minIndex == -1) {\n            return new\
    \ List<long>();\n        }\n        return new List<long> { min, minIndex };",
  "        List<long> plucked = new List<long>();\n        int index = 0;\n      \
    \  long min_even = arr.Min();\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0 && arr[i] <= min_even) {\n                min_even\
    \ = arr[i];\n                index = i;\n            }\n        }\n        if\
    \ (min_even % 2 == 0) {\n            plucked.Add(min_even);\n            plucked.Add(index);\n\
    \        }\n        return plucked;", "        var ret = new List<long>();\n \
    \       if (arr.Count == 0) return ret;\n        var min = arr.Min();\n      \
    \  while (min % 2 != 0) {\n            arr.Remove(min);\n            if (arr.Count\
    \ == 0) return ret;\n            min = arr.Min();\n        }\n        var mindex\
    \ = arr.IndexOf(min);\n        ret.Add(min);\n        ret.Add(mindex);\n     \
    \   return ret;", "        List<long> lst = new List<long>();\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n         \
    \       lst.Add(arr[i]);\n            }\n        }\n        if (lst.Count > 0)\
    \ {\n            lst.Sort();\n            return new List<long> { lst[0], arr.IndexOf(lst[0])\
    \ };\n        }\n        return new List<long>();", "        // find the smallest\
    \ even value in the list\n        long smallestEven = -1;\n        // index of\
    \ the smallest value\n        long smallestIndex = -1;\n        // loop through\
    \ the array of numbers\n        for (long i = 0; i < arr.Count; i++) {\n     \
    \       // if the smallest even value has not been set yet\n            if (smallestEven\
    \ == -1) {\n                // if the number is even, set the smallest even value\n\
    \                if (arr[(int)i] % 2 == 0) {\n                    smallestEven\
    \ = arr[(int)i];\n                    smallestIndex = i;\n                }\n\
    \            } else {\n                // if the number is even and smaller than\
    \ the current smallest even value\n                if (arr[(int)i] % 2 == 0 &&\
    \ arr[(int)i] < smallestEven) {\n                    // set the new smallest even\
    \ value\n                    smallestEven = arr[(int)i];\n                   \
    \ smallestIndex = i;\n                }\n            }\n        }\n        //\
    \ if there are no even numbers in the list\n        if (smallestEven == -1) {\n\
    \            // return an empty list\n            return new List<long>();\n \
    \       }\n        // return the list of the smallest even value and its index\n\
    \        return new List<long> { smallestEven, smallestIndex };", "        long\
    \ min = Int64.MaxValue;\n        int minIndex = -1;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n  \
    \              min = arr[i];\n                minIndex = i;\n            }\n \
    \       }\n        if (minIndex == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { min, minIndex };", "        return\
    \ arr.Select((e,i) => new {v=e,i=i})\n                  .Where(e => e.v % 2 ==\
    \ 0)\n                  .OrderBy(e => e.v)\n                  .Select(e => new\
    \ List<long>{e.v, (long)e.i})\n                  .FirstOrDefault() ?? new List<long>();",
  "        long minEven = Int64.MaxValue;\n        long minEvenIndex = Int64.MaxValue;\n\
    \        long currIndex = -1;\n        foreach (long l in arr) {\n           \
    \ currIndex += 1;\n            if (l % 2 == 0 && l < minEven) {\n            \
    \    minEven = l;\n                minEvenIndex = currIndex;\n            }\n\
    \        }\n        if (minEven == Int64.MaxValue) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { minEven, minEvenIndex };", "   \
    \     List<long> ans = new List<long>();\n        long minEven = 10001;\n    \
    \    int minEvenIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven\
    \ = arr[i];\n                minEvenIndex = i;\n            }\n        }\n   \
    \     if (minEvenIndex >= 0) {\n            ans.Add(minEven);\n            ans.Add(minEvenIndex);\n\
    \        }\n        return ans;", "        int len = arr.Count;\n        int min\
    \ = len - 1;\n        int mineven = len - 1;\n        for (int i = 0; i < len;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (min == len -\
    \ 1) {\n                    min = i;\n                }\n                mineven\
    \ = Math.Min(min, i);\n            }\n        }\n        if (min == len - 1) {\n\
    \            return new List<long>();\n        }\n        return new List<long>()\
    \ { arr[mineven], mineven };", "        long min = long.MaxValue;\n        int\
    \ idx = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ idx = i;\n            }\n        }\n        if (idx == -1) return new List<long>();\n\
    \        return new List<long> { min, idx };", "        var index = -1;\n    \
    \    var minValue = arr.Where(x => x % 2 == 0).Min();\n        if (minValue ==\
    \ long.MaxValue)\n            return new List<long>();\n        return new List<long>\
    \ { minValue, arr.IndexOf(minValue) };", "        long minVal = arr.Min();\n \
    \       if (minVal == 0 || arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        if (minVal % 2 == 0) {\n            return new List<long>\
    \ { minVal, arr.IndexOf(minVal) };\n        }\n        List<long> evens = arr.Where(x\
    \ => x % 2 == 0).ToList();\n        minVal = evens.Min();\n        return new\
    \ List<long> { minVal, arr.IndexOf(minVal) };", "        // your code\n      \
    \  int bestIndex = -1;\n        long bestValue = -1;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                if\
    \ (bestIndex == -1 || arr[i] < bestValue) {\n                    bestIndex = i;\n\
    \                    bestValue = arr[i];\n                }\n            }\n \
    \       }\n        if (bestIndex == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { bestValue, bestIndex };", "    \
    \    // your code here\n        return new List<long>();", "        // Write your\
    \ code here.\n        return new List<long>();", "        // EDGE CASE\n     \
    \   if (arr.Count == 0) {\n            return new List<long>();\n        }\n \
    \       // Find index of first even int\n        long firstEven = 0;\n       \
    \ long firstEvenIndex = 0;\n        bool foundFirstEven = false;\n        for\
    \ (long i = 0; i < arr.Count; i++) {\n            if (arr[(int)i] % 2 == 0) {\n\
    \                firstEven = arr[(int)i];\n                firstEvenIndex = i;\n\
    \                foundFirstEven = true;\n                break;\n            }\n\
    \        }\n        // Make list with answer\n        if (foundFirstEven) {\n\
    \            List<long> pluckedNode = new List<long>();\n            pluckedNode.Add(firstEven);\n\
    \            pluckedNode.Add(firstEvenIndex);\n            return pluckedNode;\n\
    \        } else {\n            return new List<long>();\n        }", "       \
    \ // your code goes here\n        return null;", "        // TODO\n        long\
    \ smallestEven = 0;\n        long smallestEvenIndex = 0;\n        bool foundSmallestEven\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (!foundSmallestEven) {\n                   \
    \ smallestEven = arr[i];\n                    smallestEvenIndex = i;\n       \
    \             foundSmallestEven = true;\n                } else {\n          \
    \          if (arr[i] < smallestEven) {\n                        smallestEven\
    \ = arr[i];\n                        smallestEvenIndex = i;\n                \
    \    }\n                }\n            }\n        }\n        List<long> outList\
    \ = new List<long>();\n        if (foundSmallestEven) {\n            outList.Add(smallestEven);\n\
    \            outList.Add(smallestEvenIndex);\n        }\n        return outList;",
  "        int idx = 0;\n        long currentMin = 0;\n        int minIdx = 0;\n \
    \       for (idx = 0; idx < arr.Count; idx++) {\n            var number = arr[idx];\n\
    \            if (number % 2 == 0) {\n                if (currentMin == 0) {\n\
    \                    currentMin = number;\n                    minIdx = idx;\n\
    \                } else if (number < currentMin) {\n                    currentMin\
    \ = number;\n                    minIdx = idx;\n                }\n          \
    \  }\n        }\n        if (currentMin == 0) {\n            return new List<long>();\n\
    \        }\n        return new List<long>{currentMin, minIdx};", "        List<long>\
    \ lst = new List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0) {\n                lst.Add(arr[i]);\n         \
    \   }\n        }\n        lst.Sort();\n        if (lst.Count > 0) {\n        \
    \    long val = lst[0];\n            for (int i = 0; i < arr.Count; i++) {\n \
    \               if (arr[i] == val) {\n                    return new List<long>\
    \ { val, i };\n                }\n            }\n        }\n        return new\
    \ List<long>();", "        // Your solution here\n        long smallestEven =\
    \ -1;\n        long smallestEvenIndex = -1;\n        for (long i = 0; i < arr.Count;\
    \ i++) {\n            long current = arr[(int)i];\n            if (current % 2\
    \ == 0) {\n                if (smallestEven == -1 || current < smallestEven) {\n\
    \                    smallestEven = current;\n                    smallestEvenIndex\
    \ = i;\n                }\n            }\n        }\n        if (smallestEven\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>(new long[]{smallestEven, smallestEvenIndex});", "        long? smallest\
    \ = null;\n        long? index = null;\n        for (long i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[(int)i] % 2 == 0) {\n                if (smallest\
    \ == null || arr[(int)i] < smallest) {\n                    smallest = arr[(int)i];\n\
    \                    index = i;\n                }\n            }\n        }\n\
    \        if (smallest == null) {\n            return new List<long>();\n     \
    \   }\n        return new List<long> { smallest.Value, index.Value };", "    \
    \    // Definition:\n        // The 'head' of a list is the first element.\n \
    \       // The 'tail' of a list is everything except the head.\n        // We\
    \ can define a function that takes a list as an argument and returns the head,\
    \ like this:\n        // def get_head(arr):\n        //     return arr[0]\n  \
    \      // We can also define a function that takes a list as an argument and returns\
    \ the tail, like this:\n        // def get_tail(arr):\n        //     return arr[1:]\n\
    \        // In this function you need to find the smallest even value in the list.\n\
    \        // You will start by finding the head of the list.\n        // If the\
    \ head is even and smaller than all other even elements, you need to return it.\n\
    \        // If the head is even and not smaller than all other even elements,\n\
    \        // or if the head is odd, you need to keep searching for smaller even\
    \ elements.\n        // You will do that by using recursion.\n        // Suppose\
    \ you have an array called 'arr' representing the argument passed to the function.\n\
    \        // You need to write an if-statement like this:\n        // if (arr is\
    \ empty):\n        //     return []\n        // If the array is empty, you should\
    \ return an empty array.\n        // The empty array is written like this: []\n\
    \        // Next, you need to write an else-statement to handle the case where\
    \ the array is not empty.\n        // Your else-statement needs to include a recursive\
    \ call to the function.\n        // The recursive call needs to be on the tail\
    \ of the array.\n        // To make that recursive call, you need to define a\
    \ new variable called 'new_arr'.\n        // The value of new_arr should be get_tail(arr)\n\
    \        // Then, inside the else-statement, you need to make the recursive call.\n\
    \        // It should look like this:\n        // else:\n        //     new_arr\
    \ = get_tail(arr)\n        //     return Pluck(new_arr)\n        // At this point\
    \ your function will compile,\n        // but it won't be correct because it will\
    \ always return [].\n        // What you need to do next is add a variable called\
    \ 'head' that takes the value of get_head(arr).\n", "        // insert code here\n\
    \        return new List<long>();", "        if (arr.Count == 0) {\n         \
    \   return new List<long>();\n        }\n        long min = long.MaxValue;\n \
    \       int index = 0;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (min == long.MaxValue)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>{min,\
    \ index};", "        List<long> result = new List<long>();\n        foreach (long\
    \ i in arr) {\n            if (i%2 == 0) {\n                result.Add(i);\n \
    \           }\n        }\n        if (result.Count != 0) {\n            result.Sort();\n\
    \            long index = arr.IndexOf(result[0]);\n            List<long> ans\
    \ = new List<long>();\n            ans.Add(result[0]);\n            ans.Add(index);\n\
    \            return ans;\n        }\n        return new List<long>();", "    \
    \    var even = arr.Where(x => x % 2 == 0).ToList();\n        if (even.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        var min = even.Min();\n\
    \        var idx = arr.IndexOf(min);\n        return new List<long>() { min, idx\
    \ };", "        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        long min = long.MaxValue;\n        long index = 0;\n     \
    \   for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 &&\
    \ arr[i] < min) {\n                min = arr[i];\n                index = i;\n\
    \            }\n        }\n        if (min == long.MaxValue) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>() {min, index};",
  "        long mi = -1;\n        long miVal = long.MaxValue;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] == 0) {\n               \
    \ return new List<long>() { arr[i], (long)i };\n            }\n            if\
    \ (arr[i] % 2 == 0 && arr[i] < miVal) {\n                mi = i;\n           \
    \     miVal = arr[i];\n            }\n        }\n        if (mi == -1) {\n   \
    \         return new List<long>();\n        }\n        return new List<long>()\
    \ { miVal, mi };", "        // your code goes here\n        return new List<long>();",
  "        // your code here\n        if (arr.Count == 0) return new List<long>();\n\
    \        long best = -1;\n        long ind = -1;\n        for (long i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[(int)i] % 2 == 0) {\n               \
    \ if (best == -1 || arr[(int)i] < best) {\n                    best = arr[(int)i];\n\
    \                    ind = i;\n                }\n            }\n        }\n \
    \       if (best == -1) return new List<long>();\n        return new List<long>()\
    \ { best, ind };", "        long min = 0;\n        long index = -1;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            if (index == -1 || arr[i] < min) {\n                    min = arr[i];\n\
    \                    index = i;\n                }\n            }\n        }\n\
    \        if (index == -1) {\n            return new List<long>();\n        }\n\
    \        return new List<long>() { min, index };", '        return new List<long>();',
  "        long smallestEvenValue = Int64.MaxValue;\n        long smallestEvenValueIndex\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < smallestEvenValue) {\n                smallestEvenValue\
    \ = arr[i];\n                smallestEvenValueIndex = i;\n            }\n    \
    \    }\n        if (smallestEvenValueIndex == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { smallestEvenValue, smallestEvenValueIndex\
    \ };", "        long bestValue = long.MaxValue;\n        long bestIndex = long.MaxValue;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            long value = arr[i];\n\
    \            if (value % 2 == 0 && value < bestValue) {\n                bestValue\
    \ = value;\n                bestIndex = i;\n            }\n        }\n       \
    \ if (bestValue == long.MaxValue) {\n            return new List<long>();\n  \
    \      }\n        return new List<long> {bestValue, bestIndex};", "        long\
    \ smallestEven = long.MaxValue;\n        int smallestEvenIndex = -1;\n       \
    \ // search through the given array\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            // if the current value is even and less than the smallestEven\n\
    \            if (arr[i] % 2 == 0 && arr[i] < smallestEven) {\n               \
    \ // smallestEven becomes the current value\n                smallestEven = arr[i];\n\
    \                // smallestEvenIndex becomes the current index\n            \
    \    smallestEvenIndex = i;\n            }\n        }\n        // if the smallestEvenIndex\
    \ was never changed\n        if (smallestEvenIndex == -1) {\n            // return\
    \ an empty list\n            return new List<long>();\n        }\n        // else\
    \ return a list with the smallestEven and smallestEvenIndex\n        return new\
    \ List<long>() { smallestEven, smallestEvenIndex };", "        long minEvenIndex\
    \ = -1;\n        long minEvenValue = -1;\n        long index = 0;\n        foreach\
    \ (long value in arr) {\n            if (value % 2 == 0) {\n                if\
    \ (minEvenIndex == -1 || value < minEvenValue) {\n                    minEvenIndex\
    \ = index;\n                    minEvenValue = value;\n                }\n   \
    \         }\n            index++;\n        }\n        if (minEvenIndex == -1)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>\
    \ { minEvenValue, minEvenIndex };", "        List<long> res = new List<long>();\n\
    \        long min = 10001;\n        long index = 10001;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \                min = arr[i];\n                index = i;\n            }\n  \
    \      }\n        if (min != 10001) {\n            res.Add(min);\n           \
    \ res.Add(index);\n        }\n        return res;", "        long minEven = long.MaxValue;\n\
    \        long minEvenIndex = long.MaxValue;\n        for (long i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[(int)i] != 0 && arr[(int)i] % 2 == 0 && arr[(int)i]\
    \ < minEven) {\n                minEven = arr[(int)i];\n                minEvenIndex\
    \ = i;\n            }\n        }\n        if (minEvenIndex == long.MaxValue) {\n\
    \            return new List<long>();\n        }\n        return new List<long>()\
    \ { minEven, minEvenIndex };", "        long min = long.MaxValue;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] == 0) {\n                if (minIndex == -1) {\n                   \
    \ minIndex = i;\n                }\n            } else if (arr[i] % 2 == 0 &&\
    \ arr[i] < min) {\n                min = arr[i];\n                minIndex = i;\n\
    \            }\n        }\n        if (minIndex == -1) {\n            return new\
    \ List<long>();\n        }\n        return new List<long> {min, minIndex};", " \
    \       if (arr.Count == 0) {\n            return new List<long>();\n        }\n\
    \        List<long> t = new List<long>();\n        t.Add(arr[0]);\n        for\
    \ (long i = 1; i < arr.Count; i++) {\n            if (arr[(int)i] < t[0]) {\n\
    \                t.Clear();\n                t.Add(arr[(int)i]);\n           \
    \     t.Add(i);\n            } else if (arr[(int)i] == t[0]) {\n             \
    \   t.Add(i);\n            }\n        }\n        if (t.Count == 1) {\n       \
    \     return new List<long>();\n        }\n        t.RemoveAt(0);\n        return\
    \ t;", "        return arr.Aggregate(new[] { long.MaxValue, long.MaxValue }, (a,\
    \ v) =>\n            v % 2 == 0 && v < a[0] ? new[] { v, arr.IndexOf(v) } : a\n\
    \        ).Take(2).ToList();", "        // find smallest even value and its index\n\
    \        var minEven = arr.Where(x => x % 2 == 0).Min();\n        var minEvenIndex\
    \ = arr.IndexOf(minEven);\n        return new List<long> { minEven, minEvenIndex\
    \ };", "        // Write your code here.\n        return arr;", "        var evenValues\
    \ = arr.Where(x => x % 2 == 0).ToList();\n        if (evenValues.Count == 0) {\n\
    \            return new List<long>();\n        }\n        var minValue = evenValues.Min();\n\
    \        return new List<long> { minValue, arr.IndexOf(minValue) };", "      \
    \  if (arr.Count() == 0) {\n            return new List<long>();\n        }\n\
    \        if (arr.Count() == 1) {\n            if (arr[0] % 2 == 0) {\n       \
    \         return new List<long> { arr[0], 1 };\n            } else {\n       \
    \         return new List<long>();\n            }\n        }\n        long smallest\
    \ = arr[0];\n        long index = 1;\n        for (long i = 1; i < arr.Count();\
    \ i++) {\n            if (arr[i] < smallest && arr[i] % 2 == 0) {\n          \
    \      smallest = arr[i];\n                index = i + 1;\n            }\n   \
    \     }\n        if (smallest % 2 == 0) {\n            return new List<long> {\
    \ smallest, index };\n        } else {\n            return new List<long>();\n\
    \        }", "        long min_even = Int64.MaxValue;\n        int min_even_idx\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            long value\
    \ = arr[i];\n            if (value % 2 == 0 && value < min_even) {\n         \
    \       min_even = value;\n                min_even_idx = i;\n            }\n\
    \        }\n        if (min_even_idx == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long> {min_even, min_even_idx};", "      \
    \  var evens = arr.Where(x => x % 2 == 0).OrderBy(x => x).ToList();\n        if\
    \ (evens.Count == 0) {\n            return new List<long>();\n        }\n    \
    \    var minValue = evens[0];\n        var minIndex = arr.IndexOf(minValue);\n\
    \        return new List<long>() { minValue, minIndex };", "        if(arr.Count\
    \ <= 0) {\n            return new List<long>();\n        }\n        long minSoFar\
    \ = arr[0];\n        int minIndex = 0;\n        for(int i = 0; i < arr.Count;\
    \ i++) {\n            if(arr[i] < minSoFar && arr[i] % 2 == 0) {\n           \
    \     minSoFar = arr[i];\n                minIndex = i;\n            }\n     \
    \   }\n        if(minSoFar % 2 == 0) {\n            return new List<long>() {\
    \ minSoFar, minIndex };\n        }\n        return new List<long>();", '        throw
    new Exception("not implemented");', "        List<long> ret = new List<long>();\n\
    \        bool flag = false;\n        long min = 0;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                if\
    \ (!flag) {\n                    flag = true;\n                    min = arr[i];\n\
    \                    ret.Add(min);\n                    ret.Add(i);\n        \
    \        } else {\n                    if (arr[i] < min) {\n                 \
    \       min = arr[i];\n                        ret[0] = min;\n               \
    \         ret[1] = i;\n                    }\n                }\n            }\n\
    \        }\n        return ret;", "        List<long> sol = new List<long>();\n\
    \        int min = Int32.MaxValue;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            int x = Convert.ToInt32(arr[i]);\n            if (x % 2 == 0\
    \ && x < min) {\n                min = x;\n                sol.Clear();\n    \
    \            sol.Add(x);\n                sol.Add(i);\n            }\n       \
    \ }\n        return sol;", "        // Best case, arr is empty\n        if (arr.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        // Get the\
    \ first even number, or -1 if none\n        var firstEvenNumber = arr.Select((n,\
    \ i) => new { n, i }).Where(n => n.n % 2 == 0).Select(n => n.n).FirstOrDefault();\n\
    \        // If there is a first even number, get its index\n        if (firstEvenNumber\
    \ != -1) {\n            var idx = arr.Select((n, i) => new { n, i }).Where(n =>\
    \ n.n == firstEvenNumber).Select(n => n.i).First();\n            return new List<long>()\
    \ { firstEvenNumber, idx };\n        }\n        // If none, return empty list\n\
    \        return new List<long>();", "        long min = Int64.MaxValue;\n    \
    \    int minPos = Int32.MaxValue;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            long e = arr[i];\n            if (e % 2 == 0 && e < min) {\n\
    \                min = e;\n                minPos = i;\n            }\n      \
    \  }\n        if (min == Int64.MaxValue) {\n            return new List<long>();\n\
    \        }\n        return new List<long> { min, minPos };", "        var even\
    \ = Enumerable.Range(0, arr.Count)\n            .Where(i => arr[i] % 2 == 0)\n\
    \            .ToList();\n        if (even.Count == 0) return new List<long>();\n\
    \        var minIdx = even[0];\n        var min = arr[minIdx];\n        for (int\
    \ i = 1; i < even.Count; i++) {\n            var idx = even[i];\n            var\
    \ v = arr[idx];\n            if (v < min) {\n                min = v;\n      \
    \          minIdx = idx;\n            }\n        }\n        return new List<long>()\
    \ { min, minIdx };", "        // Your code here\n        List<long> answer = new\
    \ List<long>();\n        if (arr.Count == 0) {\n            return answer;\n \
    \       }\n        long minEven = arr[0];\n        int index = 0;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            minEven = arr[i];\n                index = i;\n                break;\n\
    \            }\n        }\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] < minEven && arr[i] % 2 == 0) {\n                minEven\
    \ = arr[i];\n                index = i;\n            }\n        }\n        if\
    \ (minEven % 2 == 0) {\n            answer.Add(minEven);\n            answer.Add(index);\n\
    \        }\n        return answer;", "        // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    \
    \    // (new List<long>(new long[]{(long)0L, (long)1L}))\n        long mindex\
    \ = long.MaxValue;\n        long min = long.MaxValue;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \                min = arr[i];\n                mindex = i;\n            }\n \
    \       }\n        List<long> pair = new List<long>();\n        if (min != long.MaxValue)\
    \ {\n            pair.Add(min);\n            pair.Add(mindex);\n        }\n  \
    \      return pair;", "        // Print the list\n        //Console.Write(\"[\"\
    );\n        //foreach (long a in arr) {\n        //    Console.Write(a + \", \"\
    );\n        //}\n        //Console.WriteLine(\"]\");\n        //Console.WriteLine(arr.Count);\n\
    \        if (arr.Count == 0) {\n            return new List<long>();\n       \
    \ }\n        long min = arr[0];\n        long index = 0;\n        bool hasEven\
    \ = false;\n        bool hasZeros = false;\n        // Console.WriteLine(\"Range:\
    \ \" + Enumerable.Range(0, arr.Count));\n        foreach (long i in Enumerable.Range(0,\
    \ arr.Count)) {\n            // Console.WriteLine(\"Index: \" + i);\n        \
    \    if (arr[(int)i] == 0) {\n                hasZeros = true;\n            }\n\
    \            if (arr[(int)i] % 2 == 0) {\n                hasEven = true;\n  \
    \              if (arr[(int)i] < min) {\n                    min = arr[(int)i];\n\
    \                    index = i;\n                }\n            }\n        }\n\
    \        // Console.WriteLine(\"Min: \" + min);\n        // Console.WriteLine(\"\
    Index: \" + index);\n        // Console.WriteLine(\"HasZeros: \" + hasZeros);\n\
    \        // Console.WriteLine(\"HasEven: \" + hasEven);\n        // Return [min,\
    \ index]\n        if (hasZeros && !hasEven) {\n            return new List<long>\
    \ { 0, 0 };\n        }\n        if (hasEven) {\n            return new List<long>\
    \ { min, index };\n        }\n        return new List<long>();", "        List<long>\
    \ result = new List<long>();\n        if (arr.Count() > 0) {\n            long\
    \ min = Int64.MaxValue;\n            long index = 0;\n            long idx = 0;\n\
    \            foreach (long i in arr) {\n                if (i > 0 && i % 2 ==\
    \ 0 && i < min) {\n                    min = i;\n                    index = idx;\n\
    \                }\n                idx++;\n            }\n            if (min\
    \ != Int64.MaxValue) {\n                result.Add(min);\n                result.Add(index);\n\
    \            }\n        }\n        return result;", "        long ret = arr.Find(x\
    \ => x%2 == 0);\n        return arr.Contains(ret) ? new List<long>{ret, arr.IndexOf(ret)}\
    \ : new List<long>();", "        var even = arr.Where(a => a % 2 == 0).ToList();\n\
    \        if (even.Count == 0) {\n            return new List<long>();\n      \
    \  }\n        var min = even.Min();\n        var idx = arr.IndexOf(min);\n   \
    \     return new List<long> { min, idx };", "        // using System;\n      \
    \  // using System.Numerics;\n        // using System.Diagnostics;\n        //\
    \ using System.Collections.Generic;\n        // using System.Linq;\n        //\
    \ using System.Text;\n        // using System.Security.Cryptography;\n       \
    \ long i = 0L;\n        long value = long.MaxValue;\n        long index = -1L;\n\
    \        while ((long)i < (long)arr.Count) {\n            if ((long)arr[(int)i]\
    \ % (long)2L == (long)0L && (long)arr[(int)i] < value) {\n                value\
    \ = arr[(int)i];\n                index = i;\n            }\n            i = (long)i\
    \ + (long)1L;\n        }\n        if (index == -1L) {\n            return new\
    \ List<long>();\n        }\n        return new List<long>(new long[] { value,\
    \ index });", "        long minEven = long.MaxValue;\n        long minEvenIndex\
    \ = long.MaxValue;\n        for (int i = 0; i < arr.Count; i++) {\n          \
    \  if (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven = arr[i];\n\
    \                minEvenIndex = i;\n            }\n        }\n        if (minEven\
    \ == long.MaxValue) return new List<long>();\n        return new List<long>()\
    \ { minEven, minEvenIndex };", "        List<long> result = new List<long>();\n\
    \        if (arr.Count == 0) {\n            return result;\n        }\n      \
    \  long min = -1;\n        long minIndex = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            long curr = arr[i];\n            if (curr % 2 == 0) {\n\
    \                if (min == -1 || curr < min) {\n                    min = curr;\n\
    \                    minIndex = i;\n                }\n            }\n       \
    \ }\n        if (min == -1) {\n            return result;\n        }\n       \
    \ result.Add(min);\n        result.Add(minIndex);\n        return result;", " \
    \       var x = from i in arr.IndexOfRange()\n                where i % 2 == 0\n\
    \                select i;\n        if (x.Count() == 0) return new List<long>();\n\
    \        return new List<long> { arr[x.First()], x.First() };", "        long\
    \ min_value = -1;\n        long min_index = -1;\n        for (long i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[(int)i] % 2 == 0) {\n               \
    \ if (min_value == -1 || arr[(int)i] < min_value) {\n                    min_value\
    \ = arr[(int)i];\n                    min_index = i;\n                }\n    \
    \        }\n        }\n        if (min_value == -1) {\n            return new\
    \ List<long>();\n        }\n        return new List<long>(new long[]{(long)min_value,\
    \ (long)min_index});", "        // This is the first version of my solution\n\
    \        // It is the fastest of all my solutions\n        // but not the fastest\
    \ overall\n        // this version is the slowest of all my version but the fastest\
    \ overall\n        // I think it is because the ternary operator is being used\
    \ twice which requires two \n        // if/else statements.\n        long min\
    \ = arr.Where(num => num % 2 == 0).DefaultIfEmpty(0).Min();\n        if (min ==\
    \ 0) {\n            return new List<long>();\n        }\n        return new List<long>{\n\
    \            min,\n            arr.Where(num => num == min).DefaultIfEmpty(0).Min()\n\
    \        };", "        var e = arr.FindAll(n => n % 2 == 0);\n        if (e.Count\
    \ == 0) return new List<long>();\n        var min = e.Min();\n        return new\
    \ List<long> { min, arr.IndexOf(min) };", '        throw new NotImplementedException();',
  "        long smallest = arr.Min();\n        long index = arr.IndexOf(smallest);\n\
    \        // Console.WriteLine(\"smallest: \" + smallest + \"  index: \" + index);\n\
    \        return new List<long>() { smallest, index };", "        long prev = -1;\n\
    \        long current = -1;\n        long index = -1;\n        long counter =\
    \ 0;\n        foreach (long val in arr) {\n            if (val % 2 == 0) {\n \
    \               if (val < prev || prev == -1) {\n                    current =\
    \ val;\n                    index = counter;\n                }\n            }\n\
    \            prev = val;\n            counter++;\n        }\n        List<long>\
    \ result = new List<long>();\n        if (current != -1) {\n            result.Add(current);\n\
    \            result.Add(index);\n        }\n        return result;", "       \
    \ long num = 0;\n        int index = 0;\n        int x = 0;\n        for (x =\
    \ 0; x < arr.Count; x++) {\n            if (arr[x] % 2 == 0) {\n             \
    \   num = arr[x];\n                index = x;\n                break;\n      \
    \      }\n        }\n        for (int y = x + 1; y < arr.Count; y++) {\n     \
    \       if (arr[y] % 2 == 0 && arr[y] < num) {\n                num = arr[y];\n\
    \                index = y;\n            }\n        }\n        if (num == 0) {\n\
    \            return new List<long>();\n        }\n        return new List<long>()\
    \ { num, index };", "        // return arr.Where(x => x % 2 == 0).OrderBy(x =>\
    \ x).Take(1).Select(x => new List<long>{x, arr.IndexOf(x)}).FirstOrDefault() ??\
    \ new List<long>();\n        // return arr.Select((x, i) => new List<long>{x,\
    \ i}).Where(x => x[0] % 2 == 0).OrderBy(x => x[0]).Take(1).Select(x => new List<long>{x[0],\
    \ x[1]}).FirstOrDefault() ?? new List<long>();\n        // return arr.Select((x,\
    \ i) => new List<long>{x, i}).OrderBy(x => x[0]).Take(1).Where(x => x[0] % 2 ==\
    \ 0).Select(x => new List<long>{x[0], x[1]}).FirstOrDefault() ?? new List<long>();\n\
    \        return arr.Select((x, i) => new List<long>{x, i}).OrderBy(x => x[0]).Take(1).Where(x\
    \ => x[0] % 2 == 0).FirstOrDefault() ?? new List<long>();", "        List<long>\
    \ evens = new List<long>();\n        foreach (long item in arr) {\n          \
    \  if (item % 2 == 0) evens.Add(item);\n        }\n        if (evens.Count ==\
    \ 0) return new List<long>();\n        return new List<long>() {evens.Min(), arr.IndexOf(evens.Min())};",
  '        return Enumerable.Range(0, arr.Count).Select(x => new { x, v = arr[x] }).Where(x
    => x.v % 2 == 0).OrderBy(x => x.v).ThenBy(x => x.x).Select(x => new List<long>
    { x.v, x.x }).FirstOrDefault() ?? new List<long>();', "        int idx = -1;\n\
    \        long small = -1;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0) {\n                if (small == -1 || arr[i] <\
    \ small) {\n                    small = arr[i];\n                    idx = i;\n\
    \                }\n            }\n        }\n        if (idx == -1) {\n     \
    \       return new List<long>();\n        }\n        return new List<long>() {\
    \ small, idx };", '        return arr.Select((x, i) => (x, i)).Where(x => x.x
    % 2 == 0).Min().ToList();', "        // your code goes here\n        return null;",
  "        List<long> smallestEven = new List<long>();\n        long smallestEvenIndex\
    \ = -1;\n        long smallestEvenValue = -1;\n        long currentIndex = 0;\n\
    \        foreach (long node in arr) {\n            if (node == 0 && smallestEvenValue\
    \ == -1) {\n                smallestEvenValue = 0;\n                smallestEvenIndex\
    \ = currentIndex;\n            }\n            if (node % 2 == 0 && node < smallestEvenValue\
    \ || smallestEvenValue == -1) {\n                smallestEvenValue = node;\n \
    \               smallestEvenIndex = currentIndex;\n            }\n           \
    \ currentIndex++;\n        }\n        if (smallestEvenValue == -1) {\n       \
    \     return new List<long>();\n        }\n        return new List<long>() { smallestEvenValue,\
    \ smallestEvenIndex };", "        List<long> result = new List<long>();\n    \
    \    long minValue = long.MaxValue;\n        long minIndex = long.MaxValue;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            long node = arr[i];\n\
    \            if (node % 2 == 0 && node < minValue) {\n                minValue\
    \ = node;\n                minIndex = i;\n            }\n        }\n        if\
    \ (minValue != long.MaxValue) {\n            result.Add(minValue);\n         \
    \   result.Add(minIndex);\n        }\n        return result;", "        List<long>\
    \ res = new List<long>();\n        if (arr.Count == 0) {\n            return res;\n\
    \        }\n        long smallest = arr[0];\n        int smallestIndex = 0;\n\
    \        bool foundEven = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                foundEven = true;\n \
    \               if (arr[i] < smallest) {\n                    smallest = arr[i];\n\
    \                    smallestIndex = i;\n                }\n            }\n  \
    \      }\n        if (foundEven) {\n            res.Add(smallest);\n         \
    \   res.Add(smallestIndex);\n        }\n        return res;", "        long curr\
    \ = long.MaxValue;\n        int idx = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            long temp = arr[i];\n            if (temp % 2 == 0 && temp\
    \ < curr) {\n                curr = temp;\n                idx = i;\n        \
    \    }\n        }\n        if (idx == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { curr, idx };", "        List<long>\
    \ output = new List<long>();\n        if (arr.Count > 0) {\n            long minEven\
    \ = Int64.MaxValue;\n            long minEvenIndex = -1;\n            for (int\
    \ i = 0; i < arr.Count; i++) {\n                if (arr[i] % 2 == 0 && arr[i]\
    \ < minEven) {\n                    minEven = arr[i];\n                    minEvenIndex\
    \ = i;\n                }\n            }\n            if (minEvenIndex != -1)\
    \ {\n                output.Add(minEven);\n                output.Add(minEvenIndex);\n\
    \            }\n        }\n        return output;", "        long minEven = long.MaxValue;\n\
    \        int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven =\
    \ arr[i];\n                index = i;\n            }\n        }\n        if (index\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>{minEven, index};", "        // To do: code here\n\n        List<long>\
    \ result = new List<long>();\n        long minEven = long.MaxValue;\n        int\
    \ minEvenIdx = -1;\n        for (int i = 0; i < arr.Count; i++) {\n          \
    \  if (arr[i] == 0) {\n                result.Add(0);\n                result.Add(i);\n\
    \                return result;\n            }\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] < minEven) {\n                minEven = arr[i];\n              \
    \  minEvenIdx = i;\n            }\n        }\n        if (minEvenIdx == -1) {\n\
    \            return result;\n        }\n        result.Add(minEven);\n       \
    \ result.Add(minEvenIdx);\n        return result;", "        long v = arr.Find(x\
    \ => x % 2 == 0);\n        int i = arr.FindIndex(x => x == v);\n        return\
    \ new List<long>() { v, i };", "        // Initialize the initial sum.\n     \
    \   long min = 10001;\n        long min_idx = 0;\n        // Initialize the sum\
    \ at the 0th index.\n        for (long i = 0; i < arr.Count; i++) {\n        \
    \    if (arr[(int)i] % 2 == 0 && arr[(int)i] < min) {\n                min = arr[(int)i];\n\
    \                min_idx = i;\n            }\n        }\n        // If the sum\
    \ is still 0, return 0.\n        if (min > 10000) {\n            return new List<long>();\n\
    \        }\n        // Convert the minimum to a long, and return it.\n       \
    \ return new List<long>{ min, min_idx };", '        return Enumerable.Range(0,
    arr.Count).Where(n => arr[n] % 2 == 0).OrderBy(n => arr[n]).Select(n => new List<long>()
    { arr[n], n }).FirstOrDefault() ?? new List<long>();', "        long min = long.MaxValue;\n\
    \        long idx = -1;\n        for (long i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[(int)i] % 2 == 0 && arr[(int)i] < min) {\n                min\
    \ = arr[(int)i];\n                idx = i;\n            }\n        }\n       \
    \ if (idx == -1) {\n            return new List<long>();\n        }\n        return\
    \ new List<long>(new long[]{(long)min, (long)idx});", '        return Enumerable.Range(0,
    arr.Count).OrderBy(i => arr[i]).ThenBy(i => i).FirstOrDefault(i => arr[i] % 2
    == 0) != default ? new List<long> { arr[Enumerable.Range(0, arr.Count).OrderBy(i
    => arr[i]).ThenBy(i => i).FirstOrDefault(i => arr[i] % 2 == 0)], Enumerable.Range(0,
    arr.Count).OrderBy(i => arr[i]).ThenBy(i => i).FirstOrDefault(i => arr[i] % 2
    == 0) } : new List<long>();', "        List<long> arr2 = new List<long>();\n \
    \       long min = 1;\n        if (arr.Count == 0) {\n            return arr2;\n\
    \        }\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (arr[i] < min) {\n                    min =\
    \ arr[i];\n                    arr2.Clear();\n                    arr2.Add(min);\n\
    \                    arr2.Add(i);\n                }\n            }\n        }\n\
    \        if (arr2.Count == 0) {\n            return arr2;\n        }\n       \
    \ return arr2;"]
stop_tokens:
- "\n    }\n"
