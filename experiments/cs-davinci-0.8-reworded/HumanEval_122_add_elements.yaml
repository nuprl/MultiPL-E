name: HumanEval_122_add_elements
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a non-empty list of integers arr and an integer k, return\n\
  \    // the sum of the elements with at most two digits from the first k elements\
  \ of arr.\n    // Example:\n    // >>> AddElements((new List<long>(new long[]{(long)111L,\
  \ (long)21L, (long)3L, (long)4000L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L})),\
  \ (4L))\n    // (24L)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n   \
  \ // 2. 1 <= k <= len(arr)\n    public static long AddElements(List<long> arr, long\
  \ k) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AddElements((new\
  \ List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)41L, (long)57L, (long)76L,\
  \ (long)87L, (long)88L, (long)99L})), (3L)) == (-4L));\n    Debug.Assert(AddElements((new\
  \ List<long>(new long[]{(long)111L, (long)121L, (long)3L, (long)4000L, (long)5L,\
  \ (long)6L})), (2L)) == (0L));\n    Debug.Assert(AddElements((new List<long>(new\
  \ long[]{(long)11L, (long)21L, (long)3L, (long)90L, (long)5L, (long)6L, (long)7L,\
  \ (long)8L, (long)9L})), (4L)) == (125L));\n    Debug.Assert(AddElements((new List<long>(new\
  \ long[]{(long)111L, (long)21L, (long)3L, (long)4000L, (long)5L, (long)6L, (long)7L,\
  \ (long)8L, (long)9L})), (4L)) == (24L));\n    Debug.Assert(AddElements((new List<long>(new\
  \ long[]{(long)1L})), (1L)) == (1L));\n    }\n\n}\n"
completions: ["        // Your code goes here\n        long result = 0;\n        for\
    \ (int i = 0; i < k; i++) {\n            result += (arr[i] > 99) ? 99 : arr[i];\n\
    \        }\n        return result;", "        // Your code here.\n        throw\
    \ new NotImplementedException();", "        long cur = 0;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] < 100 && i < k) {\n     \
    \           cur += arr[i];\n            }\n        }\n        return cur;", " \
    \       long result = 0;\n        for (long i = 0; i < k; i++) {\n           \
    \ if (arr[(int)i] >= 100) {\n                continue;\n            }\n      \
    \      result += arr[(int)i];\n        }\n        return result;", '        return
    arr.Take((int)k).Where(x => x < 100).Sum();', "        long res = 0;\n       \
    \ for (int i = 0; i < k; i++) {\n            var v = arr[i];\n            if (v\
    \ < 100) {\n                res += v;\n            }\n        }\n        return\
    \ res;", "        var arr2 = arr.Take((int)k).ToList();\n        return arr2.Where(x\
    \ => x < 100).Sum();", "        if(k == 1L) {\n            return arr[0];\n  \
    \      }\n        if(k == 2L) {\n            return arr[0] + arr[1];\n       \
    \ }\n        var sum = arr[0] + arr[1];\n        var idx = 2L;\n        while((idx\
    \ < k) && (arr[idx] < 100L)) {\n            sum += arr[idx];\n            idx++;\n\
    \        }\n        return sum;", "        if (k == 1) {\n            if (arr[0]\
    \ < 10) {\n                return arr[0];\n            } else if (arr[0] < 100)\
    \ {\n                return arr[0] % 10 + arr[0] / 10;\n            } else {\n\
    \                return arr[0] % 10 + arr[0] / 10 % 10 + arr[0] / 100;\n     \
    \       }\n        }\n        return AddElements(arr, k - 1) + AddElements(arr.GetRange(1,\
    \ arr.Count - 1), 1);", "        var k_int = (int)k;\n        var result = 0L;\n\
    \        for (var i = 0; i < k_int; i++) {\n            if (arr[i] > 100) {\n\
    \                continue;\n            }\n            result += arr[i];\n   \
    \     }\n        return result;", '        return arr.Take((int)k).Where(x =>
    x < 100).Sum();', "        long sum = 0;\n        for (int i = 0; i < k; i++)\
    \ {\n            if (arr[i] >= 0 && arr[i] < 100)\n                sum += arr[i];\n\
    \        }\n        return sum;", "        long ret = 0;\n        // write code\
    \ here\n        if (arr.Count == 0) {\n            return ret;\n        }\n  \
    \      long num;\n        if (k > arr.Count) {\n            k = arr.Count;\n \
    \       }\n        for (int i = 0; i < k; i++) {\n            num = arr[i];\n\
    \            if (num < 10) {\n                ret += num;\n            } else\
    \ if (num < 100) {\n                ret += num;\n            }\n        }\n  \
    \      return ret;", "        BigInteger b = BigInteger.Zero;\n        for (long\
    \ i = 0; i < k; i++) {\n            if (arr[(int)i] < 100) {\n               \
    \ b += arr[(int)i];\n            }\n        }\n        return (long)b;", "   \
    \     long sum = 0;\n        int i = 0;\n        while(i < k && i < arr.Count\
    \ && arr[i] < 100) {\n            sum += arr[i];\n            i++;\n        }\n\
    \        return sum;", '        return 0;', '        return arr.Take((int)k).Where(v
    => v < 99).Sum();', "        // Determine which elements to sum\n        var elementsToSum\
    \ = arr.Take((int)k);\n        // Take only the elements with at most two digits\n\
    \        var elementsWithTwoDigits = elementsToSum.Where(e => e >= 1 && e <= 99);\n\
    \        // Sum the selected elements\n        var result = elementsWithTwoDigits.Sum();\n\
    \        return result;", "        // We can solve this using a loop.\n      \
    \  long sum = 0;\n        for (long i = 0; i < k; i++) {\n            if (arr[(int)i]\
    \ < 100) {\n                sum += arr[(int)i];\n            }\n        }\n  \
    \      return sum;", "        var result = 0L;\n        foreach (var v in arr.Take((int)k))\
    \ {\n            if (v < 100) {\n                result += v;\n            }\n\
    \        }\n        return result;", '        return arr.Where(x => x < 100L).Take((int)k).Sum();',
  "        long ans = 0;\n        for (long i = 0; i < k; i++) {\n            if (arr[(int)i]\
    \ < (long)100L) {\n                ans += arr[(int)i];\n            }\n      \
    \  }\n        return ans;", '        return arr.Where(x => x < 100L).Take((int)k).Sum();',
  '        throw new NotImplementedException();', "        var sum = 0L;\n       \
    \ foreach (var item in arr.Take((int)k)) {\n            if (item < 100) {\n  \
    \              sum += item;\n            }\n        }\n        return sum;", " \
    \       long solution = 0;\n        long listIndex = 0;\n        // Iterate over\
    \ the first k elements of arr\n        while (listIndex < k) {\n            //\
    \ Add the element to the solution if it has at most two digits.\n            if\
    \ (arr[(int)listIndex] < 100) {\n                solution += arr[(int)listIndex];\n\
    \            }\n            listIndex += 1;\n        }\n        return solution;",
  "        long result = 0;\n        // Write your code here.\n        return result;",
  '        return arr.Take((int)k).Where(i => i < 100).Sum();', "        //long ret\
    \ = 0;\n\n        //return ret;\n        long ret = 0;\n        long len = k;\n\
    \        if (len > (long)arr.Count) {\n            len = (long)arr.Count;\n  \
    \      }\n        for (long i = 0; i < len; i++) {\n            if (arr[(int)i]\
    \ > 99) {\n                continue;\n            }\n            ret += arr[(int)i];\n\
    \        }\n        return ret;", "        long sum = 0;\n        for (long i\
    \ = 0; i < k; i++) {\n            if (arr[(int)i] < 100L) {\n                sum\
    \ += arr[(int)i];\n            }\n        }\n        return sum;", '        return
    (long)0L;', "        List<long> _ = new List<long>();\n        // your code goes\
    \ here\n        var a = arr.Take((int)k).Where(n => n < 100).ToList();\n     \
    \   return a.Sum();", '        return arr.Where(x => x < 100).Take((int)k).Sum();',
  "        long sum = 0;\n        foreach (long element in arr) {\n            sum\
    \ += element;\n        }\n        return sum;", '        return 0;', "       \
    \ long sum = 0;\n        for (int i = 0; i < k; i++) {\n            var s = arr[i].ToString();\n\
    \            if (s.Length > 2) {\n                sum += long.Parse(s.Substring(0,\
    \ 2));\n            } else {\n                sum += arr[i];\n            }\n\
    \        }\n        return sum;", "        long _ = 0L;\n        List<long> __\
    \ = new List<long>();\n        foreach (long a in arr) {\n            if (a <=\
    \ 99L) {\n                __.Add(a);\n            }\n        }\n        for (long\
    \ i = 0L; i < k; i++) {\n            if (i < __.Count) {\n                _ +=\
    \ __[(int)i];\n            }\n        }\n        return _;", "        long sum\
    \ = 0;\n        for (long i = 0; i < k; i++) {\n            if (arr[(int)i] >=\
    \ 10L && arr[(int)i] < 100L) {\n                sum += arr[(int)i];\n        \
    \    }\n        }\n        return sum;", "        BigInteger sum = 0;\n      \
    \  int i = 0;\n        while (i < k) {\n            if (arr[i] < 100) {\n    \
    \            sum += arr[i];\n            }\n            i++;\n        }\n    \
    \    return (long)sum;", "        long sum = 0;\n        for (long i = 0; i <\
    \ k; i = i + 1) {\n            if (arr[(int)i] > 99) {\n                continue;\n\
    \            }\n            sum = sum + arr[(int)i];\n        }\n        return\
    \ sum;", "        if (k == 0) {\n            return 0;\n        }\n        long\
    \ a = arr[(int)k - 1];\n        if (a < 10) {\n            return a + AddElements(arr,\
    \ k - 1);\n        }\n        if (a < 100) {\n            return a + AddElements(arr,\
    \ k - 1);\n        }\n        return AddElements(arr, k - 1);", "        // Fill\
    \ in your answer here.\n        long total = 0;\n        for (int i = 0; i < k;\
    \ i++) {\n            if (arr[i] < 100) {\n                total += arr[i];\n\
    \            }\n        }\n        return total;", "        long total = 0;\n\
    \        for (long i = 0; i < k; i++) {\n            if (arr[(int)i] < 100) {\n\
    \                total += arr[(int)i];\n            }\n        }\n        return\
    \ total;", "        long result = 0;\n        for (long i = 0; i < k; i++) {\n\
    \            if (arr[(int)i] < 100) {\n                result += arr[(int)i];\n\
    \            }\n        }\n        return result;", "        // **** ****\n  \
    \      long i, n = 0L;\n        for (i = 0L; i < k; i++) {\n            if (arr[(int)i]\
    \ < 100L) {\n                n += arr[(int)i];\n            }\n        }\n   \
    \     return n;", "        long res = 0;\n        for (int i = 0; i < k; i++)\
    \ {\n            if (arr[i] < 100) {\n                res += arr[i];\n       \
    \     }\n        }\n        return res;", "        Debug.Assert(1 <= arr.Count\
    \ && arr.Count <= 100);\n        Debug.Assert(1 <= k && k <= arr.Count);\n   \
    \     // Assume that the given arr has at least one element with at most two digits.\n\
    \        long sum = 0;\n        for (int i = 0; i < k; i++) {\n            if\
    \ (arr[i] < 100) {\n                sum += arr[i];\n            }\n        }\n\
    \        return sum;", '        throw new NotImplementedException();', "     \
    \   long ret = 0;\n        for (long i = 0; i < k; i++) {\n            if (arr[(int)i]\
    \ < 100) {\n                ret += arr[(int)i];\n            }\n        }\n  \
    \      return ret;", "        // We use a value of 0 for values that may be used\
    \ to prevent overcounting.\n        long[] digits = new long[2];\n        for\
    \ (int i = 0; i < k; i++) {\n            var numDigits = Math.Floor(Math.Log10(arr[i])\
    \ + 1);\n            if (numDigits <= 2) {\n                digits[0] += arr[i];\n\
    \            } else {\n                digits[1] += arr[i];\n            }\n \
    \       }\n        return digits[0] + digits[1];", "        long cmp = 99;\n \
    \       long sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr[i]\
    \ <= cmp) {\n                sum += arr[i];\n            }\n        }\n      \
    \  return sum;", "        // Insert your code here\n        return 0;", "    \
    \    long res = 0;\n        for (int i = 0; i < k; i++) {\n            long x\
    \ = arr[i];\n            if (x < 100) {\n                res += x;\n         \
    \   }\n        }\n        return res;", "        // ************************************\n\
    \        // WARNING: DO NOT CHANGE THE SIGNATURE\n        // ************************************\n\
    \        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (arr[i] < 100 && arr[i] > 9) {\n                sum += arr[i];\n   \
    \         }\n            if (i == k) {\n                break;\n            }\n\
    \        }\n        return sum;", "        long sum = 0;\n        int digits =\
    \ 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long element\
    \ = arr[i];\n            while (element > 0) {\n                element /= 10;\n\
    \                digits++;\n            }\n            if (digits <= 2) {\n  \
    \              sum += arr[i];\n            }\n            digits = 0;\n      \
    \      if (i == k - 1) break;\n        }\n        return sum;", '        return
    0;', "        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] <= 99) {\n                sum += arr[i];\n            }\n\
    \            if (i == k - 1) {\n                break;\n            }\n      \
    \  }\n        return sum;", "        long s = 0;\n        for (int i = 0; i <\
    \ k; i++) {\n            if (arr[i] >= 10 && arr[i] < 100) {\n               \
    \ s += arr[i];\n            }\n        }\n        return s;", "        long res\
    \ = 0;\n        if (k > arr.Count) {\n            k = arr.Count;\n        }\n\
    \        for (long i = 0; i < k; i++) {\n            if (arr[(int)i] > 9 && arr[(int)i]\
    \ < 100) {\n                res += arr[(int)i];\n            }\n        }\n  \
    \      return res;", "        long sum = 0;\n        for (long i = 0; i < k; i++)\
    \ {\n            sum += (arr[(int)i] < 100L) ? arr[(int)i] : 0L;\n        }\n\
    \        return sum;", "        long value = 0;\n        for (int i = 0; i < k;\
    \ i++) {\n            if (arr[i] > 99) {\n                arr[i] = 99;\n     \
    \       }\n            value += arr[i];\n        }\n        return value;", '        return
    arr.Where(n => n < 100).Take((int)k).Sum();', "        List<long> list = new List<long>();\n\
    \        foreach (long el in arr) {\n            if (el < 100) {\n           \
    \     list.Add(el);\n            }\n        }\n        list.Sort();\n        return\
    \ list.GetRange(0, (int)k).Sum();", "        // Your code goes here.\n       \
    \ return arr.Where(e => e < 100).Take((int)k).Sum();", "        var sum = new\
    \ BigInteger(0);\n        var index = 0;\n        while (index < k) {\n      \
    \      if (arr[index] < 100) {\n                sum += arr[index];\n         \
    \   }\n            index++;\n        }\n        return (long)sum;", "        //\
    \ Your code goes here\n        long sum = 0;\n        if (k >= arr.Count) {\n\
    \            return arr.Sum();\n        }\n        for (int i = 0; i < k; i++)\
    \ {\n            long num = arr[i];\n            int digits = (int)Math.Floor(Math.Log10(num)\
    \ + 1);\n            if (digits <= 2) {\n                sum += num;\n       \
    \     }\n        }\n        return sum;", "        long _rv = 0L;\n        for\
    \ (int _i = 0; _i < (int)Math.Min(k, (long)arr.Count); _i++) {\n            if\
    \ ((arr[_i] < (long)100L)) {\n                _rv = (_rv + arr[_i]);\n       \
    \     }\n        }\n        return _rv;", "        long sum = 0;\n        for\
    \ (long i = 0; i < k; i++) {\n            if (arr[(int)i] > 99) {\n          \
    \      sum += 99;\n            } else {\n                sum += arr[(int)i];\n\
    \            }\n        }\n        return sum;", '        return arr.Take((int)k).Where(x
    => x < 100).Sum();', "        long res = 0;\n        for (long i = 0; i < k; i++)\
    \ {\n            if (arr[(int)i] < 100) {\n                res += arr[(int)i];\n\
    \            }\n        }\n        return res;", "        long ret = 0;\n    \
    \    for (int i = 0; i < k; i++) {\n            if (arr[i] < 100) {\n        \
    \        ret += arr[i];\n            }\n        }\n        return ret;", "   \
    \     long result = 0;\n        for (long i = 0; i < k; i++) {\n            long\
    \ number = arr[(int)i];\n            if (number < 100) {\n                result\
    \ += number;\n            }\n        }\n        return result;", "        // Given\
    \ a non-empty list of integers arr and an integer k, return\n        // the sum\
    \ of the elements with at most two digits from the first k elements of arr.\n\
    \        var arr_slice = arr.GetRange(0, (int)k);\n        var res = 0L;\n   \
    \     foreach (var e in arr_slice) {\n            if (e < 100) {\n           \
    \     res += e;\n            }\n        }\n        return res;", "        List<long>\
    \ list = new List<long>();\n        foreach (long a in arr) {\n            if\
    \ (a < 100) {\n                list.Add(a);\n            }\n        }\n      \
    \  long sum = 0;\n        for (long i = 0; i < k; i++) {\n            sum += list[(int)i];\n\
    \        }\n        return sum;", '        return (long)0L;', "        long sum\
    \ = 0;\n        for (long i = 0; i < k; i++) {\n            long num = arr[(int)i];\n\
    \            if (num < 10) {\n                sum += num;\n            } else\
    \ if (num < 100) {\n                sum += num;\n            }\n        }\n  \
    \      return sum;", '        return 0;', "        BigInteger tot = BigInteger.Zero;\n\
    \        for (long x = 0; x < k; x++) {\n            string s = arr[(int)x].ToString();\n\
    \            if (s.Length > 2) {\n                s = s.Substring(0, 2);\n   \
    \         }\n            tot += BigInteger.Parse(s);\n        }\n        return\
    \ (long)tot;", "        long ans = 0;\n        foreach (long elem in arr) {\n\
    \            if (k < 1) break;\n            if (elem < 10) ans += elem;\n    \
    \        else if (elem < 100) ans += elem;\n            k -= 1;\n        }\n \
    \       return ans;", '        return arr.Take((int)k).Where(x => x < 100).Sum();',
  '        return arr.Take((int)k).Where(e => e < 100).Sum();', "        long acc\
    \ = 0;\n        for (int i = 0; i < k; i += 1) {\n            if (arr[i] < 100)\
    \ {\n                acc += arr[i];\n            }\n        }\n        return\
    \ acc;", "        long total = 0;\n        for (int i = 0; i < k; i++) {\n   \
    \         if (arr[i] >= 100) {\n                total += (long)100L;\n       \
    \     } else if (arr[i] < 100 && arr[i] >= 10) {\n                total += (long)10L;\n\
    \            } else {\n                total += arr[i];\n            }\n     \
    \   }\n        return total;", "        // Make an element that is the sum of\
    \ all the numbers with at most two digits\n        // in the first k elements\
    \ of arr.\n        var result = 0L;\n        // This incrementer is used to iterate\
    \ through arr.\n        var i = 0L;\n        while ((i < k)) {\n            //\
    \ This variable holds the value of arr[i].\n            var item = arr[(int)(i)];\n\
    \            // If item has at most two digits, add it to result.\n          \
    \  if (((item < 100L) && (item >= 10L))) {\n                result = (result +\
    \ item);\n            }\n            // Increment i.\n            i = (i + 1L);\n\
    \        }\n        return result;", '        return 0;', '        return arr.Take((int)k).Sum(x
    => x < 100 ? x : 0);', "        long ret = 0;\n        for (long i = 0; i < k;\
    \ i++) {\n            if (arr[(int)i] < 100) {\n                ret += arr[(int)i];\n\
    \            }\n        }\n        return ret;", "        long sum = 0;\n    \
    \    for (int i = 0; i < k; i++) {\n            if (arr[i] > 99) {\n         \
    \       continue;\n            }\n            sum += arr[i];\n        }\n    \
    \    return sum;", "        var arrLen = arr.Count;\n        long twoDigitCnt\
    \ = 0;\n        long result = 0;\n        for (long i = 0; i < arrLen; i++) {\n\
    \            if (arr[(int)i] > 99) {\n                twoDigitCnt++;\n       \
    \     }\n            if (i < k) {\n                result += arr[(int)i];\n  \
    \          }\n        }\n        if (twoDigitCnt >= k) {\n            return result;\n\
    \        }\n        if (twoDigitCnt > 0) {\n            k -= twoDigitCnt;\n  \
    \      }\n        var highestIndex = arrLen - 1;\n        while (highestIndex\
    \ >= 0 && arr[(int)highestIndex] < 100) {\n            highestIndex--;\n     \
    \   }\n        while (k > 0 && highestIndex >= 0) {\n            var current =\
    \ arr[(int)highestIndex];\n            arr[(int)highestIndex] = 0;\n         \
    \   result += current;\n            highestIndex--;\n            k--;\n      \
    \  }\n        return result;", "        // Initialize counters\n        long sum\
    \ = 0;\n        long number = 0;\n        // Loop through each number in the list\n\
    \        foreach (long value in arr) {\n            // If it's two digits, add\
    \ it to the sum\n            if (value.ToString().Length <= 2) {\n           \
    \     sum += value;\n                number++;\n            }\n            //\
    \ If the number has been reached, then break\n            if (number == k) {\n\
    \                break;\n            }\n        }\n        return sum;", "   \
    \     long sum = 0;\n        int count = 0;\n        while (count < arr.Count\
    \ && count < k) {\n            if (arr[count] < 100) {\n                sum +=\
    \ arr[count];\n            }\n            count++;\n        }\n        return\
    \ sum;", "        long sum = 0;\n        for (int i = 0; i < k; i++) {\n     \
    \       if (arr[i] < 100) {\n                sum += arr[i];\n            }\n \
    \       }\n        return sum;", "        int c = 0;\n        long sum = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (c >= k) {\n  \
    \              break;\n            }\n            if (arr[i] < 100) {\n      \
    \          sum += arr[i];\n                c++;\n            }\n        }\n  \
    \      return sum;", '        return 0;', "        var sum = 0L;\n        for\
    \ (var i = 0; i < k; i++) {\n            var n = arr[i];\n            if (n <\
    \ 100) {\n                sum += n;\n            }\n        }\n        return\
    \ sum;", "        // write code here\n        return arr.Take((int)k).Where(i\
    \ => i < 100).Sum();", "        // Insert code here.\n        return 0;", '        return
    Enumerable.Range(0, (int)k).Where(x => x < arr.Count).Where(x => arr[x] <= 99).Select(x
    => arr[x]).Sum();', '        return (arr.Take((int)k).Where(e => e < 100L).Sum());',
  "        long total = 0;\n        for (int i = 0; i < k; i++) {\n            long\
    \ number = arr[i];\n            if (number > 99) {\n                number = number\
    \ % 100;\n            }\n            total += number;\n        }\n        return\
    \ total;", '        return arr.Where(n => n < 100).Take((int)k).Sum();', '        return
    Enumerable.Range(0, (int)k).Select(i => arr[i]).Where(x => x >= 0 && x < 100).Sum();',
  "        // v0 = arr[0]\n        // v1 = arr[1]\n        // v2 = arr[2]\n      \
    \  // v3 = arr[3]\n        // v4 = arr[4]\n        // v5 = arr[5]\n        //\
    \ v6 = arr[6]\n        // v7 = arr[7]\n        // v8 = arr[8]\n        // v9 =\
    \ arr[9]\n        // v10 = arr[10]\n        // v11 = arr[11]\n        // v12 =\
    \ arr[12]\n        // v13 = arr[13]\n        // v14 = arr[14]\n        // v15\
    \ = arr[15]\n        // v16 = arr[16]\n        // v17 = arr[17]\n        // v18\
    \ = arr[18]\n        // v19 = arr[19]\n        // v20 = arr[20]\n        // v21\
    \ = arr[21]\n        // v22 = arr[22]\n        // v23 = arr[23]\n        // v24\
    \ = arr[24]\n        // v25 = arr[25]\n        // v26 = arr[26]\n        // v27\
    \ = arr[27]\n        // v28 = arr[28]\n        // v29 = arr[29]\n        // v30\
    \ = arr[30]\n        // v31 = arr[31]\n        // v32 = arr[32]\n        // v33\
    \ = arr[33]\n        // v34 = arr[34]\n        // v35 = arr[35]\n        // v36\
    \ = arr[36]\n        // v37 = arr[37]\n        // v38 = arr[38]\n        // v39\
    \ = arr[39]\n        // v40 = arr[40]\n        // v41 = arr[41]\n        // v42\
    \ = arr[42]\n        // v43 = arr[43]\n        // v44 = arr[44]\n        // v45\
    \ = arr[45]\n        // v46 = arr[46]\n        // v47 = arr[47]\n        // v48\
    \ = arr[48]\n        // v49 = arr[49]\n        // v50 = arr[50]\n       ", " \
    \       long total = 0;\n        for (long i = 0; i < k; i++) {\n            if\
    \ (arr[(int)i] < 100) {\n                total += arr[(int)i];\n            }\n\
    \        }\n        return total;", "        int a = (int)k;\n        if (a <\
    \ arr.Count) {\n            return arr.GetRange(0, a).Where(x => x > 9 && x <\
    \ 100).Sum();\n        }\n        return arr.Where(x => x > 9 && x < 100).Sum();",
  "        // Your code goes here.\n        var result = 0L;\n        for (var x =\
    \ 0; x < k; x++) {\n            if (arr[x] < 100) {\n                result +=\
    \ arr[x];\n            }\n        }\n        return result;", "        // Solution\
    \ by @tuananh93\n        var sum = (long)0L;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] < 100) {\n                sum += arr[i];\n  \
    \          }\n            if (i >= k) {\n                break;\n            }\n\
    \        }\n        return sum;", "        // Fill me in, please!\n        return\
    \ default(long);", "        Debug.Assert(1 <= arr.Count);\n        Debug.Assert(arr.Count\
    \ <= 100);\n        Debug.Assert(1 <= k);\n        Debug.Assert(k <= arr.Count);\n\
    \        return 0;", "        var ret = 0L;\n        for (var i = 0; i < k; i\
    \ += 1) {\n            var n = arr[(int)i];\n            if (n < 10) {\n     \
    \           ret += n;\n            } else if (n < 100) {\n                ret\
    \ += n / 10 + n % 10;\n            } else {\n                ret += n / 100 +\
    \ (n % 100) / 10 + n % 10;\n            }\n        }\n        return ret;", " \
    \       long sum = 0;\n        for (long i = 0; i < k; i++) {\n            if\
    \ (arr[(int)i] < 100) {\n                sum += arr[(int)i];\n            }\n\
    \        }\n        return sum;", "        // TODO\n        //long output = 0;\n\
    \        //foreach (var item in arr)\n        //{\n        //    string str =\
    \ item.ToString();\n        //    if (str.Length == 1 || str.Length == 2)\n  \
    \      //    {\n        //        output += item;\n        //    }\n        //}\n\
    \        //return output;\n        long counter = 0;\n        long sum = 0;\n\
    \        foreach (var item in arr)\n        {\n            if (counter == k)\n\
    \            {\n                break;\n            }\n            if (item.ToString().Length\
    \ == 1 || item.ToString().Length == 2)\n            {\n                sum +=\
    \ item;\n            }\n            counter++;\n        }\n        return sum;",
  '        return AddElements(arr, k, new List<long>());', "        long output =\
    \ 0;\n        for (long idx = 0; idx < k; idx++) {\n            if (arr[(int)idx]\
    \ < 100) {\n                output += arr[(int)idx];\n            }\n        }\n\
    \        return output;", "        long result = 0;\n        for (int i = 0; i\
    \ < k; i++) {\n            if (arr[i] >= 10 && arr[i] < 100) {\n             \
    \   result += arr[i];\n            }\n        }\n        return result;", "  \
    \      long total = 0;\n        for (int i = 0; i < k; i++) {\n            long\
    \ item = arr[i];\n            if (item < 100) {\n                total += item;\n\
    \            }\n        }\n        return total;", "        long total = 0;\n\
    \        for (int i = 0; i < k; i++) {\n            var number = arr[i];\n   \
    \         if (number > 99) {\n                number = 99;\n            }\n  \
    \          total += number;\n        }\n        return total;", "        long\
    \ sum = 0;\n        long count = 0;\n        for (long i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[(int)i] >= 0 && arr[(int)i] <= 99) {\n              \
    \  sum += arr[(int)i];\n                count += 1;\n            }\n         \
    \   if (count == k) {\n                break;\n            }\n        }\n    \
    \    return sum;", "        long sum = 0;\n        for (int i = 0; i < k; i++)\
    \ {\n            long x = arr[i];\n            if (x >= 10 && x < 100) {\n   \
    \             sum += x;\n            }\n        }\n        return sum;", "   \
    \     long sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr[i]\
    \ < 100) {\n                sum += arr[i];\n            }\n        }\n       \
    \ return sum;", "        long n = 0;\n        foreach (long x in arr.Take((int)k))\
    \ {\n            long x2 = x % 100;\n            if (x2 >= 10) {\n           \
    \     n += x2;\n            }\n        }\n        return n;", "        long sum\
    \ = 0;\n        foreach (long num in arr.Take((int)k)) {\n            long digits\
    \ = (long)Math.Floor(Math.Log10(num)) + 1;\n            if (digits <= 2) {\n \
    \               sum += num;\n            }\n        }\n        return sum;", " \
    \       long res = 0;\n        for (int i = 0; i < k; i++) {\n            long\
    \ a = arr[i];\n            if (10L <= a && a <= 99L) {\n                res +=\
    \ a;\n            }\n        }\n        return res;", '        return 0;', '        return
    AddElementsR((new List<long>(new long[]{(long)111L, (long)21L, (long)3L, (long)4000L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L})), (4L));', "        long res\
    \ = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr[i] < 100) {\n\
    \                res += arr[i];\n            }\n        }\n        return res;",
  '        throw new NotImplementedException();', "        long result = 0;\n    \
    \    if (arr.Count > 100 || k > arr.Count || k < 1 || arr.Count < 1) {\n     \
    \       Console.WriteLine(\"AddElements: error in parameters\");\n           \
    \ return 0;\n        }\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (i == k) {\n                break;\n            }\n            if (arr[i]\
    \ > 9 && arr[i] < 100) {\n                result += arr[i];\n            }\n \
    \       }\n        return result;", "        long sum = 0;\n        for (int i\
    \ = 0; i < k; i++) {\n            if (arr[i] >= 100) {\n                continue;\n\
    \            }\n            sum += arr[i];\n        }\n        return sum;", '        return
    arr.Where(element => element < 100).Take((int)k).Sum();', "        //\n      \
    \  // Implemented in C#.NET:\n        //\n        return(Enumerable.Range(0, (int)k).Sum(i\
    \ => arr[i] < 100 ? arr[i] : 0));", '        return 0;', "        long[] a = arr.ToArray();\n\
    \        long k__1 = (long)k;\n        List<long> b = new List<long>();\n    \
    \    long count = (long)0L;\n        long element = (long)0L;\n        while (count\
    \ < k__1) {\n            element = a[(int)count];\n            if ((((long)element\
    \ / (long)10L) < (long)1L) || (((long)element / (long)10L) == (long)10L)) {\n\
    \                b.Add(element);\n            }\n\n            count = (long)(count\
    \ + (long)1L);\n        }\n\n        return b.Sum();", "        long sum = 0;\n\
    \        for (int i = 0; i < k; i++) {\n            sum += arr[i] % 100;\n   \
    \     }\n        return sum;", "        var answer = 0L;\n        for (var i =\
    \ 0; i < k; i++) {\n            if (arr[(int)i] > 99L) {\n                answer\
    \ += arr[(int)i] % 100L;\n            } else {\n                answer += arr[(int)i];\n\
    \            }\n        }\n        return answer;", '        return arr.Where(x
    => x.ToString().Length <= 2).Take((int)k).Sum();', "        long ret = 0;\n  \
    \      long twoD = 100;\n        long i = 0;\n        while (i < k) {\n      \
    \      if (arr[(int)i] < twoD) {\n                ret += arr[(int)i];\n      \
    \      }\n            i += 1;\n        }\n        return ret;", '        return
    arr.Take((int)k).Where(x => x < 100).Sum();', '        return arr.Take((int)k).Where(x
    => x < 100).Sum();', "        long sum = 0;\n        for (long i = 0; i < k; i++)\
    \ {\n            long value = arr[(int)i];\n            if (value < 100) {\n \
    \               sum += value;\n            }\n        }\n        return sum;",
  "        var newList = new List<long>();\n        for (int i = 0; i < k; i++) {\n\
    \            var digitCount = CountDigits(arr[i]);\n            if (digitCount\
    \ <= 2) {\n                newList.Add(arr[i]);\n            }\n        }\n  \
    \      return newList.Sum();", '        return arr.Where(x => x < 100).Take((int)k).Sum();',
  "        var sum = 0L;\n        for (var i = 0; i < k; i++) {\n            if (arr[i]\
    \ < 100) {\n                sum += arr[i];\n            }\n        }\n       \
    \ return sum;", "        long result = 0;\n        List<long> newList = new List<long>();\n\
    \        for (int i = 0; i < k; i++) {\n            if (arr[i] >= 0 && arr[i]\
    \ <= 99) {\n                newList.Add(arr[i]);\n            }\n        }\n \
    \       for (int i = 0; i < newList.Count; i++) {\n            result += newList[i];\n\
    \        }\n        return result;", "        long sum = 0;\n        long i =\
    \ 0;\n        while (((i < k) && (i < arr.Count))) {\n            long x = arr[(int)i];\n\
    \            if (((x > 99L) || (x < 10L))) {\n                sum = (sum + x);\n\
    \            }\n            i = (i + 1L);\n        }\n        return sum;", " \
    \       long res = 0;\n        foreach (long i in arr) {\n            if (i <\
    \ 100) {\n                res += i;\n                k -= 1;\n               \
    \ if (k == 0) {\n                    break;\n                }\n            }\n\
    \        }\n        return res;", "        var _temp = \n            Enumerable.ToList(Enumerable.Take(\n\
    \                Enumerable.TakeWhile(arr, e => e <= 99), (int)k));\n        var\
    \ temp = 0L;\n        foreach (var e in _temp) {\n            temp = (temp + e);\n\
    \        }\n        return temp;", '        return arr.Take((int)k).Sum(x => (x
    < 100 ? x : 0));', "        long output = 0;\n        int i = 0;\n        while\
    \ (i < k) {\n            if (arr[i] < 100) {\n                output += arr[i];\n\
    \            }\n            i += 1;\n        }\n        return output;", "   \
    \     var total = 0L;\n        for (int i = 0; i < k; i++) {\n            var\
    \ length = arr[i].ToString().Length;\n            if (length <= 2) {\n       \
    \         total += arr[i];\n            }\n        }\n        return total;",
  "        // It is guaranteed that for the given test cases the answer always fits\
    \ in a signed 32-bit integer.\n        return (long)arr.Skip((int)k - 1).Where(item\
    \ => item < 100).Sum();", "        long result = 0;\n        for (long i = 0;\
    \ i < k; i++) {\n            var item = arr[(int)i];\n            if (item > 99)\
    \ {\n                continue;\n            }\n            result += item;\n \
    \       }\n        return result;", "        long sum = 0;\n        long count\
    \ = 0;\n        foreach (long e in arr) {\n            count++;\n            if\
    \ (count > k) {\n                break;\n            }\n            if (e <= (long)99L)\
    \ {\n                sum += e;\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr[i]\
    \ < 100) {\n                sum += arr[i];\n            }\n        }\n       \
    \ return sum;", '        return arr.Take((int)k).Where(x => x < 100).Sum();',
  "        int sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n         \
    \   if (i == k) break;\n            long e = arr[i];\n            if (e < 100)\
    \ {\n                sum += (int)e;\n            }\n        }\n        return\
    \ sum;", '        return arr.Take((int)k).Where(x => x < 100).Sum();', '        return
    (arr.Take((int)k).Sum(x => x > 99 ? 99 : x));', '        return arr.Take((int)k).Where(x
    => x < 100).Sum();', "        long res = 0;\n        for (int i = 0; i < k; i++)\
    \ {\n            if (arr[i] < 100) {\n                res += arr[i];\n       \
    \     }\n        }\n        return res;", "        var result = new List<long>();\n\
    \        var counter = 0;\n        foreach (var item in arr) {\n            if\
    \ (counter < k) {\n                if (item < 100) {\n                    result.Add(item);\n\
    \                }\n            }\n            counter++;\n        }\n       \
    \ return result.Sum();", "        long b = 0;\n        for (long i = 0; i < k;\
    \ i++) {\n            if (arr[(int)i] > 99) {\n                continue;\n   \
    \         }\n            else {\n                b = b + arr[(int)i];\n      \
    \      }\n        }\n        return b;", "        // Calculate and return the\
    \ answer\n        long ans = 0;\n        for (int i = 0; i < k; i++) {\n     \
    \       if (arr[i] < 100) ans += arr[i];\n        }\n        return ans;", '        return
    0;', "        long result = 0;\n        for (long i = 0; i < k; i++) {\n     \
    \       if (arr[(int)i] >= 100) {\n                result += (arr[(int)i] / 100)\
    \ * 100;\n            } else if (arr[(int)i] >= 10) {\n                result\
    \ += (arr[(int)i] / 10) * 10;\n            } else {\n                result +=\
    \ arr[(int)i];\n            }\n        }\n        return result;", '        throw
    new NotImplementedException();', "        long sum = 0;\n        long index =\
    \ 0;\n        while (index < k) {\n            long element = arr[(int)index];\n\
    \            if (element < 100) {\n                sum += element;\n         \
    \   }\n            index++;\n        }\n        return sum;", "        // Implement\
    \ me!\n        return 0;", '        return arr.Take((int)k).Where(x => x < 100).Sum();',
  "        List<long> arrToProcess = arr.Take((int)k).ToList();\n        return arrToProcess.Sum(x\
    \ => x < 100 ? x : 0);", "        var sum = 0L;\n        var count = 0L;\n   \
    \     foreach (var i in arr) {\n            if (i < 100) {\n                sum\
    \ += i;\n                count += 1;\n            }\n            if (count ==\
    \ k) {\n                break;\n            }\n        }\n        return sum;",
  '        throw new NotImplementedException();', "        // your code here\n   \
    \     long sum = 0;\n        for (long i = 0; i < k; i++){\n            long temp\
    \ = arr[(int)i];\n            long ten = 10;\n            while (temp > ten){\n\
    \                temp /= ten;\n            }\n            sum += temp;\n     \
    \   }\n        return sum;", "        List<long> list = arr.GetRange(0, (int)k);\n\
    \        List<long> list2 = list.Select(n => (long)n).Where(n => n.ToString().Length\
    \ <= 2).ToList();\n        return list2.Sum();", '        return 0;', "      \
    \  long result = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr[i]\
    \ >= 100 || arr[i] <= -100) {\n                result += arr[i];\n           \
    \ }\n        }\n        return result;", "        long sum = 0;\n        for (int\
    \ i = 0; i < k; i++) {\n            sum += arr[i];\n        }\n        return\
    \ sum;", '        return 0;', "        // Implement solution here\n        return\
    \ 0;", "        long total = 0;\n        for (long i = 0; i < k; i++) {\n    \
    \        if (arr[(int)i] < 100) {\n                total += arr[(int)i];\n   \
    \         }\n        }\n        return total;", "        long sum = 0;\n     \
    \   foreach (long item in arr) {\n            if (sum < k) {\n               \
    \ if (1 <= item && item <= 99) {\n                    sum += item;\n         \
    \       }\n            }\n        }\n        return sum;", "        // TODO: Fill\
    \ me in.\n        return -1;", "        var sum = 0L;\n        foreach (var e\
    \ in arr.Take((int)k)) {\n            if (e < 100) {\n                sum += e;\n\
    \            }\n        }\n        return sum;", "        long ans = 0;\n    \
    \    for (long i = 0; i < k; i++) {\n            long c = arr[(int)i];\n     \
    \       if (c < 10L) {\n                ans += c;\n            } else if (c <\
    \ 100L) {\n                ans += c;\n            }\n        }\n        return\
    \ ans;", "        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (i < k) {\n                if (arr[i] > 9 && arr[i] < 100) {\n\
    \                    sum += arr[i];\n                }\n            }\n      \
    \  }\n        return sum;", "        // your code goes here\n        return 0;",
  "        // d: the sum\n        // n: the number of elements to add\n        long\
    \ d = 0;\n        // i: the current index\n        long i = 0;\n        while\
    \ (((i < k) && (i < arr.Count)) && (i < 100L)) {\n            // If the current\
    \ element is at most two digits, add it to the sum.\n            // Otherwise,\
    \ stop.\n            if (((arr[(int)(i)] >= 1L) && (arr[(int)(i)] <= 99L)) ||\
    \ (arr[(int)(i)] == 1000L)) {\n                d = (d + arr[(int)(i)]);\n    \
    \        } else {\n                break;\n            }\n            i = (i +\
    \ 1L);\n        }\n        return d;", '        return Enumerable.Range(0, (int)k).Sum(i
    => arr[i].ToString().Length <= 2 ? arr[i] : 0);', "        // TODO\n        return\
    \ 0;", "        long sum = 0;\n        for (int i = 0; i < k; i++) {\n       \
    \     if (arr[i] >= 10 && arr[i] < 100) {\n                sum += arr[i];\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (int i = 0; i < k; i++) {\n            if (arr[i] < 100) {\n          \
    \      sum += arr[i];\n            }\n        }\n        return sum;", "     \
    \   long res = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr[i]\
    \ < 100) {\n                res += arr[i];\n            }\n        }\n       \
    \ return res;", '        return arr.Take((int)k).Select(n => n < 100 ? n : 0).Sum();',
  "        // Write your code here\n        return 0;", "        long ret = 0;\n \
    \       for (int i = 0; i < k; i++) {\n            ret += (arr[i] > 99) ? 0 :\
    \ arr[i];\n        }\n        return ret;", "        var r = 0L;\n        if (k\
    \ > arr.Count) {\n            k = arr.Count;\n        }\n        for (var i =\
    \ 0; i < k; i++) {\n            if (arr[(int)i] < 10) {\n                r +=\
    \ arr[(int)i];\n            } else if (arr[(int)i] < 100) {\n                r\
    \ += arr[(int)i];\n            }\n        }\n        return r;", "        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            var x = arr[i];\n\
    \            if (x < 10) {\n                sum += x;\n            } else if (x\
    \ < 100) {\n                sum += x;\n            }\n        }\n        return\
    \ sum;", "        var sb = new StringBuilder();\n        long result = 0;\n  \
    \      for (int i = 0; i < k; i++) {\n            sb.Append(arr[i]);\n       \
    \ }\n        for (int i = 0; i < sb.Length; i++) {\n            if (sb[i] == '1')\
    \ {\n                result += (long)1L;\n            }\n            if (sb[i]\
    \ == '2') {\n                result += (long)2L;\n            }\n            if\
    \ (sb[i] == '3') {\n                result += (long)3L;\n            }\n     \
    \       if (sb[i] == '4') {\n                result += (long)4L;\n           \
    \ }\n            if (sb[i] == '5') {\n                result += (long)5L;\n  \
    \          }\n            if (sb[i] == '6') {\n                result += (long)6L;\n\
    \            }\n            if (sb[i] == '7') {\n                result += (long)7L;\n\
    \            }\n            if (sb[i] == '8') {\n                result += (long)8L;\n\
    \            }\n            if (sb[i] == '9') {\n                result += (long)9L;\n\
    \            }\n        }\n        return result;", '        throw new NotImplementedException();',
  "        long result = 0;\n        long n = arr.Count;\n        // Loop over the\
    \ first k elements.\n        for (long i = 0; i < k; i++) {\n            // If\
    \ the current element is <= 99, add it to the result.\n            if (arr[(int)i]\
    \ <= 99) {\n                result += arr[(int)i];\n            }\n        }\n\
    \        return result;"]
stop_tokens:
- "\n    }\n"
