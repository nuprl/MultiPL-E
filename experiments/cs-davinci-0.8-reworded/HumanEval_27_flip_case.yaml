name: HumanEval_27_flip_case
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // For a given string, flip lowercase characters to uppercase and\
  \ uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\")\n\
  \    public static string FlipCase(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
  \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
  )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\")).Equals((\"\
  tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        var sb = new StringBuilder();\n        foreach (var c in str)\
    \ {\n            if (c >= 'a' && c <= 'z') {\n                sb.Append((char)(c\
    \ - 'a' + 'A'));\n            } else if (c >= 'A' && c <= 'Z') {\n           \
    \     sb.Append((char)(c - 'A' + 'a'));\n            } else {\n              \
    \  sb.Append(c);\n            }\n        }\n        return sb.ToString();", " \
    \       string result = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            if (Char.IsUpper(str[i]))\n                result += Char.ToLower(str[i]);\n\
    \            else\n                result += Char.ToUpper(str[i]);\n        }\n\
    \        return result;", "        char[] flipped = new char[str.Length];\n  \
    \      for (int i = 0; i < str.Length; i++) {\n            if (Char.IsLower(str[i]))\
    \ {\n                flipped[i] = Char.ToUpper(str[i]);\n            } else {\n\
    \                flipped[i] = Char.ToLower(str[i]);\n            }\n        }\n\
    \        return new string(flipped);", '        return string.Join("", str.Select(i
    => char.IsUpper(i) ? char.ToLower(i) : char.ToUpper(i)));', '        return new
    string(str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());',
  '        return new string(str.Select(x => char.IsUpper(x) ? char.ToLower(x) : char.ToUpper(x)).ToArray());',
  "        string s = \"\";\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        if (Char.IsUpper(str[i])) {\n                s += Char.ToLower(str[i]);\n\
    \            } else {\n                s += Char.ToUpper(str[i]);\n          \
    \  }\n        }\n        return s;", "        // TODO: Implement this function\
    \ so that it passes the test cases.\n        string a = \"\";\n        foreach\
    \ (char x in str) {\n            if (Char.IsUpper(x)) {\n                a +=\
    \ Char.ToLower(x);\n            } else {\n                a += Char.ToUpper(x);\n\
    \            }\n        }\n        return a;", "        // Use Linq to transform\
    \ the input string.\n        return new string(str.Select(s => Char.IsUpper(s)\
    \ ? Char.ToLower(s) : Char.ToUpper(s)).ToArray());", '        return str.Select(c
    => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToString();', "      \
    \  StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (Char.IsUpper(str[i])) {\n                sb.Append(Char.ToLower(str[i]));\n\
    \            } else {\n                sb.Append(Char.ToUpper(str[i]));\n    \
    \        }\n        }\n        return sb.ToString();", '        return string.Concat(str.Select(x
    => char.IsUpper(x) ? char.ToLower(x) : char.ToUpper(x)));', "        var sb =\
    \ new StringBuilder();\n        foreach (var c in str) {\n            if (char.IsUpper(c))\n\
    \                sb.Append(char.ToLower(c));\n            else\n             \
    \   sb.Append(char.ToUpper(c));\n        }\n        return sb.ToString();", '        return
    str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToString();',
  "        string result = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            if (Char.IsUpper(str[i])) {\n                result += Char.ToLower(str[i]);\n\
    \            } else {\n                result += Char.ToUpper(str[i]);\n     \
    \       }\n        }\n        return result;", '        return new string(str.Select(c
    => char.IsLower(c) ? char.ToUpper(c) : char.ToLower(c)).ToArray());', "      \
    \  return string.Concat(\n            str.Select(c => char.IsUpper(c) ? char.ToLower(c)\
    \ : char.ToUpper(c)));", '        return string.Concat(str.Select(ch => char.IsUpper(ch)
    ? char.ToLower(ch) : char.ToUpper(ch)));', "        // Fill this in.\n       \
    \ return str;", '        return new string(str.Select(c => char.IsLower(c) ? char.ToUpper(c)
    : char.ToLower(c)).ToArray());', "        char[] letters = str.ToCharArray();\n\
    \        for (int i = 0; i < letters.Length; i++) {\n            char letter =\
    \ letters[i];\n            if (char.IsLower(letter)) {\n                letters[i]\
    \ = char.ToUpper(letter);\n            } else if (char.IsUpper(letter)) {\n  \
    \              letters[i] = char.ToLower(letter);\n            }\n        }\n\
    \        return new string(letters);", "        char[] c = str.ToCharArray();\n\
    \        for (int i = 0; i < c.Length; i++) {\n            c[i] = char.IsUpper(c[i])\
    \ ? char.ToLower(c[i]) : char.ToUpper(c[i]);\n        }\n        return new string(c);",
  '        return new string(str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());',
  "        var newStr = new StringBuilder();\n        foreach (var c in str) {\n \
    \           if (char.IsUpper(c)) {\n                newStr.Append(char.ToLower(c));\n\
    \            } else {\n                newStr.Append(char.ToUpper(c));\n     \
    \       }\n        }\n        return newStr.ToString();", "        // TODO: Write\
    \ your code here\n        return str;", "        var ret = new StringBuilder();\n\
    \        foreach (var ch in str) {\n            if (Char.IsLower(ch)) {\n    \
    \            ret.Append(Char.ToUpper(ch));\n            } else {\n           \
    \     ret.Append(Char.ToLower(ch));\n            }\n        }\n        return\
    \ ret.ToString();", '        return new string(str.Select(ch => Char.IsLower(ch)
    ? Char.ToUpper(ch) : Char.ToLower(ch)).ToArray());', "        char[] newStr =\
    \ new char[str.Length];\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        newStr[i] = (char)(str[i] ^ 32);\n        }\n        return new string(newStr);",
  "        string result = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            if (char.IsUpper(str[i])) {\n                result += char.ToLower(str[i]);\n\
    \            } else {\n                result += char.ToUpper(str[i]);\n     \
    \       }\n        }\n        return result;", "        StringBuilder temp = new\
    \ StringBuilder();\n        // Loop through the length of the string\n       \
    \ for (int i = 0; i < str.Length; i++) {\n            // If the character is lowercase,\
    \ change it to uppercase\n            if (Char.IsLower(str[i]))\n            \
    \    temp.Append(Char.ToUpper(str[i]));\n            // If the character is uppercase,\
    \ change it to lowercase\n            else if (Char.IsUpper(str[i]))\n       \
    \         temp.Append(Char.ToLower(str[i]));\n            // Else, keep the character\n\
    \            else\n                temp.Append(str[i]);\n        }\n        return\
    \ temp.ToString();", "        StringBuilder sb = new StringBuilder();\n      \
    \  foreach (char ch in str) {\n            if (char.IsLower(ch))\n           \
    \     sb.Append(char.ToUpper(ch));\n            else\n                sb.Append(char.ToLower(ch));\n\
    \        }\n        return sb.ToString();", "        string flipped = \"\";\n\
    \        for (int i = 0; i < str.Length; i++) {\n            char c = str[i];\n\
    \            flipped += Char.IsLower(c) ? Char.ToUpper(c) : Char.ToLower(c);\n\
    \        }\n        return flipped;", "        // For a given string\n       \
    \ //      FlipCase(\"Hello\")\n        // FlipCase(\"hello\")\n        // FlipCase(\"\
    Hello\")\n        // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n   \
    \     // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n        // FlipCase(\"\
    Hello\")\n        // FlipCase(\"Hello\")\n        //\n        //  ...\n      \
    \  //\n        // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n      \
    \  // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n        // FlipCase(\"\
    Hello\")\n        // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n   \
    \     // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n        // FlipCase(\"\
    Hello\")\n        // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n   \
    \     // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n        // FlipCase(\"\
    Hello\")\n        // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n   \
    \     // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n        // FlipCase(\"\
    Hello\")\n        // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n   \
    \     // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n        // FlipCase(\"\
    Hello\")\n        // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n   \
    \     // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n        // FlipCase(\"\
    Hello\")\n        // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n   \
    \     // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n        // FlipCase(\"\
    Hello\")\n        // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n   \
    \     // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n        // FlipCase(\"\
    Hello\")\n        // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n   \
    \     // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n        // FlipCase(\"\
    Hello\")\n        // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n   \
    \     // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n        // FlipCase(\"\
    Hello\")\n        // FlipCase(\"Hello\")\n        // FlipCase(\"Hello\")\n   \
    \     // FlipCase", "        var r = new char[str.Length];\n        for (int i\
    \ = 0; i < str.Length; i++) {\n            var c = str[i];\n            if (char.IsLower(c))\
    \ {\n                r[i] = char.ToUpper(c);\n            } else {\n         \
    \       r[i] = char.ToLower(c);\n            }\n        }\n        return new\
    \ string(r);", "        return new string(str.Select(x => {\n            if (char.IsUpper(x))\
    \ {\n                return char.ToLower(x);\n            } else {\n         \
    \       return char.ToUpper(x);\n            }\n        }).ToArray());", "   \
    \     var sb = new StringBuilder();\n        foreach (var c in str) {\n      \
    \      if (c >= 'a' && c <= 'z') {\n                sb.Append((char)(c - 'a' +\
    \ 'A'));\n            } else if (c >= 'A' && c <= 'Z') {\n                sb.Append((char)(c\
    \ - 'A' + 'a'));\n            } else {\n                sb.Append(c);\n      \
    \      }\n        }\n        return sb.ToString();", "        string s = \"\"\
    ;\n        for (int i = 0; i < str.Length; i++) {\n            if (Char.IsUpper(str[i]))\
    \ {\n                s += Char.ToLower(str[i]);\n            } else {\n      \
    \          s += Char.ToUpper(str[i]);\n            }\n        }\n        return\
    \ s;", "        StringBuilder sb = new StringBuilder();\n        foreach (char\
    \ ch in str) {\n            if (char.IsLower(ch)) {\n                sb.Append(char.ToUpper(ch));\n\
    \            } else {\n                sb.Append(char.ToLower(ch));\n        \
    \    }\n        }\n        return sb.ToString();", '        return string.Concat(str.Select(x
    => char.IsUpper(x) ? char.ToLower(x) : char.ToUpper(x)));', "        StringBuilder\
    \ sb = new StringBuilder();\n        foreach (char c in str) {\n            if\
    \ (char.IsUpper(c)) {\n                sb.Append(char.ToLower(c));\n         \
    \   } else {\n                sb.Append(char.ToUpper(c));\n            }\n   \
    \     }\n        return sb.ToString();", "        string result = \"\";\n    \
    \    for (int i = 0; i < str.Length; i++) {\n            if (Char.IsUpper(str[i]))\
    \ {\n                result += Char.ToLower(str[i]);\n            } else {\n \
    \               result += Char.ToUpper(str[i]);\n            }\n        }\n  \
    \      return result;", '        return new string(str.Select(ch => char.IsUpper(ch)
    ? char.ToLower(ch) : char.ToUpper(ch)).ToArray());', "        string result =\
    \ \"\";\n        foreach (char c in str) {\n            if (char.IsUpper(c)) {\n\
    \                result += char.ToLower(c);\n            } else {\n          \
    \      result += char.ToUpper(c);\n            }\n        }\n        return result;",
  "        char[] new_array = new char[str.Length];\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            char ch = str[i];\n            if (char.IsUpper(ch)) {\n\
    \                new_array[i] = char.ToLower(ch);\n            } else {\n    \
    \            new_array[i] = char.ToUpper(ch);\n            }\n        }\n    \
    \    return new string(new_array);", "        char[] cStr = str.ToCharArray();\n\
    \        for (int i = 0; i < cStr.Length; i++) {\n            if (char.IsUpper(cStr[i]))\n\
    \                cStr[i] = char.ToLower(cStr[i]);\n            else\n        \
    \        cStr[i] = char.ToUpper(cStr[i]);\n        }\n        return new string(cStr);",
  "        string s = \"\";\n        foreach (char c in str) {\n            if (char.IsLower(c))\
    \ {\n                s += char.ToUpper(c);\n            } else {\n           \
    \     s += char.ToLower(c);\n            }\n        }\n        return s;", " \
    \       string output = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            if (str[i] >= 'a' && str[i] <= 'z') {\n                output +=\
    \ str[i].ToString().ToUpper();\n            } else if (str[i] >= 'A' && str[i]\
    \ <= 'Z') {\n                output += str[i].ToString().ToLower();\n        \
    \    } else {\n                output += str[i];\n            }\n        }\n \
    \       return output;", '        return new string(str.Select(ch => char.IsUpper(ch)
    ? char.ToLower(ch) : char.ToUpper(ch)).ToArray());', '        throw new NotImplementedException();',
  '        return "";', '        return str;', "        string outStr = \"\";\n  \
    \      for (int i = 0; i < str.Length; i++) {\n            if (Char.IsUpper(str[i]))\
    \ {\n                outStr += Char.ToLower(str[i]);\n            } else {\n \
    \               outStr += Char.ToUpper(str[i]);\n            }\n        }\n  \
    \      return outStr;", "        StringBuilder result = new StringBuilder();\n\
    \        foreach (char c in str) {\n            result.Append(char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c));\n        }\n        return result.ToString();",
  "        // !!!: IDK why this is necessary, but I'm getting random / unexpected\
    \ error\n        // with this if I don't do this.\n        if (str == null) {\n\
    \            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            char c = str[i];\n\
    \            if (Char.IsUpper(c)) {\n                sb.Append(Char.ToLower(c));\n\
    \            } else {\n                sb.Append(Char.ToUpper(c));\n         \
    \   }\n        }\n        return sb.ToString();", "        StringBuilder sb =\
    \ new StringBuilder();\n        for (int i = 0; i < str.Length; i++) {\n     \
    \       if (Char.IsUpper(str[i])) {\n                sb.Append(Char.ToLower(str[i]));\n\
    \            } else {\n                sb.Append(Char.ToUpper(str[i]));\n    \
    \        }\n        }\n        return sb.ToString();", '        return new string(str.Select(s
    => char.IsLower(s) ? char.ToUpper(s) : char.ToLower(s)).ToArray());', '        return
    new string(str.Select(ch => char.IsUpper(ch) ? char.ToLower(ch) : char.ToUpper(ch)).ToArray());',
  "        char[] chs = str.ToCharArray();\n        for (int i = 0; i < chs.Length;\
    \ i++) {\n            if (Char.IsUpper(chs[i])) {\n                chs[i] = Char.ToLower(chs[i]);\n\
    \            } else {\n                chs[i] = Char.ToUpper(chs[i]);\n      \
    \      }\n        }\n        return new string(chs);", "        string res = \"\
    \";\n        foreach (char c in str) {\n            res += (char.IsUpper(c)) ?\
    \ char.ToLower(c) : char.ToUpper(c);\n        }\n        return res;", "     \
    \   char[] charArray = str.ToCharArray();\n        for (int i = 0; i < charArray.Length;\
    \ i++) {\n            if (char.IsUpper(charArray[i])) {\n                charArray[i]\
    \ = char.ToLower(charArray[i]);\n            } else if (char.IsLower(charArray[i]))\
    \ {\n                charArray[i] = char.ToUpper(charArray[i]);\n            }\n\
    \        }\n        return new string(charArray);", "        string result = \"\
    \";\n        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n \
    \               result += Char.ToUpper(c);\n            } else {\n           \
    \     result += Char.ToLower(c);\n            }\n        }\n        return result;",
  "        string ans = \"\";\n        for (int i = 0; i < str.Length; i++) {\n  \
    \          char c = str[i];\n            if (c <= 'Z')\n                ans +=\
    \ (char)('a' + (c - 'A'));\n            else\n                ans += (char)('A'\
    \ + (c - 'a'));\n        }\n        return ans;", "        StringBuilder sb =\
    \ new StringBuilder();\n        foreach (char c in str) {\n            if (char.IsLower(c))\n\
    \                sb.Append(char.ToUpper(c));\n            else\n             \
    \   sb.Append(char.ToLower(c));\n        }\n        return sb.ToString();", " \
    \       StringBuilder sb = new StringBuilder();\n        foreach (char c in str)\
    \ {\n            sb.Append(char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c));\n\
    \        }\n        return sb.ToString();", "        char[] arr = str.ToCharArray();\n\
    \        for (int i = 0; i < arr.Length; i++) {\n            if (char.IsLower(arr[i]))\
    \ {\n                arr[i] = char.ToUpper(arr[i]);\n            } else if (char.IsUpper(arr[i]))\
    \ {\n                arr[i] = char.ToLower(arr[i]);\n            }\n        }\n\
    \        return new string(arr);", '        return new string(str.Select(c =>
    char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());', "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < str.Length; i++) {\n\
    \            char c = str[i];\n            if (char.IsLower(c)) {\n          \
    \      sb.Append(char.ToUpper(c));\n            } else {\n                sb.Append(char.ToLower(c));\n\
    \            }\n        }\n        return sb.ToString();", "        string result\
    \ = \"\";\n        for (int i = 0; i < str.Length; i++) {\n            if (Char.IsLower(str[i]))\
    \ {\n                result += Char.ToUpper(str[i]);\n            } else {\n \
    \               result += Char.ToLower(str[i]);\n            }\n        }\n  \
    \      return result;", '        return new string(str.Select(c => char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c)).ToArray());', '        return str.ToLower();',
  "        var sb = new StringBuilder();\n        foreach (var c in str) {\n     \
    \       if (char.IsUpper(c)) {\n                sb.Append(char.ToLower(c));\n\
    \            } else {\n                sb.Append(char.ToUpper(c));\n         \
    \   }\n        }\n        return sb.ToString();", "        char[] arr = str.ToCharArray();\n\
    \        for (int i = 0; i < arr.Length; i++) {\n            char c = arr[i];\n\
    \            if (char.IsUpper(c))\n                arr[i] = char.ToLower(c);\n\
    \            else if (char.IsLower(c))\n                arr[i] = char.ToUpper(c);\n\
    \        }\n        return new string(arr);", '        return new string(str.Select(ch
    => char.IsUpper(ch) ? char.ToLower(ch) : char.ToUpper(ch)).ToArray());', "   \
    \     char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (Char.IsUpper(chars[i])) {\n                chars[i]\
    \ = Char.ToLower(chars[i]);\n            } else if (Char.IsLower(chars[i])) {\n\
    \                chars[i] = Char.ToUpper(chars[i]);\n            }\n        }\n\
    \        return new string(chars);", "        var toReturn = new StringBuilder();\n\
    \        foreach (var c in str) {\n            if (Char.IsUpper(c)) {\n      \
    \          toReturn.Append(Char.ToLower(c));\n            } else {\n         \
    \       toReturn.Append(Char.ToUpper(c));\n            }\n        }\n        return\
    \ toReturn.ToString();", "        // >>>> Your code here.\n        var sb = new\
    \ StringBuilder();\n        foreach (var c in str) {\n            sb.Append(char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c));\n        }\n        return sb.ToString();",
  "        return string.Join(\"\", str.Select(\n            x => Char.IsLower(x)\
    \ ? Char.ToUpper(x) : Char.ToLower(x)));", "        StringBuilder strBld = new\
    \ StringBuilder();\n        for (int i = 0; i < str.Length; i++) {\n         \
    \   char c = str[i];\n            if (char.IsUpper(c)) {\n                strBld.Append(char.ToLower(c));\n\
    \            } else {\n                strBld.Append(char.ToUpper(c));\n     \
    \       }\n        }\n        return strBld.ToString();", "        var chars =\
    \ str.ToCharArray();\n        for (int i = 0; i < chars.Length; i++) {\n     \
    \       if (char.IsLower(chars[i])) {\n                chars[i] = char.ToUpper(chars[i]);\n\
    \            } else if (char.IsUpper(chars[i])) {\n                chars[i] =\
    \ char.ToLower(chars[i]);\n            }\n        }\n        return new string(chars);",
  "        // Create an empty string to save the new string.\n        string newString\
    \ = \"\";\n        // Iterate through each character in the string.\n        foreach\
    \ (char character in str) {\n            // If the character is lowercase, make\
    \ it uppercase.\n            if (char.IsLower(character)) {\n                newString\
    \ += char.ToUpper(character);\n            }\n            // Else if the character\
    \ is uppercase, make it lowercase.\n            else if (char.IsUpper(character))\
    \ {\n                newString += char.ToLower(character);\n            }\n  \
    \          // Else, keep the character the same.\n            else {\n       \
    \         newString += character;\n            }\n        }\n        // Return\
    \ the new string.\n        return newString;", "        string ret = \"\";\n \
    \       for (int i = 0; i < str.Length; i++) {\n            ret += Char.IsLower(str[i])\
    \ ? Char.ToUpper(str[i]) : Char.ToLower(str[i]);\n        }\n        return ret;",
  "        StringBuilder sb = new StringBuilder();\n        foreach (char c in str)\
    \ {\n            if (char.IsUpper(c)) {\n                sb.Append(char.ToLower(c));\n\
    \            } else {\n                sb.Append(char.ToUpper(c));\n         \
    \   }\n        }\n        return sb.ToString();", "        string newStr = \"\"\
    ;\n        for (int i = 0; i < str.Length; i++) {\n            char c = str[i];\n\
    \            if (char.IsUpper(c)) {\n                newStr += char.ToLower(c);\n\
    \            } else {\n                newStr += char.ToUpper(c);\n          \
    \  }\n        }\n        return newStr;", "        string res = \"\";\n      \
    \  for (int i = 0; i < str.Length; i++) {\n            if (str[i] >= 'a' && str[i]\
    \ <= 'z')\n                res += (char)(str[i] - 32);\n            else if (str[i]\
    \ >= 'A' && str[i] <= 'Z')\n                res += (char)(str[i] + 32);\n    \
    \        else\n                res += str[i];\n        }\n        return res;",
  "        char[] c = str.ToCharArray();\n        for (int i = 0; i < c.Length; i++)\
    \ {\n            c[i] = char.IsUpper(c[i]) ? char.ToLower(c[i]) : char.ToUpper(c[i]);\n\
    \        }\n        return new string(c);", "        // str = \"Hello World\"\
    ;\n        // char[] myChar = str.ToCharArray();\n        // for (int i = 0; i\
    \ < myChar.Length; i++) {\n        //     if (char.IsLower(myChar[i])) {\n   \
    \     //         myChar[i] = char.ToUpper(myChar[i]);\n        //     } else if\
    \ (char.IsUpper(myChar[i])) {\n        //         myChar[i] = char.ToLower(myChar[i]);\n\
    \        //     }\n        // }\n        // return new string(myChar);\n     \
    \   string ret = \"\";\n        for (int i = 0; i < str.Length; i++) {\n     \
    \       if (char.IsLower(str[i])) {\n                ret += char.ToUpper(str[i]);\n\
    \            } else if (char.IsUpper(str[i])) {\n                ret += char.ToLower(str[i]);\n\
    \            } else {\n                ret += str[i];\n            }\n       \
    \ }\n        return ret;", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            char c = str[i];\n\
    \            if (char.IsUpper(c)) {\n                sb.Append(char.ToLower(c));\n\
    \            } else {\n                sb.Append(char.ToUpper(c));\n         \
    \   }\n        }\n        return sb.ToString();", '        return new string(str.Select(x
    => Char.IsLower(x) ? Char.ToUpper(x) : Char.ToLower(x)).ToArray());', "      \
    \  string result = \"\";\n        foreach (char c in str) {\n            if (Char.IsLower(c))\
    \ {\n                result += Char.ToUpper(c);\n            } else {\n      \
    \          result += Char.ToLower(c);\n            }\n        }\n        return\
    \ result;", '        return "";', "        // return str.Select(c => Char.IsLower(c)\
    \ ? Char.ToUpper(c) : Char.ToLower(c)).Aggregate(\"\", (a, b) => a + b);\n   \
    \     char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (Char.IsLower(chars[i])) {\n                chars[i]\
    \ = Char.ToUpper(chars[i]);\n            } else {\n                chars[i] =\
    \ Char.ToLower(chars[i]);\n            }\n        }\n        return new string(chars);",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (char.IsUpper(str[i])) {\n                sb.Append(char.ToLower(str[i]));\n\
    \            } else {\n                sb.Append(char.ToUpper(str[i]));\n    \
    \        }\n        }\n        return sb.ToString();", "        string res = \"\
    \";\n        foreach (char c in str) {\n            if (c >= 'a' && c <= 'z')\n\
    \                res += (char)(c - 'a' + 'A');\n            else if (c >= 'A'\
    \ && c <= 'Z')\n                res += (char)(c - 'A' + 'a');\n            else\n\
    \                res += c;\n        }\n        return res;", "        char[] flipped\
    \ = new char[str.Length];\n        for (int i = 0; i < str.Length; i++) {\n  \
    \          if (Char.IsUpper(str[i])) {\n                flipped[i] = Char.ToLower(str[i]);\n\
    \            } else {\n                flipped[i] = Char.ToUpper(str[i]);\n  \
    \          }\n        }\n        return new string(flipped);", "        return\
    \ new string(str.Select(c => {\n            if (char.IsUpper(c)) return char.ToLower(c);\n\
    \            else return char.ToUpper(c);\n        }).ToArray());", "        string\
    \ result = string.Empty;\n        foreach (char c in str) {\n            if (char.IsUpper(c))\
    \ {\n                result += char.ToLower(c);\n            } else {\n      \
    \          result += char.ToUpper(c);\n            }\n        }\n        return\
    \ result;", '        return String.Concat(str.Select(x => Char.IsUpper(x) ? Char.ToLower(x)
    : Char.ToUpper(x)));', "        char[] res = new char[str.Length];\n        for\
    \ (int i = 0; i < str.Length; i++) {\n            res[i] = char.IsLower(str[i])\
    \ ? char.ToUpper(str[i]) : char.ToLower(str[i]);\n        }\n        return new\
    \ string(res);", "        string str2 = \"\";\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (str[i] == Char.ToLower(str[i])) {\n                str2\
    \ += Char.ToUpper(str[i]);\n            } else {\n                str2 += Char.ToLower(str[i]);\n\
    \            }\n        }\n        return str2;", "        // Write the body of\
    \ this function\n        return \"\";", "        char[] flipped = new char[str.Length];\n\
    \        for (int i = 0; i < str.Length; i++) {\n            char c = str[i];\n\
    \            if (char.IsLower(c)) {\n                flipped[i] = char.ToUpper(c);\n\
    \            } else {\n                flipped[i] = char.ToLower(c);\n       \
    \     }\n        }\n        return new string(flipped);", "        string result\
    \ = \"\";\n        for (int i = 0; i < str.Length; i++) {\n            if (Char.IsLower(str[i]))\
    \ {\n                result += Char.ToUpper(str[i]);\n            } else {\n \
    \               result += Char.ToLower(str[i]);\n            }\n        }\n  \
    \      return result;", '        return string.Join("", str.Select(c => char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c)));', "        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            if (char.IsLower(str[i]))\
    \ {\n                sb.Append(char.ToUpper(str[i]));\n            } else {\n\
    \                sb.Append(char.ToLower(str[i]));\n            }\n        }\n\
    \        return sb.ToString();", "        // Go through each character in the\
    \ string\n        string flipped = \"\";\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            // If it's lowercase, make it uppercase.\n            if\
    \ (Char.IsLower(str[i])) {\n                flipped += Char.ToUpper(str[i]);\n\
    \            } else {\n                flipped += Char.ToLower(str[i]);\n    \
    \        }\n        }\n        return flipped;", "        StringBuilder sb = new\
    \ StringBuilder();\n        foreach (char c in str) {\n            if (char.IsLower(c))\
    \ {\n                sb.Append(char.ToUpper(c));\n            } else {\n     \
    \           sb.Append(char.ToLower(c));\n            }\n        }\n        return\
    \ sb.ToString();", "        string result = \"\";\n        foreach (char c in\
    \ str) {\n            if (char.IsUpper(c)) {\n                result += char.ToLower(c);\n\
    \            } else {\n                result += char.ToUpper(c);\n          \
    \  }\n        }\n        return result;", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            if (Char.IsLower(str[i]))\
    \ {\n                sb.Append(Char.ToUpper(str[i]));\n            } else {\n\
    \                sb.Append(Char.ToLower(str[i]));\n            }\n        }\n\
    \        return sb.ToString();", '        return string.Concat(str.Select(c =>
    char.IsLower(c) ? char.ToUpper(c) : char.ToLower(c)));', "        char[] chars\
    \ = str.ToCharArray();\n        for (int i = 0; i < chars.Length; i++) {\n   \
    \         char c = chars[i];\n            if (char.IsUpper(c)) {\n           \
    \     chars[i] = char.ToLower(c);\n            } else if (char.IsLower(c)) {\n\
    \                chars[i] = char.ToUpper(c);\n            }\n        }\n     \
    \   return new string(chars);", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            char c = str[i];\n\
    \            if (c >= 'a' && c <= 'z') {\n                sb.Append((char)(c -\
    \ 32));\n            } else if (c >= 'A' && c <= 'Z') {\n                sb.Append((char)(c\
    \ + 32));\n            } else {\n                sb.Append(c);\n            }\n\
    \        }\n        return sb.ToString();", "        var sb = new StringBuilder();\n\
    \        foreach (var c in str) {\n            sb.Append(char.IsUpper(c) ? char.ToLower(c)\
    \ : char.ToUpper(c));\n        }\n        return sb.ToString();", "        char[]\
    \ result = new char[str.Length];\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            char c = str[i];\n            if (c >= 'a' && c <= 'z') {\n \
    \               result[i] = (char)(c - 'a' + 'A');\n            } else if (c >=\
    \ 'A' && c <= 'Z') {\n                result[i] = (char)(c - 'A' + 'a');\n   \
    \         } else {\n                result[i] = c;\n            }\n        }\n\
    \        return new string(result);", '        return new string(str.Select(x
    => char.IsUpper(x) ? char.ToLower(x) : char.ToUpper(x)).ToArray());', '        throw
    new NotImplementedException();', "        var sb = new StringBuilder();\n    \
    \    foreach (var ch in str) {\n            sb.Append(char.IsUpper(ch) ? char.ToLower(ch)\
    \ : char.ToUpper(ch));\n        }\n        return sb.ToString();", "        var\
    \ sb = new StringBuilder();\n        foreach (var c in str) {\n            sb.Append(char.IsLower(c)\
    \ ? char.ToUpper(c) : char.ToLower(c));\n        }\n        return sb.ToString();",
  "        // convert string to char[]\n        char[] chars = str.ToCharArray();\n\
    \        // create a loop that will go through each character\n        for (int\
    \ i = 0; i < chars.Length; i++) {\n            // if char is uppercase, convert\
    \ to lowercase\n            if (Char.IsUpper(chars[i])) {\n                chars[i]\
    \ = Char.ToLower(chars[i]);\n            }\n            // else, char is lowercase,\
    \ convert to uppercase\n            else {\n                chars[i] = Char.ToUpper(chars[i]);\n\
    \            }\n        }\n        // convert back to string\n        return new\
    \ string(chars);", "        // Return the flipped string.\n        return null;",
  "        // Write code here\n        return null;", '        throw new NotImplementedException();',
  '        return str.Select(x => char.IsUpper(x) ? char.ToLower(x) : char.ToUpper(x)).ToString();',
  "        return new string(\n            str.Select(x => char.IsUpper(x) ? char.ToLower(x)\
    \ : char.ToUpper(x)).ToArray()\n        );", "        char[] output = new char[str.Length];\n\
    \        for (int i = 0; i < str.Length; i++) {\n            if (char.IsLower(str[i]))\
    \ {\n                output[i] = char.ToUpper(str[i]);\n            } else {\n\
    \                output[i] = char.ToLower(str[i]);\n            }\n        }\n\
    \        return new string(output);", "        char[] result = new char[str.Length];\n\
    \        for (int i = 0; i < str.Length; i++) {\n            result[i] = (char)(str[i]\
    \ ^ 32);\n        }\n        return new string(result);", "        // TODO\n \
    \       return null;", '        return new string(str.Select(c => char.IsLower(c)
    ? char.ToUpper(c) : char.ToLower(c)).ToArray());', "        // 1. Convert string\
    \ to array of chars.\n        // 2. Iterate through array of chars.\n        //\
    \ 3. Check if each char is UPPERCASE or lowercase.\n        // 4. Flip case.\n\
    \        // 5. Add changed char to string.\n        // 6. Return string.\n   \
    \     char[] inputArray = str.ToCharArray();\n        string result = \"\";\n\
    \        foreach (char i in inputArray) {\n            if (Char.IsUpper(i)) {\n\
    \                result += Char.ToLower(i);\n            } else {\n          \
    \      result += Char.ToUpper(i);\n            }\n        }\n        return result;",
  "        string newString = \"\";\n        foreach (char x in str) {\n         \
    \   newString += (Char.IsUpper(x)) ? Char.ToLower(x) : Char.ToUpper(x);\n    \
    \    }\n        return newString;", '        throw new NotImplementedException();',
  "        var arr = str.ToCharArray();\n        for (int i = 0; i < arr.Length; i++)\
    \ {\n            var c = arr[i];\n            if (c >= 'a' && c <= 'z')\n    \
    \            arr[i] = (char)(c - ('a' - 'A'));\n            else if (c >= 'A'\
    \ && c <= 'Z')\n                arr[i] = (char)(c + ('a' - 'A'));\n        }\n\
    \        return new string(arr);", "        string result = \"\";\n        foreach\
    \ (char ch in str) {\n            if (Char.IsLower(ch)) {\n                result\
    \ += Char.ToUpper(ch);\n            } else {\n                result += Char.ToLower(ch);\n\
    \            }\n        }\n        return result;", "        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (Char.IsLower(chars[i]))\
    \ {\n                chars[i] = Char.ToUpper(chars[i]);\n            } else if\
    \ (Char.IsUpper(chars[i])) {\n                chars[i] = Char.ToLower(chars[i]);\n\
    \            }\n        }\n        return new string(chars);", "        string\
    \ flipped = \"\";\n        for (int i = 0; i < str.Length; i++) {\n          \
    \  if (Char.IsUpper(str[i])) {\n                flipped += Char.ToLower(str[i]);\n\
    \            } else {\n                flipped += Char.ToUpper(str[i]);\n    \
    \        }\n        }\n        return flipped;", "        string result = \"\"\
    ;\n        foreach (char c in str) {\n            // Flip character\n        \
    \    if (Char.IsUpper(c)) {\n                result += Char.ToLower(c);\n    \
    \        } else {\n                result += Char.ToUpper(c);\n            }\n\
    \        }\n        return result;", "        string result = \"\";\n        for\
    \ (int i = 0; i < str.Length; i++) {\n            if (Char.IsUpper(str[i])) {\n\
    \                result += Char.ToLower(str[i]);\n            } else {\n     \
    \           result += Char.ToUpper(str[i]);\n            }\n        }\n      \
    \  return result;", '        return "???";', '        return "";', "        char[]\
    \ chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length; i++) {\n\
    \            if (Char.IsLower(chars[i])) {\n                chars[i] = Char.ToUpper(chars[i]);\n\
    \            } else if (Char.IsUpper(chars[i])) {\n                chars[i] =\
    \ Char.ToLower(chars[i]);\n            }\n        }\n        return new string(chars);",
  "        var result = new StringBuilder();\n        foreach (var ch in str) {\n\
    \            if (char.IsLower(ch)) {\n                result.Append(char.ToUpper(ch));\n\
    \            } else {\n                result.Append(char.ToLower(ch));\n    \
    \        }\n        }\n        return result.ToString();", '        return new
    string(str.Select(x => char.IsUpper(x) ? char.ToLower(x) : char.ToUpper(x)).ToArray());',
  "        return str.Select(s => {\n            return (char)((s > 'Z') ? (s - 'a'\
    \ + 'A') : (s - 'A' + 'a'));\n        }).Aggregate(\"\", (s, c) => s + c);", " \
    \       var n = new StringBuilder();\n        foreach (var c in str)\n       \
    \     n.Append(char.IsLower(c) ? char.ToUpper(c) : char.ToLower(c));\n       \
    \ return n.ToString();", '        return new string(str.Select(c => char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c)).ToArray());', "        string newStr = \"\
    \";\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] >=\
    \ 65 && str[i] <= 90) {\n                newStr += (char)(str[i] + 32);\n    \
    \        } else if (str[i] >= 97 && str[i] <= 122) {\n                newStr +=\
    \ (char)(str[i] - 32);\n            } else {\n                newStr += str[i];\n\
    \            }\n        }\n        return newStr;", "        // Get a list of\
    \ all the characters in the string.\n        var lst = str.ToList();\n       \
    \ var outLst = new List<char>();\n        foreach (var c in lst) {\n         \
    \   // Check if the current character is uppercase.\n            if (char.IsUpper(c))\
    \ {\n                // Flip to lowercase.\n                outLst.Add(char.ToLower(c));\n\
    \            } else {\n                // Flip to uppercase.\n               \
    \ outLst.Add(char.ToUpper(c));\n            }\n        }\n        // Return the\
    \ list as a string.\n        return new string(outLst.ToArray());", "        string\
    \ output = \"\";\n        foreach (char c in str) {\n            if (Char.IsUpper(c))\
    \ {\n                output += Char.ToLower(c);\n            } else {\n      \
    \          output += Char.ToUpper(c);\n            }\n        }\n        return\
    \ output;", '        return new string(str.Select(c => char.IsUpper(c) ? char.ToLower(c)
    : char.ToUpper(c)).ToArray());', '        return str.ToLower();', "        var\
    \ sb = new StringBuilder();\n        foreach (var c in str) {\n            if\
    \ (char.IsUpper(c)) {\n                sb.Append(char.ToLower(c));\n         \
    \   } else {\n                sb.Append(char.ToUpper(c));\n            }\n   \
    \     }\n        return sb.ToString();", '        return new string(str.Select(x
    => char.IsLower(x) ? char.ToUpper(x) : char.ToLower(x)).ToArray());', "      \
    \  StringBuilder stringBuilder = new StringBuilder();\n        for (int i = 0;\
    \ i < str.Length; i++) {\n            if (char.IsUpper(str[i])) {\n          \
    \      stringBuilder.Append(char.ToLower(str[i]));\n            } else {\n   \
    \             stringBuilder.Append(char.ToUpper(str[i]));\n            }\n   \
    \     }\n        return stringBuilder.ToString();", "        StringBuilder sb\
    \ = new StringBuilder();\n        foreach (char c in str) {\n            if (Char.IsUpper(c))\
    \ {\n                sb.Append(Char.ToLower(c));\n            } else {\n     \
    \           sb.Append(Char.ToUpper(c));\n            }\n        }\n        return\
    \ sb.ToString();", "        var result = new StringBuilder();\n        foreach\
    \ (var ch in str) {\n            result.Append(Char.IsUpper(ch) ? Char.ToLower(ch)\
    \ : Char.ToUpper(ch));\n        }\n        return result.ToString();", "     \
    \   char[] flipped = new char[str.Length];\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            flipped[i] = char.IsUpper(str[i]) ? char.ToLower(str[i])\
    \ : char.ToUpper(str[i]);\n        }\n        return new string(flipped);", '        return
    new string(str.Select(c => char.IsLower(c) ? char.ToUpper(c) : char.ToLower(c)).ToArray());',
  "        string result = \"\";\n        foreach (char c in str) {\n            result\
    \ += Char.IsLower(c) ? Char.ToUpper(c) : Char.ToLower(c);\n        }\n       \
    \ return result;", "        var strArray = str.ToCharArray();\n        for (int\
    \ i = 0; i < strArray.Length; i++) {\n            if (char.IsUpper(strArray[i]))\
    \ {\n                strArray[i] = char.ToLower(strArray[i]);\n            } else\
    \ {\n                strArray[i] = char.ToUpper(strArray[i]);\n            }\n\
    \        }\n        return new string(strArray);", "        // >>> ord('H')\n\
    \        // 72\n        // >>> ord('h')\n        // 104\n        // >>> chr(72)\n\
    \        // 'H'\n        // >>> chr(104)\n        // 'h'\n        // Create an\
    \ empty string to build the flipped string\n        string flipped = \"\";\n \
    \       // Iterate through each character in the string\n        foreach (char\
    \ c in str) {\n            // If the character is an uppercase letter\n      \
    \      if (c >= 'A' && c <= 'Z') {\n                // Add the lowercase version\
    \ of the letter to the string\n                flipped += char.ToLower(c);\n \
    \           }\n            // Otherwise, if the character is a lowercase letter\n\
    \            else if (c >= 'a' && c <= 'z') {\n                // Add the uppercase\
    \ version of the letter to the string\n                flipped += char.ToUpper(c);\n\
    \            }\n            // Otherwise, it's not a letter, so just add it to\
    \ the string\n            else {\n                flipped += c;\n            }\n\
    \        }\n        // Return the flipped string\n        return flipped;", " \
    \       char[] characters = str.ToCharArray();\n        for (int i = 0; i < characters.Length;\
    \ i++) {\n            char c = characters[i];\n            if (char.IsLower(c))\
    \ {\n                characters[i] = char.ToUpper(c);\n            } else if (char.IsUpper(c))\
    \ {\n                characters[i] = char.ToLower(c);\n            }\n       \
    \ }\n        return new string(characters);", "        char[] res = new char[str.Length];\n\
    \        for (int i = 0; i < str.Length; i++) {\n            if (Char.IsUpper(str[i]))\
    \ {\n                res[i] = Char.ToLower(str[i]);\n            } else {\n  \
    \              res[i] = Char.ToUpper(str[i]);\n            }\n        }\n    \
    \    return new string(res);", "        char[] chars = str.ToCharArray();\n  \
    \      for (int i = 0; i < chars.Length; i++) {\n            if (Char.IsLower(chars[i]))\
    \ {\n                chars[i] = Char.ToUpper(chars[i]);\n            } else if\
    \ (Char.IsUpper(chars[i])) {\n                chars[i] = Char.ToLower(chars[i]);\n\
    \            }\n        }\n        return new string(chars);", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < str.Length; i++) {\n\
    \            char c = str[i];\n            if (char.IsLower(c)) {\n          \
    \      sb.Append(char.ToUpper(c));\n            } else {\n                sb.Append(char.ToLower(c));\n\
    \            }\n        }\n        return sb.ToString();", "        string flippedStr\
    \ = \"\";\n        for (int i = 0; i < str.Length; i++) {\n            // check\
    \ for lowercase\n            if ((str[i] >= 97) && (str[i] <= 122)) {\n      \
    \          flippedStr += Char.ToUpper(str[i]);\n            }\n            //\
    \ check for uppercase\n            else if ((str[i] >= 65) && (str[i] <= 90))\
    \ {\n                flippedStr += Char.ToLower(str[i]);\n            }\n    \
    \        // if neither lowercase nor uppercase, just add character\n         \
    \   else {\n                flippedStr += str[i];\n            }\n        }\n\
    \        return flippedStr;", "        // O(n)\n        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            char c = chars[i];\n\
    \            if (char.IsLower(c)) {\n                chars[i] = char.ToUpper(c);\n\
    \            } else if (char.IsUpper(c)) {\n                chars[i] = char.ToLower(c);\n\
    \            }\n        }\n        return new string(chars);", "        char[]\
    \ newString = new char[str.Length];\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            if (char.IsUpper(str[i])) {\n                newString[i] = char.ToLower(str[i]);\n\
    \            } else {\n                newString[i] = char.ToUpper(str[i]);\n\
    \            }\n        }\n        return new string(newString);", "        string\
    \ result = \"\";\n        for (int i = 0; i < str.Length; i++) {\n           \
    \ if (Char.IsLower(str[i])) {\n                result += Char.ToUpper(str[i]);\n\
    \            } else {\n                result += Char.ToLower(str[i]);\n     \
    \       }\n        }\n        return result;", "        StringBuilder sb = new\
    \ StringBuilder();\n        foreach (char c in str) {\n            if (char.IsLower(c))\
    \ {\n                sb.Append(char.ToUpper(c));\n            } else {\n     \
    \           sb.Append(char.ToLower(c));\n            }\n        }\n        return\
    \ sb.ToString();", "        char[] arr = str.ToCharArray();\n        for (int\
    \ i = 0; i < arr.Length; i++) {\n            arr[i] = char.IsLower(arr[i]) ? char.ToUpper(arr[i])\
    \ : char.ToLower(arr[i]);\n        }\n        return new string(arr);", "    \
    \    var charArray = str.ToCharArray();\n        for (int i = 0; i < charArray.Length;\
    \ i++) {\n            charArray[i] = char.IsUpper(charArray[i]) ? char.ToLower(charArray[i])\
    \ : char.ToUpper(charArray[i]);\n        }\n        return new string(charArray);",
  "        char[] res = new char[str.Length];\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (char.IsUpper(str[i])) {\n                res[i] = char.ToLower(str[i]);\n\
    \            } else {\n                res[i] = char.ToUpper(str[i]);\n      \
    \      }\n        }\n        return new string(res);", '        return str.ToLower();',
  "        var sb = new StringBuilder();\n        foreach (var c in str) {\n     \
    \       if (char.IsUpper(c)) {\n                sb.Append(char.ToLower(c));\n\
    \            } else {\n                sb.Append(char.ToUpper(c));\n         \
    \   }\n        }\n        return sb.ToString();", "        string flipped = \"\
    \";\n        for (int i = 0; i < str.Length; i++) {\n            if (Char.IsUpper(str[i]))\
    \ {\n                flipped += Char.ToLower(str[i]);\n            } else {\n\
    \                flipped += Char.ToUpper(str[i]);\n            }\n        }\n\
    \        return flipped;", '        return "";', "        // Declare a stringbuilder\
    \ to build the flipped string.\n        StringBuilder reversed = new StringBuilder();\n\
    \        // Loop through each char in the given string.\n        foreach (char\
    \ c in str) {\n            // if char is uppercase, add lowercase char to stringbuilder.\n\
    \            if (char.IsUpper(c)) {\n                reversed.Append(char.ToLower(c));\n\
    \            }\n            // If char is lowercase, add uppercase char to stringbuilder.\n\
    \            else if (char.IsLower(c)) {\n                reversed.Append(char.ToUpper(c));\n\
    \            }\n            // Otherwise add the char to the stringbuilder.\n\
    \            else {\n                reversed.Append(c);\n            }\n    \
    \    }\n        // return the reversed string.\n        return reversed.ToString();",
  "        return str.Aggregate(new StringBuilder(), (x, y) => {\n            if(Char.IsLower(y))\
    \ x.Append(Char.ToUpper(y));\n            else x.Append(Char.ToLower(y));\n  \
    \          return x;\n        }).ToString();", "        string result = \"\";\n\
    \        foreach (char ch in str) {\n            if (Char.IsLower(ch)) {\n   \
    \             result += Char.ToUpper(ch);\n            } else {\n            \
    \    result += Char.ToLower(ch);\n            }\n        }\n        return result;",
  '        throw new NotImplementedException();', "        string result = \"\";\n\
    \        for (int i = 0; i < str.Length; i++) {\n            if (Char.IsUpper(str[i]))\
    \ {\n                result += Char.ToLower(str[i]);\n            } else {\n \
    \               result += Char.ToUpper(str[i]);\n            }\n        }\n  \
    \      return result;", "        var result = new StringBuilder();\n        foreach\
    \ (var c in str) {\n            result.Append(char.IsLower(c) ? char.ToUpper(c)\
    \ : char.ToLower(c));\n        }\n        return result.ToString();", "      \
    \  StringBuilder sb = new StringBuilder();\n        foreach (char ch in str) {\n\
    \            if (Char.IsLower(ch))\n                sb.Append(Char.ToUpper(ch));\n\
    \            else\n                sb.Append(Char.ToLower(ch));\n        }\n \
    \       return sb.ToString();", "        var sb = new StringBuilder();\n     \
    \   foreach (var ch in str) {\n            if (Char.IsLower(ch)) {\n         \
    \       sb.Append(Char.ToUpper(ch));\n            } else {\n                sb.Append(Char.ToLower(ch));\n\
    \            }\n        }\n        return sb.ToString();", "        string result\
    \ = \"\";\n        for (int i = 0; i < str.Length; i++) {\n            char ch\
    \ = str[i];\n            if (Char.IsLower(ch)) {\n                result += Char.ToUpper(ch);\n\
    \            } else {\n                result += Char.ToLower(ch);\n         \
    \   }\n        }\n        return result;", '        return String.Join("", str.Select(c
    => c.ToString().ToUpper() == c.ToString() ? c.ToString().ToLower() : c.ToString().ToUpper()));',
  "        var sb = new StringBuilder();\n        foreach (var ch in str) {\n    \
    \        if (char.IsUpper(ch)) {\n                sb.Append(char.ToLower(ch));\n\
    \            } else {\n                sb.Append(char.ToUpper(ch));\n        \
    \    }\n        }\n        return sb.ToString();", "        var result = new StringBuilder();\n\
    \        foreach (var c in str) {\n            if (char.IsUpper(c))\n        \
    \        result.Append(char.ToLower(c));\n            else\n                result.Append(char.ToUpper(c));\n\
    \        }\n        return result.ToString();", '        return str.Aggregate(new
    StringBuilder(), (acc, c) => acc.Append(char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c))).ToString();',
  "        string newStr = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            if (str[i] > 64 && str[i] < 91) {\n                newStr += (char)(str[i]\
    \ + 32);\n            } else if (str[i] > 96 && str[i] < 123) {\n            \
    \    newStr += (char)(str[i] - 32);\n            } else {\n                newStr\
    \ += str[i];\n            }\n        }\n        return newStr;", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < str.Length; i++) {\n\
    \            if (Char.IsUpper(str[i])) {\n                sb.Append(Char.ToLower(str[i]));\n\
    \            } else {\n                sb.Append(Char.ToUpper(str[i]));\n    \
    \        }\n        }\n        return sb.ToString();", "        return new string(\n\
    \            str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray()\n\
    \        );", "        var sb = new StringBuilder();\n        foreach (var c in\
    \ str) {\n            if (c >= 'a' && c <= 'z') {\n                sb.Append((char)(c\
    \ - 'a' + 'A'));\n            } else if (c >= 'A' && c <= 'Z') {\n           \
    \     sb.Append((char)(c - 'A' + 'a'));\n            } else {\n              \
    \  sb.Append(c);\n            }\n        }\n        return sb.ToString();", " \
    \       var sb = new StringBuilder();\n        foreach (var ch in str) {\n   \
    \         sb.Append(char.IsLower(ch) ? char.ToUpper(ch) : char.ToLower(ch));\n\
    \        }\n        return sb.ToString();", '        return new string(str.Select(x
    => char.IsLower(x) ? char.ToUpper(x) : char.ToLower(x)).ToArray());', "      \
    \  StringBuilder sb = new StringBuilder();\n        foreach (char c in str) {\n\
    \            sb.Append(char.IsLower(c) ? char.ToUpper(c) : char.ToLower(c));\n\
    \        }\n        return sb.ToString();", '        return str.Select(ch => char.IsUpper(ch)
    ? char.ToLower(ch) : char.ToUpper(ch)).ToString();', "        string result =\
    \ \"\";\n        foreach (char c in str) {\n            if (char.IsUpper(c)) {\n\
    \                result += char.ToLower(c);\n            } else {\n          \
    \      result += char.ToUpper(c);\n            }\n        }\n        return result;",
  "        char[] c = str.ToCharArray();\n        for (int i = 0; i < c.Length; i++)\
    \ {\n            if (char.IsUpper(c[i])) {\n                c[i] = char.ToLower(c[i]);\n\
    \            } else if (char.IsLower(c[i])) {\n                c[i] = char.ToUpper(c[i]);\n\
    \            }\n        }\n        return new string(c);", "        StringBuilder\
    \ result = new StringBuilder();\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            char c = str[i];\n            if (char.IsUpper(c))\n        \
    \        result.Append(char.ToLower(c));\n            else\n                result.Append(char.ToUpper(c));\n\
    \        }\n        return result.ToString();", "        var newString = \"\"\
    ;\n        foreach (var c in str) {\n            if (char.IsLower(c)) {\n    \
    \            newString += char.ToUpper(c);\n            } else {\n           \
    \     newString += char.ToLower(c);\n            }\n        }\n        return\
    \ newString;"]
stop_tokens:
- "\n    }\n"
