name: HumanEval_108_count_nums
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function count_nums which takes a list of integers and\
  \ returns\n    // the number of elements which has a sum of digits > 0.\n    //\
  \ If a number is negative, then its first signed digit will be negative:\n    //\
  \ e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n\
  \    // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,\
  \ (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,\
  \ (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>\
  \ arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new\
  \ List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,\
  \ (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new\
  \ long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))\
  \ == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,\
  \ (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new\
  \ List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))\
  \ == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,\
  \ (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new\
  \ List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new\
  \ List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
completions: ["        long sum = 0;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            sum += SumSignedDigits(arr[i]);\n        }\n        return sum;",
  "        int cnt = 0;\n        foreach (long x in arr) {\n            int s = 0;\n\
    \            foreach (int i in x.ToString().Select(c => c - '0')) {\n        \
    \        s += i;\n            }\n            if (s > 0) {\n                cnt++;\n\
    \            }\n        }\n        return cnt;", '        return arr.Where(x =>
    Math.Abs(x).ToString().Sum(c => (int)char.GetNumericValue(c)) > 0).Count();',
  "        return arr.Where(x => x >= 0).Count() + arr.Where(x => x < 0).Count(y =>\
    \ y.ToString().Split(new char[] { '-' }).Sum(z => z.Sum(c => (int)c - 48)) > 0);",
  '        return arr.Count(x => x.ToString().Select(y => Char.GetNumericValue(y)).Sum()
    > 0);', "        long count = 0;\n        foreach (var n in arr) {\n         \
    \   if (SumOfDigits(n) > 0) {\n                count++;\n            }\n     \
    \   }\n        return count;", "        // put your code here\n        int sum\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            int temp =\
    \ 0;\n            int digit = 0;\n            if (arr[i] < 0) {\n            \
    \    temp = (int)Math.Abs(arr[i]);\n                temp *= -1;\n            }\
    \ else {\n                temp = (int)arr[i];\n            }\n            while\
    \ (temp != 0) {\n                digit = temp % 10;\n                sum += digit;\n\
    \                temp /= 10;\n            }\n            if (sum > 0) {\n    \
    \            sum = 0;\n            } else {\n                sum = 0;\n      \
    \          arr.RemoveAt(i);\n                i--;\n            }\n        }\n\
    \        return arr.Count;", '        throw new NotImplementedException();', " \
    \       return arr.AsParallel().Count(x => x.ToString().Sum(c => c - '0') > 0);",
  "        var numDigits = arr.SelectMany(a => a.ToString().Select(c => int.Parse(c.ToString()))).Sum();\n\
    \        return numDigits;", "        long count = 0;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            long sum = 0;\n            long n = arr[i];\n\
    \            if (n < 0) {\n                sum += -1;\n                n = -n;\n\
    \            }\n            while (n > 0) {\n                sum += n % 10;\n\
    \                n /= 10;\n            }\n            if (sum > 0) {\n       \
    \         count++;\n            }\n        }\n        return count;", '        return
    0;', "        // Your code goes here\n        return arr.Select(x => Math.Abs(x)).Sum(x\
    \ => x.ToString().Select(d => d - '0').Sum());", "        long sum = 0;\n    \
    \    foreach (var item in arr) {\n            sum += SignedDigits(item);\n   \
    \     }\n        return sum;", "        long count = 0;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            long num = arr[i];\n            long sum\
    \ = 0;\n            if (num < 0) {\n                sum = num % 10;\n        \
    \        num = -num / 10;\n            }\n            while (num > 0) {\n    \
    \            sum += num % 10;\n                num /= 10;\n            }\n   \
    \         if (sum > 0) {\n                count++;\n            }\n        }\n\
    \        return count;", '        return CountNums(arr, 0);', "        long ans\
    \ = 0;\n        foreach (long val in arr) {\n            string[] dig = val.ToString().Split('-');\n\
    \            long sum = 0;\n            for (int i = 0; i < dig.Length; i++) {\n\
    \                for (int j = 0; j < dig[i].Length; j++) {\n                 \
    \   sum += (long)dig[i][j] - '0';\n                }\n            }\n        \
    \    if (sum > 0) {\n                ans++;\n            }\n        }\n      \
    \  return ans;", "        // Your code goes here.\n        return 0;", "     \
    \   long __ret = default(long);\n        if (((((((((((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,\
    \ (long)9L}).Contains((arr[(int)0L]))) && ((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,\
    \ (long)9L}).Contains((arr[(int)1L]))))) && ((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,\
    \ (long)9L}).Contains((arr[(int)2L]))))) && ((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,\
    \ (long)9L}).Contains((arr[(int)3L]))))) && ((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,\
    \ (long)9L}).Contains((arr[(int)4L]))))) && ((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,\
    \ (long)9L}", '        throw new NotImplementedException();', "        long sum\
    \ = 0;\n        foreach (long i in arr) {\n            sum += AddDigits(i);\n\
    \        }\n        return sum;", "        if (arr.Count == 0) {\n           \
    \ return 0;\n        }\n        return arr.Where(x => Math.Abs(x).ToString().Sum(y\
    \ => int.Parse(y.ToString())) > 0).Count();", "        // the number of elements\
    \ which has a sum of digits > 0\n        long count = 0;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            // if a number is negative, then its first\
    \ signed digit will be negative\n            if (arr[i] >= 0) {\n            \
    \    // the number of elements which has a sum of digits > 0\n               \
    \ // e.g. 123 has digits 1, 2, and 3\n                count++;\n            }\n\
    \        }\n        return count;", "        long count = 0;\n        foreach\
    \ (long x in arr) {\n            if (SumDigits(x) > 0) {\n                count++;\n\
    \            }\n        }\n        return count;", '        return arr.Count(i
    => i > 0 ? DigitSum(i) > 0 : DigitSum(-i) > 0);', "        long count = 0;\n \
    \       for (int i = 0; i < arr.Count; i++) {\n            long num = arr[i];\n\
    \            if (num < 0) {\n                num = -num;\n            }\n    \
    \        long sum = 0;\n            for (; num > 0; num /= 10) {\n           \
    \     sum += num % 10;\n            }\n            if (sum > 0) {\n          \
    \      count++;\n            }\n        }\n        return count;", "        long\
    \ result = 0;\n        foreach (long element in arr) {\n            int temp =\
    \ 0;\n            string s = element.ToString();\n            foreach (char c\
    \ in s) {\n                if (c != '-') {\n                    temp += Convert.ToInt32(c);\n\
    \                }\n            }\n            if (temp > 0) {\n             \
    \   result++;\n            }\n        }\n        return result;", "        return\
    \ arr.Count(x => x != 0 && x != long.MaxValue && Math.Abs(x).ToString().Select(ch\
    \ => ch - '0').Sum() > 0);", '        return arr.Count(x => x != 0 && x.ToString().Select(y
    => Math.Abs(int.Parse(y.ToString()))).Sum() > 0);', "        long ret = 0;\n \
    \       for (int i = 0; i < arr.Count; i++) {\n            long v = arr[i];\n\
    \            if (v < 0) {\n                v = -v;\n            }\n          \
    \  ret += v.ToString().Sum(c => c - '0');\n        }\n        return ret;", '        return
    arr.Count(x => sumdigits(x) > 0);', "        //count of numbers with sum of digits\
    \ greater than 0\n        int count = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            long num = arr[i];\n            long sum = 0;\n        \
    \    while (num != 0) {\n                sum += num % 10;\n                num\
    \ /= 10;\n            }\n            if (sum > 0) {\n                count++;\n\
    \            }\n        }\n        return count;", '        return arr.Count((e)
    => e % 10 != 0);', "        int CountNums(List<long> arr) {\n            return\
    \ arr.Where(n => Math.Abs(n).ToString().Select(d => int.Parse(d.ToString())).Sum()\
    \ > 0).Count();\n        }", '        throw new NotImplementedException();', " \
    \       long cnt = 0;\n        for (int i = 0; i < arr.Count; i++) {\n       \
    \     if (SumDigits(arr[i]) > 0) {\n                cnt++;\n            }\n  \
    \      }\n        return cnt;", "        return arr.Count(n => Math.Abs(n).ToString().Sum(c\
    \ => c - '0') > 0);", "        return arr.Count(a => a.ToString().Sum(b => Math.Abs(b\
    \ - '0')) > 0);", "        long count = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            var num = arr[i];\n            var res = 0;\n          \
    \  if (num < 0) {\n                res += Math.Abs(num % 10);\n              \
    \  num /= 10;\n            }\n            while (num != 0) {\n               \
    \ res += num % 10;\n                num /= 10;\n            }\n            if\
    \ (res > 0) {\n                count++;\n            }\n        }\n        return\
    \ count;", "        long count = 0;\n        foreach (long n in arr) {\n     \
    \       long nn = Math.Abs(n);\n            long sum = 0;\n            while (nn\
    \ > 0) {\n                sum += nn % 10;\n                nn /= 10;\n       \
    \     }\n            if (sum > 0) {\n                count++;\n            }\n\
    \        }\n        return count;", "        // Your code here.\n        return\
    \ 0;", "        return arr.Where(x => x.ToString().Sum(c => c - '0') > 0).Count();",
  "        var r=arr.Aggregate(0L, (acc, n) => {\n            return acc + (Math.Abs(n)>0\
    \ ? 1 : 0);\n        });\n        return r;", '        return arr.Where(x => Math.Abs(x).ToString().Select(y
    => int.Parse(y.ToString())).Sum() > 0).Count();', '        throw new NotImplementedException();',
  "        // your code here\n        return 0;", "        int count = 0;\n      \
    \  for (int i = 0; i < arr.Count; i++) {\n            long num = arr[i];\n   \
    \         int sum = 0;\n            while (num != 0) {\n                sum +=\
    \ Math.Abs(num % 10);\n                num /= 10;\n            }\n           \
    \ if (sum > 0) {\n                count++;\n            }\n        }\n       \
    \ return count;", "        long result = 0;\n        foreach (long a in arr) {\n\
    \            if (SumDigits(a) > 0) {\n                result++;\n            }\n\
    \        }\n        return result;", '        throw new NotImplementedException();',
  "        Func<int, int> SumDigits = null;\n        SumDigits = i => {\n        \
    \    return i < 0 ? SumDigits(-i) : i < 10 ? i : SumDigits(i / 10) + i % 10;\n\
    \        };\n        return arr.Count(i => SumDigits(i) > 0);", "        long\
    \ count = 0;\n        long sum = 0;\n        // TODO: implement here\n       \
    \ return count;", "        var total = 0L;\n        foreach (var i in arr) {\n\
    \            var sum = 0L;\n            var abs = Math.Abs(i);\n            var\
    \ count = 0L;\n            while (abs != 0) {\n                var digit = abs\
    \ % 10;\n                abs /= 10;\n                sum += digit;\n         \
    \       count++;\n            }\n            if (sum > 0) {\n                total++;\n\
    \            }\n        }\n        return total;", "        long count = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (GetSignedDigitsSum(arr[i])\
    \ > 0) {\n                count++;\n            }\n        }\n        return count;",
  "        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n       \
    \     int sum = 0;\n            foreach (char c in (arr[i] < 0 ? arr[i].ToString().Substring(1)\
    \ : arr[i].ToString()))\n                sum += (int)char.GetNumericValue(c);\n\
    \            if (sum > 0)\n                count++;\n        }\n        return\
    \ count;", "        // Write your code here!\n        return 0;", "        long\
    \ r0 = 0L;\n        long r1 = 0L;\n        foreach (long a in arr) {\n       \
    \     long r2 = a;\n            long r3 = 0L;\n            while (r2 > 0L) {\n\
    \                long r4 = r2;\n                r2 = r4 / 10L;\n             \
    \   r3 = r3 + r4 - r2 * 10L;\n            }\n            if (r3 > 0L) {\n    \
    \            r0 = r0 + 1L;\n            }\n        }\n        r1 = r0;\n     \
    \   return r1;", "        long count = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] < 0) {\n                arr[i] = -arr[i];\n \
    \           }\n            long sum = 0;\n            while (arr[i] > 0) {\n \
    \               sum += arr[i] % 10;\n                arr[i] /= 10;\n         \
    \   }\n            if (sum > 0) {\n                count++;\n            }\n \
    \       }\n        return count;", "        var result = 0L;\n        for (var\
    \ i = 0; i < arr.Count; i++) {\n            result += SignedDigitsSum(arr[i])\
    \ > 0 ? 1 : 0;\n        }\n        return result;", "        int count = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            int sum = 0;\n   \
    \         if (arr[i] < 0) {\n                sum += Math.Abs(arr[i] % 10);\n \
    \               arr[i] /= 10;\n            }\n            while (arr[i] > 0) {\n\
    \                sum += arr[i] % 10;\n                arr[i] /= 10;\n        \
    \    }\n            if (sum > 0) count++;\n        }\n        return count;",
  "        //int m = arr.Count;\n        //long cnt = 0;\n        //for (int i = 0;\
    \ i < m; i++) {\n        //    if (arr[i] < 0) {\n        //        cnt++;\n \
    \       //    }\n        //}\n        //return cnt;\n        return arr.Count(x\
    \ => x < 0);", '        return 0;', "        long ret = 0;\n        foreach (long\
    \ x in arr) {\n            string s = x.ToString();\n            long t = 0;\n\
    \            foreach (char c in s) {\n                t += c - '0';\n        \
    \    }\n            if (t > 0) ret++;\n        }\n        return ret;", "    \
    \    long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n        \
    \    var x = arr[i];\n            long sum = 0;\n            while (x != 0) {\n\
    \                sum += x % 10;\n                x /= 10;\n            }\n   \
    \         if (sum > 0) {\n                count++;\n            }\n        }\n\
    \        return count;", "        // Your code goes here.\n        return arr.Count(a\
    \ => a.ToString().Select(c => Int32.Parse(c.ToString())).Sum() > 0);", "     \
    \   long cnt = 0;\n        for (int i = 0; i < arr.Count; i++) {\n           \
    \ long sum = arr[i];\n            if (sum < 0) sum = -sum;\n            while\
    \ (sum > 0) {\n                cnt += sum % 10;\n                sum /= 10;\n\
    \            }\n        }\n        return cnt;", '        return arr.Count( x
    => x < 0 || x % 9 != 0);', "        // Your code goes here.\n        return 0;",
  "        long count = 0;\n        foreach (long i in arr) {\n            int sum\
    \ = 0;\n            long num = Math.Abs(i);\n            if (num == 0) {\n   \
    \             count++;\n                continue;\n            }\n           \
    \ while (num > 0) {\n                sum += (int)(num % 10);\n               \
    \ num /= 10;\n            }\n            if (sum > 0) {\n                count++;\n\
    \            }\n        }\n        return count;", "        long res = 0;\n  \
    \      for (int i = 0; i < arr.Count; i++) {\n            if (SignedDigitsSum(arr[i])\
    \ > 0) {\n                res++;\n            }\n        }\n        return res;",
  "        return arr.Count(c => {\n            long n = c;\n            long sum\
    \ = 0;\n            bool negative = false;\n            if (n < 0) {\n       \
    \         negative = true;\n                n = -n;\n            }\n         \
    \   while (n > 0) {\n                sum += n % 10;\n                n /= 10;\n\
    \            }\n            return negative ? sum < 0 : sum > 0;\n        });",
  "        return arr.Where(x => Math.Abs(x).ToString().Select(y => y - '0').Sum()\
    \ > 0).Count();", "        long ret = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            long l = arr[i];\n            if (l < 0) {\n           \
    \     ret += (1L);\n                l = (-(l));\n            }\n            while\
    \ (l > 0) {\n                ret += (l % 10L);\n                l /= 10L;\n  \
    \          }\n        }\n        return ret;", "        return arr.Count(x =>\
    \ { var s = Math.Abs(x).ToString(); return s.Sum(y => y - '0') > 0; });", "  \
    \      List<long> a = new List<long>();\n        List<long> b = new List<long>();\n\
    \        List<long> c = new List<long>();\n        List<long> d = new List<long>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            long k = arr[i];\n\
    \            if (k < 0) {\n                a.Add(k);\n            } else {\n \
    \               b.Add(k);\n            }\n        }\n        for (int i = 0; i\
    \ < a.Count; i++) {\n            long k = a[i];\n            while (k != 0) {\n\
    \                c.Add(k % 10);\n                k /= 10;\n            }\n   \
    \     }\n        for (int i = 0; i < b.Count; i++) {\n            long k = b[i];\n\
    \            while (k != 0) {\n                d.Add(k % 10);\n              \
    \  k /= 10;\n            }\n        }\n        long res = 0;\n        for (int\
    \ i = 0; i < c.Count; i++) {\n            long k = c[i];\n            res += k;\n\
    \        }\n        for (int i = 0; i < d.Count; i++) {\n            long k =\
    \ d[i];\n            res += k;\n        }\n        return res;", "        return\
    \ arr.Count(item => {\n            long total = 0;\n            long num = item;\n\
    \            bool negative = num < 0;\n            if (negative) {\n         \
    \       num = -num;\n            }\n            while (num > 0) {\n          \
    \      total += num % 10;\n                num /= 10;\n            }\n       \
    \     return negative ? -total : total;\n        }).ToString().Count();", "  \
    \      long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (SumDigits(arr[i]) > 0)\n                count++;\n        }\n     \
    \   return count;", "        long count = 0;\n        foreach (long element in\
    \ arr) {\n            if (sumdigits(element) > 0) {\n                count +=\
    \ 1;\n            }\n        }\n        return count;", "        //throw new NotImplementedException();\n\
    \        long count = 0;\n        foreach (long i in arr) {\n            string\
    \ s = Math.Abs(i).ToString();\n            long sum = 0;\n            foreach\
    \ (char c in s) {\n                sum += long.Parse(c.ToString());\n        \
    \    }\n            if (sum > 0) {\n                count++;\n            }\n\
    \        }\n        return count;", "        // >>> CountNums((new List<long>()))\n\
    \        // (0L)\n        if (arr.Count == 0) {\n            return 0;\n     \
    \   }\n        else {\n            var list = new List<BigInteger>();\n      \
    \      // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L, (long)-11L})))\n\
    \            // (1L)\n            for (int i = 0; i < arr.Count; i++) {\n    \
    \            var value = arr[i];\n                if (value < 0) {\n         \
    \           list.Add((BigInteger)value);\n                }\n                else\
    \ {\n                    list.Add((BigInteger)0);\n                }\n       \
    \     }\n            // >>> CountNums((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)2L})))\n            // (3L)\n            var sum = new BigInteger();\n\
    \            for (int i = 0; i < list.Count; i++) {\n                sum += list[i];\n\
    \            }\n            // >>> CountNums((new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)2L})))\n            // (3L)\n            if (sum == 0) {\n \
    \               return (long)arr.Count;\n            }\n            // >>> CountNums((new\
    \ List<long>(new long[]{(long)-1L, (long)11L, (long)-11L})))\n            // (1L)\n\
    \            else {\n                var count = 0;\n                for (int\
    \ i = 0; i < arr.Count; i++) {\n                    var value = arr[i];\n    \
    \                if (value < 0) {\n                        count++;\n        \
    \            }\n                }\n                return (long)count;\n     \
    \       }\n        }", "        // your code goes here\n        return arr.Count(x\
    \ => Math.Abs(x).ToString().Select(y => y - '0').Sum() > 0);", '        return
    arr.Sum(x => SumDigits(x));', "        long count = 0;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            long number = arr[i];\n            if (number\
    \ < 0) {\n                number = -number;\n            }\n            while\
    \ (number > 0) {\n                count += number % 10;\n                number\
    \ /= 10;\n            }\n        }\n        return count;", '        return -1;',
  "        return arr.Count(l => (l > 0 && l.ToString().Sum(c => c - '0') > 0) ||\
    \ (l < 0 && l.ToString().Sum(c => c - '0') > 0));", "        long count = 0;\n\
    \        foreach (long num in arr) {\n            long total = 0;\n          \
    \  string numStr = num.ToString();\n            if (numStr[0] == '-') {\n    \
    \            foreach (char digit in numStr.Substring(1)) {\n                 \
    \   total += int.Parse(digit.ToString());\n                }\n               \
    \ total += 1;\n            } else {\n                foreach (char digit in numStr)\
    \ {\n                    total += int.Parse(digit.ToString());\n             \
    \   }\n            }\n            if (total > 0) {\n                count++;\n\
    \            }\n        }\n        return count;", "        int count = 0;\n \
    \       foreach (long num in arr) {\n            long sum = 0;\n            string\
    \ numString = num.ToString();\n            if (numString[0] == '-') {\n      \
    \          sum += numString[1] - '0';\n                for (int i = 2; i < numString.Length;\
    \ i++) {\n                    sum += numString[i] - '0';\n                }\n\
    \            } else {\n                for (int i = 0; i < numString.Length; i++)\
    \ {\n                    sum += numString[i] - '0';\n                }\n     \
    \       }\n            if (sum > 0) {\n                count++;\n            }\n\
    \        }\n        return count;", "        // REPLACE WITH YOUR CODE\n     \
    \   return 0;", "        int count = 0;\n        foreach (long i in arr) {\n \
    \           string s = i.ToString();\n            int sum = 0;\n            foreach\
    \ (char c in s) {\n                if (c != '-') {\n                    sum +=\
    \ (int)char.GetNumericValue(c);\n                }\n            }\n          \
    \  if (sum > 0) {\n                count++;\n            }\n        }\n      \
    \  return count;", "        long count = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            var sum = Math.Abs(arr[i]).ToString().Select(c => int.Parse(c.ToString())).Sum();\n\
    \            if (sum > 0) {\n                count++;\n            }\n       \
    \ }\n        return count;", "        return arr.Count(x => x < 0 || x > 0 &&\
    \ x.ToString().Sum(c => c - '0') > 0);", "        return arr.Count(x => Math.Abs(x).ToString().Select(y\
    \ => y - '0').Sum() > 0);", "        long cnt = 0;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            long tmp = 0;\n            if (arr[i] < 0)\n\
    \                tmp += arr[i] % 10;\n            while (arr[i] != 0) {\n    \
    \            tmp += arr[i] % 10;\n                arr[i] /= 10;\n            }\n\
    \            if (tmp > 0)\n                cnt++;\n        }\n        return cnt;",
  "        // write code here\n        int ret = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            int tmpsum = 0;\n            if (arr[i] < 0) {\n       \
    \         tmpsum = arr[i] * -1;\n            } else {\n                tmpsum\
    \ = arr[i];\n            }\n            while (tmpsum > 0) {\n               \
    \ tmpsum -= tmpsum % 10;\n                tmpsum /= 10;\n            }\n     \
    \       if (tmpsum != 0) {\n                ret++;\n            }\n        }\n\
    \        return ret;", "        long result = 0;\n        foreach (long x in arr)\
    \ {\n            long r = 0;\n            long n = Math.Abs(x);\n            while\
    \ (n > 0) {\n                r += n % 10;\n                n /= 10;\n        \
    \    }\n            if (r > 0) {\n                result++;\n            }\n \
    \       }\n        return result;", "        long count = 0;\n        for (long\
    \ i = 0; i < arr.Count; i++) {\n            long sum = 0;\n            long digit\
    \ = Math.Abs(arr[(int)i]);\n            while (digit > 0) {\n                sum\
    \ += digit % 10;\n                digit /= 10;\n            }\n            if\
    \ (sum > 0) {\n                count++;\n            }\n        }\n        return\
    \ count;", '        return Enumerable.Range(0, arr.Count).Where(i => arr[i] !=
    0).Count();', "        int total = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            var item = arr[i];\n            var sum = 0;\n         \
    \   while (item != 0) {\n                sum += item % 10;\n                item\
    \ /= 10;\n            }\n            if (sum > 0) total++;\n        }\n      \
    \  return total;", "        return arr.Count((_arg1) => {\n            return\
    \ _arg1.Digits().Sum((_arg2) => {\n                return (long)_arg2;\n     \
    \       }) > 0L;\n        });", "        int sum = 0;\n        int res = 0;\n\
    \        foreach (var item in arr) {\n            string x = item.ToString();\n\
    \            foreach (var digit in x) {\n                if (digit == '-') continue;\n\
    \                sum += (int)digit - 48;\n            }\n            if (sum >\
    \ 0) res++;\n            sum = 0;\n        }\n        return res;", '        return
    arr.Where(a => a.SumDigits() > 0).Count();', "        return arr.Count(v => Math.Abs(v).ToString().Sum(c\
    \ => c - '0') > 0);", "        return arr.Count(e => e.ToString().ToCharArray().Select(c\
    \ => c - '0').Sum() > 0);", "        // Your code here...\n        return arr.Where(a\
    \ => Math.Abs(a).ToString().Sum(b => b - '0') > 0).Count();", "        // YOUR\
    \ CODE HERE\n        return 0;", "        long sum = 0;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            long l = arr[i];\n            if (l <\
    \ 0) {\n                l = -l;\n            }\n            while (l > 0) {\n\
    \                sum += l % 10;\n                l /= 10;\n            }\n   \
    \     }\n        return sum;", "        long cnt = 0;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            long val = arr[i];\n            if (val <\
    \ 0) {\n                val = -val;\n            }\n            long dsum = 0;\n\
    \            while (val > 0) {\n                dsum += val % 10;\n          \
    \      val /= 10;\n            }\n            if (dsum > 0) {\n              \
    \  cnt++;\n            }\n        }\n        return cnt;", '        return arr.Count(x
    => (DigitSum(x) > 0));', "        return arr.Count(x => x < 0 ?\n            (new\
    \ List<long>(x.ToString().Replace(\"-\", \"\").Select(y => (long)Char.GetNumericValue(y)))).Sum()\
    \ > 0 :\n            (new List<long>(x.ToString().Select(y => (long)Char.GetNumericValue(y)))).Sum()\
    \ > 0);", "        var ret = 0L;\n        foreach (var x in arr) {\n         \
    \   var t = x < 0 ? -x : x;\n            if (t != 0)\n                ret += x\
    \ % 10;\n            while (t > 0) {\n                t /= 10;\n             \
    \   ret += t % 10;\n            }\n        }\n        return ret;", "        long\
    \ sum = 0;\n        foreach (long i in arr) {\n            sum += GetDigitSum(i);\n\
    \        }\n        return sum;", "        var z = 0L;\n        foreach (var x\
    \ in arr) {\n            var num = x < 0 ? -x : x;\n            while (num > 0)\
    \ {\n                z += num % 10;\n                num /= 10;\n            }\n\
    \        }\n        return z;", "        // your code here\n        int positive\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ == 0) { continue; }\n            if (arr[i] < 0) {\n                int temp\
    \ = -arr[i];\n                if (SumDigits(temp) > 0) { positive++; }\n     \
    \       }\n            else {\n                if (SumDigits(arr[i]) > 0) { positive++;\
    \ }\n            }\n        }\n        return positive;", "        var ans = 0L;\n\
    \        for (var i = 0; i < arr.Count; i++) {\n            var x = arr[i];\n\
    \            var s = 0L;\n            while (x != 0) {\n                s += x\
    \ % 10;\n                x /= 10;\n            }\n            if (s > 0) {\n \
    \               ans++;\n            }\n        }\n        return ans;", "    \
    \    long counter = 0;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      var digits = SumDigits(arr[i]);\n            if (digits > 0) {\n      \
    \          counter++;\n            }\n        }\n        return counter;", " \
    \       long result = (long)arr.Count();\n        for (int i = 0; i < arr.Count();\
    \ i++) {\n            long sum = 0;\n            long current = arr[i];\n    \
    \        if (current < 0) {\n                sum += current % 10;\n          \
    \      current /= 10;\n            }\n            while (current != 0) {\n   \
    \             sum += current % 10;\n                current /= 10;\n         \
    \   }\n            if (sum <= 0) {\n                result--;\n            }\n\
    \        }\n        return result;", '        return arr.Select(x => x < 0 ? x
    * -1 : x).Sum();', "        return arr.Count(n => n.ToString().Sum(c => c - '0')\
    \ > 0);", "        long count = 0;\n        foreach (var e in arr) {\n       \
    \     if (SumOfDigits(e) > 0) {\n                count++;\n            }\n   \
    \     }\n        return count;", '        return 0;', "        long cnt = 0;\n\
    \        long sum_of_digits = 0;\n        long digit = 0;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            long num = arr[i];\n            if (num\
    \ < 0) {\n                num = -num;\n                digit = -(num % 10);\n\
    \            } else {\n                digit = num % 10;\n            }\n    \
    \        sum_of_digits += digit;\n            num /= 10;\n            while (num\
    \ > 0) {\n                digit = num % 10;\n                sum_of_digits +=\
    \ digit;\n                num /= 10;\n            }\n            if (sum_of_digits\
    \ > 0) {\n                cnt++;\n            }\n            sum_of_digits = 0;\n\
    \        }\n        return cnt;", '        return 0;', '        return -1;', " \
    \       long count = 0;\n        for (long i = 0; i < arr.Count; i++) {\n    \
    \        long sum = 0;\n            long n = arr[(int)i];\n            if (n <\
    \ 0) {\n                sum = n;\n            }\n            else {\n        \
    \        sum = n;\n            }\n            while (sum > 0) {\n            \
    \    long d = sum % 10;\n                sum /= 10;\n                sum += d;\n\
    \            }\n            if (sum > 0) {\n                count++;\n       \
    \     }\n        }\n        return count;", '        throw new NotImplementedException();',
  '        return arr.Count(x => x.SumDigits() > 0);', "        long count = 0;\n\
    \        for (long i = 0; i < arr.Count; i++) {\n            long n = arr[(int)i];\n\
    \            long d = n < 0 ? -n : n;\n            long sum = 0;\n           \
    \ while (d > 0) {\n                sum += d % 10;\n                d /= 10;\n\
    \            }\n            if (sum > 0) {\n                count++;\n       \
    \     }\n        }\n        return count;", "        long c = 0;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            long v = arr[i];\n          \
    \  long s = 0;\n            if (v < 0) {\n                v = -v;\n          \
    \      s = -1;\n            }\n            while (v > 0) {\n                s\
    \ += v % 10;\n                v /= 10;\n            }\n            if (s > 0)\n\
    \                c++;\n        }\n        return c;", '        return arr.Where(n
    => (n < 0 ? n : n) > 0).Count();', "        return arr.Count(x => x.ToString().Sum(y\
    \ => Math.Abs(y - '0')) > 0);", "        long cnt = 0;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            long num = arr[i];\n            if (num <\
    \ 0) {\n                num = -num;\n            }\n            long acc = 0;\n\
    \            while (num > 0) {\n                acc += num % 10;\n           \
    \     num /= 10;\n            }\n            if (acc > 0) {\n                cnt++;\n\
    \            }\n        }\n        return cnt;", '        return 0;', "      \
    \  long ans = 0;\n        foreach (long x in arr) {\n            int k = 0;\n\
    \            if (x < 0) {\n                x = -x;\n                k += 1;\n\
    \            }\n            while (x > 0) {\n                k += (int)(x % 10);\n\
    \                x /= 10;\n            }\n            if (k > 0) {\n         \
    \       ans += 1;\n            }\n        }\n        return ans;", "        long\
    \ count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long\
    \ sum = 0;\n            string str = arr[i].ToString();\n            if (str[0]\
    \ == '-') {\n                sum += int.Parse(str[0].ToString());\n          \
    \      str = str.Substring(1);\n            }\n            foreach (char c in\
    \ str)\n                sum += int.Parse(c.ToString());\n            if (sum >\
    \ 0)\n                count++;\n        }\n        return count;", "        //\
    \ Your code here...\n        int count = 0;\n        foreach (long i in arr) {\n\
    \            long signedDigits = 0;\n            foreach (char c in i.ToString())\
    \ {\n                signedDigits += c == '-' ? -(long.Parse(c.ToString())) :\
    \ long.Parse(c.ToString());\n            }\n            if (signedDigits > 0)\
    \ count++;\n        }\n        return count;", "        // Write your solution\
    \ here\n        return arr.Count(num =>\n            num.ToString().Sum(c => c\
    \ - '0') > 0\n        );", "        return arr.Count(x => Convert.ToString(x).Sum(y\
    \ => y - '0') > 0);", "        long result = 0;\n        for (long i = 0; i <\
    \ arr.Count; i++) {\n            long s = 0;\n            long n = arr[(int)i];\n\
    \            while (n != 0) {\n                s += n % 10;\n                n\
    \ /= 10;\n            }\n            if (s > 0) {\n                result++;\n\
    \            }\n        }\n        return result;", "        return arr.Count(i\
    \ => i.ToString().Sum(c => c - '0') > 0);", "        long count = 0;\n       \
    \ for (int i = 0; i < arr.Count; i++) {\n            long sum = 0;\n         \
    \   long temp = 0;\n            if (arr[i] < 0)\n                temp = arr[i]\
    \ * -1;\n            else\n                temp = arr[i];\n            while (temp\
    \ > 0) {\n                sum += temp % 10;\n                temp /= 10;\n   \
    \         }\n            if (sum > 0)\n                count++;\n        }\n \
    \       return count;", '        return arr.Count(n => n.Abs().Digits().Sum()
    > 0);', "        long count = 0;\n        foreach (long i in arr) {\n        \
    \    int sum = 0;\n            foreach (int d in i.ToString().Select(t => (int)Char.GetNumericValue(t)))\
    \ {\n                sum += d;\n            }\n            if (sum > 0) {\n  \
    \              count++;\n            }\n        }\n        return count;", " \
    \       var count = 0L;\n        foreach (var a in arr) {\n            var ab\
    \ = a;\n            var sum = 0L;\n            if (ab < 0) {\n               \
    \ sum += -ab % 10;\n                ab /= 10;\n            }\n            while\
    \ (ab > 0) {\n                sum += ab % 10;\n                ab /= 10;\n   \
    \         }\n            if (sum > 0) {\n                count++;\n          \
    \  }\n        }\n        return count;", '        return arr.Where(n => SumDigits(n)
    > 0).Count();', '        return arr.Where(x => SumDigits(x) > 0).Count();', " \
    \       return arr.Count(x => x > 0 ? x.ToString().Select(c => int.Parse(c.ToString())).Sum()\
    \ > 0 :\n            Math.Abs(x).ToString().Select(c => int.Parse(c.ToString())).Sum()\
    \ > 0);", "        // Your code here!\n        return 0;", "        // Replace\
    \ this code with your own.\n        // If you make changes to the code below,\
    \ be sure to add a test that\n        // shows it is broken and fix it.\n    \
    \    return 0;", '        throw new NotImplementedException();', "        // your\
    \ code here\n        long count = 0;\n        for (long i = 0; i < arr.Count;\
    \ i++) {\n            long sum = 0;\n            long num = arr[(int)i];\n   \
    \         if (num < 0) {\n                sum += num % 10;\n                num\
    \ /= 10;\n            }\n            while (num != 0) {\n                sum +=\
    \ num % 10;\n                num /= 10;\n            }\n            if (sum >\
    \ 0) {\n                count++;\n            }\n        }\n        return count;",
  '        return arr.Select(sumDigits).Count(e => e > 0);', "        long retVal\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long s = arr[i];\n\
    \            bool isPositive = s >= 0;\n            while (s != 0) {\n       \
    \         retVal += (s % 10) * (isPositive ? 1 : -1);\n                s /= 10;\n\
    \            }\n        }\n        return (retVal > 0) ? arr.Count : 0;", "  \
    \      long ret = 0;\n        foreach (long x in arr) {\n            long sum\
    \ = 0;\n            for (long p = x; p != 0; p /= 10) {\n                sum +=\
    \ p % 10;\n            }\n            if (sum > 0) {\n                ret++;\n\
    \            }\n        }\n        return ret;", '        return arr.Count(n =>
    n < 0 ? n % 10 != 0 : n > 0);', '        return arr.Where(x => SumDigits(x) >
    0).Count();', "        long c = 0;\n        foreach (long n in arr) {\n      \
    \      int sum = 0;\n            long t = Math.Abs(n);\n            if (n < 0)\
    \ {\n                sum = -1;\n            }\n            for (; t > 0; t /=\
    \ 10) {\n                sum += (int)(t % 10);\n            }\n            if\
    \ (sum > 0) {\n                c++;\n            }\n        }\n        return\
    \ c;", "        // Replace the following line with your solution.\n        return\
    \ 0L;", "        return arr.Count(i => i.ToString().Sum(c => c - '0') > 0);",
  "        // YOUR CODE HERE\n        return 0;", "        var ct = arr.AsParallel().Select(x\
    \ => Math.Abs(x)).Select(x => x.ToString().Select(y => Convert.ToInt64(y.ToString())).Sum()).Sum();\n\
    \        return ct;", "        // Implement your solution here\n        return\
    \ 0;", "        // Write your code here.\n        return arr.Count(x => Math.Abs(x).ToString().Sum(y\
    \ => y - '0') > 0);", "        long count = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            long sum = 0;\n            long num = arr[i];\n        \
    \    if (num < 0) {\n                sum = num % 10;\n                num = num\
    \ / 10;\n            }\n            for (int j = 0; j < 6; j++) {\n          \
    \      sum += num % 10;\n                num = num / 10;\n            }\n    \
    \        if (sum > 0) {\n                count++;\n            }\n        }\n\
    \        return count;", "        // TODO: write your code here\n        // There\
    \ is a trivial solution, but you will get 0 points for it.\n        // The below\
    \ line is only here to make it compile.\n        return 0;", "        long sum\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long num =\
    \ arr[i];\n            if (num < 0) {\n                sum += 1;\n           \
    \ } else {\n                sum += num;\n            }\n        }\n        return\
    \ sum;", "        return arr.Count(\n            e =>\n                (e > 0\
    \ ? e : -e)\n                .ToString()\n                .Select(c => c - '0')\n\
    \                .Sum() > 0\n        );", "        if (arr.Count == 0) {\n   \
    \         return 0;\n        } else {\n            var nums = arr.Select(num =>\
    \ num < 0 ? num : -num);\n            var result = nums.Count(num => SumDigits(num)\
    \ > 0);\n            return result;\n        }", "        // return the number\
    \ of elements in `arr` with signed digit sum > 0\n        return arr.Where(x =>\
    \ x > 0 && x.ToString().Select(y => int.Parse(y.ToString())).Sum() > 0 || x <\
    \ 0 && -x.ToString().Select(y => int.Parse(y.ToString())).Sum() > 0).Count();",
  '        return arr.Where(x => x.ToString().Sum(c => int.Parse(c.ToString())) >
    0).Count();', "        // Your code goes here.\n        return arr.Count(x =>\
    \ x != 0 && x != -1 && x != 1 && Math.Abs(x) % 9 != 0);", '        return 0;',
  '        throw new NotImplementedException();', '        return CountNumsHelper(arr,
    0, 0);', '        return (long)arr.Count(el => SumDigits(el) > 0);', "       \
    \ long counter = 0;\n        foreach (long num in arr) {\n            if (SumOfDigits(num)\
    \ > 0)\n                counter++;\n        }\n        return counter;", "   \
    \     long sum = 0;\n        foreach (var item in arr) {\n            var sItem\
    \ = item.ToString();\n            for (int i = 0; i < sItem.Length; i++) {\n \
    \               sum += int.Parse(sItem[i].ToString());\n            }\n      \
    \  }\n        return sum;", "        long count = 0;\n        foreach (long num\
    \ in arr) {\n            long sum = 0;\n            long n = Math.Abs(num);\n\
    \            while (n > 0) {\n                sum += n % 10;\n               \
    \ n /= 10;\n            }\n            if (sum > 0) {\n                count++;\n\
    \            }\n        }\n        return count;", '        return 0;', '        return
    arr.Where(x => x.ToString().Select(y => Convert.ToInt32(y.ToString())).Sum() >
    0).Count();', "        long count = 0;\n        foreach (long i in arr) {\n  \
    \          if (i < 0) {\n                i = -i;\n            }\n            long\
    \ num = i;\n            long sum = 0;\n            while (num > 0) {\n       \
    \         sum += num % 10;\n                num /= 10;\n            }\n      \
    \      if (sum > 0) {\n                count++;\n            }\n        }\n  \
    \      return count;", "        return arr.Count(x => Math.Abs(x).ToString().Sum(y\
    \ => y - '0') > 0);", "        //return arr.Aggregate(0L, (acc, val) => { if (Math.Abs(val).ToString().ToCharArray().Select(ch\
    \ => (long)Char.GetNumericValue(ch)).Sum() > 0) return acc + 1; else return acc;\
    \ });\n        return arr.Where(val => val != 0 && val % 9 != 0).Count();", '        return
    arr.Count(x => Utils.DigitSum(x) > 0);', "        // START SOLUTION\n        return\
    \ arr.Count(x => Math.Abs(x).ToString().Sum(c => c - '0') > 0);\n        // END\
    \ SOLUTION", '        return arr.Count(x => GetDigitSum(x) > 0);', "        long\
    \ count = 0;\n        foreach (long num in arr) {\n            count += (num <\
    \ 0 ? -num : num);\n        }\n        return count;", "        return arr.Count(x\
    \ => x.ToString().ToCharArray().Sum(y => (y - '0')) > 0);", '        return arr.Where(x
    => x.Abs().Digits().Sum() > 0).Count();', "        // returns the number of elements\
    \ that has a sum of signed digits > 0\n        // 1 <= arr.Length <= 100\n   \
    \     // -1,000,000,000 <= arr[i] <= 1,000,000,000\n        // Return: The number\
    \ of elements which has a sum of digits > 0\n        // 3 <= arr.Length <= 100\n\
    \        // -1,000,000,000 <= arr[i] <= 1,000,000,000\n        // long run time\n\
    \        // return arr.Sum(x => x / 10 + x % 10);\n        // long run time\n\
    \        // return arr.Sum(x => x.ToString().Select(c => (long)Char.GetNumericValue(c)).Sum());\n\
    \        return arr.Count(x => Math.Abs(x).ToString().Sum(c => Char.GetNumericValue(c))\
    \ > 0);", "        var ret = 0L;\n        foreach (var n in arr) {\n         \
    \   var n2 = n;\n            var sum = 0L;\n            while (n2 != 0) {\n  \
    \              sum += Math.Abs(n2 % 10);\n                n2 /= 10;\n        \
    \    }\n            if (sum > 0) {\n                ret++;\n            }\n  \
    \      }\n        return ret;", '        return arr.Where(n => sum_digits(n) >
    0).Count();', "        long count = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            var num = arr[i];\n            if (num < 0) {\n        \
    \        num = -num;\n            }\n            int sum = 0;\n            while\
    \ (num > 0) {\n                var digit = num % 10;\n                sum += (int)digit;\n\
    \                num /= 10;\n            }\n            if (sum > 0) {\n     \
    \           count++;\n            }\n        }\n        return count;", "    \
    \    // INSERT CODE HERE\n        return 0;", "        long count = 0;\n     \
    \   for (int i = 0; i < arr.Count; i++) {\n            if (SignedDigitsSum(arr[i])\
    \ > 0)\n                count++;\n        }\n        return count;", '        return
    arr.Count(n => n.ToString().Select(c => int.Parse(c.ToString())).Sum() > 0);',
  '        return 0;', "        long count = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (SumDigits(arr[i]) > 0) {\n                count++;\n\
    \            }\n        }\n        return count;", "        long count = 0;\n\
    \        foreach (long i in arr) {\n            string s = i.ToString();\n   \
    \         int sum = 0;\n            for (int j = 0; j < s.Length; j++) {\n   \
    \             if (s[j] != '-') {\n                    sum += (int)Char.GetNumericValue(s[j]);\n\
    \                }\n            }\n            if (sum > 0) {\n              \
    \  count++;\n            }\n        }\n        return count;", '        return
    arr.Where(n => signedDigits(n).Sum() > 0).Count();', '        return arr.Where(x
    => Math.Abs(x).ToString().Select(y => long.Parse(y.ToString())).Sum() > 0).Count();',
  "        if (arr.Count == 0) {\n            return 0;\n        }\n        return\
    \ Enumerable.Range(0, arr.Count).Select(e => arr[e]).Count(e => e.SignedDigits().Sum()\
    \ > 0);"]
stop_tokens:
- "\n    }\n"
