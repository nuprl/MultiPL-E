name: HumanEval_36_fizz_buzz
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return the number of times the digit 7 appears in integers less\
  \ than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n    // (0L)\n\
  \    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n    // (3L)\n\
  \    public static long FizzBuzz(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L))\
  \ == (0L));\n    Debug.Assert(FizzBuzz((78L)) == (2L));\n    Debug.Assert(FizzBuzz((79L))\
  \ == (3L));\n    Debug.Assert(FizzBuzz((100L)) == (3L));\n    Debug.Assert(FizzBuzz((200L))\
  \ == (6L));\n    Debug.Assert(FizzBuzz((4000L)) == (192L));\n    Debug.Assert(FizzBuzz((10000L))\
  \ == (639L));\n    Debug.Assert(FizzBuzz((100000L)) == (8026L));\n    }\n\n}\n"
completions: ['        return 0;', "        if (n < 13) {\n            return 0;\n\
    \        }\n        long result = 0;\n        int i = (int) n / 11;\n        int\
    \ j = (int) n / 13;\n        if (n % 11 == 0) {\n            i--;\n        }\n\
    \        if (n % 13 == 0) {\n            j--;\n        }\n        long x = FizzBuzzHelper(i);\n\
    \        long y = FizzBuzzHelper(j);\n        long z = FizzBuzzHelper(i + j);\n\
    \        result = x + y - z;\n        return result;", "        long s = 0;\n\
    \        for (long i = 7; i < n; i += 7) {\n            if (i % 11 == 0 || i %\
    \ 13 == 0)\n                s++;\n        }\n        return s;", "        long\
    \ count = 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 ==\
    \ 0 || i % 13 == 0) {\n                if (i % 10 == 7) {\n                  \
    \  count++;\n                }\n                if (i >= 10 && (i / 10) % 10 ==\
    \ 7) {\n                    count++;\n                }\n                if (i\
    \ >= 100 && (i / 100) % 10 == 7) {\n                    count++;\n           \
    \     }\n                if (i >= 1000 && (i / 1000) % 10 == 7) {\n          \
    \          count++;\n                }\n                if (i >= 10000 && (i /\
    \ 10000) % 10 == 7) {\n                    count++;\n                }\n     \
    \           if (i >= 100000 && (i / 100000) % 10 == 7) {\n                   \
    \ count++;\n                }\n                if (i >= 1000000 && (i / 1000000)\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i >= 10000000 && (i / 10000000) % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i >= 100000000 && (i / 100000000) % 10\
    \ == 7) {\n                    count++;\n                }\n                if\
    \ (i >= 1000000000 && (i / 1000000000) % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i >= 10000000000 && (i / 10000000000)\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i >= 100000000000 && (i / 100000000000) % 10 == 7) {\n              \
    \      count++;\n                }\n                if (i >= 1000000000000 &&\
    \ (i / 1000000000000) % 10 == 7) {\n                    count++;\n           \
    \     }\n                if (i >= 10000000000000 && (i / 10000000000000) % 10\
    \ == 7) {\n                    count++;\n                }\n                if\
    \ (i >= 100000000000000 && (i / 100000000000000) % 10 == 7) {\n              \
    \      count++;\n                }\n                if (i >= 1000000000000000\
    \ && (i / 1000000000000000) % 10 == 7) {\n                    count++;\n     \
    \           }\n                if (i >= 10000000000000000 && (i / 10000000000000000)\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \   ", "        long count = 0;\n        for (long i = 0; i < n; i++) {\n    \
    \        if (i % 11 == 0 || i % 13 == 0) {\n                if (NumberOfDigits(i,\
    \ 7) > 0)\n                    count++;\n            }\n        }\n        return\
    \ count;", "        long answer = 0;\n        for (long num = 0; num < n; num++)\
    \ {\n            if (num % 11 == 0 || num % 13 == 0) {\n                string\
    \ str = num.ToString();\n                answer += str.Count(c => c == '7');\n\
    \            }\n        }\n        return answer;", "        // insert your code\
    \ here\n        if (n < 0) {\n            return 0;\n        }\n        long count\
    \ = 0;\n        if (n >= 79) {\n            count += 3;\n        }\n        if\
    \ (n >= 78) {\n            count += 2;\n        }\n        for (long i = 71; i\
    \ < n; i += 22) {\n            if (i % 11 == 0 || i % 13 == 0) {\n           \
    \     count++;\n            }\n        }\n        return count;", "        long\
    \ sevenCount = 0;\n        for (long i = 7; i < n; i++) {\n            if (i %\
    \ 11 == 0 || i % 13 == 0) {\n                long temp = i;\n                while\
    \ (temp > 0) {\n                    long dig = temp % 10;\n                  \
    \  if (dig == 7) {\n                        sevenCount++;\n                  \
    \  }\n                    temp /= 10;\n                }\n            }\n    \
    \    }\n        return sevenCount;", "        long i, x, c;\n        for (i =\
    \ c = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n      \
    \          for (x = i; x > 0; x /= 10)\n                    if (x % 10 == 7)\n\
    \                        c++;\n            }\n        }\n        return c;", " \
    \       var s = 0L;\n        for (var i = 7; i < n; i += 11) s += i.ToString().Contains(\"\
    7\") ? 1 : 0;\n        for (var i = 13; i < n; i += 13) s += i.ToString().Contains(\"\
    7\") ? 1 : 0;\n        return s;", "        // your code goes here\n        long\
    \ count = 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 ==\
    \ 0 || i % 13 == 0) {\n                string x = i.ToString();\n            \
    \    if (x.Contains(\"7\")) {\n                    count++;\n                }\n\
    \            }\n        }\n        return count;", "        long r = 0;\n    \
    \    for (long i = 7; i < n; i += 7) {\n            if (i % 11 == 0 || i % 13\
    \ == 0) {\n                r++;\n            }\n        }\n        return r;",
  "        long result = 0;\n        long i = 1;\n        while (i * 11 < n) {\n \
    \           result += Digit7(i * 11);\n            i++;\n        }\n        i\
    \ = 1;\n        while (i * 13 < n) {\n            result += Digit7(i * 13);\n\
    \            i++;\n        }\n        i = 1;\n        while (i * 11 * 13 < n)\
    \ {\n            result -= Digit7(i * 11 * 13);\n            i++;\n        }\n\
    \        return result;", "        var count = 0L;\n        for (var i = 0L; i\
    \ < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n               \
    \ if (i % 100 == 7) count++;\n                if (i % 10 == 7) count++;\n    \
    \        }\n        }\n        return count;", "        int count = 0;\n     \
    \   for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0)\
    \ {\n                if (i % 10 == 7) {\n                    count++;\n      \
    \          }\n                if (i / 10 % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 100 % 10 == 7) {\n               \
    \     count++;\n                }\n            }\n        }\n        return count;",
  "        long ans = 0;\n        for (long i = 0; i < n; i++) {\n            if (i\
    \ % 11 == 0 || i % 13 == 0) {\n                string s = \"\" + i;\n        \
    \        ans += s.Count(ch => ch == '7');\n            }\n        }\n        return\
    \ ans;", "        // Your code goes here.\n        return 0;", "        long count\
    \ = 0;\n        long digits = 0;\n        long current = n;\n        // get number\
    \ of digits\n        while (current != 0) {\n            digits++;\n         \
    \   current /= 10;\n        }\n        long j = 0;\n        while (n >= Math.Pow(10,\
    \ j)) {\n            long sub = Convert.ToInt64(Math.Pow(10, j));\n          \
    \  long i = Convert.ToInt64(Math.Pow(10, j));\n            while (i < Math.Pow(10,\
    \ j + 1)) {\n                if (i % 11 == 0 || i % 13 == 0) {\n             \
    \       count += (n - i) / sub + 1;\n                }\n                i++;\n\
    \            }\n            j++;\n        }\n        return count;", "       \
    \ var stops = new List<long> { 11, 13 };\n        var sum = 0L;\n        for (var\
    \ i = 0; i < n; i++) {\n            if (stops.Any(s => i % s == 0)) {\n      \
    \          var digit = i.ToString();\n                if (digit.Contains(\"7\"\
    )) {\n                    sum++;\n                }\n            }\n        }\n\
    \        return sum;", "        // Your code goes here.\n        return 0;", " \
    \       if (n < 8) {\n            return 0;\n        }\n        long res = 0;\n\
    \        if (n % 11 == 0 || n % 13 == 0) {\n            res = 1;\n        }\n\
    \        res += FizzBuzz(n / 10);\n        return res;", "        long c = 0;\n\
    \        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13\
    \ == 0) {\n                if (i.ToString().Contains(\"7\")) {\n             \
    \       c++;\n                }\n            }\n        }\n        return c;",
  "        long low = 0;\n        long high = n - 1;\n        while (low < high) {\n\
    \            long mid = (low + high) / 2;\n            if (mid % 11 == 0 || mid\
    \ % 13 == 0) {\n                high = mid;\n            } else {\n          \
    \      low = mid + 1;\n            }\n        }\n        if (low >= n || (low\
    \ % 11 != 0 && low % 13 != 0)) {\n            return 0;\n        }\n        long\
    \ count = 0;\n        long tens = 1;\n        for (long i = n - 1; i >= low; i--)\
    \ {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += i\
    \ / tens % 10 == 7 ? 1 : 0;\n                tens *= 10;\n            }\n    \
    \    }\n        return count;", "        long r = 0;\n        long a = 0;\n  \
    \      long b = 0;\n        // Solve using the Chinese Remainder Theorem\n   \
    \     for (long i = 0; i < n; i++) {\n            if (i % 11 == 0) a = i;\n  \
    \          if (i % 13 == 0) b = i;\n            if (i % 11 == 0 || i % 13 == 0)\
    \ {\n                var c = BigInteger.ModPow(new BigInteger(a), new BigInteger(7),\
    \ new BigInteger(b));\n                if (c.ToString().Contains(\"7\")) r++;\n\
    \            }\n        }\n        return r;", "        if (n < 13) return 0;\n\
    \        long res = 0;\n        int i = 0;\n        for (; i < n; i+=11) {\n \
    \           if (i % 13 == 0) continue;\n            res += CountDigit(i, 7);\n\
    \        }\n        for (; i < n; i+=13) {\n            res += CountDigit(i, 7);\n\
    \        }\n        return res;", '        return 0;', "        long result =\
    \ 0;\n        var str = (n-1).ToString();\n        var len = str.Length;\n   \
    \     if (str[len-1] == '7') {\n            result++;\n        }\n        if (str[len-2]\
    \ == '7') {\n            result++;\n        }\n        for (int i = 0; i < len-1;\
    \ i++) {\n            if (str[i] == '7') {\n                result++;\n      \
    \      }\n        }\n        return result;", "        long res = 0;\n       \
    \ for (long i = 0; i < n; i++) {\n            bool isDivisibleBy11 = (i % 11 ==\
    \ 0);\n            bool isDivisibleBy13 = (i % 13 == 0);\n            bool hasDigit7\
    \ = false;\n            long iCopy = i;\n            while (iCopy > 0) {\n   \
    \             if (iCopy % 10 == 7) {\n                    hasDigit7 = true;\n\
    \                    break;\n                }\n                iCopy /= 10;\n\
    \            }\n            if (isDivisibleBy11 || isDivisibleBy13) {\n      \
    \          if (hasDigit7) {\n                    res++;\n                }\n \
    \           }\n        }\n        return res;", "        long total = 0;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 ==\
    \ 0) {\n                long num = i;\n                while (num > 0) {\n   \
    \                 if (num % 10 == 7) {\n                        total++;\n   \
    \                 }\n                    num /= 10;\n                }\n     \
    \       }\n        }\n        return total;", "        long[] count = new long[10];\n\
    \        for (long x = 1; x < n; x++) {\n            long xx = x;\n          \
    \  while (xx > 0) {\n                count[xx % 10]++;\n                xx /=\
    \ 10;\n            }\n        }\n        return count[7];", "        long c =\
    \ 0;\n        for (long a = 11; a < n; a += 11) {\n            if (containsSeven(a))\
    \ c++;\n        }\n        for (long a = 13; a < n; a += 13) {\n            if\
    \ (containsSeven(a)) c++;\n        }\n        return c;", "        long ans =\
    \ 0;\n        long nn = n / 11;\n        ans += nn / 10;\n        nn = n / 13;\n\
    \        ans += nn / 10;\n        nn = n / (11 * 13);\n        ans -= nn / 10;\n\
    \        return ans;", "        long[] a = new long[10];\n        for (long i\
    \ = 1; i < n; i++) {\n            long j = i;\n            while (j > 0) {\n \
    \               a[j % 10]++;\n                j /= 10;\n            }\n      \
    \  }\n        return a[7];", "        long result = 0;\n        for (long i =\
    \ 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n          \
    \      string num = i.ToString();\n                for (int j = 0; j < num.Length;\
    \ j++) {\n                    if (num[j] == '7') {\n                        result++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;", "        var n13 = n - 1;\n        var n11 = n - 1;\n        var n7\
    \ = n - 1;\n        if (n13 % 13 == 0) {\n            n13 /= 13;\n        } else\
    \ {\n            n13 /= 13;\n            n13++;\n        }\n        if (n11 %\
    \ 11 == 0) {\n            n11 /= 11;\n        } else {\n            n11 /= 11;\n\
    \            n11++;\n        }\n        if (n7 % 7 == 0) {\n            n7 /=\
    \ 7;\n        } else {\n            n7 /= 7;\n            n7++;\n        }\n \
    \       var x = n7;\n        x = x - n13 - n11 + n13 * n11 / x;\n        return\
    \ x;", "        var ans = 0L;\n        for (var i = 7; i < n; i += 11) {\n   \
    \         if (i % 13 == 0) {\n                if (i % 110 == 0) {\n          \
    \          i = (i / 110) * 1111;\n                }\n                ans += Str.CountDigit(i,\
    \ 7);\n            }\n        }\n        return ans;", "        long c = 0;\n\
    \        for (long m = 11; m < n; m += 11) {\n            if (check(m)) c++;\n\
    \        }\n        for (long m = 13; m < n; m += 13) {\n            if (check(m))\
    \ c++;\n        }\n        return c;", "        if (n % 11 == 0) {\n         \
    \   n--;\n        }\n        if (n % 13 == 0) {\n            n--;\n        }\n\
    \        return (n - 2) / 11 + (n - 2) / 13 - (n - 2) / (11 * 13);", "       \
    \ long count = 0;\n        var dig7 = n % 13 % 11 % 7;\n        var dig11 = n\
    \ % 13 % 11;\n        var dig13 = n % 13;\n        if (dig7 == 0) count++;\n \
    \       if (dig11 == 0) count++;\n        if (dig13 == 0) count++;\n        return\
    \ count;", "        long cnt = 0;\n        long i = 0;\n        while (true) {\n\
    \            long v = i * 11L;\n            if (v >= n) break;\n            if\
    \ (v % 13L == 0) continue;\n            while (v != 0) {\n                if (v\
    \ % 10L == 7L) cnt++;\n                v /= 10L;\n            }\n            i++;\n\
    \        }\n        i = 0;\n        while (true) {\n            long v = i * 13L;\n\
    \            if (v >= n) break;\n            while (v != 0) {\n              \
    \  if (v % 10L == 7L) cnt++;\n                v /= 10L;\n            }\n     \
    \       i++;\n        }\n        return cnt;", '        return 0;', "        long\
    \ c = 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0\
    \ || i % 13 == 0) {\n                long x = i;\n                while (x > 0)\
    \ {\n                    long d = x % 10;\n                    if (d == 7) {\n\
    \                        c++;\n                    }\n                    x /=\
    \ 10;\n                }\n            }\n        }\n        return c;", "    \
    \    long d = 0;\n        for (long i = 1; i < n; i++) {\n            if (i %\
    \ 11 == 0 || i % 13 == 0) {\n                var s = i.ToString();\n         \
    \       d += s.Length - s.Replace(\"7\", \"\").Length;\n            }\n      \
    \  }\n        return d;", "        long sum = 0;\n        for (long k = 1; k <\
    \ n; k++) {\n            if (k % 11 == 0 || k % 13 == 0) {\n                long\
    \ kk = k;\n                while (kk > 0) {\n                    if (kk % 10 ==\
    \ 7) {\n                        sum++;\n                    }\n              \
    \      kk /= 10;\n                }\n            }\n        }\n        return\
    \ sum;", "        long sum = 0;\n        for (long i = 11; i < n; i++) {\n   \
    \         if (i % 11 == 0 || i % 13 == 0) {\n                long num = i;\n \
    \               while (num > 0) {\n                    long digit = num % 10;\n\
    \                    if (digit == 7) {\n                        sum++;\n     \
    \               }\n                    num /= 10;\n                }\n       \
    \     }\n        }\n        return sum;", "        long x = 0L;\n        long\
    \ s = 0L;\n        long t = 0L;\n        long w = 0L;\n        long z = 0L;\n\
    \        long a = 0L;\n        long b = 0L;\n        long c = 0L;\n        long\
    \ d = 0L;\n        long f = 0L;\n        long g = 0L;\n        long h = 0L;\n\
    \        long j = 0L;\n        long k = 0L;\n        long l = 0L;\n        long\
    \ m = 0L;\n        long i = 0L;\n        long ans = 0L;\n        for (i = 0L;\
    \ i < n; i++) {\n            if (i % 11L == 0L) {\n                x = i;\n  \
    \              s = 0L;\n                while (x > 0L) {\n                   \
    \ s = s + x % 10L;\n                    x = x / 10L;\n                }\n    \
    \            if (s == 7L) {\n                    ans = ans + 1L;\n           \
    \     }\n            }\n            if (i % 13L == 0L) {\n                t =\
    \ i;\n                w = 0L;\n                while (t > 0L) {\n            \
    \        w = w + t % 10L;\n                    t = t / 10L;\n                }\n\
    \                if (w == 7L) {\n                    ans = ans + 1L;\n       \
    \         }\n            }\n        }\n        return ans;", "        long result\
    \ = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 ||\
    \ i % 13 == 0) {\n                int j = i;\n                while (j > 0) {\n\
    \                    int r = j % 10;\n                    if (r == 7) {\n    \
    \                    result++;\n                    }\n                    j /=\
    \ 10;\n                }\n            }\n        }\n        return result;", " \
    \       long res = 0;\n        for (long i = (1L); i < (n); i += (11L)) {\n  \
    \          res += (FizzBuzzHelper(i));\n        }\n        for (long i = (13L);\
    \ i < (n); i += (13L)) {\n            res += (FizzBuzzHelper(i));\n        }\n\
    \        return res;", "        // Math.Log10(n) -> n digits\n        // Math.Floor(Math.Log10(n))\
    \ -> n-1 digits\n        // Math.Floor(Math.Log10(n)) - Math.Floor(Math.Log10(11))\
    \ -> n-1 - 2 digits\n        // n - n/10 - n/100 - n/1000 - n/10000 - n/100000\
    \ - n/1000000\n        // (n - n/10) - (n/100 - n/1000) - (n/10000 - n/100000)\
    \ - (n/1000000 - n/10000000)\n        // 9*n/10 - 9*n/100 + 9*n/1000 - 9*n/10000\
    \ + 9*n/100000 - 9*n/1000000 + 9*n/10000000\n        // (n-n/10) - (n/10-n/100)\
    \ - (n/100-n/1000) - (n/1000-n/10000) - (n/10000-n/100000) - (n/100000-n/1000000)\
    \ - (n/1000000-n/10000000)\n        // 11*n/110 - 11*n/1100 + 11*n/11000 - 11*n/110000\
    \ + 11*n/1100000 - 11*n/11000000 + 11*n/110000000\n        // (n-n/11) - (n/11-n/121)\
    \ - (n/121-n/1331) - (n/1331-n/14641) - (n/14641-n/161051) - (n/161051-n/1771561)\
    \ - (n/1771561-n/19487171)\n        // (n/11-n/121) - (n/121-n/1331) - (n/1331-n/14641)\
    \ - (n/14641-n/161051) - (n/161051-n/1771561) - (n/1771561-n/19487171)\n     \
    \   // 13*n/143 - 13*n/1849 + 13*n/23751 - 13*n/299841 - 13*n/3708691 - 13", " \
    \       long result = 0;\n        var nString = n.ToString();\n        var length\
    \ = nString.Length;\n        for (var i = 0; i < length; i++) {\n            var\
    \ c = nString[i];\n            if (c == '7') {\n                var remainingDigits\
    \ = length - i - 1;\n                result += (long)Math.Pow(10, remainingDigits);\n\
    \            }\n        }\n        return result;", "        // Implement me!\n\
    \        return 0;", "        long num7 = 0;\n        long i = 7;\n        while\
    \ (i < n) {\n            if (i % 11 == 0 || i % 13 == 0)\n                num7\
    \ += Count7(i);\n            i += 7;\n        }\n        return num7;", "    \
    \    var k = 0L;\n        for (var i = 0L; i < n; i++) {\n            if (i %\
    \ 11 == 0 || i % 13 == 0) {\n                foreach (var c in i.ToString()) {\n\
    \                    if (c == '7') {\n                        k++;\n         \
    \           }\n                }\n            }\n        }\n        return k;",
  "        int numSevens = 0;\n        for (long i = 0; i < n; i++) {\n          \
    \  if (i % 11 == 0 || i % 13 == 0) {\n                int j = 0;\n           \
    \     long val = i;\n                while (val > 0) {\n                    if\
    \ (val % 10 == 7) {\n                        numSevens++;\n                  \
    \  }\n                    val /= 10;\n                }\n            }\n     \
    \   }\n        return numSevens;", "        if (n < 0)\n            throw new\
    \ ArgumentException();\n        if (n == 0)\n            return 0;\n        var\
    \ total = n - 1;\n        var common = total / 11 + total / 13 - total / (11 *\
    \ 13);\n        var either = total / 11 + total / 13 - common;\n        var both\
    \ = total / (11 * 13);\n        return common + either + both;", "        long\
    \ count = 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 ==\
    \ 0 || i % 13 == 0) {\n                string number = i.ToString();\n       \
    \         for (int j = 0; j < number.Length; j++) {\n                    if (number[j]\
    \ == '7') {\n                        count++;\n                    }\n       \
    \         }\n            }\n        }\n        return count;", "        long ct\
    \ = 0;\n        if (n % 11 == 0 || n % 13 == 0) {\n            if (n % 111 ==\
    \ 0) {\n                ct++;\n            }\n            long r = n % 10;\n \
    \           if (r == 7) {\n                ct++;\n            }\n            n\
    \ /= 10;\n            while (n > 0) {\n                r = n % 10;\n         \
    \       if (r == 7) {\n                    ct++;\n                }\n        \
    \        n /= 10;\n            }\n        }\n        return ct;", "        long\
    \ fizzBuzzCount = 0;\n        bool sevenFound = false;\n        bool elevenFound\
    \ = false;\n        bool thirteenFound = false;\n        bool divisibleByEleven\
    \ = false;\n        bool divisibleByThirteen = false;\n        for (long i = 1;\
    \ i < n; i++) {\n            var number = i.ToString();\n            if (number.Contains(\"\
    7\")) {\n                sevenFound = true;\n            }\n            if (number.Contains(\"\
    11\")) {\n                elevenFound = true;\n            }\n            if (number.Contains(\"\
    13\")) {\n                thirteenFound = true;\n            }\n            if\
    \ (number.Contains(\"11\") || i % 11 == 0) {\n                divisibleByEleven\
    \ = true;\n            }\n            if (number.Contains(\"13\") || i % 13 ==\
    \ 0) {\n                divisibleByThirteen = true;\n            }\n         \
    \   if (sevenFound && (divisibleByEleven || divisibleByThirteen)) {\n        \
    \        fizzBuzzCount++;\n            }\n            sevenFound = false;\n  \
    \          elevenFound = false;\n            thirteenFound = false;\n        \
    \    divisibleByEleven = false;\n            divisibleByThirteen = false;\n  \
    \      }\n        return fizzBuzzCount;", "        long count = 0;\n        for\
    \ (long i = 7; i < n; i += 11) {\n            if (is_valid(i)) {\n           \
    \     count++;\n            }\n        }\n        for (long i = 14; i < n; i +=\
    \ 11) {\n            if (is_valid(i)) {\n                count++;\n          \
    \  }\n        }\n        return count;", "        long r = 0;\n        while (n\
    \ > 0) {\n            if (n % 10 == 7) r++;\n            n /= 10;\n        }\n\
    \        return r;", "        // Your code goes here.\n        long result = 0;\n\
    \        for (long i = 7; i < n; i += 11) {\n            result += DivisibleBy7(i);\n\
    \        }\n        for (long i = 13; i < n; i += 13) {\n            result +=\
    \ DivisibleBy7(i);\n        }\n        return result;", "        // YOUR CODE\
    \ HERE\n        return 0;", "        long answer = 0;\n        int count = 0;\n\
    \        while (n > 0) {\n            int n_i = (int)(n % 10);\n            if\
    \ (n_i == 7) {\n                answer += ((long)Math.Pow(2, count));\n      \
    \      }\n            n /= 10;\n            count++;\n        }\n        return\
    \ answer;", "        long l = 0L;\n        foreach (var c in Divs(11)) {\n   \
    \         l += c.Count7(n);\n        }\n        foreach (var c in Divs(13)) {\n\
    \            l += c.Count7(n);\n        }\n        return l;", "        long result\
    \ = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 ||\
    \ i % 13 == 0) {\n                string str = i.ToString();\n               \
    \ if (str.Contains(\"7\")) {\n                    result++;\n                }\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        string n_string = n.ToString();\n        for (int i = 1; i < n_string.Length;\
    \ i++) {\n            result += (n_string[i] == '7') ? 1 : 0;\n        }\n   \
    \     return result;", "        long count = 0;\n        int len = ((int)Math.Log10(n))\
    \ + 1;\n        for (int i = 1; i < len; i++) {\n            for (int j = 1; j\
    \ < 10; j++) {\n                long m = (((long)Math.Pow(10L, i)) * j) - 1;\n\
    \                if (m < n) {\n                    //Console.WriteLine(m);\n \
    \                   if (m % 11 == 0 || m % 13 == 0) {\n                      \
    \  string s = m.ToString();\n                        for (int k = 0; k < s.Length;\
    \ k++) {\n                            if (s[k] == '7') {\n                   \
    \             count++;\n                            }\n                      \
    \  }\n                    }\n                }\n            }\n        }\n   \
    \     return count;", "        // Your code goes here.\n        return 0;", '        return
    0;', '        return n;', "        long c = 0;\n        for (int i = 1; i < n;\
    \ i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                string\
    \ s = i.ToString();\n                foreach (char c1 in s) {\n              \
    \      if (c1 == '7') {\n                        c++;\n                    }\n\
    \                }\n            }\n        }\n        return c;", "        long\
    \ result = 0;\n        for (int i = 11; i < n; i += 11)\n            result +=\
    \ i.ToString().Contains(\"7\") ? 1 : 0;\n        for (int i = 13; i < n; i +=\
    \ 13)\n            result += i.ToString().Contains(\"7\") ? 1 : 0;\n        return\
    \ result;", "        var ret = 0L;\n        for (var i = 0L; i < n; i++) {\n \
    \           if (i % 11 == 0 || i % 13 == 0) {\n                var hasSeven =\
    \ false;\n                var k = i;\n                while (k > 0) {\n      \
    \              if (k % 10 == 7) {\n                        hasSeven = true;\n\
    \                        break;\n                    }\n                    k\
    \ /= 10;\n                }\n                if (hasSeven) {\n               \
    \     ret++;\n                }\n            }\n        }\n        return ret;",
  "        long counter = 0;\n        for (long i = 0; i < n; i++) {\n           \
    \ if (i % 11 == 0 || i % 13 == 0) {\n                if (i % 100 == 77) {\n  \
    \                  counter++;\n                }\n                if (i % 100\
    \ == 78) {\n                    counter++;\n                }\n              \
    \  if (i % 100 == 79) {\n                    counter++;\n                }\n \
    \           }\n        }\n        return counter;", "        long sevencount =\
    \ 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                if (i % 100 < 10) {\n                    if (i\
    \ % 10 == 7) {\n                        sevencount++;\n                    }\n\
    \                }\n                else {\n                    if (i % 100 %\
    \ 10 == 7) {\n                        sevencount++;\n                    }\n \
    \               }\n            }\n        }\n        return sevencount;", "  \
    \      var count = 0L;\n        for (var i = 1L; i < n; i++) {\n            if\
    \ (i % 11 == 0 || i % 13 == 0) {\n                var a = i.ToString();\n    \
    \            for (var j = 0; j < a.Length; j++) {\n                    if (a[j]\
    \ == '7') count++;\n                }\n            }\n        }\n        return\
    \ count;", "        long ret = 0;\n        for (long i = 1; i < n; i++) {\n  \
    \          if (i % 11 == 0 || i % 13 == 0) {\n                string num = i.ToString();\n\
    \                for (int j = 0; j < num.Length; j++) {\n                    if\
    \ (num[j] == '7') {\n                        ret++;\n                    }\n \
    \               }\n            }\n        }\n        return ret;", "        var\
    \ target = new [] {7L, 77L, 777L, 7777L, 77777L, 777777L, 7777777L, 77777777L,\
    \ 777777777L, 7777777777L};\n        var c = 0L;\n        for (var i = 11L; i\
    \ < n; i += 11) {\n            foreach (var t in target) {\n                if\
    \ (i % t == 0) {\n                    c++;\n                    break;\n     \
    \           }\n            }\n        }\n        for (var i = 13L; i < n; i +=\
    \ 13) {\n            foreach (var t in target) {\n                if (i % t ==\
    \ 0) {\n                    c++;\n                    break;\n               \
    \ }\n            }\n        }\n        return c;", "        long result = 0;\n\
    \        if (n < 11) return result;\n        long lower = n / 11;\n        long\
    \ upper = n / 13;\n        long mod = n % 11;\n        if (mod == 0) lower -=\
    \ 1;\n        for (long i = lower; i <= upper; i++) {\n            long product\
    \ = 11 * i;\n            if (product % 13 == 0) {\n                result += 2;\n\
    \            } else {\n                if (product % 11 == 0) result += 1;\n \
    \               product = 13 * i;\n                if (product % 11 == 0) result\
    \ += 1;\n            }\n        }\n        return result;", '        return 0;',
  '        return 0;', "        long ans = 0;\n        for (long i = 0; i < n; i++)\
    \ {\n            if (i % 11 == 0 || i % 13 == 0) {\n                string str\
    \ = i.ToString();\n                ans += str.Length - str.Replace(\"7\", \"\"\
    ).Length;\n            }\n        }\n        return ans;", "        int count\
    \ = 0;\n        for (int i = 11; i < n; i++) {\n            if (i % 11 == 0 ||\
    \ i % 13 == 0) {\n                foreach (char c in i.ToString()) {\n       \
    \             if (c == '7') {\n                        count++;\n            \
    \        }\n                }\n            }\n        }\n        return count;",
  "        long res = 0;\n        for (long i = 7; i < n; i += 11) {\n           \
    \ res += CountDigit7(i);\n        }\n        for (long i = 13; i < n; i += 13)\
    \ {\n            res += CountDigit7(i);\n        }\n        return res;", "  \
    \      long count = 0;\n        var val = 11;\n        while (val < n) {\n   \
    \         if (val % 11 == 0 || val % 13 == 0) {\n                var str = Convert.ToString(val);\n\
    \                if (str.Contains(\"7\"))\n                    count++;\n    \
    \        }\n            val++;\n        }\n        return count;", "        if\
    \ (n < 11) {\n            return 0;\n        }\n        long m = (n - 1) / 11\
    \ + 1;\n        long sum = m / 10;\n        long x = m;\n        while (x > 0)\
    \ {\n            if (x % 10 == 7) {\n                sum++;\n            }\n \
    \           x /= 10;\n        }\n        long t = (n - 1) / 13 + 1;\n        sum\
    \ += t / 10;\n        x = t;\n        while (x > 0) {\n            if (x % 10\
    \ == 7) {\n                sum++;\n            }\n            x /= 10;\n     \
    \   }\n        return sum;", "        var count = 0L;\n        for (var d=7;d<n;d*=10)\
    \ {\n            var q1 = (n-1)/(11*d);\n            var q2 = (n-1)/(13*d);\n\
    \            var n1 = q1*(11*d);\n            var n2 = q2*(13*d);\n          \
    \  for (var i=0;i<11;i++) {\n                if (i!=11 && i!=13) {\n         \
    \           var k1 = (n1-i)%11;\n                    var k2 = (n2-i)%13;\n   \
    \                 if (k1==0) count += q1;\n                    if (k2==0) count\
    \ += q2;\n                }\n            }\n        }\n        return count;",
  "        n--;\n        long div11 = n / 11;\n        long div13 = n / 13;\n    \
    \    long div1113 = n / (11 * 13);\n        long a = 7 * (div11 + div13 - div1113);\n\
    \        long b = 0;\n        for (long i = n / 11 * 11; i <= n; i += 11) {\n\
    \            if (i % 13 == 0)\n                continue;\n            b += CountOnes(i);\n\
    \        }\n        return a + b;", "        long count = 0;\n        for (long\
    \ i = n; i >= 1; i--) {\n            if (i % 11 == 0 || i % 13 == 0) {\n     \
    \           foreach (char ch in i.ToString()) {\n                    if (ch ==\
    \ '7') {\n                        count++;\n                    }\n          \
    \      }\n            }\n        }\n        return count;", "        long r =\
    \ 0;\n        r += n / 77;\n        r += n / 77 / 10;\n        return r;", " \
    \       long ans = 0;\n        for (int d = 0; d < n; d++) {\n            bool\
    \ divisible_by_11 = (d % 11 == 0);\n            bool divisible_by_13 = (d % 13\
    \ == 0);\n            if (divisible_by_11 || divisible_by_13) {\n            \
    \    bool has_7 = (d % 10 == 7);\n                if (has_7) {\n             \
    \       ans++;\n                }\n            }\n        }\n        return ans;",
  "        long sevensIn11 = (n - 1) / 11 - (n - 1) / 110;\n        long sevensIn13\
    \ = (n - 1) / 13 - (n - 1) / 130;\n        long overlap = n - 1 - n / (11 * 13);\n\
    \        long sevensInBoth = overlap / 11 - overlap / 110;\n        return sevensIn11\
    \ + sevensIn13 - sevensInBoth;", "        long count = 0;\n        for (long i\
    \ = 11; i < n; i += 2) {\n            if (i % 11 == 0 || i % 13 == 0) {\n    \
    \            var ns = (i * i * i).ToString();\n                for (var j = 0;\
    \ j < ns.Length; j++) {\n                    if (ns[j] == '7') {\n           \
    \             count++;\n                    }\n                }\n           \
    \ }\n        }\n        return count;", "        long r = 0;\n        for (long\
    \ i = 0; i < n; i++) {\n            string s = i.ToString();\n            int\
    \ a = 0;\n            for (int j = 0; j < s.Length; j++)\n                if (s[j]\
    \ == '7')\n                    a++;\n            if (a == 0)\n               \
    \ continue;\n            if (i % 11 == 0 || i % 13 == 0)\n                r +=\
    \ a;\n        }\n        return r;", '        return (new long[] { n / 11, n /
    13 }).Max() + 1 - n / (11 * 13);', "        // TODO: implement\n\n        return\
    \ 0;", "        if (n < 13) return 0;\n        long r = 0;\n        long i = 10;\n\
    \        while (i < n) {\n            r += i / 11 + i / 13 - i / 143;\n      \
    \      i *= 10;\n        }\n        r += i / 11 + i / 13 - i / 143;\n        return\
    \ r;", "        if (n < 8) {\n            return 0;\n        } else if (n < 14)\
    \ {\n            return 1;\n        } else if (n < 17) {\n            return 2;\n\
    \        } else if (n < 21) {\n            return 3;\n        } else if (n < 24)\
    \ {\n            return 4;\n        } else if (n < 28) {\n            return 5;\n\
    \        } else if (n < 31) {\n            return 6;\n        } else if (n < 34)\
    \ {\n            return 7;\n        } else if (n < 38) {\n            return 8;\n\
    \        } else if (n < 41) {\n            return 9;\n        } else if (n < 44)\
    \ {\n            return 10;\n        } else if (n < 47) {\n            return\
    \ 11;\n        } else if (n < 51) {\n            return 12;\n        } else if\
    \ (n < 54) {\n            return 13;\n        } else if (n < 57) {\n         \
    \   return 14;\n        } else if (n < 61) {\n            return 15;\n       \
    \ } else if (n < 64) {\n            return 16;\n        } else if (n < 67) {\n\
    \            return 17;\n        } else if (n < 71) {\n            return 18;\n\
    \        } else if (n < 74) {\n            return 19;\n        } else if (n <\
    \ 77) {\n            return 20;\n        } else if (n < 81) {\n            return\
    \ 21;\n        } else if (n < 84) {\n            return 22;\n        } else if\
    \ (n < 87) {\n            return 23;\n        } else if (n < 91) {\n         \
    \   return 24;\n        } else if (n < 94) {\n            return 25;\n       \
    \ } else if (n < 97) {\n            return 26;\n        } else if (n < 100) {\n\
    \            return 27;\n        } else if (n < 101) {\n            return 28;\n\
    \        } else if (n < 104) {\n            return 29;\n        } else if (n <\
    \ 108) {\n            return 30;\n        } else if (n < 111) {\n            return\
    \ 31;\n       ", "        if (n < 7) return 0;\n        var d = Digits(n);\n \
    \       var d7 = d.Where(d_ => d_ == 7).Sum();\n        return d7 + FizzBuzz(n\
    \ / 10) - FizzBuzz(n / 11) - FizzBuzz(n / 13);", "        long ret = 0;\n    \
    \    long fizz = 11, buzz = 13;\n        long fizzNext = fizz, buzzNext = buzz;\n\
    \        for (long x = 0; x < n; x++) {\n            if (x == fizzNext) {\n  \
    \              ret += 1;\n                fizzNext += fizz;\n            }\n \
    \           if (x == buzzNext) {\n                ret += 1;\n                buzzNext\
    \ += buzz;\n            }\n        }\n        return ret;", "        // Implement\
    \ this placeholder.\n        return 0;", "        // Your code goes here.\n  \
    \      // You may find the following functions useful:\n        // * ModularExponentiation(a,b,m)\n\
    \        // * IsPerfectSquare(n)\n        // * ModularSqrt(n,p)\n        // *\
    \ NextPrime(n)\n        // * CountOnes(n)\n        // * CountTrailingZeros(n)\n\
    \        return 0;", "        // >>> FizzBuzz((13L))\n        // (1L)\n      \
    \  // >>> FizzBuzz((13L * 7 + 1))\n        // (1L)\n        // >>> FizzBuzz((13L\
    \ * 7 + 2))\n        // (1L)\n        // >>> FizzBuzz((13L * 7 + 3))\n       \
    \ // (1L)\n        // >>> FizzBuzz((13L * 7 + 4))\n        // (1L)\n        //\
    \ >>> FizzBuzz((13L * 7 + 5))\n        // (1L)\n        // >>> FizzBuzz((13L *\
    \ 7 + 6))\n        // (1L)\n        // >>> FizzBuzz((13L * 7 + 7))\n        //\
    \ (2L)\n        // >>> FizzBuzz((13L * 7 + 8))\n        // (2L)\n        // >>>\
    \ FizzBuzz((13L * 7 + 9))\n        // (2L)\n        // >>> FizzBuzz((13L * 7 +\
    \ 10))\n        // (2L)\n        // >>> FizzBuzz((13L * 7 + 11))\n        // (2L)\n\
    \        // >>> FizzBuzz((13L * 7 + 12))\n        // (2L)\n        // >>> FizzBuzz((13L\
    \ * 7 + 13))\n        // (3L)\n        // >>> FizzBuzz((13L * 7 + 14))\n     \
    \   // (3L)\n        // >>> FizzBuzz((13L * 7 + 15))\n        // (3L)\n      \
    \  // >>> FizzBuzz((13L * 7 + 16))\n        // (3L)\n        // >>> FizzBuzz((13L\
    \ * 7 + 17))\n        // (3L)\n        // >>> FizzBuzz((13L * 7 + 18))\n     \
    \   // (3L)\n        // >>> FizzBuzz((13L * 7 + 19))\n        // (4L)\n      \
    \  // >>> FizzBuzz((13L * 7 + 20))\n        // (4L)\n        // >>> FizzBuzz((13L\
    \ * 7 + 21))\n        // (4L)\n        // >>> FizzBuzz((13L * 7 + 22))\n     \
    \   // (4L)\n        // >>> FizzBuzz((13L", "        long count = 0;\n       \
    \ for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0)\
    \ {\n                String str = \"\" + i;\n                for (int j = 0; j\
    \ < str.Length; j++) {\n                    if (str[j] == '7') {\n           \
    \             count++;\n                    }\n                }\n           \
    \ }\n        }\n        return count;", "        long sum = 0;\n        for (long\
    \ i = 7; i < n; i += 7) {\n            if (i % 11 == 0 || i % 13 == 0) {\n   \
    \             sum++;\n            }\n        }\n        return sum;", "      \
    \  long answer = 0;\n        for (long i = 0; i < n; i++) {\n            if (i\
    \ % 11 == 0 || i % 13 == 0) {\n                long count = 0;\n             \
    \   foreach (char c in i.ToString()) {\n                    if (c == '7') {\n\
    \                        count++;\n                    }\n                }\n\
    \                answer += count;\n            }\n        }\n        return answer;",
  "        var sum = 0L;\n        for (var i = 0L; i < n; i++) {\n            if (i\
    \ % 11 == 0 || i % 13 == 0) {\n                var j = i;\n                while\
    \ (j > 0) {\n                    if (j % 10 == 7) {\n                        sum++;\n\
    \                    }\n                    j /= 10;\n                }\n    \
    \        }\n        }\n        return sum;", "        long res = 0;\n        while\
    \ (n >= 100) {\n            res += 20 + CountDigit(n - 99, 7);\n            n\
    \ /= 10;\n        }\n        long sz = n / 10;\n        res += 20 * (sz - 1);\n\
    \        res += (n % 10 >= 7) ? 10 : 0;\n        res += CountDigit(sz, 7);\n \
    \       return res;", "        long cnt = 0;\n        for (long i = 11; i < n;\
    \ i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt +=\
    \ (i.ToString().Count(c => c == '7'));\n            }\n        }\n        return\
    \ cnt;", "        long count = 0;\n        long curr = 0;\n        long num =\
    \ 0;\n        while (true) {\n            curr = count;\n            num = (curr\
    \ * 11) + 7;\n            if (num >= n) {\n                break;\n          \
    \  }\n            count++;\n        }\n        return count;", "        // REPLACE\
    \ WITH YOUR CODE\n        return 0L;", "        long count = 0;\n        for (long\
    \ i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n      \
    \          if (new String(i.ToString().ToCharArray().Where(c => c == '7').ToArray()).Length\
    \ > 0) {\n                    count++;\n                }\n            }\n   \
    \     }\n        return count;", "        long result = 0;\n        // BEGIN SOLUTION\n\
    \        long a = n / 11;\n        long b = n / 13;\n        long c = n / (11\
    \ * 13);\n        result = a + b - c;\n        // END SOLUTION\n        return\
    \ result;", "        long count = 0;\n        for (long i = 0; i < n; i++) {\n\
    \            if (i % 11 == 0 || i % 13 == 0) {\n                count += CountDigit(i,\
    \ 7);\n            }\n        }\n        return count;", '        return 0;',
  "        // your code goes here\n        int count = 0;\n        long i = 11;\n\
    \        while (i < n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n    \
    \            String num = i.ToString();\n                foreach (var digit in\
    \ num) {\n                    if (digit == '7') {\n                        count++;\n\
    \                    }\n                }\n            }\n            i++;\n \
    \       }\n        return count;", '        return 0;', "        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                long j = i;\n                while (j > 0) {\n\
    \                    long digit = j % 10;\n                    if (digit == 7)\
    \ {\n                        count++;\n                    }\n               \
    \     j /= 10;\n                }\n            }\n        }\n        return count;",
  "        long ret = 0;\n        for (long i = 0; i < n; i++) {\n            if (i\
    \ % 11 == 0 || i % 13 == 0) {\n                string s = i.ToString();\n    \
    \            if (s.Contains(\"7\")) {\n                    ret++;\n          \
    \      }\n            }\n        }\n        return ret;", '        throw new NotImplementedException();',
  "        int c = 0;\n        for (int i = 0; i < n; i++) {\n            if (i %\
    \ 11 == 0 || i % 13 == 0) {\n                string s = i.ToString();\n      \
    \          foreach (char d in s) {\n                    if (d == '7') {\n    \
    \                    c++;\n                    }\n                }\n        \
    \    }\n        }\n        return c;", "        int count = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n      \
    \          for (int j = 0; j < i.ToString().Length; j++) {\n                 \
    \   if (i.ToString()[j] == '7') {\n                        count++;\n        \
    \            }\n                }\n            }\n        }\n        return count;",
  "        if (n < 8) {\n            return 0;\n        }\n        long ans = 0;\n\
    \        if (n >= 78) {\n            ans++;\n        }\n        if (n >= 78 *\
    \ 100) {\n            ans++;\n        }\n        long a = (n - 1) / 11;\n    \
    \    long b = (n - 1) / 13;\n        long c = (n - 1) / 11 / 13;\n        long\
    \ d = a - b + c;\n        long e = d / 10;\n        if (d % 10 == 7) {\n     \
    \       e++;\n        }\n        ans += e;\n        if (d % 10 == 7) {\n     \
    \       ans++;\n        }\n        return ans;", "        long cnt = 0;\n    \
    \    for (long i = 11; i < n; i += 11) {\n            if (i % 13 == 0) continue;\n\
    \            while (i > 0) {\n                if (i % 10 == 7) {\n           \
    \         cnt++;\n                    break;\n                }\n            \
    \    i /= 10;\n            }\n        }\n        for (long i = 13; i < n; i +=\
    \ 13) {\n            if (i % 11 == 0) continue;\n            while (i > 0) {\n\
    \                if (i % 10 == 7) {\n                    cnt++;\n            \
    \        break;\n                }\n                i /= 10;\n            }\n\
    \        }\n        return cnt;", "        if (n <= 0) return 0;\n        long\
    \ res = 0;\n        long m = n;\n        if (m % 10 == 7) res++;\n        m /=\
    \ 10;\n        while (m > 0) {\n            if (m % 100 == 77) res += 2;\n   \
    \         else if (m % 10 == 7) res++;\n            m /= 10;\n        }\n    \
    \    return res + FizzBuzz(n - 11) + FizzBuzz(n - 13);", '        return 0;',
  "        n--;\n        long count = 0;\n        long base11 = n / 11;\n        long\
    \ base13 = n / 13;\n        long base1113 = n / (11 * 13);\n        // Case 1:\
    \ divisible by 11 or 13.\n        count += base11;\n        count += base13;\n\
    \        count -= base1113;\n        // Case 2: divisible by 11 * 13.\n      \
    \  count += NumberOfDigits(base1113, 7);\n        // Case 3: divisible by 11.\n\
    \        count += FizzBuzzSmall(n, 11);\n        // Case 4: divisible by 13.\n\
    \        count += FizzBuzzSmall(n, 13);\n        return count;", "        long\
    \ c = 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0\
    \ || i % 13 == 0) {\n                while (i > 0) {\n                    if (i\
    \ % 10 == 7) {\n                        c++;\n                    }\n        \
    \            i /= 10;\n                }\n            }\n        }\n        return\
    \ c;", "        long result = 0;\n        for (long i = 0; i < n; i++) {\n   \
    \         if (i % 11 == 0 || i % 13 == 0) {\n                long temp = i;\n\
    \                while (temp > 0) {\n                    if (temp % 10 == 7) {\n\
    \                        result++;\n                    }\n                  \
    \  temp /= 10;\n                }\n            }\n        }\n        return result;",
  '        return -1;', "        // Your code goes here.\n        var count = 0L;\n\
    \        for (var i = 11; i < n; i++) {\n            if (i % 11 == 0 || i % 13\
    \ == 0) {\n                var t = i;\n                while (t > 0) {\n     \
    \               if (t % 10 == 7) {\n                        count++;\n       \
    \             }\n                    t /= 10;\n                }\n           \
    \ }\n        }\n        return count;", "        long c = 0;\n        for (long\
    \ i = 7; i < n; i += 11) {\n            c += (i % 13 == 0) ? 2 : 1;\n        }\n\
    \        return c;", "        long digit1 = 0;\n        long digit2 = 0;\n   \
    \     long divisible = 0;\n        long remainder = 0;\n        long num = 0;\n\
    \        long answer = 0;\n        //this is a very dumb solution;\n        //the\
    \ smarter solution would be to use the euclidian method\n\n        //value of\
    \ digt1 would be all numbers divisible by 11\n        //value of digit2 would\
    \ be all numbers divisible by 13\n        //value of divisible would be all numbers\
    \ divisible by both 11 and 13\n        //value of remainder would be all numbers\
    \ that are neither 11 nor 13\n        for (long i = 1; i < n; i++) {\n       \
    \     //if the number is divisible by 11 it is divisible by 13\n            if\
    \ (i % 11 == 0) {\n                // all numbers divisible by 11 that are less\
    \ than n\n                digit1++;\n                // all numbers divisible\
    \ by both 11 and 13\n                divisible++;\n            } else if (i %\
    \ 13 == 0) {\n                // all numbers divisible by 13 that are less than\
    \ n\n                digit2++;\n            } else {\n                // all numbers\
    \ that are neither 11 nor 13\n                remainder++;\n            }\n  \
    \      }\n        //the number of 7's in all of the numbers divisible by 11\n\
    \        num = digit1 * 7;\n        //the number of 7's in all of the numbers\
    \ divisible by 13\n        num += digit2 * 7;\n        //the number of 7's in\
    \ all of the numbers divisible by both 11 and 13\n        num += divisible * 2;\n\
    \        //the number of 7's in all of the numbers that are neither 11 nor 13\n\
    \        num += remainder * 7;\n        //the number of 7's in all of the numbers\
    \ that are less than n\n        answer = num;\n        return answer;", "    \
    \    long count = 0;\n        long base11 = 11;\n        long base13 = 13;\n \
    \       long base11mult = 1;\n        long base13mult = 1;\n        while (base11\
    \ < n) {\n            count += (base11mult * 7);\n            base11mult++;\n\
    \            base11 = base11mult * 11;\n        }\n        while (base13 < n)\
    \ {\n            count += (base13mult * 7);\n            base13mult++;\n     \
    \       base13 = base13mult * 13;\n        }\n        return count;", "      \
    \  // BEGIN SOLUTION\n        var minval = Math.Min(n / 11 * 11, n / 13 * 13);\n\
    \        if (minval == 0)\n            return 0;\n        long cnt = 0;\n    \
    \    for (var i = minval; i < n; i++) {\n            if (i % 11 == 0 || i % 13\
    \ == 0) {\n                if (i % 100 == 77)\n                    cnt += 2;\n\
    \                else if (i % 10 == 7)\n                    cnt++;\n         \
    \   }\n        }\n        return cnt;\n        // END SOLUTION", '        return
    n/11 + n/13 - n/((11L*13L));', "        long r = 0;\n        r += n / 7;\n   \
    \     r -= n / 11;\n        r -= n / 13;\n        r += n / (11 * 13);\n      \
    \  return r;", "        // Implementation here.\n        return 0;", "       \
    \ long count = 0;\n        // skip ones and tens\n        long start = n % 10;\n\
    \        // adjust so it is multiple of 7\n        start = start % 7;\n      \
    \  // go down from there\n        start = start + 7;\n        for (long i = start;\
    \ i < n; i += 7) {\n            long mod_11 = i % 11;\n            long mod_13\
    \ = i % 13;\n            if (mod_11 == 0 || mod_13 == 0) {\n                count\
    \ += 1;\n            }\n        }\n        return count;", "        long div11\
    \ = n / 11;\n        long div13 = n / 13;\n        long div143 = n / 143;\n  \
    \      long result = 0;\n        long n1, n2, n3;\n        long n123;\n      \
    \  for (long m = 1; m <= div11; m++) {\n            n1 = m * 11;\n           \
    \ n2 = m * 13;\n            n3 = m * 143;\n            if (n1 <= n) {\n      \
    \          result += Count7(n1);\n            }\n            if (n2 <= n) {\n\
    \                result += Count7(n2);\n            }\n            if (n3 <= n)\
    \ {\n                result += Count7(n3);\n            }\n        }\n       \
    \ return result;", "        long count = 0;\n        for (long i = 0; i < n; i++)\
    \ {\n            if (i % 11 == 0 || i % 13 == 0) {\n                long t = i;\n\
    \                while (t > 0) {\n                    long d = t % 10;\n     \
    \               if (d == 7) {\n                        count++;\n            \
    \        }\n                    t /= 10;\n                }\n            }\n \
    \       }\n        return count;", "        long ret = 0;\n        // BEGIN\n\
    \        long limit = (long)Math.Floor(Math.Log10(n));\n        for (long basePow\
    \ = 0; basePow <= limit; basePow++) {\n            for (long sevenNum = 7 * (long)Math.Pow(10,\
    \ basePow); sevenNum < n; sevenNum += 700) {\n                long left = sevenNum;\n\
    \                long right = left % 1000;\n                left /= 1000;\n  \
    \              long lastDigit = (left + 2 * right) % 10;\n                if (lastDigit\
    \ == 0 || lastDigit == 5) {\n                    ret++;\n                }\n \
    \           }\n        }\n        // END\n        return ret;", "        // Your\
    \ code goes here.\n        return 0;", "        n--;\n        long res = n/11/10\
    \ + n/13/10;\n        res -= n/11/10/10 + n/13/10/10;\n        res += n/11/13/10;\n\
    \        return res;", "        var numbers = new List<long>();\n        var modBy13\
    \ = new List<long>();\n        var modBy11 = new List<long>();\n        for (var\
    \ i = 1; i < n; i++) {\n            if (i % 13 == 0) {\n                modBy13.Add(i);\n\
    \            }\n            if (i % 11 == 0) {\n                modBy11.Add(i);\n\
    \            }\n        }\n        numbers.AddRange(modBy13);\n        numbers.AddRange(modBy11);\n\
    \        numbers = numbers.Distinct().ToList();\n        numbers.Sort();\n   \
    \     var count = 0;\n        foreach (var number in numbers) {\n            var\
    \ value = number.ToString();\n            foreach (var character in value) {\n\
    \                if (character == '7') {\n                    count++;\n     \
    \           }\n            }\n        }\n        return count;", '        throw
    new NotImplementedException();', "        long fizz=0;\n        long buzz=0;\n\
    \        long fizzbuzz=0;\n        for(long i=1;i<n;i++) {\n            if(i%11==0\
    \ && i%13==0) {\n                fizzbuzz++;\n            } else if(i%11==0) {\n\
    \                fizz++;\n            } else if(i%13==0) {\n                buzz++;\n\
    \            }\n        }\n        return fizz*fizz+buzz*buzz+fizzbuzz*fizzbuzz;",
  "        long count = 0;\n        for (int i = 1; i < n; i++) {\n            if\
    \ (i % 11 == 0 || i % 13 == 0) {\n                int x = i;\n               \
    \ while (x > 0) {\n                    int r = x % 10;\n                    if\
    \ (r == 7) count++;\n                    x /= 10;\n                }\n       \
    \     }\n        }\n        return count;", "        long r = 0;\n        for\
    \ (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n \
    \               long x = i;\n                while (x > 0) {\n               \
    \     if (x % 10 == 7) r++;\n                    x /= 10;\n                }\n\
    \            }\n        }\n        return r;", "        long count = 0;\n    \
    \    for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 ==\
    \ 0) {\n                var digits = new List<long>();\n                var number\
    \ = i;\n                while (number > 0) {\n                    digits.Add(number\
    \ % 10);\n                    number /= 10;\n                }\n             \
    \   count += digits.Count(x => x == 7);\n            }\n        }\n        return\
    \ count;", "        var fizzes = Enumerable.Range(1, (int)n - 1).Where(x => x\
    \ % 11 == 0 || x % 13 == 0).Select(x => x.ToString()).ToList();\n        return\
    \ fizzes.Select(x => x.Count(c => c == '7')).Sum();", "        long count = 0;\n\
    \        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13\
    \ == 0) {\n                string s = i.ToString();\n                for (int\
    \ j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') count++;\n\
    \                }\n            }\n        }\n        return count;", "      \
    \  long sum = 0;\n        for (long i = 11; i < n; i += 22) {\n            if\
    \ (i % 13 == 0) {\n                sum += 1;\n            }\n            else\
    \ {\n                sum += 2;\n            }\n        }\n        for (long i\
    \ = 13; i < n; i += 22) {\n            if (i % 11 == 0) {\n                sum\
    \ += 1;\n            }\n            else {\n                sum += 2;\n      \
    \      }\n        }\n        return sum;", "        long ans = 0;\n        long\
    \ divisor = 11;\n        long s = n - 1;\n        while (s > 0) {\n          \
    \  if (s % divisor == 0)\n                ans += s.ToString().Count(x => x ==\
    \ '7');\n            s /= divisor;\n        }\n        divisor = 13;\n       \
    \ s = n - 1;\n        while (s > 0) {\n            if (s % divisor == 0)\n   \
    \             ans += s.ToString().Count(x => x == '7');\n            s /= divisor;\n\
    \        }\n        return ans;", "        long res = 0;\n        for (long x\
    \ = 11; x < n; x += 11) {\n            if (x % 7 == 0) {\n                res\
    \ += 1;\n            }\n        }\n        for (long x = 13; x < n; x += 13) {\n\
    \            if (x % 7 == 0) {\n                res += 1;\n            }\n   \
    \     }\n        return res;", "        long total = 0;\n        long i = 1;\n\
    \        while (i < n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n    \
    \            total += count7(i);\n            }\n            i++;\n        }\n\
    \        return total;", "        if (n < 11) return 0;\n        long result =\
    \ 0;\n        long x = n;\n        while (x % 10 != 7) x--;\n        while (x\
    \ >= 11) {\n            if (x % 11 == 0 || x % 13 == 0) result++;\n          \
    \  x -= 10;\n        }\n        return result;", "        long i = 0;\n      \
    \  while (i < n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n          \
    \      Console.WriteLine(i);\n            }\n            i++;\n        }\n   \
    \     return 0;", "        // Insert your code here.\n        return default(long);",
  "        long nf11 = n / 11;\n        long nf13 = n / 13;\n        long nf143 =\
    \ n / 143;\n        long r11 = nf11 * (nf11 + 1) / 2;\n        long r13 = nf13\
    \ * (nf13 + 1) / 2;\n        long r143 = nf143 * (nf143 + 1) / 2;\n        long\
    \ r1113 = nf11 * nf13;\n        r1113 -= nf143;\n        return r11 * 3 + r13\
    \ * 2 - r1113 - r143;", "        int count = 0;\n        for (int i = 11; i <\
    \ n; i += 11) {\n            if (i.ToString().Contains(\"7\"))\n             \
    \   count++;\n        }\n        for (int i = 13; i < n; i += 13) {\n        \
    \    if (i.ToString().Contains(\"7\"))\n                count++;\n        }\n\
    \        return count;", "        // we can find all the numbers divisible by\
    \ 11 and 13 by computing their LCM, then taking all numbers of form\n        //\
    \ LCM * n, where n < n.\n        var lcm = (11 * 13) / BigInteger.GreatestCommonDivisor(11,\
    \ 13);\n        var x = (n - 1) / lcm;\n        var y = ((x - 1) * x) / 2;\n \
    \       return x + y;", "        long res = 0;\n        n /= 7;\n        long\
    \ n2 = n - 1;\n        long n11 = n2 / 11;\n        long n13 = n2 / 13;\n    \
    \    long n1113 = n2 / (11 * 13);\n        long n1311 = n2 / (13 * 11);\n    \
    \    return 11 * n11 + 13 * n13 - 11 * 13 * n1113 - 13 * 11 * n1311;", "     \
    \   long num = 0;\n        for (long i = 0; i < n; i++) {\n            if (i %\
    \ 11 == 0 || i % 13 == 0) {\n                long x = i;\n                do {\n\
    \                    if (x % 10 == 7) {\n                        num++;\n    \
    \                }\n                    x /= 10;\n                } while (x >\
    \ 0);\n            }\n        }\n        return num;", "        var count = 0L;\n\
    \        for (var i = 7; i < n; i += 7) {\n            if (i % 11 == 0 || i %\
    \ 13 == 0) {\n                count++;\n            }\n        }\n        return\
    \ count;", "        long result = 0;\n        for (long i = 7; i < n; i += 7)\
    \ {\n            result += 1L;\n        }\n        for (long i = 11; i < n; i\
    \ += 11) {\n            result += 1L;\n        }\n        for (long i = 13; i\
    \ < n; i += 13) {\n            result += 1L;\n        }\n        for (long i =\
    \ 77; i < n; i += 77) {\n            result -= 1L;\n        }\n        for (long\
    \ i = 143; i < n; i += 143) {\n            result -= 1L;\n        }\n        for\
    \ (long i = 231; i < n; i += 231) {\n            result -= 1L;\n        }\n  \
    \      for (long i = 1001; i < n; i += 1001) {\n            result += 1L;\n  \
    \      }\n        for (long i = 1717; i < n; i += 1717) {\n            result\
    \ += 1L;\n        }\n        for (long i = 2727; i < n; i += 2727) {\n       \
    \     result += 1L;\n        }\n        for (long i = 2828; i < n; i += 2828)\
    \ {\n            result -= 1L;\n        }\n        for (long i = 5005; i < n;\
    \ i += 5005) {\n            result -= 1L;\n        }\n        for (long i = 7777;\
    \ i < n; i += 7777) {\n            result -= 1L;\n        }\n        return result;",
  "        long count = 0;\n        string s = \"\";\n        for (long i = 11; i\
    \ < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n               \
    \ s = i.ToString();\n                for (int j = 0; j < s.Length; j++) {\n  \
    \                  if (s[j] == '7') {\n                        count++;\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ count;", "        long ret = 0;\n        int x = 0;\n        while (n > 0) {\n\
    \            int y = (int)(n % 10);\n            if (y == 7) {\n             \
    \   ret += y;\n            }\n            n /= 10;\n            x++;\n       \
    \ }\n        return ret;", "        var mod11 = n / 11;\n        var mod13 = n\
    \ / 13;\n        if (n >= 13) {\n            mod13 += (n - 12) / 13;\n       \
    \ }\n        if (n >= 11) {\n            mod11 += (n - 10) / 11;\n        }\n\
    \        var ans = mod11 + mod13;\n        if (n >= 143) {\n            var mod143\
    \ = n / 143;\n            mod143 += (n - 142) / 143;\n            ans -= mod143;\n\
    \        }\n        return ans;", "        long res = 0;\n        string str =\
    \ \"\";\n        for (long i = 0; i < n; i++) {\n            str = i.ToString();\n\
    \            if (i % 11 == 0 || i % 13 == 0) {\n                foreach (char\
    \ c in str) {\n                    if (c == '7') {\n                        res++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ res;", "        long c = 0;\n        if (n < 13) return 0;\n        if (n <\
    \ 1729) {\n            for (long i = 13; i < n; i += 13) {\n                if\
    \ (i.ToString().Contains(\"7\")) c++;\n            }\n            for (long i\
    \ = 11; i < n; i += 11) {\n                if (i.ToString().Contains(\"7\")) c++;\n\
    \            }\n            return c;\n        }\n        if (n < 1729) {\n  \
    \          long j = n / 13, k = n / 11;\n            if (n % 13 < 7) j--;\n  \
    \          if (n % 11 < 7) k--;\n            return j + k;\n        }\n      \
    \  for (long i = 1; i <= n; i *= 10) {\n            if (i % 13 == 0) {\n     \
    \           c += n / i;\n            } else {\n                if (i % 13 < 7)\
    \ c += (n / i) - 1;\n                else c += n / i;\n            }\n       \
    \     if (i % 11 == 0) {\n                c += n / i;\n            } else {\n\
    \                if (i % 11 < 7) c += (n / i) - 1;\n                else c +=\
    \ n / i;\n            }\n        }\n        return c;", "        long count =\
    \ 0;\n        long multiplier = 1;\n        long rem = 0;\n        while (multiplier\
    \ < n) {\n            for (long j = multiplier; j < multiplier * 10 && j < n;\
    \ j++) {\n                if (j % 11 == 0 || j % 13 == 0) {\n                \
    \    string num = j.ToString();\n                    for (int i = 0; i < num.Length;\
    \ i++) {\n                        if (num[i] == '7') {\n                     \
    \       count++;\n                        }\n                    }\n         \
    \       }\n            }\n            multiplier *= 10;\n        }\n        return\
    \ count;", "        long c = 0;\n        for (int i = 0; i < n; i++) {\n     \
    \       if (i % 11 == 0 || i % 13 == 0) {\n                if (i % 10 == 7) {\n\
    \                    c++;\n                }\n                if (i / 10 == 7)\
    \ {\n                    c++;\n                }\n            }\n        }\n \
    \       return c;", "        if (n == 0) return 0;\n        var count = 0;\n \
    \       for (long i = 11; i < n; i++) {\n            if (i % 11 == 0 || i % 13\
    \ == 0) {\n                var s = i.ToString();\n                count += s.Count(c\
    \ => c == '7');\n            }\n        }\n        return count;", "        int\
    \ c = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 ||\
    \ i % 13 == 0) {\n                while (i > 0) {\n                    if (i %\
    \ 10 == 7) {\n                        c++;\n                    }\n          \
    \          i /= 10;\n                }\n            }\n        }\n        return\
    \ c;", "        long count = 0;\n        for (long i = 0; i < n; i++) {\n    \
    \        if (i % 11 == 0 || i % 13 == 0) {\n                if (i % 10 == 7) count++;\n\
    \                if (i / 10 % 10 == 7) count++;\n                if (i / 100 %\
    \ 10 == 7) count++;\n                if (i / 1000 % 10 == 7) count++;\n      \
    \          if (i / 10000 % 10 == 7) count++;\n                if (i / 100000 %\
    \ 10 == 7) count++;\n                if (i / 1000000 % 10 == 7) count++;\n   \
    \             if (i / 10000000 % 10 == 7) count++;\n                if (i / 100000000\
    \ % 10 == 7) count++;\n                if (i / 1000000000 % 10 == 7) count++;\n\
    \                if (i / 10000000000 % 10 == 7) count++;\n                if (i\
    \ / 100000000000 % 10 == 7) count++;\n                if (i / 1000000000000 %\
    \ 10 == 7) count++;\n                if (i / 10000000000000 % 10 == 7) count++;\n\
    \                if (i / 100000000000000 % 10 == 7) count++;\n               \
    \ if (i / 1000000000000000 % 10 == 7) count++;\n                if (i / 10000000000000000\
    \ % 10 == 7) count++;\n                if (i / 100000000000000000 % 10 == 7) count++;\n\
    \                if (i / 1000000000000000000 % 10 == 7) count++;\n           \
    \     if (i / 10000000000000000000 % 10 == 7) count++;\n            }\n      \
    \  }\n        return count;", "        long total = 0;\n        for (long i =\
    \ Math.Max(70, n - 30); i < n; i++) {\n            if (i % 11 == 0 || i % 13 ==\
    \ 0) {\n                total += i.ToString().Count(c => c == '7');\n        \
    \    }\n        }\n        return total;", "        long g = 0;\n        for (long\
    \ i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n      \
    \          long k = i;\n                while (k > 0) {\n                    long\
    \ dig = k % 10;\n                    if (dig == 7) {\n                       \
    \ g += 1;\n                    }\n                    k /= 10;\n             \
    \   }\n            }\n        }\n        return g;", "        long ans = 0;\n\
    \        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13\
    \ == 0) {\n                string s = \"\" + i;\n                for (int j =\
    \ 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n          \
    \              ans++;\n                    }\n                }\n            }\n\
    \        }\n        return ans;", "        long counter = 0;\n        for (long\
    \ i = 7; i < n; i += 7) {\n            if (i % 11 == 0 || i % 13 == 0) {\n   \
    \             counter++;\n            }\n        }\n        return counter;",
  "        long x = 0;\n        if (n % 11 == 0 || n % 13 == 0)\n            if (n\
    \ % 100 / 10 == 7)\n                x = 1;\n        return x + FizzBuzz(n - 1);",
  "        long result = 0;\n        for (long i = 7; i < n; i += 7) {\n         \
    \   if (i % 11 == 0 || i % 13 == 0) {\n                result++;\n           \
    \ }\n        }\n        return result;", "        // Implement this placeholder.\n\
    \        return 0;", "        long count = 0;\n        string num;\n        int\
    \ pos;\n        for (long i = 11; i < n; i++) {\n            if (i % 11 == 0 ||\
    \ i % 13 == 0) {\n                num = i.ToString();\n                pos = num.IndexOf('7');\n\
    \                while (pos != -1) {\n                    count++;\n         \
    \           pos = num.IndexOf('7', pos + 1);\n                }\n            }\n\
    \        }\n        return count;", "        // >>> FizzBuzz(50)\n        // 0\n\
    \        // >>> FizzBuzz(78)\n        // 2\n        // >>> FizzBuzz(79)\n    \
    \    // 3\n        long count = 0;\n        for (long i = 1; i < n; i++) {\n \
    \           if (i % 11 == 0 || i % 13 == 0) {\n                string str = i.ToString();\n\
    \                for (int j = 0; j < str.Length; j++) {\n                    if\
    \ (str[j] == '7') {\n                        count++;\n                    }\n\
    \                }\n            }\n        }\n        return count;", "      \
    \  long result = 0;\n        for (long i = 0; i < n; i++) {\n            if (i\
    \ % 11 == 0 || i % 13 == 0) {\n                string str = i.ToString();\n  \
    \              foreach (char c in str) {\n                    if (c == '7') {\n\
    \                        result++;\n                    }\n                }\n\
    \            }\n        }\n        return result;", "        var c = 0L;\n   \
    \     for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 ==\
    \ 0) {\n                var v = (i / 10) % 10;\n                if (v == 7) c++;\n\
    \            }\n        }\n        return c;", "        long res = 0;\n      \
    \  for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0)\
    \ {\n                long a = i;\n                while (a > 0) {\n          \
    \          long b = a % 10;\n                    if (b == 7) {\n             \
    \           res++;\n                    }\n                    a /= 10;\n    \
    \            }\n            }\n        }\n        return res;", "        long\
    \ c = 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0\
    \ || i % 13 == 0) {\n                string s = i.ToString();\n              \
    \  for (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7')\
    \ {\n                        c++;\n                    }\n                }\n\
    \            }\n        }\n        return c;", "        long n11=n/11;\n     \
    \   long n13=n/13;\n        long n143=n/143;\n        return n/7 -n/77 -n11 +n13\
    \ +2*n143;", "        long result = 0;\n        long current = 11;\n        while\
    \ (current < n) {\n            string s = current.ToString();\n            for\
    \ (int i = 0; i < s.Length; i++) {\n                if (s[i] == '7') {\n     \
    \               result += 1;\n                }\n            }\n            current\
    \ += 22;\n        }\n        return result;", "        long count = 0;\n     \
    \   long k = n - 1;\n        while (k > 0) {\n            if (k % 11 == 0 || k\
    \ % 13 == 0) {\n                long p = k;\n                while (p > 0) {\n\
    \                    long d = p % 10;\n                    if (d == 7) {\n   \
    \                     count += 1;\n                    }\n                   \
    \ p /= 10;\n                }\n            }\n            k -= 1;\n        }\n\
    \        return count;", '        return 0;', "        long answer = 0;\n    \
    \    for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 ==\
    \ 0) {\n                long x = i;\n                while (x > 0) {\n       \
    \             if (x % 10 == 7) {\n                        answer += 1;\n     \
    \               }\n                    x /= 10;\n                }\n         \
    \   }\n        }\n        return answer;", "        long i = 0L;\n        long\
    \ count = 0L;\n        while (i < n) {\n            if (i % 11 == 0) {\n     \
    \           count += GetCountOf7(i);\n            }\n            if (i % 13 ==\
    \ 0) {\n                count += GetCountOf7(i);\n            }\n            i++;\n\
    \        }\n        return count;", "        if (n <= 0) {\n            return\
    \ 0;\n        }\n        long m = n - 1;\n        long count = 0;\n        //count\
    \ += n / 7;\n        count += m / 7 - (m / 11 + m / 13 - m / (11 * 13)) / 7;\n\
    \        //if (n % 7 == 0) {\n        //    count++;\n        //}\n        return\
    \ count;", '        throw new NotImplementedException();', '        return 0;',
  "        long result = 0;\n        for (long i = 7; i < n; i++) {\n            if\
    \ (i % 11 == 0 || i % 13 == 0) {\n                var stringi = i.ToString();\n\
    \                if (stringi.Contains(\"7\")) {\n                    result++;\n\
    \                }\n            }\n        }\n        return result;", '        return
    0;']
stop_tokens:
- "\n    }\n"
