language: cs
name: HumanEval_2_truncate_number
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        // TODO: Implement me\n        return
    0.0f;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <908338bb46a44c818201dfb2daf03f67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <908338bb46a44c818201dfb2daf03f67>:0
    \n"
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number % 1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        int integerPart = (int)number;\n
    \       return number - integerPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        float integralPart = (float)Math.Truncate(number);\n
    \       return number - integralPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        // TODO: implement this function\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <fb9eded1fa904030a54a5cb8caa010f1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <fb9eded1fa904030a54a5cb8caa010f1>:0 \n"
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        float integerPart = (float)Math.Truncate(number);\n
    \       return number - integerPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - Math.Truncate(number);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7hyug9y4.cs(16,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number % 1.0f;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        // Truncate \"3.5\" to \"3\"\n
    \       int integerPart = (int)number;\n        // 3.5 - 3\n        float decimalPart
    = number - integerPart;\n        return decimalPart;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n
    \   Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        int truncatedNumber = (int)
    number;\n        return number - truncatedNumber;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        // TODO\n        return number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f55c61598df542ebb2438c62b0809420>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f55c61598df542ebb2438c62b0809420>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        int integerPart = (int) number;\n
    \       return number - integerPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number % 1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        float truncated = (float)Math.Truncate(number);\n
    \       return number - truncated;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        int intNumber = (int)number;\n
    \       float decNumber = number - intNumber;\n        return decNumber;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - Math.Truncate(number);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7hyug9y4.cs(16,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        // Example:\n        // 3.5f
    = 3 + 0.5f\n        // 3f = 3 + 0f\n        //float truncatedNumber = number -
    (int)number;\n        return number - (int)number;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        int integerPart = (int)number;\n
    \       return number - integerPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        if (number < 0) {\n            number
    = -number;\n        }\n        float decimalPart = number - (int)number;\n        return
    decimalPart;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number % 1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        float result = number - Math.Truncate(number);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp33f28yda.cs(16,24): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        float intPart = (float)Math.Truncate(number);\n
    \       return number - intPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number % 1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - Math.Truncate(number);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7hyug9y4.cs(16,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        float decimals = number -
    (int)number;\n        return decimals;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number % (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        var intPart = (int)number;\n
    \       return number - intPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        int intpart = (int)number;\n
    \       return number - intpart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - Math.Truncate(number);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7hyug9y4.cs(16,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number % (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number % (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number % 1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        float integer = (float)Math.Truncate(number);\n
    \       return number - integer;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977048
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number % 1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number % 1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        float intPart = (float)Math.Truncate(number);\n
    \       return number - intPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        var decimals = number - Math.Truncate(number);\n
    \       return decimals;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_0ad3fka.cs(17,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977048
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        int integerPart = (int)number;\n
    \       return number - integerPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number % 1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number % 1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number % 1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        float integerPart = (float)Math.Truncate(number);\n
    \       return number - integerPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        float integer_part = (float)Math.Truncate(number);\n
    \       return number - integer_part;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977048
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        int temp = (int)number;\n
    \       return number - temp;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977048
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        var integerPart = (int)number;\n
    \       return number - integerPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977048
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        // Get the integer part of
    the number\n        float truncated = Math.Truncate(number);\n        // Substract
    from the number the integer part to get the decimal part\n        return number
    - truncated;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8zspttzh.cs(17,27): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977048
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        // Cast the number to an
    integer, this will remove the decimals.\n        // Then cast it back to a float
    and subtract it from the original number.\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977048
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        int integerPart = (int)number;\n
    \       return number - integerPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number % (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        float integer = (float)Math.Truncate(number);\n
    \       return number - integer;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977048
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        // Convert to an integer,
    so that we remove the decimals.\n        int intPart = (int)number;\n        //
    Now we can compute the difference between\n        // the two numbers.\n        return
    number - intPart;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977048
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        // Round the number down,
    then subtract the integer part\n        float integerPart = Math.Floor(number);\n
    \       return number - integerPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6f0wc988.cs(17,29): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977048
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number % 1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - Math.Truncate(number);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7hyug9y4.cs(16,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        int integerPart = (int)number;\n
    \       return number - integerPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        float integerPart = (float)Math.Truncate(number);\n
    \       return number - integerPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number % 1.0f;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        var integerPart = (int)number;\n
    \       return number - integerPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977048
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        float int_part = (float)Math.Truncate(number);\n
    \       return number - int_part;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977048
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        var s = number.ToString(\"G\");\n
    \       var parts = s.Split('.');\n        if (parts.Length == 1) {\n            return
    0;\n        } else {\n            return float.Parse(\"0.\" + parts[1]);\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977048
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        var integer = (int)number;\n
    \       return number - integer;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977048
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number % 1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        // TODO: Implement\n        throw
    new NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <95520c7277d442a38785f31144d1fa0a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <95520c7277d442a38785f31144d1fa0a>:0 \n"
  stdout: ''
  timestamp: 1659977048
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number % 1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        float integer = (float)Math.Truncate(number);\n
    \       return number - integer;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977048
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        int i = (int)number;\n        float
    decimals = number - i;\n        return decimals;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977048
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number % (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        int integerPart = (int) number;\n
    \       return number - integerPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        var integerPart = (int)number;\n
    \       return number - integerPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977048
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        var floor = Math.Floor(number);\n
    \       return number - floor;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8mcvd4uu.cs(17,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977048
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public
    static float TruncateNumber(float number) {\n        return number - (int)number;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977047
