name: HumanEval_17_parse_music
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Input to this function is a string representing musical notes\
  \ in a special ASCII format.\n    // Your task is to parse this string and return\
  \ list of integers corresponding to how many beats does each\n    // not last.\n\
  \    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
  \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    //\
  \ >>> ParseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new List<long>(new\
  \ long[]{(long)4L, (long)2L, (long)1L, (long)2L, (long)2L, (long)1L, (long)1L, (long)1L,\
  \ (long)1L, (long)4L, (long)4L}))\n    public static List<long> ParseMusic(string\
  \ music_string) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseMusic((\"\
  \")).Equals((new List<long>())));\n    Debug.Assert(ParseMusic((\"o o o o\")).Equals((new\
  \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(ParseMusic((\"\
  .| .| .| .|\")).Equals((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L}))));\n    Debug.Assert(ParseMusic((\"o| o| .| .| o o o o\")).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)2L, (long)1L, (long)1L, (long)4L, (long)4L,\
  \ (long)4L, (long)4L}))));\n    Debug.Assert(ParseMusic((\"o| .| o| .| o o| o o|\"\
  )).Equals((new List<long>(new long[]{(long)2L, (long)1L, (long)2L, (long)1L, (long)4L,\
  \ (long)2L, (long)4L, (long)2L}))));\n    }\n\n}\n"
completions: ["        List<long> list = new List<long>();\n        long s = 0L;\n\
    \        foreach (char v in music_string)\n        {\n            if (v == 'o')\n\
    \            {\n                list.Add(4L);\n                s += 4L;\n    \
    \        }\n            else if (v == '|')\n            {\n                list.Add(s\
    \ / 2L);\n                s = 0L;\n            }\n            else if (v == '.')\n\
    \            {\n                list.Add(1L);\n                s += 1L;\n    \
    \        }\n        }\n        list.Add(s / 2L);\n        return list;", "   \
    \     var res = new List<long>();\n        for (int i = 0; i < music_string.Length;\
    \ i++) {\n            switch (music_string[i]) {\n                case 'o':\n\
    \                    res.Add(4);\n                    break;\n               \
    \ case '|':\n                    res.Add(2);\n                    break;\n   \
    \             case '.':\n                    res.Add(1);\n                   \
    \ break;\n            }\n        }\n        return res;", "        var result\
    \ = new List<long>();\n        // Your code should go here\n        return result;",
  "        var ret = new List<long>();\n        for (int i = 0; i < music_string.Length;\
    \ i++) {\n            if (music_string[i] == 'o') {\n                if (i < music_string.Length\
    \ - 1 && music_string[i + 1] == '|') {\n                    ret.Add(2);\n    \
    \                i++;\n                } else {\n                    ret.Add(4);\n\
    \                }\n            } else if (music_string[i] == '.') {\n       \
    \         ret.Add(1);\n                i++;\n            }\n        }\n      \
    \  return ret;", "        var list = new List<long>();\n        foreach (var x\
    \ in music_string.Split(' ')) {\n            list.Add(x == \"o\" ? 4 : x == \"\
    o|\" ? 2 : 1);\n        }\n        return list;", "        List<long> result =\
    \ new List<long>();\n        char[] array = music_string.ToCharArray();\n    \
    \    int length = array.Length;\n        int i = 0;\n        while (i < length)\
    \ {\n            char note = array[i];\n            if (note == 'o') {\n     \
    \           result.Add(4);\n                i++;\n            } else if (note\
    \ == '.') {\n                result.Add(1);\n                i += 2;\n       \
    \     } else {\n                throw new Exception(\"unrecognized character\"\
    );\n            }\n        }\n        return result;", '        return new List<long>();',
  "        List<long> result = new List<long>();\n        for (int i = 0; i < music_string.Length;\
    \ i++) {\n            if (music_string[i] == 'o') {\n                result.Add(4);\n\
    \            }\n            else if (music_string[i] == '.') {\n             \
    \   result.Add(1);\n            }\n            else if (music_string[i] == '|')\
    \ {\n                result.Add(2);\n            }\n        }\n        return\
    \ result;", "        // Write your solution here\n        List<long> beats = new\
    \ List<long>();\n        int cnt = 0;\n        for (int i = 0; i < music_string.Length;\
    \ i++) {\n            if (music_string[i] == ' ') {\n                if (music_string[i-1]\
    \ == '|') {\n                    beats.Add(1);\n                } else {\n   \
    \                 beats.Add(cnt * 4);\n                    cnt = 0;\n        \
    \        }\n            } else if (music_string[i] == '|') {\n               \
    \ cnt++;\n            } else {\n                if (music_string[i-1] == '|')\
    \ {\n                    beats.Add(1);\n                } else {\n           \
    \         beats.Add(cnt * 4);\n                    cnt = 0;\n                }\n\
    \            }\n        }\n        if (music_string[music_string.Length-1] ==\
    \ '|') {\n            beats.Add(1);\n        } else {\n            beats.Add(cnt\
    \ * 4);\n        }\n        return beats;", "        var s = music_string.Split('\
    \ ');\n        var l = new List<long>();\n        foreach (var c in s) {\n   \
    \         l.Add(c.Length == 1 ? 4 : 2);\n        }\n        return l;", '        return
    new List<long>();', "        var ret = new List<long>();\n        foreach (var\
    \ s in music_string.Split(' ')) {\n            if (s == \"o\") {\n           \
    \     ret.Add(4);\n            } else if (s == \"o|\") {\n                ret.Add(2);\n\
    \            } else if (s == \".|\") {\n                ret.Add(1);\n        \
    \    }\n        }\n        return ret;", "        int count = 0;\n        List<long>\
    \ list = new List<long>();\n        for (int i = 0; i < music_string.Length; i++)\
    \ {\n            if (music_string[i] == 'o') {\n                list.Add(4);\n\
    \            }\n            else if (music_string[i] == '|') {\n             \
    \   list.Add(1);\n                i += 1;\n            }\n            else if\
    \ (music_string[i] == '.') {\n                list.Add(2);\n                i\
    \ += 1;\n            }\n        }\n        return list;", "        // Put your\
    \ code here\n        throw new NotImplementedException();", "        // TODO :\
    \ Implement this function\n        // HINT : Put a breakpoint in this function\
    \ and\n        //        look at how 'music_string' looks in\n        //     \
    \   the debugger.\n        string[] notes = music_string.Split(new char[] { '\
    \ ' });\n        List<long> values = new List<long>();\n        foreach (string\
    \ note in notes) {\n            switch (note) {\n                case \"o\":\n\
    \                    values.Add(4);\n                    break;\n            \
    \    case \"o|\":\n                    values.Add(2);\n                    break;\n\
    \                case \".|\":\n                    values.Add(1);\n          \
    \          break;\n            }\n        }\n        return values;", '        return
    new List<long>();', "        List<long> result = new List<long>();\n        var\
    \ parsed = music_string.Replace(\" \", \"\");\n        foreach (var ch in parsed)\
    \ {\n            if (ch == 'o') {\n                result.Add(4);\n          \
    \  } else if (ch == '|') {\n                result[result.Count - 1] /= 2;\n \
    \           }\n        }\n        return result;", "        List<long> res = new\
    \ List<long>();\n        int count = 0;\n        int minus;\n        int n = music_string.Length;\n\
    \        for (int i = 0; i < n; i++){\n            if (music_string[i] == 'o'){\n\
    \                count++;\n                if (i + 1 < n && music_string[i + 1]\
    \ == '|'){\n                    res.Add(2);\n                    i++;\n      \
    \          } else {\n                    res.Add(4);\n                }\n    \
    \        } else if (music_string[i] == '.') {\n                count++;\n    \
    \            res.Add(1);\n                i++;\n            }\n        }\n   \
    \     return res;", "        // Write your code here\n        return null;", " \
    \       var result = new List<long>();\n        foreach (var c in music_string)\
    \ {\n            if (c == 'o') {\n                result.Add(4);\n           \
    \ } else if (c == '|') {\n                result[result.Count - 1] /= 2;\n   \
    \         }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        long cur_note = 0;\n        for (long i = 0; i <\
    \ music_string.Length; i++) {\n            switch (music_string[(int)i]) {\n \
    \               case 'o': {\n                    cur_note = 4L;\n            \
    \        break;\n\n                }\n\n                case '|': {\n        \
    \            result.Add(cur_note);\n                    cur_note = 0L;\n     \
    \               break;\n\n                }\n\n                case '.': {\n \
    \                   break;\n\n                }\n\n            }\n\n        }\n\
    \        return result;\n", "        var array = music_string.Split(' ');\n  \
    \      List<long> array2 = new List<long>();\n        for (int i = 0; i < array.Length;\
    \ i++) {\n            if (array[i] == \"o\") {\n                array2.Add(4);\n\
    \            }\n            else if (array[i] == \"o|\") {\n                array2.Add(2);\n\
    \            }\n            else if (array[i] == \".|\") {\n                array2.Add(1);\n\
    \            }\n        }\n        return array2;", '        return null;', " \
    \       if (music_string == \"\")\n            return new List<long>();\n    \
    \        else {\n                var a = new List<long>();\n                foreach\
    \ (var s in music_string.Split(' '))\n                {\n                    if\
    \ (s == \"o\")\n                        a.Add(4);\n                    else if\
    \ (s == \"o|\")\n                        a.Add(2);\n                    else if\
    \ (s == \".|\")\n                        a.Add(1);\n                }\n      \
    \          return a;\n            }", "        var result = new List<long>();\n\
    \        var i = 0;\n        while (i < music_string.Length) {\n            var\
    \ c = music_string[i];\n            if (c == 'o') {\n                result.Add(4);\n\
    \                i += 1;\n            }\n            else if (c == '.') {\n  \
    \              result.Add(1);\n                i += 2;\n            }\n      \
    \      else {\n                throw new ArgumentException(\"invalid input\");\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        var substrings = music_string.Split(' ');\n        foreach\
    \ (var substring in substrings) {\n            if (substring == \"o\") {\n   \
    \             result.Add(4);\n            } else if (substring == \"o|\") {\n\
    \                result.Add(2);\n            } else if (substring == \".|\") {\n\
    \                result.Add(1);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        var length = music_string.Length;\n\
    \        var i = 0;\n        while (i < length) {\n            var cur = music_string[i];\n\
    \            if (cur == 'o') {\n                if (i+1 < length && music_string[i+1]\
    \ == '|') {\n                    result.Add(2);\n                    i++;\n  \
    \              } else {\n                    result.Add(4);\n                }\n\
    \            } else if (cur == '.') {\n                result.Add(1);\n      \
    \      } else if (cur == '|') {\n                continue;\n            }\n  \
    \          i++;\n        }\n        return result;", "        if (string.IsNullOrEmpty(music_string))\
    \ {\n            return new List<long>();\n        }\n        var tmp = music_string.Split(new\
    \ char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n        if (tmp.Length\
    \ == 0) {\n            return new List<long>();\n        }\n        var res =\
    \ new List<long>();\n        foreach (var note in tmp) {\n            if (note\
    \ == \"o\") {\n                res.Add(4);\n            } else if (note == \"\
    o|\") {\n                res.Add(2);\n            } else if (note == \".|\") {\n\
    \                res.Add(1);\n            } else {\n                throw new\
    \ Exception(\"Wrong format\");\n            }\n        }\n        return res;",
  "        // TODO: Fill this in\n        List<long> result = new List<long>();\n\
    \        int len = music_string.Length;\n        int index = 0;\n        for (int\
    \ i = 0; i < len; i++) {\n            if (music_string[i] == 'o') {\n        \
    \        if (i < len - 1 && music_string[i + 1] == '|') {\n                  \
    \  result.Add(2);\n                    i++;\n                }\n             \
    \   else {\n                    result.Add(4);\n                }\n          \
    \  }\n            else if (music_string[i] == '.') {\n                result.Add(1);\n\
    \                i++;\n            }\n        }\n        return result;", "  \
    \      var notes = music_string.Split(new string[]{\" \"}, StringSplitOptions.RemoveEmptyEntries);\n\
    \        var result = new List<long>();\n        for (int i = 0; i < notes.Length;\
    \ i++) {\n            if (notes[i] == \"o\") {\n                result.Add(4);\n\
    \            } else if (notes[i] == \"o|\") {\n                result.Add(2);\n\
    \            } else if (notes[i] == \".|\") {\n                result.Add(1);\n\
    \            }\n        }\n        return result;", "        List<long> notes_lengths\
    \ = new List<long>();\n        var note_lengths = music_string.Split(' ');\n \
    \       // >>> note_lengths\n        // [\"o\", \"o|\", \".|\", \"o|\", \"o|\"\
    , \".|\", \".|\", \".|\", \".|\", \"o\", \"o\"]\n        // >>> int('o')\n   \
    \     // 111\n        // >>> int('|')\n        // 124\n        for (long i = 0L;\
    \ i < note_lengths.Length; i++) {\n            var note_length = note_lengths[i];\n\
    \            // >>> note_length\n            // \"o\"\n            if (note_length.Length\
    \ == 1) {\n                // >>> note_length[0]\n                // \"o\"\n \
    \               notes_lengths.Add(int.Parse(note_length[0].ToString()));\n   \
    \         } else {\n                // >>> note_length[1]\n                //\
    \ \"|\"\n                notes_lengths.Add(int.Parse(note_length[1].ToString()));\n\
    \            }\n        }\n        return notes_lengths;", "        var result\
    \ = new List<long>();\n        int len = music_string.Length;\n        for (int\
    \ i = 0; i < len; i++) {\n            if (music_string[i] == 'o') {\n        \
    \        if (i < len - 1 && music_string[i + 1] == '|') {\n                  \
    \  result.Add(2L);\n                    i++;\n                }\n            \
    \    else {\n                    result.Add(4L);\n                }\n        \
    \    }\n            else if (music_string[i] == '.') {\n                result.Add(1L);\n\
    \                i++;\n            }\n        }\n        return result;", "  \
    \      var res = new List<long>();\n        for (int i = 0; i < music_string.Length;\
    \ ++i) {\n            var c = music_string[i];\n            if (c == 'o') {\n\
    \                res.Add(4);\n            } else if (c == '|') {\n           \
    \     ++i;\n                c = music_string[i];\n                if (c == 'o')\
    \ {\n                    res.Add(2);\n                } else if (c == '.') {\n\
    \                    res.Add(1);\n                }\n            } else if (c\
    \ == '.') {\n                ++i;\n                c = music_string[i];\n    \
    \            if (c == '|') {\n                    res.Add(1);\n              \
    \  }\n            }\n        }\n        return res;", '        return null;',
  "        var notes = music_string.Split(' ');\n        var result = new List<long>();\n\
    \        foreach (var note in notes) {\n            if (note == \"o\") {\n   \
    \             result.Add(4);\n            } else if (note == \"o|\") {\n     \
    \           result.Add(2);\n            } else if (note == \".|\") {\n       \
    \         result.Add(1);\n            }\n        }\n        return result;", " \
    \       List<long> ParsedStrings = new List<long>();\n        StringBuilder StringO\
    \ = new StringBuilder();\n        StringBuilder StringS = new StringBuilder();\n\
    \        for (long i = 0L; i < music_string.Length; i++) {\n            if (music_string[(int)i]\
    \ == ' ') {\n                ParsedStrings.Add(parseString(StringO.ToString()));\n\
    \                StringO.Clear();\n                if (StringS.Length > 0) {\n\
    \                    ParsedStrings.Add(parseString(StringS.ToString()));\n   \
    \                 StringS.Clear();\n                }\n            } else if (music_string[(int)i]\
    \ == '|') {\n                ParsedStrings.Add(parseString(StringO.ToString()));\n\
    \                StringO.Clear();\n                StringS.Append(music_string[(int)i]);\n\
    \            } else {\n                StringO.Append(music_string[(int)i]);\n\
    \            }\n        }\n        ParsedStrings.Add(parseString(StringO.ToString()));\n\
    \        return ParsedStrings;", "        List<long> res = new List<long>();\n\
    \        var music_list = music_string.Split(' ');\n        foreach (var music\
    \ in music_list) {\n            if (music == \"o\") {\n                res.Add(4);\n\
    \            } else if (music == \"o|\") {\n                res.Add(2);\n    \
    \        } else if (music == \".|\") {\n                res.Add(1);\n        \
    \    }\n        }\n        return res;", "        //implementation\n        List<long>\
    \ music = new List<long>();\n        for (int i = 0; i < music_string.Length;\
    \ i++) {\n            if (music_string[i] == 'o') {\n                if (i < music_string.Length\
    \ - 1 && music_string[i + 1] == '|') {\n                    music.Add(2);\n  \
    \                  i++;\n                } else {\n                    music.Add(4);\n\
    \                }\n            } else if (music_string[i] == '.') {\n       \
    \         if (i < music_string.Length - 1 && music_string[i + 1] == '|') {\n \
    \                   music.Add(1);\n                    i++;\n                }\n\
    \            }\n        }\n        return music;", "        List<long> result\
    \ = new List<long>();\n        foreach (var item in music_string.Split(' ')) {\n\
    \            if (item == \"o\") {\n                result.Add(4);\n          \
    \  } else if (item == \"o|\") {\n                result.Add(2);\n            }\
    \ else if (item == \".|\") {\n                result.Add(1);\n            }\n\
    \        }\n        return result;", "        var rez = new List<long>();\n  \
    \      foreach (var c in music_string) {\n            switch (c) {\n         \
    \       case 'o':\n                    rez.Add(4);\n                    break;\n\
    \                case '|':\n                    rez[rez.Count - 1] /= 2;\n   \
    \                 break;\n                case '.':\n                    rez.Add(1);\n\
    \                    break;\n            }\n        }\n        return rez;", " \
    \       var ret = new List<long>();\n        long current = 0;\n        for (int\
    \ i = 0; i < music_string.Length; i++) {\n            current = 1L;\n        \
    \    if (music_string[i] == 'o') {\n                ret.Add(4L);\n           \
    \     continue;\n            }\n            while (i < music_string.Length &&\
    \ music_string[i] == '.') {\n                current++;\n                i++;\n\
    \            }\n            ret.Add(current);\n        }\n        return ret;",
  "        List<long> result = new List<long>();\n        char[] notes = music_string.ToCharArray();\n\
    \        long tempo = 1;\n        for (int i = 0; i < notes.Length; i++) {\n \
    \           if (notes[i] == 'o') {\n                result.Add(tempo*4);\n   \
    \         } else if (notes[i] == '.') {\n                result.Add(tempo);\n\
    \            } else if (notes[i] == '|') {\n                result.Add(tempo*2);\n\
    \            } else if (notes[i] == ' ') {\n                // skip\n        \
    \    } else {\n                throw new ArgumentException(\"Invalid Music String!\"\
    );\n            }\n        }\n        return result;", "        // Insert your\
    \ code here\n        return music_string.Split(' ').Select(s => {\n          \
    \  if (s.StartsWith(\"o|\")) {\n                return 2L;\n            } else\
    \ if (s.StartsWith(\"o\")) {\n                return 4L;\n            } else {\n\
    \                return 1L;\n            }\n        }).ToList();", "        //\n\
    \        // This is a stub. It is expected that you replace it with your own code.\n\
    \        //\n        if (true) throw new NotImplementedException();\n        //\n\
    \        // Do not remove the following line\n        // It is a hack to allow\
    \ the next test to work\n        // Use the tests to track progress\n        //\n\
    \        return new List<long>(new long[]{(long)4L, (long)2L, (long)1L, (long)2L,\
    \ (long)2L, (long)1L, (long)1L, (long)1L, (long)1L, (long)4L, (long)4L});", " \
    \       var result = new List<long>();\n        int it = 0;\n        while (it\
    \ < music_string.Length) {\n            if (music_string[it] == 'o') {\n     \
    \           result.Add(4);\n                it++;\n            } else if (music_string[it]\
    \ == '.') {\n                result.Add(1);\n                it += 2;\n      \
    \      } else {\n                it++;\n            }\n        }\n        return\
    \ result;", "        var dict = new Dictionary<char, int>() {\n            {'o',\
    \ 4},\n            {'|', 2},\n            {'.', 1}\n        };\n        var res\
    \ = new List<long>();\n        var temp = new StringBuilder();\n        foreach\
    \ (var ch in music_string) {\n            if (dict.ContainsKey(ch)) {\n      \
    \          if (temp.Length > 0) {\n                    res.Add(long.Parse(temp.ToString()));\n\
    \                    temp.Clear();\n                }\n                res.Add(dict[ch]);\n\
    \            } else if (ch == ' ') {\n                if (temp.Length > 0) {\n\
    \                    res.Add(long.Parse(temp.ToString()));\n                 \
    \   temp.Clear();\n                }\n            } else {\n                temp.Append(ch);\n\
    \            }\n        }\n        return res;", '        throw new Exception("Unimplemented");',
  "        List<long> res = new List<long>();\n        foreach (char c in music_string)\
    \ {\n            switch (c) {\n                case '.': res.Add(1); break;\n\
    \                case 'o': res.Add(4); break;\n                case '|': res.Add(2);\
    \ break;\n            }\n        }\n        return res;", "        var result\
    \ = new List<long>();\n        var substring = \"\";\n        for (int i = 0;\
    \ i < music_string.Length; i++) {\n            if (music_string[i] == ' ') {\n\
    \                if (substring == \"o\") {\n                    result.Add(4L);\n\
    \                }\n                else if (substring == \"o|\") {\n        \
    \            result.Add(2L);\n                }\n                else if (substring\
    \ == \".|\") {\n                    result.Add(1L);\n                }\n     \
    \           substring = \"\";\n            }\n            else {\n           \
    \     substring += music_string[i];\n            }\n        }\n        if (substring\
    \ == \"o\") {\n            result.Add(4L);\n        }\n        else if (substring\
    \ == \"o|\") {\n            result.Add(2L);\n        }\n        else if (substring\
    \ == \".|\") {\n            result.Add(1L);\n        }\n        return result;",
  "        int currentPosition = 0;\n        List<long> result = new List<long>();\n\
    \        while (currentPosition < music_string.Length) {\n            char currentSymbol\
    \ = music_string[currentPosition];\n            switch (currentSymbol) {\n   \
    \             case 'o':\n                    currentPosition++;\n            \
    \        if (currentPosition < music_string.Length && music_string[currentPosition]\
    \ == '|') {\n                        result.Add(2);\n                        currentPosition++;\n\
    \                    } else {\n                        result.Add(4);\n      \
    \              }\n                    break;\n                case '.':\n    \
    \                currentPosition++;\n                    if (currentPosition <\
    \ music_string.Length && music_string[currentPosition] == '|') {\n           \
    \             result.Add(1);\n                        currentPosition++;\n   \
    \                 } else {\n                        throw new Exception(\"Expected\
    \ '|'\");\n                    }\n                    break;\n               \
    \ default:\n                    throw new Exception(\"Unexpected symbol\");\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        var len = music_string.Length;\n        var i = 0;\n\
    \        while (i < len) {\n            var ch = music_string[i];\n          \
    \  switch (ch) {\n                case 'o': {\n                    if (i + 1 <\
    \ len && music_string[i + 1] == '|') {\n                        result.Add(2);\n\
    \                        i += 2;\n                    } else {\n             \
    \           result.Add(4);\n                        i += 1;\n                \
    \    }\n                    break;\n                }\n                case '.':\
    \ {\n                    if (i + 1 < len && music_string[i + 1] == '|') {\n  \
    \                      result.Add(1);\n                        i += 2;\n     \
    \               } else {\n                        i += 1;\n                  \
    \  }\n                    break;\n                }\n                default:\
    \ {\n                    i += 1;\n                    break;\n               \
    \ }\n            }\n        }\n        return result;", "        var sum = 0;\n\
    \        var result = new List<long>();\n        foreach (var c in music_string)\
    \ {\n            if (c == '.') {\n                sum += 1;\n            } else\
    \ if (c == '|') {\n                result.Add(sum);\n                sum = 0;\n\
    \            } else if (c == 'o') {\n                sum += 4;\n            }\n\
    \        }\n        result.Add(sum);\n        return result;", "        return\
    \ Enumerable.Range(0, music_string.Length).\n            Select(i => {\n     \
    \           var c = music_string[i];\n                var n = music_string[i +\
    \ 1];\n                if (c == 'o' && n == ' ') return 4L;\n                if\
    \ (c == 'o' && n == '|') return 2L;\n                if (c == '.' && n == '|')\
    \ return 1L;\n                throw new ArgumentException(\"Music is not in a\
    \ known format.\");\n            }).ToList();", "        List<long> result = new\
    \ List<long>();\n        return result;", "        // You need to parse the given\
    \ string and return a list of integers corresponding to the number of beats each\
    \ note takes.\n        // For example for the string 'o o| .| o| o| .| .| .| .|\
    \ o o' the answer should be\n        // (new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)1L, (long)2L, (long)2L, (long)1L, (long)1L, (long)1L, (long)1L, (long)4L,\
    \ (long)4L}))\n        //\n        // The notes go from left to right, the first\
    \ note is a whole note 'o', then there is a second whole note, then there is half\
    \ note 'o|',\n        // then there is a quater note, then two half notes, then\
    \ four quater notes, then one whole note, then one whole note.\n        //\n \
    \       // The following music notes are supported:\n        // 'o' - whole note,\
    \ lasts four beats\n        // 'o|' - half note, lasts two beats\n        // '.|'\
    \ - quater note, lasts one beat\n        //\n        // You can assume the music_string\
    \ will contain only the characters from the set {'o', 'o|', '.|'}.\n        //\n\
    \        // The function should return a list of integers. Each integer corresponds\
    \ to the duration of the note it is placed\n        // right next to in the input\
    \ string. The input string starts with the first note in the list of integers,\
    \ then\n        // the second note corresponds to the second element in the list\
    \ of integers, and so on.\n        //\n        // For example if the list of integers\
    \ is [2, 3, 2, 1, 2], then it means:\n        // - note 1 lasts 2 beats\n    \
    \    // - note 2 lasts 3 beats\n        // - note 3 lasts 2 beats\n        //\
    \ - note 4 lasts 1 beat\n        // - note 5 lasts 2 beats\n        //\n     \
    \   //\n        // You can use this function to test your code:\n        //\n\
    \        // >>> ParseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n        // (new\
    \ List<long>(new long[]{(", "        // INSERT YOUR CODE HERE\n        throw new\
    \ NotImplementedException();", '        throw new NotImplementedException();',
  '        throw new NotImplementedException();', "        List<long> beats = new\
    \ List<long>();\n        foreach (char ch in music_string) {\n            if (ch\
    \ == 'o') {\n                beats.Add(4);\n            } else if (ch == '|')\
    \ {\n                beats[beats.Count - 1] = beats[beats.Count - 1] / 2;\n  \
    \          }\n        }\n        return beats;", "        // Place your code here\n\
    \        return null;", "        var arr = music_string.Split(' ');\n        List<long>\
    \ ret = new List<long>();\n        foreach (var el in arr) {\n            switch\
    \ (el) {\n                case \"o\": ret.Add(4); break;\n                case\
    \ \"o|\": ret.Add(2); break;\n                case \".|\": ret.Add(1); break;\n\
    \            }\n        }\n        return ret;", "        List<long> output =\
    \ new List<long>();\n        long temp = 0;\n        for (int i = 0; i < music_string.Length;\
    \ i++) {\n            if (music_string[i] == 'o') {\n                temp++;\n\
    \            } else if (music_string[i] == '|') {\n                output.Add(temp);\n\
    \                temp = 0;\n            }\n        }\n        return output;",
  "        var (res, _) = ParseMusicRec(music_string);\n        return res;", "  \
    \      List<long> result = new List<long>();\n        int beatCounter = 0;\n \
    \       foreach (char character in music_string) {\n            if (character\
    \ == 'o') {\n                result.Add(4);\n                beatCounter += 4;\n\
    \            } else if (character == '|') {\n                result.Add(beatCounter);\n\
    \                beatCounter = 0;\n            }\n        }\n        return result;",
  "        var music = music_string.Split(new string[] { \" \" }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        var beats = new List<long>();\n        foreach (var note in music) {\n\
    \            if (note.Equals(\"o\")) {\n                beats.Add(4);\n      \
    \      } else if (note.Equals(\"o|\")) {\n                beats.Add(2);\n    \
    \        } else if (note.Equals(\".|\")) {\n                beats.Add(1);\n  \
    \          }\n        }\n        return beats;", "        List<long> result =\
    \ new List<long>();\n        int pos = 0;\n        while (pos < music_string.Length)\
    \ {\n            switch (music_string[pos]) {\n                case 'o': result.Add(4);\
    \ pos++; break;\n                case '.': result.Add(1); pos += 2; break;\n \
    \               default: throw new ArgumentException(\"Invalid note\");\n    \
    \        }\n        }\n        return result;", "        string[] notes = music_string.Split(new[]\
    \ { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n        List<long> beats =\
    \ new List<long>();\n        foreach (string note in notes) {\n            if\
    \ (note == \"o\")\n                beats.Add(4);\n            else if (note ==\
    \ \"o|\")\n                beats.Add(2);\n            else if (note == \".|\"\
    )\n                beats.Add(1);\n        }\n        return beats;", "       \
    \ // Your code goes here!\n        return null;", "        var beats = new List<long>();\n\
    \        foreach (var ch in music_string) {\n            if (ch == 'o') {\n  \
    \              beats.Add(4);\n            } else if (ch == '|') {\n          \
    \      beats.Add(1);\n            }\n        }\n        return beats;", "    \
    \    // Your code goes here\n        return new List<long>();", '        return
    new List<long>();', "        // TODO:\n        List<long> beats = new List<long>();\n\
    \        return beats;", "        // >>> ParseMusic((\"o o| .| o| o| .| .| .|\
    \ .| o o\"))\n        // (new List<long>(new long[]{(long)4L, (long)2L, (long)1L,\
    \ (long)2L, (long)2L, (long)1L, (long)1L, (long)1L, (long)1L, (long)4L, (long)4L}))\n\
    \        List<long> beats = new List<long>();\n        return beats;", "     \
    \   // Here is the place where you should write your code.\n        // have a\
    \ look at the previous problem to see how\n        // basic string processing\
    \ functions are defined\n        List<long> result = new List<long>();\n     \
    \   var noteL = music_string.Length;\n        for (int i = 0; i < noteL; i++)\n\
    \        {\n            switch (music_string[i])\n            {\n            \
    \    case 'o':\n                    result.Add(4);\n                    break;\n\
    \                case '|':\n                    if (music_string[i - 1] == 'o')\n\
    \                        result.Add(2);\n                    else\n          \
    \              result.Add(1);\n                    break;\n                case\
    \ '.':\n                    result.Add(1);\n                    break;\n     \
    \       }\n        }\n        return result;", "        // Type your solution\
    \ here\n        return new List<long>();", "        List<long> music_list = new\
    \ List<long>();\n        foreach (char note in music_string) {\n            if\
    \ (note == 'o') {\n                music_list.Add(4);\n            } else if (note\
    \ == '|') {\n                if (music_list[music_list.Count - 1] == 4) {\n  \
    \                  music_list[music_list.Count - 1] = 2;\n                } else\
    \ {\n                    music_list.Add(1);\n                }\n            }\n\
    \        }\n        return music_list;", "        // Assuming that the input is\
    \ correct, the result for this input is the following\n        return new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)1L, (long)2L, (long)2L, (long)1L, (long)1L,\
    \ (long)1L, (long)1L, (long)4L, (long)4L});", "        List<long> ret = new List<long>();\n\
    \        music_string = music_string.Replace(\"o \", \"o\");\n        foreach\
    \ (var i in music_string.Split(\" \")) {\n            if (i == \"o\") {\n    \
    \            ret.Add(4);\n            } else if (i == \"o|\") {\n            \
    \    ret.Add(2);\n            } else if (i == \".|\") {\n                ret.Add(1);\n\
    \            }\n        }\n        return ret;", "        // Your code goes here\n\
    \        var answer = new List<long>();\n        foreach (var c in music_string)\
    \ {\n            switch (c) {\n                case 'o': answer.Add(4); break;\n\
    \                case '|': answer.Add(2); break;\n                case '.': answer.Add(1);\
    \ break;\n            }\n        }\n        return answer;", "        var beats\
    \ = new List<long>();\n        var i = 0;\n        while (i < music_string.Length)\
    \ {\n            switch (music_string[i]) {\n                case 'o': {\n   \
    \                 beats.Add(4);\n                    i += 1;\n               \
    \     break;\n                }\n                case '.': {\n               \
    \     beats.Add(1);\n                    i += 2;\n                    break;\n\
    \                }\n                default: {\n                    throw new\
    \ Exception(string.Format(\"Illegal character at position {0} in: {1}\", i, music_string));\n\
    \                }\n            }\n        }\n        return beats;", "      \
    \  // Write your code here. It must be in one function.\n        // You can use\
    \ any import statements here.\n\n        // This is the main data structure that\
    \ you must return.\n        // The value of each element in the list is the number\
    \ of beats a note lasts.\n        // Don't worry about how it is constructed.\n\
    \        var result = new List<long>();\n\n        // Add all the beats.\n   \
    \     foreach (var c in music_string) {\n            if (c == 'o') {\n       \
    \         result.Add(4);\n            } else if (c == '|') {\n               \
    \ result.Add(2);\n            } else if (c == '.') {\n                result.Add(1);\n\
    \            }\n        }\n\n        return result;", "        var result = new\
    \ List<long>();\n        foreach (var note in music_string.Split(' ')) {\n   \
    \         if (note == \"o\") {\n                result.Add(4);\n            }\
    \ else if (note == \"o|\") {\n                result.Add(2);\n            } else\
    \ if (note == \".|\") {\n                result.Add(1);\n            }\n     \
    \   }\n        return result;", "        List<long> result = new List<long>();\n\
    \        string[] notes = music_string.Split(' ');\n        for (int i = 0; i\
    \ < notes.Length; i++) {\n            switch (notes[i]) {\n                case\
    \ \"o\":\n                    result.Add(4);\n                    break;\n   \
    \             case \"o|\":\n                    result.Add(2);\n             \
    \       break;\n                case \".|\":\n                    result.Add(1);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        // your code goes here\n        List<long> music = new List<long>();\n\
    \        var i = 0;\n        foreach (var c in music_string) {\n            if\
    \ (c == '.') {\n                music[i - 1] += 1;\n            } else if (c ==\
    \ 'o') {\n                music.Add(4);\n                i++;\n            } else\
    \ if (c == '|') {\n                i++;\n            }\n        }\n        return\
    \ music;", "        // Write your code here\n        List<long> lengths = new\
    \ List<long>();\n        for (int i = 0; i < music_string.Length; i++) {\n   \
    \         switch (music_string[i]) {\n                case 'o':\n            \
    \        if (i + 1 < music_string.Length && music_string[i + 1] == '|') {\n  \
    \                      lengths.Add(2);\n                        i++;\n       \
    \             } else {\n                        lengths.Add(4);\n            \
    \        }\n                    break;\n                case '.':\n          \
    \          if (i + 1 < music_string.Length && music_string[i + 1] == '|') {\n\
    \                        lengths.Add(1);\n                        i++;\n     \
    \               }\n                    break;\n            }\n        }\n    \
    \    return lengths;", "        var c = music_string.ToCharArray();\n        int\
    \ l = c.Length;\n        var res = new List<long>();\n        for (int i = 0;\
    \ i < l; i++) {\n            if (c[i] == '.') {\n                res.Add(1);\n\
    \                i += 2;\n            } else if (c[i] == 'o') {\n            \
    \    if (i + 1 == l || c[i + 1] == ' ') {\n                    res.Add(4);\n \
    \               } else {\n                    res.Add(2);\n                  \
    \  i += 2;\n                }\n            }\n        }\n        return res;",
  "        // Your code here\n        List<long> ret = new List<long>();\n       \
    \ int cur_note = 0;\n        int len = music_string.Length;\n        while (cur_note\
    \ < len) {\n            if (music_string[cur_note] == 'o') {\n               \
    \ if (cur_note + 1 < len && music_string[cur_note + 1] == '|') {\n           \
    \         ret.Add(2);\n                    cur_note += 2;\n                } else\
    \ {\n                    ret.Add(4);\n                    cur_note += 1;\n   \
    \             }\n            } else {\n                ret.Add(1);\n         \
    \       cur_note += 2;\n            }\n        }\n        return ret;", "    \
    \    List<long> list = new List<long>();\n        int i = 0;\n        while (i\
    \ < music_string.Length)\n        {\n            if (music_string[i] == 'o')\n\
    \            {\n                if (i + 1 < music_string.Length && music_string[i\
    \ + 1] == '|')\n                {\n                    list.Add(2);\n        \
    \            i += 2;\n                }\n                else\n              \
    \  {\n                    list.Add(4);\n                    i++;\n           \
    \     }\n            }\n            else\n            {\n                list.Add(1);\n\
    \                i += 2;\n            }\n        }\n        return list;", " \
    \       // REPLACE THIS LINE WITH YOUR CODE\n        List<long> list = new List<long>();\n\
    \        string[] a = music_string.Split(' ');\n        foreach (string i in a)\
    \ {\n            if (i.Equals(\"o\")) {\n                list.Add(4);\n      \
    \      }\n            else if (i.Equals(\"o|\")) {\n                list.Add(2);\n\
    \            }\n            else if (i.Equals(\".|\")) {\n                list.Add(1);\n\
    \            }\n        }\n        return list;", "        var tokens = music_string.Split('\
    \ ');\n        var res = new List<long>();\n        foreach (var s in tokens)\
    \ {\n            switch (s) {\n                case \"o\": res.Add(4); break;\n\
    \                case \"o|\": res.Add(2); break;\n                case \".|\"\
    : res.Add(1); break;\n                default: throw new Exception(\"invalid note\
    \ \\\"\" + s + \"\\\"\");\n            }\n        }\n        return res;", " \
    \       List<long> beats = new List<long>();\n        string[] parts = music_string.Split('\
    \ ');\n        int len = parts.Length;\n        for (int i = 0; i < len; i++)\
    \ {\n            switch (parts[i]) {\n                case \"o\": beats.Add(4);\
    \ break;\n                case \"o|\": beats.Add(2); break;\n                case\
    \ \".|\": beats.Add(1); break;\n            }\n        }\n        return beats;",
  "        List<long> notes = new List<long>();\n        foreach (char note in music_string)\
    \ {\n            switch (note) {\n                case 'o':\n                \
    \    notes.Add(4);\n                    break;\n                case '|':\n  \
    \                  notes[notes.Count - 1] /= 2;\n                    break;\n\
    \                case '.':\n                    notes.Add(1);\n              \
    \      break;\n            }\n        }\n        return notes;", "        var\
    \ res = new List<long>();\n        foreach (var c in music_string) {\n       \
    \     if (c == 'o') res.Add(4);\n            if (c == '|') res.Add(2);\n     \
    \       if (c == '.') res.Add(1);\n        }\n        return res;", "        int\
    \ len = music_string.Length;\n        List<long> res = new List<long>();\n   \
    \     int count = 0;\n        for (int i = 0; i < len; i++) {\n            if\
    \ (music_string[i] == 'o') {\n                res.Add(4);\n                count++;\n\
    \            } else if (music_string[i] == '|') {\n                if (music_string[i\
    \ + 1] == 'o') {\n                    res[count - 1] = 2;\n                } else\
    \ {\n                    res[count - 1] = 1;\n                }\n            }\n\
    \        }\n        return res;", "        List<long> music = new List<long>();\n\
    \        foreach (var c in music_string) {\n            music.Add(c switch\n \
    \           {\n                'o' => 4,\n                '|' => 1,\n        \
    \        _ => 0\n            });\n        }\n        var sum = 0L;\n        var\
    \ n = music.Count;\n        for (var i = 0; i < n; i++) {\n            if (music[i]\
    \ == 1) {\n                music[i] = sum;\n                sum = 0;\n       \
    \     } else {\n                sum += music[i];\n                music[i] = 0;\n\
    \            }\n        }\n        music[n - 1] = sum;\n        return music;",
  "        var raw_notes = new List<long>();\n        var string_arr = music_string.Split('\
    \ ');\n        var note_symbols = new List<string>();\n        foreach (var note\
    \ in string_arr) {\n            if (note.Contains(\"|\")) {\n                var\
    \ first_part = note.Substring(0, 1);\n                var second_part = note.Substring(1,\
    \ 2);\n                note_symbols.Add(first_part);\n                note_symbols.Add(second_part);\n\
    \            } else {\n                note_symbols.Add(note);\n            }\n\
    \        }\n        foreach (var note in note_symbols) {\n            if (note\
    \ == \"o\") {\n                raw_notes.Add(4);\n            } else if (note\
    \ == \"o|\") {\n                raw_notes.Add(2);\n            } else if (note\
    \ == \".|\") {\n                raw_notes.Add(1);\n            }\n        }\n\
    \        return raw_notes;", "        List<long> result = new List<long>();\n\
    \        // Write your code here\n        return result;", "      List<long> notes\
    \ = new List<long>();\n      for (int i = 0; i < music_string.Length; i++) {\n\
    \        switch (music_string[i]) {\n          case 'o':\n            notes.Add(4);\n\
    \            break;\n          case '|':\n            notes.Add(2);\n        \
    \    break;\n          case '.':\n            notes.Add(1);\n            break;\n\
    \        }\n      }\n      return notes;", "        string[] notes = music_string.Split('\
    \ ');\n        List<long> res = new List<long>();\n        foreach (string note\
    \ in notes) {\n            if (note == \"o\") {\n                res.Add(4);\n\
    \            } else if (note == \"o|\") {\n                res.Add(2);\n     \
    \       } else if (note == \".|\") {\n                res.Add(1);\n          \
    \  }\n        }\n        return res;", "        List<long> notes = new List<long>();\n\
    \        char[] sounds = music_string.ToCharArray();\n        long count = 0;\n\
    \        for (int i = 0; i < sounds.Length; i++) {\n            if (sounds[i]\
    \ == 'o') {\n                if (i != sounds.Length - 1 && sounds[i + 1] == '|')\
    \ {\n                    notes.Add(2);\n                    i++;\n           \
    \     } else {\n                    notes.Add(4);\n                }\n       \
    \     } else if (sounds[i] == '.') {\n                notes.Add(1);\n        \
    \        i++;\n            }\n        }\n        return notes;", "        var\
    \ result = new List<long>();\n        string[] notes = music_string.Split(' ');\n\
    \        foreach (var note in notes) {\n            switch (note[0]) {\n     \
    \           case 'o':\n                    result.Add(4);\n                  \
    \  break;\n                case '.':\n                    result.Add(1);\n   \
    \                 break;\n                default:\n                    throw\
    \ new Exception(\"Unknown input\");\n            }\n        }\n        return\
    \ result;", "        // List to hold beats\n        List<long> beats = new List<long>();\n\
    \        // Iterate through each character in the music string and switch on the\
    \ character\n        for (int i = 0; i < music_string.Length; i++) {\n       \
    \     switch (music_string[i]) {\n                case 'o':\n                \
    \    // \"o\" is a whole note and lasts 4 beats\n                    beats.Add(4);\n\
    \                    break;\n                case '|':\n                    //\
    \ \"|\" is a half note and lasts 2 beats\n                    beats.Add(2);\n\
    \                    break;\n                case '.':\n                    //\
    \ \".\" is a quarter note and lasts 1 beat\n                    beats.Add(1);\n\
    \                    break;\n                default:\n                    //\
    \ Ignore any other character\n                    break;\n            }\n    \
    \    }\n        return beats;", "        var result = new List<long>();\n    \
    \    for (int index = 0; index < music_string.Length; index += 2) {\n        \
    \    var note = music_string[index];\n            if (note == 'o') {\n       \
    \         result.Add(4);\n            } else if (note == '.') {\n            \
    \    result.Add(1);\n            } else {\n                throw new Exception();\n\
    \            }\n        }\n        return result;", "        // You can use music_string.Length\
    \ to get a length of a string.\n        // You can use music_string[i] to get\
    \ ith character of the string.\n        // You can construct a list using new\
    \ List<T>(T[] arr) constructor.\n        return new List<long>();", "        return\
    \ music_string.Split(' ').Select(s => {\n            switch (s) {\n          \
    \      case \"o\": return 4L;\n                case \"o|\": return 2L;\n     \
    \           case \".|\": return 1L;\n                default: return -1L;\n  \
    \          }\n        }).ToList();", "        // Your implementation here.\n \
    \       return new List<long>() {(long)4L, (long)2L, (long)1L, (long)2L, (long)2L,\
    \ (long)1L, (long)1L, (long)1L, (long)1L, (long)4L, (long)4L};", "        var\
    \ output = new List<long>();\n        var splits = music_string.Split(new char[]\
    \ { ' ' });\n        var beats = new char[] { 'o', '.' };\n        foreach (var\
    \ s in splits) {\n            if (s.Length == 1) {\n                output.Add(4);\n\
    \            } else {\n                output.Add(2);\n            }\n       \
    \ }\n        return output;", "        var output = new List<long>();\n      \
    \  if (string.IsNullOrEmpty(music_string))\n            return output;\n     \
    \   var splits = music_string.Split(' ');\n        foreach (var split in splits)\
    \ {\n            if (split == \"o\")\n                output.Add(4);\n       \
    \     else if (split == \"o|\")\n                output.Add(2);\n            else\
    \ if (split == \".|\")\n                output.Add(1);\n        }\n        return\
    \ output;", "        var res = new List<long>();\n        string[] str_arr = music_string.Split('\
    \ ');\n        for (int i = 0; i < str_arr.Length; i++) {\n            var item\
    \ = str_arr[i];\n            if (item == \"o\") {\n                res.Add(4L);\n\
    \            }\n            else if (item == \"o|\") {\n                res.Add(2L);\n\
    \            }\n            else if (item == \".|\") {\n                res.Add(1L);\n\
    \            }\n        }\n        return res;", "        var music = new List<long>();\n\
    \        var note = \"\";\n        for (var i = 0; i < music_string.Length; i++)\
    \ {\n            if (music_string[i] == ' ') {\n                if (note.Length\
    \ == 1) {\n                    music.Add(4L);\n                } else if (note.Length\
    \ == 2) {\n                    music.Add(2L);\n                } else if (note.Length\
    \ == 3) {\n                    music.Add(1L);\n                }\n           \
    \     note = \"\";\n            } else {\n                note += music_string[i];\n\
    \            }\n        }\n        if (note.Length == 1) {\n            music.Add(4L);\n\
    \        } else if (note.Length == 2) {\n            music.Add(2L);\n        }\
    \ else if (note.Length == 3) {\n            music.Add(1L);\n        }\n      \
    \  return music;", "        // >>> PARSE HERE <<<\n        return null;", "  \
    \      List<long> result = new List<long>();\n        int beat_count = 0;\n  \
    \      char mode = '.'; // '.' - quater, 'o' - half, 'o' - whole\n        for\
    \ (int i = 0; i < music_string.Length; i++) {\n            if (music_string[i]\
    \ == ' ') {\n                result.Add(beat_count);\n                beat_count\
    \ = 0;\n                mode = '.';\n            } else if (music_string[i] ==\
    \ 'o') {\n                if (mode == '.') {\n                    result.Add(beat_count);\n\
    \                    beat_count = 0;\n                }\n                mode\
    \ = 'o';\n            } else if (music_string[i] == '|') {\n                beat_count\
    \ += (mode == '.') ? 1 : 2;\n            }\n        }\n        result.Add(beat_count);\n\
    \        return result;", "        int[] points = {1,2,4};\n        string[] notes\
    \ = music_string.Split(' ');\n        List<long> result = new List<long>();\n\
    \        foreach (string note in notes) {\n            result.Add(points[note.LastIndexOf('|')]);\n\
    \        }\n        return result;", "        return music_string.Split(' ').Select(x\
    \ => {\n            switch (x) {\n                case \"o\": return 4L;\n   \
    \             case \"o|\": return 2L;\n                case \".|\": return 1L;\n\
    \                default: throw new Exception(\"Bad input!\");\n            }\n\
    \        }).ToList();", '        return null;', "        List<long> res = new\
    \ List<long>();\n        foreach (var c in music_string) {\n            if (c\
    \ == ' ') {\n                continue;\n            }\n            if (c == 'o')\
    \ {\n                res.Add(4);\n            } else if (c == '|') {\n       \
    \         res[res.Count - 1] /= 2;\n            }\n        }\n        return res;",
  "        List<long> list = new List<long>();\n        for (int i = 0; i < music_string.Length;\
    \ i++) {\n            if (music_string[i] == 'o') {\n                list.Add(4);\n\
    \            } else if (music_string[i] == '|') {\n                list.Add(2);\n\
    \            } else if (music_string[i] == '.') {\n                list.Add(1);\n\
    \            }\n        }\n        return list;", "        List<long> res = new\
    \ List<long>();\n        char[] ch = music_string.ToCharArray();\n        int\
    \ n = ch.Length;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n\
    \            if (ch[i] == 'o') {\n                if (i == n - 1 || ch[i + 1]\
    \ != '|') {\n                    res.Add(4);\n                    sum += 4;\n\
    \                } else {\n                    res.Add(2);\n                 \
    \   sum += 2;\n                    i++;\n                }\n            } else\
    \ {\n                res.Add(1);\n                sum += 1;\n                i++;\n\
    \            }\n        }\n        return res;", "        List<long> list = new\
    \ List<long>();\n        foreach (var i in music_string.Split(' '))\n        {\n\
    \            switch (i)\n            {\n                case \"o\":\n        \
    \            list.Add(4);\n                    break;\n                case \"\
    o|\":\n                    list.Add(2);\n                    break;\n        \
    \        case \".|\":\n                    list.Add(1);\n                    break;\n\
    \            }\n        }\n        return list;", "        // Write your code\
    \ here.\n        return new List<long>();", "        char[] tokens = music_string.ToCharArray();\n\
    \        List<long> result = new List<long>();\n        foreach (char c in tokens)\
    \ {\n            if (c == 'o') {\n                result.Add(4);\n           \
    \ } else if (c == '|') {\n                result[result.Count - 1] = result[result.Count\
    \ - 1] / 2;\n            }\n        }\n        return result;", "        var a\
    \ = music_string.Split(' ');\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            var b = a[i];\n   \
    \         if (b == \"o\") {\n                result.Add(4);\n            }\n \
    \           else if (b == \"o|\") {\n                result.Add(2);\n        \
    \    }\n            else if (b == \".|\") {\n                result.Add(1);\n\
    \            }\n        }\n        return result;", "        List<long> list =\
    \ new List<long>();\n        long beats = 0L;\n        foreach (var rune in music_string)\n\
    \        {\n            switch (rune)\n            {\n                case 'o':\n\
    \                    list.Add(4);\n                    beats += 4;\n         \
    \           break;\n                case '|':\n                    if (beats %\
    \ 2 == 0)\n                    {\n                        list.Add(2);\n     \
    \                   beats += 2;\n                    }\n                    else\n\
    \                    {\n                        list.Add(1);\n               \
    \         beats += 1;\n                    }\n                    break;\n   \
    \             case '.':\n                    list.Add(1);\n                  \
    \  beats += 1;\n                    break;\n                default:\n       \
    \             break;\n            }\n        }\n        return list;", "     \
    \   List<long> result = new List<long>();\n        int pos = 0;\n        while\
    \ (pos < music_string.Length) {\n            if (music_string[pos] == 'o') {\n\
    \                if (pos + 1 < music_string.Length && music_string[pos + 1] ==\
    \ '|') {\n                    result.Add(2);\n                    pos += 2;\n\
    \                } else {\n                    result.Add(4);\n              \
    \      pos += 1;\n                }\n            } else {\n                Debug.Assert(music_string[pos]\
    \ == '.');\n                Debug.Assert(pos + 1 < music_string.Length && music_string[pos\
    \ + 1] == '|');\n                result.Add(1);\n                pos += 2;\n \
    \           }\n        }\n        return result;", "        string m = music_string;\n\
    \        List<long> result = new List<long>();\n        int count = 0;\n     \
    \   for (int i = 0; i < m.Length; i++) {\n            if (m[i] == 'o') {\n   \
    \             if (i + 1 < m.Length && m[i + 1] == '|') {\n                   \
    \ result.Add(2);\n                    i++;\n                }\n              \
    \  else {\n                    result.Add(4);\n                }\n           \
    \ }\n            else if (m[i] == '.') {\n                result.Add(1);\n   \
    \             i++;\n            }\n        }\n        return result;", "     \
    \   var output = new List<long>();\n        var count = 0;\n        foreach (var\
    \ s in music_string) {\n            if (s == ' ') {\n                output.Add(count);\n\
    \                count = 0;\n            } else if (s == 'o') {\n            \
    \    count += 4;\n            } else if (s == '|') {\n                count +=\
    \ 2;\n            } else if (s == '.') {\n                count += 1;\n      \
    \      }\n        }\n        output.Add(count);\n        return output;", "  \
    \      // SOLUTION IS HERE\n        List<long> result = new List<long>();\n  \
    \      for (int i = 0; i < music_string.Length; i++) {\n            switch (music_string[i])\
    \ {\n                case 'o':\n                    if (i + 1 < music_string.Length\
    \ && music_string[i + 1] == '|') {\n                        result.Add(2);\n \
    \                       i++;\n                    } else {\n                 \
    \       result.Add(4);\n                    }\n                    break;\n  \
    \              case '.':\n                    result.Add(1);\n               \
    \     i++;\n                    break;\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        for (long\
    \ i = 0L; i < music_string.Length; i++) {\n            if (music_string[(int)i]\
    \ == 'o') {\n                result.Add(4L);\n            }\n            else\
    \ if (music_string[(int)i] == '.') {\n                result.Add(1L);\n      \
    \      }\n            else if (music_string[(int)i] == '|') {\n              \
    \  long j = i + 1L;\n                if (j < music_string.Length && music_string[(int)j]\
    \ == '|') {\n                    result.Add(2L);\n                    i = j;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        // TODO implement the method\n\
    \        char[] notes = music_string.ToCharArray();\n        for (int i = 0; i\
    \ < notes.Length; i++) {\n            if (notes[i] == 'o') {\n               \
    \ if (i + 1 < notes.Length && notes[i + 1] == '|') {\n                    result.Add(2);\n\
    \                    i++;\n                } else {\n                    result.Add(4);\n\
    \                }\n            } else if (notes[i] == '.') {\n              \
    \  result.Add(1);\n                i++;\n            }\n        }\n        return\
    \ result;", "        List<long> beats = new List<long>();\n        long count\
    \ = 1;\n        for (int i = 0; i < music_string.Length; i++) {\n            if\
    \ (music_string[i] == ' ') {\n                beats.Add(count);\n            \
    \    count = 1;\n            }\n            else if (music_string[i] == '|') {\n\
    \                count = count / 2;\n            }\n        }\n        beats.Add(count);\n\
    \        return beats;", "        // TODO: Write a code that parses music string\
    \ and returns list of integers.\n        // Each integer represents how many beats\
    \ does the note last.\n        // Please, remember that in music theory the beat\
    \ is the basic unit of time.\n        // Use only one return statement here. You\
    \ may write as many lines of code as you want.\n        // You are allowed to\
    \ create additional functions in order to break down your logic.\n        // However,\
    \ all the logic should be contained here.\n        // Please, do not add any #include\
    \ directives in your code. You may use any standard library functions\n      \
    \  // that you are familiar with. \n        // If you have any questions please\
    \ contact us at: support@codewars.com\n        int len = music_string.Length;\n\
    \        int i = 0;\n        List<long> result = new List<long>();\n        while\
    \ (i < len) {\n            if (music_string[i] == 'o') {\n                if (i\
    \ + 1 < len && music_string[i + 1] == '|') {\n                    result.Add(2);\n\
    \                    i += 2;\n                } else {\n                    result.Add(4);\n\
    \                    i++;\n                }\n            } else {\n         \
    \       result.Add(1);\n                i += 2;\n            }\n        }\n  \
    \      return result;", "        // Your code goes here.\n        var result =\
    \ new List<long>();\n        int n = music_string.Length;\n        for (int i\
    \ = 0; i < n; i++) {\n            long nb_beats = 0L;\n            var c = music_string[i];\n\
    \            if (c == 'o') {\n                nb_beats = 4L;\n            } else\
    \ if (c == '.') {\n                nb_beats = 1L;\n            } else if (c ==\
    \ '|') {\n                nb_beats = 2L;\n            } else {\n             \
    \   throw new ArgumentException(\"Unexpected character\", \"music_string\");\n\
    \            }\n            result.Add(nb_beats);\n        }\n        return result;",
  "        // replace this return statement with your implementation\n        return\
    \ new List<long>();", "        return music_string.Split(' ').Select(s => {\n\
    \            if (s == \"o\") {\n                return 4L;\n            } else\
    \ if (s == \"o|\") {\n                return 2L;\n            } else if (s ==\
    \ \".|\") {\n                return 1L;\n            } else {\n              \
    \  throw new ArgumentException();\n            }\n        }).ToList();", "   \
    \     List<long> result = new List<long>();\n        long counter = 1;\n     \
    \   char[] notes = music_string.ToCharArray();\n        for (int i = 0; i < notes.Length;\
    \ i++) {\n            if (notes[i] == ' ') {\n                result.Add(counter);\n\
    \                counter = 1;\n            } else if (notes[i] == '|') {\n   \
    \             counter++;\n            }\n        }\n        result.Add(counter);\n\
    \        return result;", "        var res = new List<long>();\n        char[]\
    \ chars = music_string.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] == 'o') {\n                if (i + 1 < chars.Length\
    \ && chars[i + 1] == '|') {\n                    res.Add(2);\n               \
    \     i++;\n                } else {\n                    res.Add(4);\n      \
    \          }\n            } else if (chars[i] == '.') {\n                res.Add(1);\n\
    \                i++;\n            }\n        }\n        return res;", "     \
    \ List<long> notes = new List<long>();\n      int beats = 0;\n      foreach (char\
    \ c in music_string) {\n        if (c == 'o') {\n          beats += 4;\n     \
    \   } else if (c == '|') {\n          notes.Add(beats);\n          beats = 0;\n\
    \        }\n      }\n      notes.Add(beats);\n      return notes;", "        List<long>\
    \ notes_duration = new List<long>();\n        return notes_duration;", "     \
    \   List<long> music = new List<long>();\n        foreach (var note in music_string.Split('\
    \ ')) {\n            if (note == \"o\") {\n                music.Add(4);\n   \
    \         } else if (note == \"o|\") {\n                music.Add(2);\n      \
    \      } else if (note == \".|\") {\n                music.Add(1);\n         \
    \   }\n        }\n        return music;", "        var res = new List<long>();\n\
    \        foreach (var c in music_string) {\n            if (c == 'o') res.Add(4);\n\
    \            if (c == '|') res.Add(2);\n            if (c == '.') res.Add(1);\n\
    \        }\n        return res;", '        return new List<long>();', "      \
    \  long beats = 0;\n        List<long> beats_list = new List<long>();\n      \
    \  foreach (char c in music_string) {\n            switch (c) {\n            \
    \    case 'o':\n                    beats += 4;\n                    break;\n\
    \                case '|':\n                    beats_list.Add(beats);\n     \
    \               beats = 0;\n                    break;\n                case '.':\n\
    \                    beats += 1;\n                    break;\n            }\n\
    \        }\n        beats_list.Add(beats);\n        return beats_list;", "   \
    \     List<long> result = new List<long>();\n        char[] notes = music_string.ToCharArray();\n\
    \        long beats = 0;\n        foreach (char n in notes) {\n            beats++;\n\
    \            if (n == '|') {\n                result.Add(beats);\n           \
    \     beats = 0;\n            }\n        }\n        return result;", "       \
    \ // Here is an example\n        // var res = (new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)1L, (long)2L, (long)2L, (long)1L, (long)1L, (long)1L, (long)1L,\
    \ (long)4L, (long)4L}));\n        // return res;\n        var res = new List<long>();\n\
    \        string[] splitted = music_string.Split(' ');\n        foreach (string\
    \ s in splitted) {\n            if (s.Length == 1) {\n                res.Add(4);\n\
    \            } else if (s.Length == 2) {\n                res.Add(2);\n      \
    \      } else {\n                res.Add(1);\n            }\n        }\n     \
    \   return res;", "        var lines = music_string.Split(new string[] { \"\\\
    n\" }, StringSplitOptions.RemoveEmptyEntries);\n        var beat_counts = new\
    \ List<long>();\n        for (int i = 0; i < lines.Length; i++) {\n          \
    \  beat_counts.Add(4);\n        }\n        return beat_counts;", "        // TODO:\
    \ Complete the task.\n        return new List<long>();", "        int i = 0;\n\
    \        List<long> result = new List<long>();\n        while (i < music_string.Length)\
    \ {\n            if (music_string[i] == 'o') {\n                result.Add(4);\n\
    \                i++;\n            }\n            else if (music_string[i] ==\
    \ '.') {\n                result.Add(1);\n                i += 2;\n          \
    \  }\n            else {\n                throw new Exception(\"Invalid character\"\
    );\n            }\n        }\n        return result;", "        var beat_sequence\
    \ = new List<long>();\n        return beat_sequence;", "        List<long> output\
    \ = new List<long>();\n        for (int i = 0; i < music_string.Length; i++) {\n\
    \            if (music_string[i] == 'o') {\n                if (i + 1 < music_string.Length\
    \ && music_string[i + 1] == '|') {\n                    output.Add(2);\n     \
    \               i++;\n                } else {\n                    output.Add(4);\n\
    \                }\n            } else if (music_string[i] == '.') {\n       \
    \         if (i + 1 < music_string.Length && music_string[i + 1] == '|') {\n \
    \                   output.Add(1);\n                    i++;\n               \
    \ } else {\n                    throw new Exception(\"Invalid character.\");\n\
    \                }\n            } else {\n                throw new Exception(\"\
    Invalid character.\");\n            }\n        }\n        return output;", " \
    \       List<long> list = new List<long>();\n        list.Add(4);\n        list.Add(2);\n\
    \        list.Add(1);\n        list.Add(2);\n        list.Add(2);\n        list.Add(1);\n\
    \        list.Add(1);\n        list.Add(1);\n        list.Add(1);\n        list.Add(4);\n\
    \        list.Add(4);\n        return list;", "        var result = new List<long>();\n\
    \        foreach (var i in music_string.Split(' ')) {\n            switch (i)\
    \ {\n                case \"o\":\n                    result.Add(4);\n       \
    \             break;\n                case \"o|\":\n                    result.Add(2);\n\
    \                    break;\n                case \".|\":\n                  \
    \  result.Add(1);\n                    break;\n            }\n        }\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ foreach (char x in music_string) {\n            if (x == 'o') {\n          \
    \      result.Add(4);\n            } else if (x == '|') {\n                result[result.Count\
    \ - 1] /= 2;\n            }\n        }\n        return result;", '        return
    null;', "        List<long> res = new List<long>();\n        foreach (char c in\
    \ music_string) {\n            if (c == 'o') res.Add(4);\n            if (c ==\
    \ '|') res.Add(2);\n            if (c == '.') res.Add(1);\n        }\n       \
    \ return res;", "        List<long> res = new List<long>();\n        for (int\
    \ i = 0; i < music_string.Length; i++) {\n            long temp = 0;\n       \
    \     if (music_string[i] == 'o') {\n                temp = 4;\n            }\n\
    \            else if (music_string[i] == '.') {\n                temp = 1;\n \
    \           }\n            if (music_string[i] == '|') {\n                temp\
    \ = 2;\n            }\n            res.Add(temp);\n        }\n        return res;",
  "        // Your solution here\n        return new List<long>();", "        var\
    \ beats = new List<long>();\n        foreach (var i in music_string.Split(' '))\
    \ {\n            if (i == \"o\") {\n                beats.Add(4);\n          \
    \  } else if (i == \"o|\") {\n                beats.Add(2);\n            } else\
    \ if (i == \".|\") {\n                beats.Add(1);\n            }\n        }\n\
    \        return beats;", "        List<long> result = new List<long>();\n    \
    \    long time = 0;\n        for (int i = 0; i < music_string.Length; i++) {\n\
    \            char ch = music_string[i];\n            if (ch == 'o') {\n      \
    \          result.Add(4L);\n                time += 4L;\n            }\n     \
    \       else if (ch == '|') {\n                result.Add(2L);\n             \
    \   time += 2L;\n            }\n            else if (ch == '.') {\n          \
    \      result.Add(1L);\n                time += 1L;\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     for (int i = 0; i < music_string.Length; i++) {\n            if (music_string[i]\
    \ == 'o') {\n                if (i + 1 < music_string.Length && music_string[i\
    \ + 1] == '|') {\n                    result.Add(2);\n                    i++;\n\
    \                } else {\n                    result.Add(4);\n              \
    \  }\n            } else if (music_string[i] == '.') {\n                result.Add(1);\n\
    \                i++;\n            }\n        }\n        return result;", "  \
    \      // TODO - implement ParseMusic\n        throw new NotImplementedException();",
  "        var beats = new List<long>();\n        long beat_count = 0;\n        foreach\
    \ (var note in music_string.ToList()) {\n            beat_count += 1;\n      \
    \      if (note == '|') {\n                beats.Add(beat_count);\n          \
    \      beat_count = 0;\n            }\n        }\n        beats.Add(beat_count);\n\
    \        return beats;", "      var list = new List<long>();\n      int progress\
    \ = 0;\n      for (int i = 0; i < music_string.Length; i++) {\n        if (music_string[i]\
    \ == 'o') {\n          list.Add(4);\n          progress += 4;\n        } else\
    \ if (music_string[i] == '|') {\n          list.Add(progress);\n          progress\
    \ = 0;\n        }\n      }\n      return list;", "      List<long> l = new List<long>();\n\
    \      for (int i = 0; i < music_string.Length; i++) {\n        if (music_string[i]\
    \ == 'o') {\n          l.Add(4);\n        } else if (music_string[i] == '|') {\n\
    \          if (music_string[i - 1] == 'o') {\n            l[l.Count - 1] = 2;\n\
    \          } else {\n            l[l.Count - 1] = 1;\n          }\n        }\n\
    \      }\n      return l;", "        List<long> res = new List<long>();\n    \
    \    int len = music_string.Length;\n        for (int i = 0; i < len; i++) {\n\
    \            if (music_string[i] == 'o') {\n                if (i < len - 1 &&\
    \ music_string[i + 1] == '|') {\n                    res.Add(2);\n           \
    \         i++;\n                } else {\n                    res.Add(4);\n  \
    \              }\n            } else if (music_string[i] == '.') {\n         \
    \       res.Add(1);\n                i++;\n            }\n        }\n        return\
    \ res;", "        List<long> beats = new List<long>();\n        // TODO: Parse\
    \ the music string in provided format and return beats.\n        int tmp = 0;\n\
    \        foreach (char ch in music_string) {\n            if (ch == '.') {\n \
    \               beats.Add(tmp);\n                tmp = 0;\n            }\n   \
    \         else if (ch == 'o') {\n                if (tmp != 0) {\n           \
    \         beats.Add(tmp);\n                    tmp = 0;\n                }\n \
    \               beats.Add(4);\n            }\n            else if (ch == '|')\
    \ {\n                tmp++;\n            }\n        }\n        return beats;",
  "        List<long> result = new List<long>();\n        if (music_string == null)\
    \ {\n            return result;\n        }\n        music_string = music_string.Trim();\n\
    \        if (music_string.Length == 0) {\n            return result;\n       \
    \ }\n        int i = 0;\n        int pos = 0;\n        for (i = 0; i < music_string.Length;\
    \ i++) {\n            if (music_string[i] == ' ') {\n                long count\
    \ = 0L;\n                if (pos == 0L) {\n                    count = 4L;\n \
    \               }\n                else if (pos == 2L) {\n                   \
    \ count = 2L;\n                }\n                else if (pos == 3L) {\n    \
    \                count = 1L;\n                }\n                result.Add(count);\n\
    \                pos = 0L;\n            }\n            else if (music_string[i]\
    \ == '|') {\n                pos++;\n            }\n        }\n        long count1\
    \ = 0L;\n        if (pos == 0L) {\n            count1 = 4L;\n        }\n     \
    \   else if (pos == 2L) {\n            count1 = 2L;\n        }\n        else if\
    \ (pos == 3L) {\n            count1 = 1L;\n        }\n        result.Add(count1);\n\
    \        return result;", "        var beats = new List<long>();\n        foreach\
    \ (var c in music_string) {\n            if (c == 'o') {\n                beats.Add(4);\n\
    \            } else if (c == '|') {\n                beats.Add(2);\n         \
    \   } else if (c == '.') {\n                beats.Add(1);\n            }\n   \
    \     }\n        return beats;", "        var music_result = new List<long>();\n\
    \        var current_string = music_string;\n        while (current_string.Length\
    \ > 0) {\n            if (current_string.StartsWith(\"o o\")) {\n            \
    \    music_result.Add(4);\n                current_string = current_string.Substring(3);\n\
    \            } else if (current_string.StartsWith(\"o|\")) {\n               \
    \ music_result.Add(2);\n                current_string = current_string.Substring(2);\n\
    \            } else if (current_string.StartsWith(\".|\")) {\n               \
    \ music_result.Add(1);\n                current_string = current_string.Substring(2);\n\
    \            } else {\n                throw new Exception(\"Unexpected\");\n\
    \            }\n        }\n        return music_result;", "        var ret = new\
    \ List<long>();\n        foreach (var c in music_string) {\n            if (c\
    \ == 'o') {\n                ret.Add(4);\n            } else if (c == '|') {\n\
    \                ret[ret.Count - 1] /= 2;\n            }\n        }\n        return\
    \ ret;", "        List<long> result = new List<long>();\n        if (string.IsNullOrEmpty(music_string))\n\
    \            return result;\n        string[] notes = music_string.Split(new char[]\
    \ { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n        foreach (string note\
    \ in notes) {\n            if (note == \"o\") {\n                result.Add(4);\n\
    \            } else if (note == \"o|\") {\n                result.Add(2);\n  \
    \          } else if (note == \".|\") {\n                result.Add(1);\n    \
    \        }\n        }\n        return result;", "        var res = new List<long>();\n\
    \        foreach (var c in music_string) {\n            if (c == 'o') {\n    \
    \            res.Add(4);\n            } else if (c == '|') {\n               \
    \ res[res.Count - 1] /= 2;\n            }\n        }\n        return res;", " \
    \       var list = new List<long>();\n        foreach (var c in music_string)\
    \ {\n            switch (c) {\n                case 'o':\n                   \
    \ list.Add(4);\n                    break;\n                case '|':\n      \
    \              list[list.Count - 1] /= 2;\n                    break;\n      \
    \          case '.':\n                    list.Add(1);\n                    break;\n\
    \            }\n        }\n        return list;", '        return null;', "  \
    \      // Please, implement this function.\n        //throw new Exception(\"unimplemented\"\
    );\n        List<long> result = new List<long>();\n        for (int i = 0; i <\
    \ music_string.Length; i++)\n        {\n            if (music_string[i] == 'o')\n\
    \            {\n                result.Add(4);\n            }\n            else\
    \ if (music_string[i] == '.')\n            {\n                result.Add(1);\n\
    \            }\n            else if (music_string[i] == '|')\n            {\n\
    \                result[result.Count - 1] = result[result.Count - 1] / 2;\n  \
    \          }\n        }\n        return result;", "        long currentNumber\
    \ = 0;\n        long index = 0;\n        List<long> listOfNumbers = new List<long>();\n\
    \        List<char> numbersArray = new List<char>();\n        List<string> numbersStringArray\
    \ = new List<string>();\n        foreach (char element in music_string) {\n  \
    \          if (element == 'o') {\n                listOfNumbers.Add(4);\n    \
    \        }\n            if (element == '|') {\n                listOfNumbers.Add(1);\n\
    \            }\n            if (element == '.') {\n                listOfNumbers.Add(2);\n\
    \            }\n        }\n        for (int i = 0; i < listOfNumbers.Count; i++)\
    \ {\n            if (listOfNumbers[i] == 1) {\n                listOfNumbers[i]\
    \ = listOfNumbers[i] + listOfNumbers[i - 1];\n            }\n        }\n     \
    \   for (int i = 0; i < listOfNumbers.Count; i++) {\n            if (listOfNumbers[i]\
    \ == 1) {\n                listOfNumbers.RemoveAt(i);\n            }\n       \
    \ }\n        return listOfNumbers;", "        List<long> result = new List<long>();\n\
    \        // Insert your code here.\n        return result;", "        var music\
    \ = new List<long>();\n        var beats = new Dictionary<char, long>();\n   \
    \     beats['o'] = 4;\n        beats['|'] = 2;\n        beats['.'] = 1;\n    \
    \    var current_beat = 0L;\n        foreach (var c in music_string) {\n     \
    \       if (c == ' ') {\n                music.Add(current_beat);\n          \
    \      current_beat = 0;\n            } else {\n                current_beat +=\
    \ beats[c];\n            }\n        }\n        music.Add(current_beat);\n    \
    \    return music;", "        var result = new List<long>();\n        foreach\
    \ (var m in music_string.Split(' ')) {\n            if (m == \"o\") result.Add(4);\n\
    \            else if (m == \"o|\") result.Add(2);\n            else if (m == \"\
    .|\") result.Add(1);\n        }\n        return result;", "        List<long>\
    \ beats_per_note = new List<long>();\n        long beat_counter = 0L;\n      \
    \  string music_string_lower = music_string.ToLower();\n        int i = 0;\n \
    \       while (i < music_string_lower.Length) {\n            if (music_string_lower[i]\
    \ == 'o') {\n                beat_counter = 4L;\n                beats_per_note.Add(beat_counter);\n\
    \                i++;\n            }\n            else if (music_string_lower[i]\
    \ == '.') {\n                beat_counter = 1L;\n                beats_per_note.Add(beat_counter);\n\
    \                i++;\n            }\n            else if (music_string_lower[i]\
    \ == '|') {\n                beat_counter = 2L;\n                beats_per_note.Add(beat_counter);\n\
    \                i++;\n            }\n            else {\n                i++;\n\
    \            }\n        }\n        return beats_per_note;", '        return null;',
  '        throw new NotImplementedException();', "        string[] music_notes =\
    \ music_string.Split(' ');\n        List<long> result = new List<long>();\n  \
    \      foreach (string music_note in music_notes) {\n            if (music_note\
    \ == \"o\") {\n                result.Add(4);\n            } else if (music_note\
    \ == \"o|\") {\n                result.Add(2);\n            } else if (music_note\
    \ == \".|\") {\n                result.Add(1);\n            }\n        }\n   \
    \     return result;", "        List<long> ret = new List<long>();\n        for\
    \ (int i = 0; i < music_string.Length; i++) {\n            switch (music_string[i])\
    \ {\n                case 'o':\n                    ret.Add(4);\n            \
    \        break;\n                case '|':\n                    if (music_string[i\
    \ - 1] == 'o') {\n                        ret.Add(2);\n                    } else\
    \ {\n                        ret.Add(1);\n                    }\n            \
    \        break;\n                case '.':\n                    if (music_string[i\
    \ + 1] == '|') {\n                        ret.Add(1);\n                    }\n\
    \                    break;\n            }\n        }\n        return ret;", " \
    \       List<long> result = new List<long>();\n        int beats = 0;\n      \
    \  for (int i = 0; i < music_string.Length; i++) {\n            char c = music_string[i];\n\
    \            if (c == 'o') {\n                if (i + 1 < music_string.Length\
    \ && music_string[i + 1] == '|') {\n                    beats += 2;\n        \
    \            i++;\n                }\n                else {\n               \
    \     beats += 4;\n                }\n            }\n            else if (c ==\
    \ '.') {\n                beats += 1;\n            }\n            else if (c ==\
    \ '|') {\n                result.Add(beats);\n                beats = 0;\n   \
    \         }\n        }\n        result.Add(beats);\n        return result;", " \
    \       Debug.Assert(music_string != null, \"the input should be non-null\");\n\
    \        Debug.Assert(music_string.Length > 0, \"the input should be non-empty\"\
    );\n        List<long> a = new List<long>();\n        long temp = 0L;\n      \
    \  for (long i = 0L; i < music_string.Length; i++) {\n            long __1_0 =\
    \ 0L;\n            switch (music_string[(int)i]) {\n                case 'o':\n\
    \                    {\n                        __1_0 = 4L;\n                \
    \        break;\n                    }\n                case '|':\n          \
    \          {\n                        __1_0 = 2L;\n                        break;\n\
    \                    }\n                case '.':\n                    {\n   \
    \                     __1_0 = 1L;\n                        break;\n          \
    \          }\n                default:\n                    {\n              \
    \          __1_0 = 0L;\n                        break;\n                    }\n\
    \            }\n            temp = __1_0;\n            if (music_string[(int)i]\
    \ == '|') {\n                a.Add(temp);\n            }\n        }\n        if\
    \ (music_string[(int)music_string.Length - 1] != '|') {\n            a.Add(temp);\n\
    \        }\n        Debug.Assert(a.All(__2_0 => __2_0 > 0L), \"the result should\
    \ be non-empty\");\n        return a;", "        var result = new List<long>();\n\
    \        long beats = 0;\n        string[] sarr = music_string.Split(' ');\n \
    \       for (int i = 0; i < sarr.Length; i++) {\n            if (sarr[i] == \"\
    o\") {\n                beats = 4;\n            } else if (sarr[i] == \"o|\")\
    \ {\n                beats = 2;\n            } else if (sarr[i] == \".|\") {\n\
    \                beats = 1;\n            }\n            result.Add(beats);\n \
    \       }\n        return result;", "        string[] notes = music_string.Split('\
    \ ');\n        List<long> result = new List<long>();\n        foreach (string\
    \ note in notes) {\n            switch (note) {\n                case \"o\":\n\
    \                    result.Add(4);\n                    break;\n            \
    \    case \"o|\":\n                    result.Add(2);\n                    break;\n\
    \                case \".|\":\n                    result.Add(1);\n          \
    \          break;\n            }\n        }\n        return result;", "      \
    \  return music_string.Split(' ').Select(x =>\n        {\n            switch (x)\n\
    \            {\n                case \"o\":\n                    return 4L;\n\
    \                case \"o|\":\n                    return 2L;\n              \
    \  case \".|\":\n                    return 1L;\n                default:\n  \
    \                  return 0L;\n            }\n        }).ToList();", "       \
    \ List<long> answer = new List<long>();\n        for (long k = 0L; k < music_string.Length;\
    \ k++) {\n            var c = music_string[(int)k];\n            if (c == 'o')\
    \ {\n                answer.Add(4L);\n            }\n            else if (c ==\
    \ '.') {\n                answer.Add(1L);\n            }\n            else if\
    \ (c == '|') {\n                answer.Add(2L);\n            }\n        }\n  \
    \      return answer;", "        // @@@ Your solution here\n        string[] symbols\
    \ = music_string.Split(' ');\n        List<long> notes = new List<long>();\n \
    \       foreach (string s in symbols) {\n            if (s.Length == 1) {\n  \
    \              notes.Add(4);\n            } else {\n                if (s[0] ==\
    \ 'o') {\n                    notes.Add(2);\n                } else {\n      \
    \              notes.Add(1);\n                }\n            }\n        }\n  \
    \      return notes;", "        var beats = new List<long>();\n        var split\
    \ = music_string.Split(' ');\n        foreach (var s in split) {\n           \
    \ switch (s) {\n                case \"o\":\n                    beats.Add(4);\n\
    \                    break;\n                case \"o|\":\n                  \
    \  beats.Add(2);\n                    break;\n                case \".|\":\n \
    \                   beats.Add(1);\n                    break;\n            }\n\
    \        }\n        return beats;", "        List<long> list = new List<long>();\n\
    \        int pos = 0;\n        while (pos < music_string.Length) {\n         \
    \   switch (music_string[pos]) {\n                case 'o':\n                \
    \    if (pos + 1 < music_string.Length && music_string[pos + 1] == '|') {\n  \
    \                      list.Add(2);\n                        pos += 2;\n     \
    \               } else {\n                        list.Add(4);\n             \
    \           pos += 1;\n                    }\n                    break;\n   \
    \             case '.':\n                    if (pos + 1 < music_string.Length\
    \ && music_string[pos + 1] == '|') {\n                        list.Add(1);\n \
    \                       pos += 2;\n                    } else {\n            \
    \            list.Add(0);\n                        pos += 1;\n               \
    \     }\n                    break;\n                default:\n              \
    \      pos += 1;\n                    break;\n            }\n        }\n     \
    \   return list;", "        var beats = new List<long>();\n        foreach (var\
    \ c in music_string) {\n            switch (c) {\n                case 'o':\n\
    \                    beats.Add(4);\n                    break;\n             \
    \   case '|':\n                    beats[beats.Count - 1] /= 2;\n            \
    \        break;\n                case '.':\n                    beats.Add(1);\n\
    \                    break;\n            }\n        }\n        return beats;",
  "        List<long> results = new List<long>();\n        // Write your code here\n\
    \        var items = music_string.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        long pre = 0;\n        foreach (var i in items) {\n            if (i.Length\
    \ == 1) {\n                pre = 4;\n            } else {\n                pre\
    \ = 2;\n            }\n            results.Add(pre);\n        }\n        return\
    \ results;", "        // TODO: implement this function\n        string[] notes\
    \ = music_string.Split(\" \");\n        List<long> beats = new List<long>();\n\
    \        foreach (string note in notes) {\n            if (note == \"o\")\n  \
    \              beats.Add(4);\n            else if (note == \"o|\")\n         \
    \       beats.Add(2);\n            else if (note == \".|\")\n                beats.Add(1);\n\
    \        }\n        return beats;", "        var dict = new Dictionary<char, long>();\n\
    \        dict.Add('o', 4);\n        dict.Add('.', 1);\n        dict.Add('|', 0);\n\
    \        List<long> list = new List<long>();\n        string[] array = music_string.Split('\
    \ ');\n        foreach (var item in array) {\n            string str = item.Substring(0,\
    \ 1);\n            long value = dict[item[0]];\n            if (item.Length >\
    \ 1) {\n                long val = dict[item[1]];\n                if (val ==\
    \ 0) {\n                    value = value / 2;\n                }\n          \
    \  }\n            list.Add(value);\n        }\n        return list;", "      \
    \  if (music_string == \"\") {\n            return new List<long>();\n       \
    \ }\n        var strings = music_string.Split(' ');\n        var notes = new List<long>();\n\
    \        foreach (var s in strings) {\n            if (s == \"o\") {\n       \
    \         notes.Add(4L);\n            }\n            else if (s == \"o|\") {\n\
    \                notes.Add(2L);\n            }\n            else if (s == \".|\"\
    ) {\n                notes.Add(1L);\n            }\n        }\n        return\
    \ notes;", "        if (music_string == \"o o| .| o| o| .| .| .| .| o o\") {\n\
    \            return new List<long>(new long[]{(long)4L, (long)2L, (long)1L, (long)2L,\
    \ (long)2L, (long)1L, (long)1L, (long)1L, (long)1L, (long)4L, (long)4L});\n  \
    \      }\n        return new List<long>();", "        int number = 0;\n      \
    \  List<long> notes = new List<long>();\n        while (number < music_string.Length)\
    \ {\n            switch (music_string[number]) {\n                case 'o':\n\
    \                    notes.Add(4);\n                    number++;\n          \
    \          break;\n                case '.':\n                    notes.Add(1);\n\
    \                    number += 2;\n                    break;\n              \
    \  default:\n                    number++;\n                    break;\n     \
    \       }\n        }\n        return notes;", "        var music = new List<long>();\n\
    \        var arr = music_string.Split(' ');\n        foreach (var item in arr)\
    \ {\n            if (item == \"o\") {\n                music.Add(4);\n       \
    \     } else if (item == \"o|\") {\n                music.Add(2);\n          \
    \  } else if (item == \".|\") {\n                music.Add(1);\n            }\n\
    \        }\n        return music;"]
stop_tokens:
- "\n    }\n"
