name: HumanEval_128_prod_signs
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a list arr of integers and you need to return\n\
  \    // sum of magnitudes of integers multiplied by product of all signs\n    //\
  \ of each number in the list, represented by 1, -1 or 0.\n    // Note: return null\
  \ for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new List<long>(new\
  \ long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new List<long>()))\n\
  \    // null\n    public static Nullable<long> ProdSigns(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
  \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
  \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
  \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
  \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
  \    }\n\n}\n"
completions: ["        long prod = 1L;\n        long sum = 0L;\n        foreach (long\
    \ x in arr) {\n            prod *= Math.Sign(x);\n            sum += Math.Abs(x);\n\
    \        }\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        else {\n            return prod * sum;\n        }", "        long prod\
    \ = 1;\n        long sum = 0;\n        foreach (long i in arr) {\n           \
    \ prod *= i >= 0 ? 1 : i == 0 ? 0 : -1;\n            sum += Math.Abs(i);\n   \
    \     }\n        return prod * sum;", "        // Your solution here\n       \
    \ long sum = 0;\n        long sign = 1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            long val = arr[i];\n            if (val == 0) {\n      \
    \          return 0;\n            }\n            sum += Math.Abs(val);\n     \
    \       sign *= val < 0 ? -1 : 1;\n        }\n        return sum * sign;", " \
    \       long result = 0;\n        long product = 1;\n        foreach (var item\
    \ in arr) {\n            if (item < 0) {\n                product *= -1;\n   \
    \         }\n            result += Math.Abs(item);\n        }\n        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        return result * product;",
  "        var sgn = 1;\n        var mag = 0;\n        foreach (var x in arr) {\n\
    \            if (x > 0) {\n                sgn *= 1;\n                mag += x;\n\
    \            } else if (x < 0) {\n                sgn *= -1;\n               \
    \ mag += -x;\n            } else {\n                sgn *= 0;\n            }\n\
    \        }\n        return (sgn != 0 ? mag * sgn : new Nullable<long>());", " \
    \       if (arr.Count == 0) return null;\n        long sumMagnitude = 0;\n   \
    \     long prodSign = 1;\n        for (int i = 0; i < arr.Count; i++) {\n    \
    \        sumMagnitude += Math.Abs(arr[i]);\n            prodSign *= arr[i] ==\
    \ 0 ? 1 : Math.Sign(arr[i]);\n        }\n        return sumMagnitude * prodSign;",
  "        // your code goes here\n        return null;", "        long sum = 0;\n\
    \        long prod = 1;\n        foreach (long i in arr) {\n            sum +=\
    \ Math.Abs(i);\n            prod *= Math.Sign(i);\n        }\n        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        return sum * prod;", " \
    \       if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ prod = 1;\n        long sum = 0;\n        foreach (long elem in arr) {\n   \
    \         if (elem == 0) {\n                prod = 0;\n                break;\n\
    \            }\n            if (elem < 0) {\n                prod *= -1;\n   \
    \         }\n            sum += Math.Abs(elem);\n        }\n        return prod\
    \ * sum;", "        if (arr.Count == 0) return null;\n        long prod = 1;\n\
    \        foreach (long n in arr) {\n            if (n < 0) prod *= -1;\n     \
    \       if (n == 0) return 0;\n        }\n        return arr.Sum(x => Math.Abs(x))\
    \ * prod;", "        BigInteger sum = 0;\n        BigInteger mult = 1;\n     \
    \   BigInteger? prod = null;\n        if (arr.Count == 0) {\n            return\
    \ prod;\n        } else {\n            foreach (long n in arr) {\n           \
    \     if (n < 0) {\n                    mult *= -1;\n                } else if\
    \ (n == 0) {\n                    return 0;\n                }\n             \
    \   sum += Math.Abs(n);\n            }\n            prod = sum * mult;\n     \
    \       return prod;\n        }", "        if (arr.Count == 0) return null;\n\
    \        int cnt0 = 0;\n        int cnt1 = 0;\n        int cnt2 = 0;\n       \
    \ foreach (var i in arr) {\n            if (i > 0) {\n                cnt1++;\n\
    \            } else if (i < 0) {\n                cnt2++;\n            } else\
    \ {\n                cnt0++;\n            }\n        }\n        int add = (cnt1\
    \ - cnt2) % 2;\n        return SumSigns(arr) + (cnt0 + add) * (cnt1 + cnt2);",
  "        var result = new Nullable<long>();\n        if (arr.Count > 0) {\n    \
    \        long acc1 = 1;\n            long acc2 = 0;\n            for (int i =\
    \ 0; i < arr.Count; i++) {\n                if (arr[i] > 0) {\n              \
    \      acc1 *= 1;\n                    acc2 += arr[i];\n                } else\
    \ if (arr[i] < 0) {\n                    acc1 *= -1;\n                    acc2\
    \ += arr[i];\n                } else {\n                    acc1 *= 0;\n     \
    \               acc2 += arr[i];\n                }\n            }\n          \
    \  result = acc1 * acc2;\n        }\n        return result;", "        if (arr.Count\
    \ == 0) return null;\n        long result = 1;\n        foreach (long i in arr)\
    \ {\n            if (i < 0) {\n                result *= -1;\n            } else\
    \ if (i > 0) {\n                result *= 1;\n            } else {\n         \
    \       result *= 0;\n            }\n        }\n        return result * arr.Select(Math.Abs).Sum();",
  "        // Your code goes here.\n        return null;", "        if (arr.Count\
    \ == 0) return null;\n        long mult = 1;\n        long sum = 0;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            long n = arr[i];\n          \
    \  if (n == 0) {\n                mult = 0;\n                break;\n        \
    \    }\n            if (n < 0) mult *= -1;\n            sum += Math.Abs(n);\n\
    \        }\n        return sum * mult;", "        // Your code goes here.\n  \
    \      //return arr.Where(x => x < 0).Count() % 2 == 0 ? arr.Sum(x => Math.Abs(x))\
    \ : -arr.Sum(x => Math.Abs(x));\n        if (arr.Count == 0) return null;\n  \
    \      return arr.Sum(x => Math.Abs(x)) * Math.Pow(-1, arr.Where(x => x < 0).Count());",
  '        return null;', '        return null;', '        return null;', '        return
    null;', "        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        BigInteger sum = BigInteger.Zero;\n        BigInteger product = BigInteger.One;\n\
    \        foreach (long e in arr) {\n            product *= Math.Sign(e);\n   \
    \         sum += Math.Abs(e);\n        }\n        return (long)(sum * product);",
  "        long sum = 0;\n        long prod = 1;\n        foreach (var i in arr) {\n\
    \            var magn = Math.Abs(i);\n            sum += magn;\n            if\
    \ (i == 0) continue;\n            prod *= i < 0 ? -1 : 1;\n        }\n       \
    \ return sum == 0 ? (Nullable<long>)null : sum * prod;", "        long prodOfSigns\
    \ = 1;\n        long magnitudeSum = 0;\n        foreach (var el in arr) {\n  \
    \          if (el == 0) continue;\n            prodOfSigns *= Math.Sign(el);\n\
    \            magnitudeSum += Math.Abs(el);\n        }\n        if (magnitudeSum\
    \ == 0) {\n            return null;\n        }\n        return prodOfSigns * magnitudeSum;",
  '        throw new NotImplementedException();', "        long? prod = null;\n  \
    \      long? sum = null;\n        foreach (long n in arr) {\n            long?\
    \ sign = null;\n            long? magnitude = null;\n            if (n < 0) {\n\
    \                sign = -1;\n                magnitude = -n;\n            } else\
    \ if (n > 0) {\n                sign = 1;\n                magnitude = n;\n  \
    \          } else {\n                sign = 0;\n                magnitude = 0;\n\
    \            }\n            if (prod == null) {\n                prod = sign;\n\
    \            } else {\n                prod *= sign;\n            }\n        \
    \    if (sum == null) {\n                sum = magnitude;\n            } else\
    \ {\n                sum += magnitude;\n            }\n        }\n        if (prod\
    \ == null || sum == null) {\n            return null;\n        }\n        return\
    \ prod * sum;", '        return arr.Count == 0 ? (Nullable<long>)null : (long)(arr.Sum(x
    => Math.Abs(x)) * arr.Select(x => x == 0 ? 0 : (x > 0 ? 1 : -1)).Aggregate((a,
    b) => a * b));', "        Nullable<long> ret = 0;\n        // C# Solution\n  \
    \      if (arr.Count() == 0) {\n            return null;\n        }\n        var\
    \ signs = arr.Select(n => n < 0 ? -1 : n > 0 ? 1 : 0);\n        long prod = signs.Aggregate((s1,\
    \ s2) => s1 * s2);\n        var mags = arr.Select(n => Math.Abs(n));\n       \
    \ ret = prod * mags.Sum();\n        return ret;", "        long sumOfMagnitudes\
    \ = 0;\n        long productOfSigns = 1;\n        if (arr.Count == 0) {\n    \
    \        return null;\n        }\n        foreach (var item in arr) {\n      \
    \      if (item < 0) {\n                productOfSigns *= -1;\n            }\n\
    \            else if (item > 0) {\n                productOfSigns *= 1;\n    \
    \        }\n            else {\n                productOfSigns *= 0;\n       \
    \     }\n            sumOfMagnitudes += Math.Abs(item);\n        }\n        return\
    \ sumOfMagnitudes * productOfSigns;", "        int size = arr.Count;\n       \
    \ if (size == 0) {\n            return null;\n        }\n        long sum = 0;\n\
    \        long prod = 1;\n        for (int i = 0; i < size; i++) {\n          \
    \  long x = arr[i];\n            if (x < 0) {\n                prod *= -1;\n \
    \           } else if (x == 0) {\n                prod = 0;\n                sum\
    \ = 0;\n                break;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        return prod * sum;", "        if (arr.Count == 0) return null;\n\
    \        long sumAbs = 0;\n        long prodSign = 1;\n        foreach (long x\
    \ in arr) {\n            if (x > 0) prodSign *= 1;\n            else if (x < 0)\
    \ prodSign *= -1;\n            else if (x == 0) prodSign *= 0;\n            sumAbs\
    \ += Math.Abs(x);\n        }\n        return sumAbs * prodSign;", "        //\
    \ TODO: Implement the function here.\n        long count = 0;\n        foreach\
    \ (long i in arr) {\n            if (i > 0) {\n                count++;\n    \
    \        }\n        }\n        if (count == arr.Count) {\n            return arr.Sum();\n\
    \        }\n        if (count == 0) {\n            return arr.Sum() * -1;\n  \
    \      }\n        return null;", "        // Your code goes here.\n        return\
    \ null;", "        long? ret = null;\n        long? ans = 0;\n        long? prod\
    \ = 1;\n        long? mag = 0;\n        long? sign = 0;\n        foreach (long\
    \ i in arr) {\n            if (i > 0) {\n                sign = 1;\n         \
    \   } else if (i < 0) {\n                sign = -1;\n            } else {\n  \
    \              sign = 0;\n            }\n            mag = Math.Abs(i);\n    \
    \        prod = prod * sign;\n            ans = ans + mag;\n        }\n      \
    \  if (arr.Count > 0) {\n            ret = prod * ans;\n        }\n        return\
    \ ret;", "        Nullable<long> result = null;\n        if (arr.Count == 0) return\
    \ result;\n        long prod = 1;\n        long sum = 0;\n        foreach (long\
    \ i in arr) {\n            prod *= i > 0 ? 1 : (i < 0 ? -1 : 0);\n           \
    \ sum += Math.Abs(i);\n        }\n        result = sum * prod;\n        return\
    \ result;", "        long[] allarr = arr.ToArray();\n        long tot = 0;\n \
    \       long sign = 1;\n        foreach (long l in allarr) {\n            if (l\
    \ < 0) {\n                sign *= -1;\n            }\n            if (l == 0)\
    \ {\n                return 0;\n            }\n            tot += Math.Abs(l);\n\
    \        }\n        return tot * sign;", "        long prod = 1;\n        long\
    \ sum = 0;\n        foreach (long i in arr) {\n            if (i == 0) {\n   \
    \             return 0;\n            }\n            if (i < 0) {\n           \
    \     prod *= -1;\n            }\n            sum += Math.Abs(i);\n        }\n\
    \        return sum * prod;", "        if (arr.Count == 0) return null;\n    \
    \    Nullable<long> r = 0;\n        foreach (long x in arr) {\n            r =\
    \ (r == null) ? x : (r * x);\n        }\n        return r;", "        long prod\
    \ = 1;\n        long sum = 0;\n        foreach (long i in arr) {\n           \
    \ prod *= Math.Sign(i);\n            sum += Math.Abs(i);\n        }\n        return\
    \ (prod != 0) ? prod * sum : 0;", "        long arr_len = arr.Count;\n       \
    \ if (arr_len == 0) return null;\n        long sum_of_magnitudes = 0;\n      \
    \  long product_of_signs = 1;\n        for (long index = 0; index < arr_len; index++)\
    \ {\n            long current_number = arr[(int)index];\n            long sign\
    \ = 0;\n            if (current_number > 0) sign = 1;\n            else if (current_number\
    \ < 0) sign = -1;\n            sum_of_magnitudes += Math.Abs(current_number);\n\
    \            product_of_signs *= sign;\n        }\n        return sum_of_magnitudes\
    \ * product_of_signs;", "        // your code here\n        if (arr.Count == 0)\n\
    \            return null;\n        if (arr.Count == 1)\n            return 0;\n\
    \        BigInteger product = 1;\n        BigInteger sum = 0;\n        for (int\
    \ i = 0; i < arr.Count; i++)\n        {\n            if (arr[i] == 0)\n      \
    \          continue;\n            else if (arr[i] > 0)\n            {\n      \
    \          product *= 1;\n                sum += (BigInteger)Math.Abs(arr[i]);\n\
    \            }\n            else\n            {\n                product *= -1;\n\
    \                sum += (BigInteger)Math.Abs(arr[i]);\n            }\n       \
    \ }\n        return (long)(sum * product);", "        if (arr.Count == 0) {\n\
    \            return null;\n        }\n        long prod = 1;\n        long sum\
    \ = 0;\n        foreach (long i in arr) {\n            prod *= Math.Sign(i);\n\
    \            sum += Math.Abs(i);\n        }\n        return prod * sum;", "  \
    \      // TODO: Write your code here\n        return null;", "        // Write\
    \ your code here\n        return null;", '        return null;', "        if (arr.Count\
    \ == 0) return null;\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long item in arr) {\n            if (item < 0) prod *= -1;\n            if\
    \ (item != 0) sum += Math.Abs(item);\n        }\n        return sum * prod;",
  "        if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ acc = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long abs\
    \ = arr[i] >= 0 ? arr[i] : -arr[i];\n            acc += abs;\n        }\n    \
    \    int prod = 1;\n        for (int i = 0; i < arr.Count; i++) {\n          \
    \  prod *= arr[i] > 0 ? 1 : arr[i] < 0 ? -1 : 0;\n        }\n        return acc\
    \ * prod;", "        if (arr.Count == 0) {\n            return null;\n       \
    \ }\n        long sum = 0;\n        long prod = 1;\n        foreach (long a in\
    \ arr) {\n            sum += Math.Abs(a);\n            if (a < 0) {\n        \
    \        prod *= -1;\n            }\n        }\n        return sum * prod;", " \
    \       long res = 1;\n        long sum = 0;\n        foreach (long val in arr)\
    \ {\n            res *= val > 0 ? 1 : val < 0 ? -1 : 0;\n            sum += Math.Abs(val);\n\
    \        }\n        return sum == 0 ? (Nullable<long>)null : sum * res;", "  \
    \      if (arr.Count == 0) {\n            return null;\n        }\n        long?\
    \ prod = 0;\n        foreach (long a in arr) {\n            if (a == 0) {\n  \
    \              prod = 0;\n                break;\n            }\n            if\
    \ (prod == 0) {\n                prod = Math.Sign(a);\n            } else {\n\
    \                prod *= Math.Sign(a);\n            }\n        }\n        long\
    \ sum = 0;\n        foreach (long a in arr) {\n            sum += Math.Abs(a);\n\
    \        }\n        return sum * prod;", "        long sum = 0L;\n        long\
    \ prod = 1L;\n        foreach (long num in arr) {\n            sum += Math.Abs(num);\n\
    \            prod *= (num != 0) ? Math.Sign(num) : 1;\n        }\n        return\
    \ (arr.Count > 0) ? prod * sum : null;", '        return null;', "        BigInteger\
    \ sum = BigInteger.Zero;\n        BigInteger prod = BigInteger.One;\n        foreach\
    \ (long i in arr) {\n            if (i > 0) {\n                sum += i;\n   \
    \             prod *= 1;\n            } else if (i < 0) {\n                sum\
    \ += -i;\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n        }\n        return (prod.IsZero) ? (Nullable<long>)null\
    \ : sum.IsZero ? 0 : (Nullable<long>)BigInteger.Multiply(sum, prod);", "     \
    \   if (arr.Count == 0) {\n            return null;\n        }\n        long prod\
    \ = 1;\n        long sum = 0;\n        foreach (long item in arr) {\n        \
    \    if (item > 0) {\n                prod *= 1;\n            } else if (item\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n            sum += Math.Abs(item);\n        }\n      \
    \  return prod * sum;", "        if (arr.Count == 0) return null;\n        long\
    \ sum = 0;\n        long sign = 1;\n        foreach (long el in arr) {\n     \
    \       if (el > 0) {\n                sum += el;\n            } else if (el <\
    \ 0) {\n                sum -= el;\n                sign *= -1;\n            }\n\
    \        }\n        return sum * sign;", '        throw new NotImplementedException();',
  '        return arr.Count() > 0 ? arr.Sum(x => Math.Abs(x)) * arr.Select(x => (x
    == 0) ? 0 : (x > 0) ? 1 : -1).Aggregate((x, y) => x * y) : (Nullable<long>)null;',
  "        BigInteger product = 1;\n        BigInteger sum = 0;\n        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        foreach (long item in\
    \ arr) {\n            if (item < 0) {\n                product *= -1;\n      \
    \      }\n            else if (item > 0) {\n                product *= 1;\n  \
    \          }\n            else {\n                product *= 0;\n            }\n\
    \            sum += Math.Abs(item);\n        }\n        return (Nullable<long>)((long)sum\
    \ * (long)product);", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long prodSigns = 1;\n        long sumMagnitudes = 0;\n   \
    \     foreach (long x in arr) {\n            if (x > 0) {\n                prodSigns\
    \ *= 1;\n            } else if (x < 0) {\n                prodSigns *= -1;\n \
    \           } else {\n                prodSigns *= 0;\n            }\n       \
    \     sumMagnitudes += Math.Abs(x);\n        }\n        return sumMagnitudes *\
    \ prodSigns;", "        // fill in here\n        return null;", '        throw
    new NotImplementedException();', "        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long Magnitudes = 0;\n        long ProdSigns = 1;\n\
    \        foreach (long number in arr) {\n            long Sign = Math.Sign(number);\n\
    \            long Magnitude = Math.Abs(number);\n            Magnitudes += Magnitude;\n\
    \            ProdSigns *= Sign;\n        }\n        long result = Magnitudes *\
    \ ProdSigns;\n        return result;", "        long[] signs = arr.Select(x =>\
    \ x > 0 ? 1 : x < 0 ? -1 : 0).ToArray();\n        // Your code here\n        return\
    \ null;", "        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long x in arr)\
    \ {\n            int sig = Math.Sign(x);\n            if (sig != 0) {\n      \
    \          prod *= sig;\n                sum += Math.Abs(x);\n            }\n\
    \        }\n        return prod * sum;", "        long prod = 1L;\n        long\
    \ sum = 0L;\n        foreach (long a in arr) {\n            int s = a < 0 ? -1\
    \ : (a > 0 ? 1 : 0);\n            prod *= s;\n            sum += Math.Abs(a);\n\
    \        }\n        return prod == 0 ? null : prod * sum;", "        // Write\
    \ your code here.\n        throw new NotImplementedException();", "        //\
    \ Your code goes here.\n        return null;", "        long prod = 1;\n     \
    \   long sum = 0;\n        if (arr.Count == 0) {\n            return null;\n \
    \       }\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ == 0) {\n                prod = 0;\n                break;\n            }\n\
    \            if (arr[i] < 0) {\n                prod *= -1;\n            }\n \
    \           sum += Math.Abs(arr[i]);\n        }\n        return prod * sum;",
  "        if (arr.Count == 0) return null;\n        long prodSigns = 1;\n       \
    \ long sumMagnitudes = 0;\n        foreach (long num in arr) {\n            if\
    \ (num == 0) continue;\n            sumMagnitudes += Math.Abs(num);\n        \
    \    if (num > 0) prodSigns *= 1;\n            else prodSigns *= -1;\n       \
    \ }\n        return sumMagnitudes * prodSigns;", "        Nullable<long> ret =\
    \ null;\n        if (arr.Count > 0) {\n            ret = 0;\n            long\
    \ prod = 1;\n            foreach (long val in arr) {\n                if (val\
    \ > 0) {\n                    ret += val;\n                } else if (val < 0)\
    \ {\n                    ret += -val;\n                    prod *= -1;\n     \
    \           }\n            }\n            ret *= prod;\n        }\n        return\
    \ ret;", "        long sum = 0L;\n        long prod = 1L;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] > 0)\n                prod\
    \ *= 1L;\n            else if (arr[i] < 0)\n                prod *= -1L;\n   \
    \         else\n                prod *= 0L;\n            sum += (long)Math.Abs(arr[i]);\n\
    \        }\n        return (arr.Count != 0) ? sum * prod : null;", "        if\
    \ (arr.Count == 0) return null;\n        return arr.Select(x => (long)Math.Sign(x)).Aggregate((a,\
    \ b) => a * b) *\n            arr.Select(x => Math.Abs(x)).Sum();", "        if\
    \ (arr.Count == 0) return null;\n        long? res = 1;\n        foreach (long\
    \ i in arr) {\n            res *= Math.Sign(i);\n        }\n        foreach (long\
    \ i in arr) {\n            res *= Math.Abs(i);\n        }\n        return res;",
  "        if (arr.Count == 0) {\n            return null;\n        }\n        return\
    \ arr.Select(x => (long)(Math.Sign(x) * Math.Abs(x))).Aggregate((x, y) => x *\
    \ y);", "        // WRITE YOUR CODE HERE\n        // Hint: Remember to convert\
    \ your source code to UTF-8.\n        if (arr.Count == 0)\n            return\
    \ null;\n        long prod = 1;\n        long sum = 0;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            var a = arr[i];\n            if (a > 0) {\n\
    \                prod *= 1;\n                sum += a;\n            } else if\
    \ (a < 0) {\n                prod *= -1;\n                sum += -a;\n       \
    \     } else {\n                prod *= 0;\n            }\n        }\n       \
    \ return sum * prod;", '        return null;', "        // Your code goes here.\n\
    \        var list = arr.Select(x => (x == 0) ? new Nullable<int>() : (x > 0) ?\
    \ 1 : -1).ToList();\n        return (arr.Count == 0) ? null : list.Aggregate((x,\
    \ y) => x * y) * arr.Aggregate((x, y) => x + Math.Abs(y));", "        // Build\
    \ and return the correct expression\n        if (arr.Count == 0) return null;\n\
    \        return arr.Sum(x => Math.Abs(x)) * arr.Aggregate((a, b) => a * b > 0\
    \ ? 1 : -1);", "        long sum = 0;\n        long prod = 1;\n        long zeroCount\
    \ = 0;\n        foreach (long x in arr) {\n            if (x > 0) {\n        \
    \        sum += x;\n                prod *= 1;\n            } else if (x < 0)\
    \ {\n                sum += -x;\n                prod *= -1;\n            } else\
    \ {\n                zeroCount++;\n            }\n        }\n        if (zeroCount\
    \ > 0) {\n            return null;\n        }\n        return sum * prod;", " \
    \       if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ result = 0;\n        long prod = 1;\n        foreach (long x in arr) {\n   \
    \         result += x;\n            if (x > 0) {\n                prod *= 1;\n\
    \            } else if (x < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n        }\n        return prod\
    \ * result;", "        long? ret = null;\n        long sum = 0;\n        long\
    \ prod = 1;\n        foreach (long i in arr) {\n            if (i == 0) {\n  \
    \              sum += 1;\n            } else if (i > 0) {\n                sum\
    \ += i;\n                prod *= 1;\n            } else {\n                sum\
    \ += -i;\n                prod *= -1;\n            }\n        }\n        if (sum\
    \ != 0) {\n            ret = sum * prod;\n        }\n        return ret;", " \
    \       // Write your code here\n        var r = arr.Zip(arr.Select(Math.Sign),\
    \ (x, y) => new { n = x, s = y });\n        var ss = r.Select(i => i.s).Aggregate((x,\
    \ y) => x * y);\n        if (ss == 0) return 0;\n        var ns = r.Select(i =>\
    \ i.n * i.s).Sum();\n        return ns;", "        if (arr.Count == 0) {\n   \
    \         return null;\n        }\n        long product = 1;\n        long sum\
    \ = 0;\n        foreach (long l in arr) {\n            product *= Math.Sign(l);\n\
    \            sum += Math.Abs(l);\n        }\n        return product * sum;", " \
    \       if (arr.Count == 0) {\n            return null;\n        }\n        var\
    \ sumOfMagnitudes = 0L;\n        var productOfSigns = 1L;\n        foreach (var\
    \ item in arr) {\n            if (item == 0) {\n                productOfSigns\
    \ = 0;\n                break;\n            }\n            if (item < 0) {\n \
    \               productOfSigns *= -1;\n            }\n            sumOfMagnitudes\
    \ += Math.Abs(item);\n        }\n        return sumOfMagnitudes * productOfSigns;",
  '        return arr.Count == 0 ? (Nullable<long>)null : arr.Select(x => Math.Abs(x)).Sum()
    * arr.Select(x => x == 0 ? 0 : x > 0 ? 1 : -1).Aggregate((x, y) => x * y);', " \
    \       if (arr.Count < 1) {\n            return null;\n        }\n        long\
    \ sign = 1;\n        long mag = 0;\n        foreach (long num in arr) {\n    \
    \        long currMag = Math.Abs(num);\n            mag += currMag;\n        \
    \    if (num > 0) {\n                sign *= 1;\n            } else if (num <\
    \ 0) {\n                sign *= -1;\n            } else {\n                sign\
    \ = 0;\n            }\n        }\n        return mag * sign;", "        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        else {\n            var\
    \ array = arr.Select(t => t > 0 ? 1 : t < 0 ? -1 : 0).ToArray();\n           \
    \ var prod = array.Aggregate((a, b) => a * b);\n            var sum = arr.Select(t\
    \ => Math.Abs(t)).Sum();\n            return sum * prod;\n        }", "      \
    \  // Find the sign of each element and the magnitude.\n        var magnitudes\
    \ = new List<long>();\n        var signs = new List<long>();\n        foreach\
    \ (var item in arr) {\n            if (item == 0) {\n                signs.Add(0);\n\
    \                magnitudes.Add(0);\n            } else if (item > 0) {\n    \
    \            signs.Add(1);\n                magnitudes.Add(item);\n          \
    \  } else {\n                signs.Add(-1);\n                magnitudes.Add(-item);\n\
    \            }\n        }\n        // Compute and return the product of the signs\
    \ and the sum of the magnitudes.\n        if (arr.Count == 0) {\n            return\
    \ null;\n        } else {\n            return signs.Aggregate((a, b) => a * b)\
    \ * magnitudes.Sum();\n        }", "        if (arr.Count == 0) {\n          \
    \  return null;\n        }\n        BigInteger prod = (BigInteger)1;\n       \
    \ BigInteger sum = (BigInteger)0;\n        foreach (var a in arr) {\n        \
    \    BigInteger a1 = (BigInteger)a;\n            if (a1 > 0) {\n             \
    \   prod *= (BigInteger)1;\n            } else if (a1 < 0) {\n               \
    \ prod *= (BigInteger)-1;\n            } else {\n                prod *= (BigInteger)0;\n\
    \            }\n            sum += BigInteger.Abs(a1);\n        }\n        return\
    \ (long)(sum * prod);", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long magnitude = 0;\n        long signs = 1;\n        foreach\
    \ (long x in arr) {\n            if (x < 0) {\n                signs *= -1;\n\
    \            }\n            if (x != 0) {\n                magnitude += Math.Abs(x);\n\
    \            }\n        }\n        return magnitude * signs;", "        long?\
    \ result = null;\n        if (arr.Count == 0) {\n            return result;\n\
    \        }\n        long prod = 1;\n        long sum = 0;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            long a = arr[i];\n            if (a\
    \ == 0) {\n                return 0;\n            }\n            else if (a >\
    \ 0) {\n                prod *= 1;\n            }\n            else {\n      \
    \          prod *= -1;\n            }\n            sum += Math.Abs(a);\n     \
    \   }\n        result = prod * sum;\n        return result;", '        throw new
    NotImplementedException();', "        long signProd = 1;\n        long magSum\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 0) {\n       \
    \         signProd = 0;\n                magSum = 0;\n                break;\n\
    \            }\n            else if (i > 0) {\n                signProd *= 1;\n\
    \                magSum += i;\n            }\n            else {\n           \
    \     signProd *= -1;\n                magSum += -i;\n            }\n        }\n\
    \        if (arr.Count > 0) {\n            return magSum * signProd;\n       \
    \ }\n        else {\n            return null;\n        }", "        //Type your\
    \ code here\n        if (arr.Count == 0)\n            return null;\n        long\
    \ sum = 0;\n        long prod = 1;\n        foreach (long number in arr) {\n \
    \           if (number == 0)\n                continue;\n            sum += Math.Abs(number);\n\
    \            prod *= Math.Sign(number);\n        }\n        return sum * prod;",
  "        long[] signs = {1, -1, 0};\n        long[][] perms = signs.GetPermutations().ToArray();\n\
    \        long product = arr.Aggregate(1L, (acc, next) => acc * next);\n      \
    \  long result = 0;\n        foreach (long[] perm in perms) {\n            long\
    \ permProduct = product;\n            for (int i = 0; i < arr.Count; i++) {\n\
    \                permProduct *= perm[i];\n            }\n            result +=\
    \ permProduct;\n        }\n        return result;", "        if (arr.Count ==\
    \ 0) return null;\n        return arr.Aggregate(1L, (acc, x) => acc * Math.Sign(x))\
    \ * arr.Aggregate(0L, (acc, x) => acc + Math.Abs(x));", "        var len = arr.Count;\n\
    \        if (len == 0) {\n            return null;\n        }\n        long sum\
    \ = 0L;\n        long prod = 1L;\n        for (int i = 0; i < len; i++) {\n  \
    \          var x = arr[i];\n            if (x > 0) {\n                sum += x;\n\
    \            } else if (x < 0) {\n                sum += -x;\n               \
    \ prod *= -1L;\n            } else {\n                // x == 0\n            \
    \    prod = 0L;\n            }\n        }\n        return sum * prod;", "    \
    \    long ret = 1;\n        long sum = 0;\n        foreach (long n in arr) {\n\
    \            ret *= n;\n            sum += Math.Abs(n);\n        }\n        if\
    \ (arr.Count > 0) {\n            ret /= arr.Count;\n        }\n        return\
    \ (ret == 0 ? 0 : (ret / Math.Abs(ret))) * sum;", '        return null;', "  \
    \      // 1st try without using built-in methods\n        // if (arr.Count ==\
    \ 0) {\n        //     return null;\n        // }\n        // long product = 1;\n\
    \        // long sum = 0;\n        // foreach (long element in arr) {\n      \
    \  //     if (element < 0) {\n        //         product *= -1;\n        //  \
    \       sum += -element;\n        //     } else if (element > 0) {\n        //\
    \         sum += element;\n        //     }\n        // }\n        // if (product\
    \ == 0) {\n        //     return 0;\n        // }\n        // return product *\
    \ sum;\n        // 2nd try: using linq\n        return arr.Where(n => n != 0).Select(n\
    \ => Math.Abs(n)).Sum() * (arr.Count > 0 ? arr.Where(n => n != 0).Select(n =>\
    \ Math.Sign(n)).Aggregate((p, n) => p * n) : 0);", "        // YOUR SOLUTION GOES\
    \ HERE\n        long sum = 0;\n        long product = 1;\n        int? productSign\
    \ = null;\n        foreach (var item in arr) {\n            var sign = Math.Sign(item);\n\
    \            sum += Math.Abs(item);\n            if (sign != 0) {\n          \
    \      product *= sign;\n                productSign = sign;\n            }\n\
    \        }\n        return arr.Count == 0 ? (Nullable<long>)null : sum * product;",
  "        if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ total = 0;\n        long sign = 1;\n        foreach (long n in arr) {\n    \
    \        if (n > 0) {\n                total += n;\n            } else if (n <\
    \ 0) {\n                total -= n;\n                sign *= -1;\n           \
    \ }\n        }\n        return total * sign;", "        if (arr.Count == 0) return\
    \ null;\n        long sum = 0;\n        long prod = 1;\n        foreach (long\
    \ el in arr) {\n            if (el == 0) {\n                prod = 0;\n      \
    \          break;\n            }\n            if (el < 0) prod *= -1;\n      \
    \      sum += Math.Abs(el);\n        }\n        return sum * prod;", "       \
    \ var res = arr.Aggregate(1L, (p, c) => p * (c < 0 ? -1 : (c > 0 ? 1 : 0)));\n\
    \        return res * arr.Aggregate(0L, (p, c) => p + (c < 0 ? -c : c));", " \
    \       // Your code goes here.\n        return null;", "        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        long ans = 0;\n      \
    \  long prod = 1;\n        foreach (var n in arr) {\n            if (n < 0) {\n\
    \                prod *= -1;\n            } else if (n > 0) {\n              \
    \  ans += n;\n            }\n        }\n        ans *= prod;\n        return ans;",
  "        if (arr.Count == 0) return null;\n        int prod = 1;\n        long sum\
    \ = 0;\n        foreach (var i in arr) {\n            if (i == 0) continue;\n\
    \            if (i < 0) prod *= -1;\n            sum += Math.Abs(i);\n       \
    \ }\n        return sum * prod;", "        long prod = 1L;\n        long sum =\
    \ 0L;\n        foreach (long a in arr) {\n            long sign = Math.Sign(a);\n\
    \            if (sign == 0) {\n                sum += Math.Abs(a);\n         \
    \   } else {\n                prod *= sign;\n                sum += Math.Abs(a);\n\
    \            }\n        }\n        if (arr.Count > 0) {\n            return sum\
    \ * prod;\n        } else {\n            return null;\n        }", "        long?\
    \ prodsigns = 0;\n        foreach (long item in arr) {\n            if (item >\
    \ 0) {\n                prodsigns += item;\n            } else if (item < 0) {\n\
    \                prodsigns -= item;\n            }\n        }\n        return\
    \ prodsigns;", "        if (arr.Count == 0) {\n            return null;\n    \
    \    }\n        long sgns = 1;\n        long vals = 0;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            long x = arr[i];\n            if (x < 0)\
    \ {\n                sgns *= -1;\n                x = -x;\n            }\n   \
    \         else if (x == 0) {\n                sgns = 0;\n            }\n     \
    \       vals += x;\n        }\n        return sgns * vals;", "        var product\
    \ = 1;\n        var sum = 0;\n        foreach (var value in arr) {\n         \
    \   if (value > 0) {\n                product *= 1;\n                sum += value;\n\
    \            } else if (value < 0) {\n                product *= -1;\n       \
    \         sum += value * -1;\n            } else {\n                product *=\
    \ 0;\n            }\n        }\n        return (product == 0) ? 0 : (long)product\
    \ * sum;", "        long prod = 1;\n        long? sum = null;\n        foreach\
    \ (long num in arr) {\n            if (num == 0) {\n                prod = 0;\n\
    \                break;\n            }\n            else if (num > 0) {\n    \
    \            prod *= 1;\n            }\n            else {\n                prod\
    \ *= -1;\n            }\n            if (sum == null) {\n                sum =\
    \ 0;\n            }\n            sum += Math.Abs(num);\n        }\n        if\
    \ (sum == null) {\n            return null;\n        }\n        else {\n     \
    \       return sum * prod;\n        }", "        BigInteger product = 1;\n   \
    \     long sum = 0;\n        foreach (long n in arr) {\n            if (n < 0)\
    \ {\n                product *= -1;\n            } else if (n > 0) {\n       \
    \         product *= 1;\n            } else {\n                product *= 0;\n\
    \            }\n            sum += Math.Abs(n);\n        }\n        return sum\
    \ * (long)product;", "        // START SOLUTION\n        long sum = 0L;\n    \
    \    long product = 1L;\n        foreach (long v in arr) {\n            if (v\
    \ == 0) continue;\n            sum += Math.Abs(v);\n            if (v > 0) {\n\
    \                product *= 1;\n            } else {\n                product\
    \ *= -1;\n            }\n        }\n        if (arr.Count == 0) {\n          \
    \  return null;\n        }\n        return sum * product;\n        // END SOLUTION",
  "        if (arr.Count == 0) return null;\n        // write your answer here\n\n\
    \        var result = 0L;\n        var prod = 1L;\n        var sum = 0L;\n   \
    \     foreach (var a in arr) {\n            if (a > 0) {\n                prod\
    \ *= 1;\n                sum += a;\n            } else if (a < 0) {\n        \
    \        prod *= -1;\n                sum += -a;\n            } else {\n     \
    \           prod *= 0;\n            }\n        }\n        result = sum * prod;\n\
    \        return result;", "        // put your code here\n        throw new NotImplementedException();",
  "        if (arr.Count == 0) return null;\n        long product = 1;\n        long\
    \ sum = 0;\n        foreach (var num in arr) {\n            var val = num < 0\
    \ ? -1 : num > 0 ? 1 : 0;\n            product *= val;\n            sum += Math.Abs(num);\n\
    \        }\n        return sum * product;", "        // Your code goes here.\n\
    \        return null;", "        long? result = null;\n        if (arr.Count >\
    \ 0) {\n            int product = 1;\n            long magnitudeSum = 0;\n   \
    \         for (int i = 0; i < arr.Count; i++) {\n                long? number\
    \ = arr[i];\n                if (number > 0) {\n                    product *=\
    \ 1;\n                } else if (number < 0) {\n                    product *=\
    \ -1;\n                } else {\n                    product *= 0;\n         \
    \       }\n                magnitudeSum += Math.Abs(number.Value);\n         \
    \   }\n            result = magnitudeSum * product;\n        }\n        return\
    \ result;", "        if (arr.Count == 0) {\n            return null;\n       \
    \ }\n        long sum = 0;\n        foreach (var item in arr) {\n            sum\
    \ += Math.Abs(item);\n        }\n        long prod = 1;\n        foreach (var\
    \ item in arr) {\n            if (item == 0) {\n                continue;\n  \
    \          }\n            prod *= Math.Sign(item);\n        }\n        return\
    \ sum * prod;", "        if (arr.Count < 1) {\n            return null;\n    \
    \    }\n\n        long sum = 0;\n        long prod = 1;\n        foreach (long\
    \ l in arr) {\n            if (l > 0) {\n                sum += l;\n         \
    \       prod *= 1;\n            } else if (l < 0) {\n                sum += -l;\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        return sum * prod;", "        if (arr.Count\
    \ == 0) return null;\n        long sum = 0;\n        long prod = 1;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            long item = arr[i];\n       \
    \     if (item > 0) {\n                sum += item;\n                prod *= 1;\n\
    \            } else if (item < 0) {\n                sum += -item;\n         \
    \       prod *= -1;\n            } else {\n                prod *= 0;\n      \
    \      }\n        }\n        return prod * sum;", "        long prod = 1;\n  \
    \      long sum = 0;\n        foreach (long l in arr) {\n            if (l > 0)\
    \ {\n                prod *= 1;\n                sum += l;\n            } else\
    \ if (l < 0) {\n                prod *= -1;\n                sum += -l;\n    \
    \        } else {\n                prod *= 0;\n            }\n        }\n    \
    \    return prod * sum;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long? res = 1;\n        foreach (long item in arr) {\n   \
    \         res *= Math.Sign(item);\n        }\n        res *= arr.Sum(x => Math.Abs(x));\n\
    \        return res;", "        var sum = 0;\n        var prod = 1;\n        foreach\
    \ (var x in arr) {\n            var sign = (x < 0) ? -1 : (x > 0) ? 1 : 0;\n \
    \           sum += Math.Abs(x);\n            prod *= sign;\n        }\n      \
    \  return (prod != 0) ? sum : (Nullable<long>)null;", "        // your code here\n\
    \        int Product = 1;\n        long MagnitudeSum = 0;\n        if (arr.Count\
    \ == 0)\n        {\n            return null;\n        }\n        else\n      \
    \  {\n            foreach (long x in arr)\n            {\n                if (x\
    \ < 0)\n                {\n                    Product *= -1;\n              \
    \      MagnitudeSum += -x;\n                }\n                else if (x > 0)\n\
    \                {\n                    MagnitudeSum += x;\n                }\n\
    \            }\n            MagnitudeSum *= Product;\n            return MagnitudeSum;\n\
    \        }", '        return null;', "        List<long> signs = new List<long>();\n\
    \        List<long> magnitudes = new List<long>();\n        foreach (long l in\
    \ arr) {\n            magnitudes.Add(Math.Abs(l));\n            signs.Add(Math.Sign(l));\n\
    \        }\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        foreach (long s in signs) {\n            prod\
    \ *= s;\n        }\n        long prod_magnitudes = prod;\n        foreach (long\
    \ m in magnitudes) {\n            prod_magnitudes *= m;\n        }\n        return\
    \ prod_magnitudes;", "        long result = 0;\n        if (arr.Count == 0) {\n\
    \            return null;\n        }\n        long prod = 1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n              \
    \  result += arr[i];\n            } else if (arr[i] < 0) {\n                result\
    \ += -arr[i];\n                prod *= -1;\n            }\n        }\n       \
    \ return result * prod;", "        long prod = 1;\n        long sum = 0;\n   \
    \     foreach (var x in arr) {\n            prod *= (x == 0) ? 1 : Math.Sign(x);\n\
    \            sum += Math.Abs(x);\n        }\n        return (arr.Count > 0) ?\
    \ (prod * sum) : (Nullable<long>)null;", "        Nullable<long> res = 1;\n  \
    \      if (arr.Count == 0) {\n            return null;\n        }\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n         \
    \       res *= 1;\n            } else if (arr[i] < 0) {\n                res *=\
    \ -1;\n            } else {\n                res *= 0;\n            }\n      \
    \  }\n        Nullable<long> prod = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            prod += Math.Abs(arr[i]);\n        }\n        return prod\
    \ * res;", "        // your code here\n        throw new Exception(\"Not implemented\"\
    );", "        if (arr.Count == 0) {\n            return null;\n        }\n   \
    \     long prod = 1;\n        long sum = 0;\n        foreach (long i in arr) {\n\
    \            prod *= Math.Sign(i);\n            sum += Math.Abs(i);\n        }\n\
    \        return prod * sum;", "        if (arr.Count == 0) return null;\n    \
    \    long? acc = 1;\n        foreach (long i in arr) {\n            if (i == 0)\
    \ return 0;\n            acc *= ((i > 0) ? 1 : -1);\n        }\n        acc *=\
    \ arr.Select(i => Math.Abs(i)).Sum();\n        return acc;", '        return null;',
  "        if (arr.Count < 1) {\n            return null;\n        }\n        long\
    \ curSign = 1;\n        long sum = 0;\n        foreach (long x in arr) {\n   \
    \         if (x == 0) {\n                curSign = 0;\n            } else if (x\
    \ < 0) {\n                curSign *= -1;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        return sum * curSign;", "        if (arr.Count == 0) return\
    \ null;\n        long sigma = 0;\n        long prod = 1;\n        foreach (long\
    \ x in arr) {\n            if (x > 0) {\n                sigma += x;\n       \
    \         prod *= 1;\n            } else if (x < 0) {\n                sigma +=\
    \ -x;\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n        }\n        return sigma * prod;", "        if\
    \ (arr.Count == 0) {\n            return null;\n        }\n        long sum =\
    \ 0;\n        long prod = 1;\n        foreach (long i in arr) {\n            if\
    \ (i == 0) {\n                continue;\n            }\n            prod *= (i\
    \ < 0) ? -1 : 1;\n            sum += Math.Abs(i);\n        }\n        return sum\
    \ * prod;", "        BigInteger m, s, a;\n        m = s = a = 0;\n        foreach\
    \ (var x in arr) {\n            if (x < 0) {\n                s++;\n         \
    \       m += -x;\n            } else if (x > 0) {\n                m += x;\n \
    \           } else {\n                a++;\n            }\n        }\n       \
    \ if (s % 2 == 0) {\n            return m;\n        } else {\n            return\
    \ -m;\n        }", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        var res = 1;\n        var counter = 0;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            var element = arr[i];\n            if\
    \ (element > 0) {\n                res *= 1;\n            } else if (element <\
    \ 0) {\n                res *= -1;\n            } else {\n                counter++;\n\
    \            }\n        }\n        if (counter > 0) {\n            return 0;\n\
    \        }\n        return res;", "        if (arr.Count == 0) {\n           \
    \ return null;\n        }\n        long output = 0;\n        int sign = 1;\n \
    \       foreach (long item in arr) {\n            if (item > 0) {\n          \
    \      output += item;\n            } else if (item < 0) {\n                output\
    \ += -item;\n                sign *= -1;\n            }\n        }\n        output\
    \ *= sign;\n        return output;", "        if (arr.Count == 0) {\n        \
    \    return null;\n        }\n        long prod = 1;\n        long magnitudeSum\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            magnitudeSum\
    \ += Math.Abs(arr[i]);\n            if (arr[i] != 0) {\n                prod *=\
    \ Math.Sign(arr[i]);\n            }\n        }\n        return prod * magnitudeSum;",
  "        if (arr.Count == 0) {\n            return null;\n        }\n        return\
    \ arr.Sum(x => Math.Abs(x)) * arr.Aggregate(1L, (x, y) => x * (long)Math.Sign(y));",
  '        throw new NotImplementedException();', "        // TO DO: your code here\n\
    \        return null;", '        return null;', "        long result = 0;\n  \
    \      if (arr.Count == 0)\n            return null;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            result += Math.Abs(arr[i]);\n        }\n\
    \        return result;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        return arr.Sum(x => x == 0 ? 0 : x < 0 ? -1 : 1) * arr.Where(x\
    \ => x != 0).Select(x => Math.Abs(x)).Aggregate((a, b) => a * b);", "        //\
    \ Your code goes here.\n        // Hint: how do you compute product of all elements\
    \ in arr?\n        // Hint: how do you compute sign of each element in arr?\n\
    \        // Hint: how do you compute sum of elements in arr?\n        if (arr.Count\
    \ == 0) {\n            return null;\n        } else {\n            long product\
    \ = 1;\n            long sum = 0;\n            foreach (long num in arr) {\n \
    \               if (num > 0) {\n                    product *= 1;\n          \
    \      } else if (num < 0) {\n                    product *= -1;\n           \
    \     } else {\n                    product *= 0;\n                }\n       \
    \         sum += Math.Abs(num);\n            }\n            return product * sum;\n\
    \        }", "        if (arr.Count == 0) {\n            return null;\n      \
    \  }\n\n        long sum = 0;\n        long prod = 1;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            long t = arr[i];\n            sum += Math.Abs(t);\n\
    \            prod *= t < 0 ? -1 : t > 0 ? 1 : 0;\n        }\n        return sum\
    \ * prod;", "        // idea:\n        // prod(1) = 1;\n        // prod(0) = 0;\n\
    \        // prod(-1) = -1;\n        // So we only need to count how many elements\
    \ equal to 1, -1.\n        if (arr.Count == 0) return null;\n        int cnt1\
    \ = 0, cntMinus1 = 0;\n        long sumMagnitude = 0;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] == 0) continue;\n            if\
    \ (arr[i] > 0) cnt1++;\n            else cntMinus1++;\n            sumMagnitude\
    \ += Math.Abs(arr[i]);\n        }\n        if (cnt1 == 0) return sumMagnitude\
    \ * (cntMinus1 % 2 == 0 ? 1 : -1);\n        else return sumMagnitude * (cntMinus1\
    \ % 2 == 0 ? 1 : -1) * (cnt1 % 2 == 0 ? 1 : -1);", "        if (arr.Count == 0)\
    \ {\n            return null;\n        }\n        long prod = 0;\n        long\
    \ sign = 1;\n        for (int i = 0; i < arr.Count; i++) {\n            long item\
    \ = arr[i];\n            if (item > 0) {\n                prod += item;\n    \
    \        } else if (item < 0) {\n                prod += -item;\n            \
    \    sign *= -1;\n            }\n        }\n        return prod * sign;", "  \
    \      int len = arr.Count;\n        if (len == 0) {\n            return null;\n\
    \        }\n        long res = 1;\n        long sum = 0;\n        for (int i =\
    \ 0; i < len; i++) {\n            var el = arr[i];\n            var els = el ==\
    \ 0 ? 0 : el < 0 ? -1 : 1;\n            var elm = el == 0 ? 0 : Math.Abs(el);\n\
    \            res *= els;\n            sum += elm;\n        }\n        return res\
    \ * sum;", '        return null;', "        var sign = 1;\n        var result\
    \ = 0;\n        foreach (var num in arr) {\n            var num_sign = num ==\
    \ 0 ? 0 : num > 0 ? 1 : -1;\n            if (num_sign != 0) {\n              \
    \  sign *= num_sign;\n                result += Math.Abs(num);\n            }\n\
    \        }\n        return sign == 0 ? null : (long?)sign * result;", "      \
    \  if (arr.Count() < 1) {\n            return null;\n        }\n        long?\
    \ prodSigns = (long)1L;\n        long? sumMagnitudes = (long)0L;\n        foreach\
    \ (long? val in arr) {\n            prodSigns *= val == 0 ? (long)0L : val < 0\
    \ ? (long)-1L : (long)1L;\n            sumMagnitudes += Math.Abs(val.Value);\n\
    \        }\n        return prodSigns * sumMagnitudes;", '        // Your code
    goes here', "        // your code here\n        return null;", "        // write\
    \ your code here.\n        return null;", "        // try it\n        // work\
    \ here\n        return null;", "        if (arr.Count == 0) return null;\n   \
    \     long prod = 1;\n        long sum = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            long v = arr[i];\n            if (v < 0) prod *= -1;\n \
    \           sum += Math.Abs(v);\n        }\n        return sum * prod;", "   \
    \     if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ ret = 0;\n        long sign = 1;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            long val = arr[i];\n            if (val < 0) {\n            \
    \    sign *= -1;\n                val *= -1;\n            } else if (val == 0)\
    \ {\n                sign = 0;\n            }\n            ret += val;\n     \
    \   }\n        return ret * sign;", '        throw new NotImplementedException();',
  "        long sum = 0;\n        long sign_prod = 1;\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            long x = arr[i];\n            sum += Math.Abs(x);\n\
    \            if (x > 0) {\n                sign_prod *= 1;\n            } else\
    \ if (x < 0) {\n                sign_prod *= -1;\n            } else {\n     \
    \           sign_prod *= 0;\n            }\n        }\n        if (sign_prod ==\
    \ 0) {\n            return 0;\n        } else {\n            return sum * sign_prod;\n\
    \        }", "        if (arr.Count == 0) {\n            return null;\n      \
    \  }\n        var prodSigns = 1L;\n        var prodMagnitudes = 0L;\n        foreach\
    \ (var x in arr) {\n            prodSigns *= Math.Sign(x);\n            prodMagnitudes\
    \ += Math.Abs(x);\n        }\n        return prodSigns * prodMagnitudes;", " \
    \       // Your code goes here\n        return null;", "        Nullable<long>\
    \ ret = null;\n        ret = arr.Aggregate(1L, (x, y) => x * (y > 0 ? 1 : y <\
    \ 0 ? -1 : 0));\n        ret *= arr.Aggregate(0L, (x, y) => x + (y == 0 ? 0 :\
    \ Math.Abs(y)));\n        return ret;", "        long sum = 0;\n        long prod\
    \ = 1;\n        foreach (var n in arr) {\n            long nn = n;\n         \
    \   long m = nn >= 0 ? nn : -nn;\n            long s = nn >= 0 ? 1 : -1;\n   \
    \         sum += m;\n            prod *= s;\n        }\n        return sum ==\
    \ 0 ? (Nullable<long>)null : sum * prod;", "        if (arr.Count == 0) return\
    \ null;\n        long prod = 1;\n        long sum = 0;\n        foreach (long\
    \ x in arr) {\n            long mag = Math.Abs(x);\n            long sign = 0;\n\
    \            if (x < 0) sign = -1;\n            if (x > 0) sign = 1;\n       \
    \     sum += mag;\n            prod *= sign;\n        }\n        return sum *\
    \ prod;", "        long prod = 1;\n        long mags = 0;\n        bool allZero\
    \ = true;\n        foreach (var v in arr) {\n            if (v == 0) continue;\n\
    \            else if (v > 0) prod *= 1;\n            else if (v < 0) prod *= -1;\n\
    \            mags += Math.Abs(v);\n            allZero = false;\n        }\n \
    \       if (allZero) return null;\n        return mags * prod;", "        // write\
    \ your code here\n        return null;", "        // the code below is submitted\
    \ by user @Dzhumagul\n        // try it online at http://tio.run/##W8tNS3DMC/@w2vFHyFSYTBgE5b@/fhx@EACSg5/5QN/Og\n\
    \        long? prodSigns = null;\n        foreach (long num in arr) {\n      \
    \      if (num != 0) {\n                if (prodSigns == null) {\n           \
    \         prodSigns = Math.Abs(num);\n                } else {\n             \
    \       prodSigns *= Math.Abs(num);\n                }\n            }\n      \
    \  }\n        foreach (long num in arr) {\n            if (num == 0) {\n     \
    \           continue;\n            }\n            if (num < 0) {\n           \
    \     prodSigns *= -1;\n            }\n            break;\n        }\n       \
    \ return prodSigns;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long prod = 1;\n        long sum = 0;\n        foreach (long\
    \ x in arr) {\n            if (x > 0) {\n                prod *= 1;\n        \
    \    } else if (x < 0) {\n                prod *= -1;\n            } else {\n\
    \                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        return sum * prod;", '        return arr.Count == 0 ? (Nullable<long>)null
    : arr.Sum(x => x == 0 ? 0 : Math.Abs(x)) * arr.Aggregate((x, y) => x == 0 ? y
    : (y == 0 ? x : x * y));', "        // FILL IN HERE\n        return null;", " \
    \       long res = 1;\n        long sum = 0;\n        int i = 0;\n        if (arr.Count()\
    \ == 0)\n            return null;\n        while (i < arr.Count()) {\n       \
    \     if (arr[i] < 0) {\n                res *= -1;\n                sum += -arr[i];\n\
    \            } else {\n                sum += arr[i];\n            }\n       \
    \     i += 1;\n        }\n        return sum * res;", "        var sign_product\
    \ = 0;\n        var value_sum = 0;\n        foreach (var item in arr) {\n    \
    \        var sign = (item == 0) ? 0 : (item < 0) ? -1 : 1;\n            sign_product\
    \ *= sign;\n            value_sum += Math.Abs(item);\n        }\n        if (value_sum\
    \ == 0) {\n            return null;\n        }\n        return sign_product *\
    \ value_sum;", "        if (arr.Count == 0) return null;\n        long sign =\
    \ 1;\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           long x = arr[i];\n            if (x > 0) {\n                sign *=\
    \ 1;\n            } else if (x < 0) {\n                sign *= -1;\n         \
    \   } else {\n                sign *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        return sum * sign;", "        // your code goes here\n   \
    \     long result = 1;\n        if (arr.Count == 0)\n            return null;\n\
    \        for (int i = 0; i < arr.Count; i++)\n        {\n            if (arr[i]\
    \ > 0)\n                result *= 1;\n            else if (arr[i] < 0)\n     \
    \           result *= -1;\n            else\n                result *= 0;\n  \
    \      }\n        return arr.Sum(x => Math.Abs(x)) * result;", "        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        long product = 1;\n  \
    \      long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n        \
    \    product *= (arr[i] < 0 ? -1 : (arr[i] > 0 ? 1 : 0));\n            sum +=\
    \ Math.Abs(arr[i]);\n        }\n        return product * sum;", "        long\
    \ sum = 0;\n        long prod = 1;\n        foreach (long elem in arr) {\n   \
    \         if (elem < 0) {\n                prod *= -1;\n            } else if\
    \ (elem > 0) {\n                sum += elem;\n            }\n        }\n     \
    \   if (arr.Count == 0) {\n            return null;\n        }\n        return\
    \ sum * prod;", "        // Your code here\n        return null;", "        long\
    \ result = 1;\n        long sum = 0;\n        if (arr.Count > 0) {\n         \
    \   for (long i = 0; i < arr.Count; i++) {\n                if (arr[(int)i] <\
    \ 0) {\n                    result *= -1;\n                }\n               \
    \ if (arr[(int)i] != 0) {\n                    sum += Math.Abs(arr[(int)i]);\n\
    \                }\n            }\n            return sum * result;\n        }\n\
    \        return null;", "        long sum = 0;\n        long mult = 1;\n     \
    \   foreach (var el in arr) {\n            if (el > 0)\n                sum +=\
    \ el;\n            else if (el < 0) {\n                sum -= el;\n          \
    \      mult *= -1;\n            }\n        }\n        if (arr.Count == 0)\n  \
    \          return null;\n        return sum * mult;", "        if (arr.Count ==\
    \ 0) {\n            return null;\n        }\n        long signprod = 1;\n    \
    \    long magsum = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 0) {\n                signprod = 0;\n                magsum = 0;\n         \
    \       break;\n            }\n            if (i < 0) {\n                signprod\
    \ *= -1;\n            }\n            magsum += Math.Abs(i);\n        }\n     \
    \   return signprod * magsum;", "        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long ret = 0;\n        long prod = 1;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n         \
    \       prod *= -1;\n            }\n            if (arr[i] != 0) {\n         \
    \       ret += Math.Abs(arr[i]);\n            }\n        }\n        return ret\
    \ * prod;", "        return arr.Aggregate(new {\n            totalSign = (long)1L,\n\
    \            sum = (long)0L\n        }, (acc, x) => {\n            if (x > 0)\
    \ {\n                return new {\n                    totalSign = acc.totalSign,\n\
    \                    sum = acc.sum + x\n                };\n            } else\
    \ if (x < 0) {\n                return new {\n                    totalSign =\
    \ acc.totalSign * -1L,\n                    sum = acc.sum + -x\n             \
    \   };\n            } else {\n                return new {\n                 \
    \   totalSign = acc.totalSign * 0L,\n                    sum = acc.sum\n     \
    \           };\n            }\n        }, acc => acc.totalSign == 0L ? new Nullable<long>()\
    \ : acc.totalSign * acc.sum);", '        throw new NotImplementedException();',
  '        return null;', '        return null;', "        if (arr.Count == 0) return\
    \ null;\n        long prod = 1;\n        long sum = 0;\n        foreach (long\
    \ n in arr) {\n            sum += Math.Abs(n);\n            if (n != 0) prod *=\
    \ n/Math.Abs(n);\n        }\n        return sum * prod;", "        if (arr.Count\
    \ == 0) return null;\n        long mags = 0;\n        long sign = 1;\n       \
    \ foreach (long item in arr) {\n            if (item < 0) sign *= -1;\n      \
    \      mags += Math.Abs(item);\n        }\n        return mags * sign;", '        return
    null;', "        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            long num = arr[i];\n            if (num < 0) {\n       \
    \         sum += -num;\n                prod *= -1;\n            } else if (num\
    \ > 0) {\n                sum += num;\n            }\n        }\n        return\
    \ sum * prod;", "        if (arr.Count == 0) return null;\n        long sign =\
    \ 1L;\n        long sum = 0L;\n        foreach (long elem in arr) {\n        \
    \    long elemSign = (elem > 0 ? 1L : elem < 0 ? -1L : 0L);\n            sign\
    \ *= elemSign;\n            sum += Math.Abs(elem);\n        }\n        return\
    \ sum * sign;", "        var prod = 1;\n        var sum = 0;\n        foreach\
    \ (var a in arr) {\n            var sign = a == 0 ? 0 : a > 0 ? 1 : -1;\n    \
    \        prod *= sign;\n            sum += Math.Abs(a);\n        }\n        return\
    \ prod == 0 ? 0 : (Nullable<long>)(prod * sum);", "        if (arr.Count == 0)\
    \ return null;\n        long product = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            int sign = Math.Sign(x);\n            product\
    \ *= sign;\n            sum += Math.Abs(x);\n        }\n        return sum * product;",
  "        return arr.Count == 0 ? null : (\n            (long)\n            arr.Select(n\
    \ => n == 0 ? 1 : Math.Sign(n))\n            .Aggregate((n, m) => n * m) *\n \
    \           arr.Select(n => Math.Abs(n))\n            .Aggregate((n, m) => n +\
    \ m)\n        );", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long sumpos = 0;\n        long prodneg = 1;\n        foreach\
    \ (var it in arr) {\n            if (it > 0) {\n                sumpos += it;\n\
    \            } else if (it < 0) {\n                prodneg *= -1;\n          \
    \  }\n        }\n        return sumpos * prodneg;", "        if (arr.Count() ==\
    \ 0) {\n            return null;\n        }\n        long prod = 1;\n        long\
    \ sum = 0;\n        foreach (long a in arr) {\n            prod *= a < 0 ? -1\
    \ : a == 0 ? 0 : 1;\n            sum += Math.Abs(a);\n        }\n        return\
    \ prod * sum;"]
stop_tokens:
- "\n    }\n"
