language: cs
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ cur = l[0];\n        bool inc = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] == cur) continue;\n            if (l[i] > cur)\
    \ {\n                if (!inc) return false;\n            } else {\n         \
    \       if (inc) inc = false;\n            }\n            cur = l[i];\n      \
    \  }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 0;\
    \ i < l.Count - 1; i++) {\n            if (l[i] > l[i + 1]) {\n              \
    \  increasing = false;\n            }\n            if (l[i] < l[i + 1]) {\n  \
    \              decreasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        long sign = l[1] - l[0];\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (sign != 0 && sign != l[i] - l[i - 1]) return\
    \ false;\n            sign = l[i] - l[i - 1];\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bdd9aea0c4d3479fa94913081c5bf6e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bdd9aea0c4d3479fa94913081c5bf6e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        var pre = l[0];\n    \
    \    var is_inc = pre == (long)0L;\n        var is_dec = pre == (long)0L;\n  \
    \      foreach (var i in l) {\n            is_inc = is_inc || (i > pre);\n   \
    \         is_dec = is_dec || (i < pre);\n            pre = i;\n        }\n   \
    \     return is_inc || is_dec;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <15739cb50abe4d81aa20ba152a4768cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <15739cb50abe4d81aa20ba152a4768cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ v = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i]\
    \ > v) {\n                for (int j = i + 1; j < l.Count; j++) {\n          \
    \          if (l[j] < l[j - 1]) {\n                        return false;\n   \
    \                 }\n                }\n                return true;\n       \
    \     }\n            if (l[i] < v) {\n                for (int j = i + 1; j <\
    \ l.Count; j++) {\n                    if (l[j] > l[j - 1]) {\n              \
    \          return false;\n                    }\n                }\n         \
    \       return true;\n            }\n        }\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) return true;\n        bool inc = l[1] > l[0];\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (inc) {\n                if (l[i] < l[i\
    \ - 1]) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l[i] > l[i - 1]) {\n                    return false;\n\
    \                }\n            }\n        }\n        return true;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ d = l[1] - l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if\
    \ (d * (l[i] - l[i - 1]) < 0) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ decrease = false;\n        bool increase = false;\n        long last = l[0];\n\
    \        for (int i = 0; i < l.Count; i++) {\n            if (last > l[i]) {\n\
    \                decrease = true;\n            }\n            if (last < l[i])\
    \ {\n                increase = true;\n            }\n            if (decrease\
    \ && increase) {\n                return false;\n            }\n            last\
    \ = l[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = l[0] < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n\
    \            bool next = l[i] < l[i + 1];\n            if (increasing && !next)\
    \ {\n                return false;\n            }\n            if (!increasing\
    \ && next) {\n                return false;\n            }\n        }\n      \
    \  return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if ((l.Count\
    \ == (long)1L)) {\n            return true;\n        }\n\n        long i = (long)0L;\n\
    \        while (i < (l.Count - (long)1L))\n        {\n            long a = l[i];\n\
    \            long b = l[i + (long)1L];\n            if ((a < b))\n           \
    \ {\n                long j = i + (long)1L;\n                while (j < (l.Count\
    \ - (long)1L))\n                {\n                    a = l[j];\n           \
    \         b = l[j + (long)1L];\n                    if ((a > b))\n           \
    \         {\n                        return false;\n                    }\n\n\
    \                    j = j + (long)1L;\n\n                }\n\n              \
    \  return true;\n\n            }\n            else if ((a > b))\n            {\n\
    \                long j = i + (long)1L;\n                while (j < (l.Count -\
    \ (long)1L))\n                {\n                    a = l[j];\n             \
    \       b = l[j + (long)1L];\n                    if ((a < b))\n             \
    \       {\n                        return false;\n                    }\n\n  \
    \                  j = j + (long)1L;\n\n                }\n\n                return\
    \ true;\n\n            }\n\n            i = i + (long)1L;\n\n        }\n\n   \
    \     return true;\n\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi6af_sz4.cs(24,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpi6af_sz4.cs(25,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpi6af_sz4.cs(31,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpi6af_sz4.cs(32,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpi6af_sz4.cs(50,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpi6af_sz4.cs(51,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (long i = (long)1L;\
    \ i < len(l); i++)\n        {\n            if (l[i] < l[i - 1L])\n           \
    \ {\n                increasing = false;\n            }\n\n            if (l[i]\
    \ > l[i - 1L])\n            {\n                decreasing = false;\n         \
    \   }\n\n        }\n\n        return increasing || decreasing;\n\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx_bz951d.cs(19,37): error CS0103: The name ''len'' does not exist in the
    current context

    /tmp/tmpx_bz951d.cs(21,19): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpx_bz951d.cs(21,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpx_bz951d.cs(26,19): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpx_bz951d.cs(26,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        int\
    \ sign = 0;\n        for (int i = 1; i < l.Count; i++) {\n            int c =\
    \ Math.Sign(l[i - 1] - l[i]);\n            if (c == 0) continue;\n           \
    \ if (sign == 0) sign = c;\n            if (sign != c) return false;\n       \
    \ }\n        return true;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = true;\n\
    \        bool decreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            increasing = increasing && (l[i] >= l[i - 1]);\n            decreasing\
    \ = decreasing && (l[i] <= l[i - 1]);\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        int direction = 0;\n        for (int i = 1; i <\
    \ l.Count; i++) {\n            long diff = l[i] - l[i - 1];\n            if (diff\
    \ > 0) {\n                if (direction < 0) return false;\n                direction\
    \ = 1;\n            } else if (diff < 0) {\n                if (direction > 0)\
    \ return false;\n                direction = -1;\n            }\n        }\n \
    \       return true;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        return\
    \ (((l.GetRange(1, l.Count-1)).Zip(l, (fst, snd) => fst - snd)).All((long el)\
    \ => (el < (long)0L)) || ((l.GetRange(1, l.Count-1)).Zip(l, (fst, snd) => fst\
    \ - snd)).All((long el) => (el > (long)0L)));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e0310b0746491ca0a894b6401327ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e0310b0746491ca0a894b6401327ab>:0 \n"
  stdout: ''
  timestamp: 1659976692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        // are\
    \ all the elements equal?\n        var equal = l.All(v => v == l[0]);\n      \
    \  if (equal) {\n            return true;\n        }\n        // are all the elements\
    \ non-equal?\n        var allDistinct = l.Distinct().Count() == l.Count();\n \
    \       if (allDistinct) {\n            return false;\n        }\n        // are\
    \ all the elements either strictly increasing or strictly decreasing?\n      \
    \  var zipped = l.Zip(l.Skip(1), (a, b) => b - a);\n        var uniform = zipped.All(v\
    \ => v == zipped[0]);\n        return uniform;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj68bl9yn.cs(29,44): error CS0021: Cannot apply indexing with [] to an
    expression of type ''IEnumerable<long>''

    '
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ inc = true;\n        bool dec = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] > l[i - 1]) {\n                dec = false;\n \
    \           }\n            if (l[i] < l[i - 1]) {\n                inc = false;\n\
    \            }\n        }\n        return inc || dec;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 3) {\n            return true;\n        }\n        long start = l[0];\n  \
    \      bool increasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            if (l[i] < start) {\n                if (increasing) {\n        \
    \            increasing = false;\n                }\n            } else if (l[i]\
    \ > start) {\n                if (!increasing) {\n                    return false;\n\
    \                }\n            }\n            start = l[i];\n        }\n    \
    \    return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ inc = true;\n        bool dec = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            inc &= l[i] >= l[i - 1];\n            dec &= l[i] <= l[i\
    \ - 1];\n        }\n        return inc || dec;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l[0];\n        bool monotonic = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] != prev && l[i] != prev + 1) {\n              \
    \  monotonic = false;\n                break;\n            }\n            prev\
    \ = l[i];\n        }\n        return monotonic;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d4a391854ad41a28881842e2e4364df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d4a391854ad41a28881842e2e4364df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        int\
    \ dir = 0;\n        for (int i = 1; i < l.Count; i++) {\n            int d = (int)Math.Sign(l[i]\
    \ - l[i - 1]);\n            if (d == 0) {\n                continue;\n       \
    \     }\n            if (dir == 0) {\n                dir = d;\n            }\
    \ else if (dir != d) {\n                return false;\n            }\n       \
    \ }\n        return true;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        int\
    \ n = l.Count;\n        if (n <= 1) {\n            return true;\n        }\n \
    \       int inc = 0;\n        int i = 1;\n        for (; i < n; i++) {\n     \
    \       if (l[i] > l[i - 1]) {\n                inc = 1;\n                break;\n\
    \            }\n            if (l[i] < l[i - 1]) {\n                inc = -1;\n\
    \                break;\n            }\n        }\n        if (i == n) {\n   \
    \         return true;\n        }\n        for (; i < n; i++) {\n            if\
    \ (l[i] - l[i - 1] != inc) {\n                return false;\n            }\n \
    \       }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd9780658cc847e993072ccb14c28bc5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd9780658cc847e993072ccb14c28bc5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ inc = 0L;\n        for (int i = 1; i < (int)l.Count; i++) {\n            var\
    \ diff = l[i] - l[i - 1];\n            if (diff == 0L) {\n                continue;\n\
    \            }\n\n            if (inc == 0L) {\n                inc = diff;\n\
    \            }\n\n            if (inc != diff) {\n                return false;\n\
    \            }\n\n        }\n\n        return true;\n\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b46365e7546413aa9b230b648208d91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b46365e7546413aa9b230b648208d91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if ((l.Count)\
    \ == 0) {\n            return true;\n        }\n        bool decreasing = (l[0])\
    \ > (l[(l.Count) - 1]);\n        for (int i = 0; (i) < ((l.Count) - 1); ++i) {\n\
    \            if ((decreasing) && ((l[i]) < (l[i + 1]))) {\n                return\
    \ false;\n            }\n            if ((!decreasing) && ((l[i]) > (l[i + 1])))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        var\
    \ diff = (long)0L;\n        for (long i = (long)1L; i < len(l); i++)\n       \
    \ {\n            var curr = l[i] - l[i - 1L];\n            if (curr * diff < (long)0L)\n\
    \            {\n                return false;\n            }\n\n            if\
    \ (curr != (long)0L)\n            {\n                diff = curr;\n          \
    \  }\n\n        }\n\n        return true;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfr4kxxuj.cs(18,37): error CS0103: The name ''len'' does not exist in the
    current context

    /tmp/tmpfr4kxxuj.cs(20,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpfr4kxxuj.cs(20,33): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        int\
    \ dir = 0;\n        for (int i = 1; i < l.Count; i++) {\n            long v =\
    \ l[i];\n            if (dir == 0) {\n                if (v > l[i - 1]) {\n  \
    \                  dir = 1;\n                } else if (v < l[i - 1]) {\n    \
    \                dir = -1;\n                }\n            } else if (dir == 1)\
    \ {\n                if (v < l[i - 1]) {\n                    return false;\n\
    \                }\n            } else if (dir == -1) {\n                if (v\
    \ > l[i - 1]) {\n                    return false;\n                }\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 0;\
    \ (i + 1) < l.Count; i++) {\n            if ((l[i] - l[i + 1]) < 0) {\n      \
    \          increasing = false;\n            }\n            if ((l[i] - l[i + 1])\
    \ > 0) {\n                decreasing = false;\n            }\n        }\n    \
    \    return increasing || decreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        int\
    \ m = (l.Count - 1);\n        if (m <= 0) {\n            return true;\n      \
    \  }\n        int d = (int)(Math.Sign(l[m] - l[(m - 1)]));\n        m--;\n   \
    \     while (m >= 0) {\n            int nd = (int)(Math.Sign(l[m] - l[(m - 1)]));\n\
    \            if (nd != d) {\n                return false;\n            }\n  \
    \          m--;\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Monotonic\
    \ (System.Collections.Generic.List`1[T] l) [0x0003f] in <3d7fb5bf97214028a44b7b8e48771d9e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00017] in <3d7fb5bf97214028a44b7b8e48771d9e>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Monotonic\
    \ (System.Collections.Generic.List`1[T] l) [0x0003f] in <3d7fb5bf97214028a44b7b8e48771d9e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00017] in <3d7fb5bf97214028a44b7b8e48771d9e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        if (l[(int)1L] > l[(int)0L])\
    \ {\n            for (long i = (long)1L; i < (long)l.Count; i++) {\n         \
    \       if (l[(int)i] < l[(int)(i - (long)1L)]) {\n                    return\
    \ false;\n                }\n            }\n        }\n        else {\n      \
    \      for (long i = (long)1L; i < (long)l.Count; i++) {\n                if (l[(int)i]\
    \ > l[(int)(i - (long)1L)]) {\n                    return false;\n           \
    \     }\n            }\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        int\
    \ size = l.Count;\n        if (size < 3) {\n            return true;\n       \
    \ }\n        long st = l[(int)1L];\n        bool z = false;\n        long z__prev1\
    \ = z;\n\n        for (long j = (long)2L; j < size; j++)\n        {\n        \
    \    z = l[(int)j] != st;\n            st = l[(int)j];\n            z__prev1 =\
    \ z;\n        }\n\n        bool inc = z__prev1;\n        st = l[(int)1L];\n  \
    \      z = false;\n        long z__prev1 = z;\n\n        for (long j = (long)2L;\
    \ j < size; j++)\n        {\n            z = l[(int)j] != st;\n            st\
    \ = l[(int)j];\n            z__prev1 = z;\n        }\n\n        bool dec = z__prev1;\n\
    \        return inc || dec;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyk2uycvq.cs(23,25): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    /tmp/tmpyk2uycvq.cs(29,24): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    /tmp/tmpyk2uycvq.cs(32,20): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmpyk2uycvq.cs(35,14): error CS0128: A local variable or function named ''z__prev1''
    is already defined in this scope

    /tmp/tmpyk2uycvq.cs(35,25): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    /tmp/tmpyk2uycvq.cs(41,24): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    /tmp/tmpyk2uycvq.cs(44,20): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    '
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        var\
    \ s = l.GetEnumerator();\n        s.MoveNext();\n        var first = s.Current;\n\
    \        var inc = true;\n        var dec = true;\n        for (; s.MoveNext();)\
    \ {\n            var n = s.Current;\n            if (first < n) {\n          \
    \      dec = false;\n            } else if (first > n) {\n                inc\
    \ = false;\n            }\n            if (!(inc || dec)) {\n                return\
    \ false;\n            }\n            first = n;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        int inc = 0;\n       \
    \ int dec = 0;\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i\
    \ - 1] < l[i]) {\n                inc += 1;\n            }\n            else if\
    \ (l[i - 1] > l[i]) {\n                dec += 1;\n            }\n        }\n \
    \       return inc == 0 || dec == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        var\
    \ last = l[0];\n        var increasing = true;\n        var decreasing = true;\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] > last) {\n\
    \                decreasing = false;\n            } else if (l[i] < last) {\n\
    \                increasing = false;\n            }\n            last = l[i];\n\
    \        }\n        return increasing || decreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        var diffs = l.GetRange(1,\
    \ l.Count - 1).Zip(l.GetRange(0, l.Count - 1), (a, b) => a - b);\n        var\
    \ gt = diffs.Any((x) => x > 0);\n        var lt = diffs.Any((x) => x < 0);\n \
    \       return !(gt && lt);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n            if (l[i] < l[i - 1]) {\n              \
    \  increasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        long prev = l[0];\n   \
    \     int comparer = 0;\n        for (int i = 1; i < l.Count; i++) {\n       \
    \     long current = l[i];\n            if (comparer == 0) {\n               \
    \ if (current < prev) {\n                    comparer = -1;\n                }\n\
    \                else if (current > prev) {\n                    comparer = 1;\n\
    \                }\n            }\n            else if (comparer == -1) {\n  \
    \              if (current > prev) {\n                    return false;\n    \
    \            }\n            }\n            else if (comparer == 1) {\n       \
    \         if (current < prev) {\n                    return false;\n         \
    \       }\n            }\n            prev = current;\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        var\
    \ sign = Math.Sign(l[1] - l[0]);\n        if (sign == 0)\n            sign = Math.Sign(l[2]\
    \ - l[1]);\n        if (sign == 0)\n            return true;\n        for (int\
    \ i = 2; i < l.Count; i++) {\n            var sign2 = Math.Sign(l[i] - l[i - 1]);\n\
    \            if (sign2 == 0)\n                continue;\n            if (sign2\
    \ != sign)\n                return false;\n        }\n        return true;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        return l.Skip(1).Zip(l, (a, b) => Math.Sign(a - b)).Distinct().Count()\
    \ <= 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f58d3761d09424899bfc9753a1e1414>:0 \n"
  stdout: ''
  timestamp: 1659976693
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if ((l.Count)\
    \ == (0L)) {\n            return true;\n        }\n        if ((l.Count) == (1L))\
    \ {\n            return true;\n        }\n        var n = l[0L];\n        var\
    \ sign = n;\n        {\n            long i__prev1 = i;\n\n            foreach\
    \ (var (__i, __n) in l)\n            {\n                i = __i;\n           \
    \     n = __n;\n                if (sign == 0L) {\n                    sign =\
    \ n;\n                }\n                else {\n                    if ((n) *\
    \ (sign) < 0L) {\n                        return false;\n                    }\n\
    \                }\n            }\n\n            i = i__prev1;\n        }\n  \
    \      return true;\n\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbt8na14t.cs(23,19): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpbt8na14t.cs(26,29): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmpbt8na14t.cs(28,40): error CS1061: ''long'' does not contain a definition
    for ''Deconstruct'' and no accessible extension method ''Deconstruct'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpbt8na14t.cs(28,40): error CS8129: No suitable ''Deconstruct'' instance
    or extension method was found for type ''long'', with 2 out parameters and a void
    return type.

    /tmp/tmpbt8na14t.cs(28,27): error CS8130: Cannot infer the type of implicitly-typed
    deconstruction variable ''__i''.

    /tmp/tmpbt8na14t.cs(28,32): error CS8130: Cannot infer the type of implicitly-typed
    deconstruction variable ''__n''.

    /tmp/tmpbt8na14t.cs(30,17): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmpbt8na14t.cs(42,13): error CS0103: The name ''i'' does not exist in the
    current context

    '
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        long prev = l[0];\n\
    \        foreach (long item in l) {\n            if (item < prev) {\n        \
    \        increasing = false;\n            }\n            if (item > prev) {\n\
    \                decreasing = false;\n            }\n            prev = item;\n\
    \        }\n        return increasing || decreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (((l.Count)\
    \ == (0L))) {\n            return true;\n        }\n        bool _lt = true;\n\
    \        bool _gt = true;\n        for (int i = 1; i < (l.Count); i++) {\n   \
    \         if ((l[i]) < (l[i - 1])) {\n                _gt = false;\n         \
    \   }\n            if ((l[i]) > (l[i - 1])) {\n                _lt = false;\n\
    \            }\n        }\n        return _lt || _gt;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        return\
    \ (MonotonicIncreasing(l) || MonotonicDecreasing(l));\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe12t40vd.cs(17,17): error CS0103: The name ''MonotonicIncreasing'' does
    not exist in the current context

    /tmp/tmpe12t40vd.cs(17,43): error CS0103: The name ''MonotonicDecreasing'' does
    not exist in the current context

    '
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ n = (long)l.Count;\n        long ok = (long)0L;\n        if (n == (long)1L)\n\
    \        {\n            return true;\n        }\n\n        if (l[(int)(1L)] >\
    \ l[(int)(0L)])\n        {\n            for (long i = (long)1L; i < n; i++)\n\
    \            {\n                if (l[(int)(i)] >= l[(int)(i - 1L)])\n       \
    \         {\n                    ok += (long)1L;\n                }\n\n      \
    \      }\n\n        }\n        else\n        {\n            for (long i = (long)1L;\
    \ i < n; i++)\n            {\n                if (l[(int)(i)] <= l[(int)(i - 1L)])\n\
    \                {\n                    ok += (long)1L;\n                }\n\n\
    \            }\n\n        }\n\n        if (ok == n - (long)1L)\n        {\n  \
    \          return true;\n        }\n\n        return false;\n\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 0;\
    \ i < l.Count - 1; i++) {\n            increasing = increasing && (l[i] <= l[i\
    \ + 1]);\n            decreasing = decreasing && (l[i] >= l[i + 1]);\n       \
    \ }\n        return increasing || decreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      long diff = l[1] - prev;\n        foreach (long x in l.Skip(1)) {\n   \
    \         if (diff * (x - prev) < 0) {\n                return false;\n      \
    \      }\n            prev = x;\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        var inc = l[0] < l[1];\n\
    \        for (var i = 1; i < l.Count; i++) {\n            if (inc && l[i - 1]\
    \ > l[i]) {\n                return false;\n            }\n            if (!inc\
    \ && l[i - 1] < l[i]) {\n                return false;\n            }\n      \
    \  }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ inc = false;\n        bool dec = false;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] > l[i - 1]) {\n                inc = true;\n  \
    \          } else if (l[i] < l[i - 1]) {\n                dec = true;\n      \
    \      }\n            if (inc && dec) {\n                return false;\n     \
    \       }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ ans = true;\n        for (int i = 1; i < l.Count; i++) {\n            ans =\
    \ ans && (l[i] >= l[i - 1]);\n        }\n        if (ans) {\n            return\
    \ true;\n        }\n        ans = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            ans = ans && (l[i] <= l[i - 1]);\n        }\n        return\
    \ ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool rising = l[1] >=\
    \ l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (rising)\
    \ {\n                if (l[i] < l[i - 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] > l[i - 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        int\
    \ n = l.Count;\n        if (n == 1) {\n            return true;\n        }\n \
    \       else if (n == 2) {\n            return true;\n        }\n        else\
    \ {\n            int inc = 0;\n            int dec = 0;\n            for (int\
    \ i = 1; i < n; i++) {\n                long diff = l[i] - l[i - 1];\n       \
    \         if (diff > 0) {\n                    inc++;\n                }\n   \
    \             else if (diff < 0) {\n                    dec++;\n             \
    \   }\n            }\n            return inc == 0 || dec == 0;\n        }\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        var\
    \ allgreater = true;\n        var allless = true;\n        for (var i = (long)1L;\
    \ i < len(l); i++)\n        {\n            allgreater = allgreater && l[i] >=\
    \ l[i - 1L];\n            allless = allless && l[i] <= l[i - 1L];\n        }\n\
    \n        return allgreater || allless;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptredozr9.cs(19,36): error CS0103: The name ''len'' does not exist in the
    current context

    /tmp/tmptredozr9.cs(21,42): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmptredozr9.cs(21,50): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmptredozr9.cs(22,36): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmptredozr9.cs(22,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        bool up = false;\n   \
    \     bool down = false;\n        for (long i = (long)1L; i < l.Count; i++) {\n\
    \            if (l[(int)(i)] > l[(int)(i - 1L)]) {\n                up = true;\n\
    \            }\n            else if (l[(int)(i)] < l[(int)(i - 1L)]) {\n     \
    \           down = true;\n            }\n            if (up && down) {\n     \
    \           return false;\n            }\n        }\n        return true;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        int\
    \ sign = 0;\n        for (int i = 1; i < l.Count; i++) {\n            int sign2\
    \ = Sign(l[i] - l[i - 1]);\n            if (sign2 == 0) continue;\n          \
    \  if (sign != 0 && sign != sign2) return false;\n            sign = sign2;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmso1ebof.cs(19,25): error CS0103: The name ''Sign'' does not exist in
    the current context

    '
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 0;\
    \ i < l.Count - 1; i++) {\n            if (l[i] < l[i + 1]) {\n              \
    \  decreasing = false;\n            }\n            if (l[i] > l[i + 1]) {\n  \
    \              increasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        var\
    \ ascending = false;\n        var descending = false;\n        for (var i = (long)1L;\
    \ i < (long)len(l); i++)\n        {\n            if (l[i] > l[i - 1L])\n     \
    \       {\n                ascending = true;\n            }\n\n            if\
    \ (l[i] < l[i - 1L])\n            {\n                descending = true;\n    \
    \        }\n\n        }\n\n        return !ascending || !descending;\n\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfz9n225a.cs(19,42): error CS0103: The name ''len'' does not exist in the
    current context

    /tmp/tmpfz9n225a.cs(21,19): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpfz9n225a.cs(21,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpfz9n225a.cs(26,19): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpfz9n225a.cs(26,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        long prev = l[0];\n\
    \        foreach (long e in l) {\n            if (e < prev) {\n              \
    \  increasing = false;\n            }\n            if (e > prev) {\n         \
    \       decreasing = false;\n            }\n            prev = e;\n        }\n\
    \        return increasing || decreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long last = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long n in l) {\n            if (n > last) {\n                decreasing = false;\n\
    \            }\n            if (n < last) {\n                increasing = false;\n\
    \            }\n            last = n;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing)\
    \ {\n                if (l[i] < l[i - 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] > l[i - 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ last = l[0];\n        bool increasing = true;\n        bool decreasing = true;\n\
    \        for (int i = 1; i < l.Count; i++) {\n            increasing = increasing\
    \ && (l[i] >= last);\n            decreasing = decreasing && (l[i] <= last);\n\
    \            last = l[i];\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        int\
    \ n = l.Count;\n        if(n == 1) {\n            return true;\n        }\n  \
    \      else if(n == 2) {\n            return true;\n        }\n        else {\n\
    \            bool allIncreasing = true;\n            bool allDecreasing = true;\n\
    \            for(int i = 1; i < n; i++) {\n                if(l[i] > l[i - 1])\
    \ {\n                    allDecreasing = false;\n                }\n         \
    \       else if(l[i] < l[i - 1]) {\n                    allIncreasing = false;\n\
    \                }\n            }\n            return allIncreasing || allDecreasing;\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if ((l.Count)\
    \ == 0) {\n            return true;\n        }\n        bool increasing = l[(l.Count)\
    \ - 1] > l[0];\n        for (int i = 1; i < (l.Count); i++) {\n            if\
    \ (((increasing) && (l[i] < l[(i - 1)])) || ((!increasing) && (l[i] > l[(i - 1)])))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long p = l[0];\n     \
    \   int d = 0;\n        foreach (long q in l) {\n            if (d == 0) {\n \
    \               if (q < p) {\n                    d = -1;\n                }\n\
    \                else if (q > p) {\n                    d = 1;\n             \
    \   }\n            }\n            else if (d == -1) {\n                if (q >\
    \ p) {\n                    return false;\n                }\n            }\n\
    \            else if (d == 1) {\n                if (q < p) {\n              \
    \      return false;\n                }\n            }\n            p = q;\n \
    \       }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) return true;\n        long d = l[1] - l[0];\n        foreach (long ll\
    \ in l.Skip(1)) {\n            if (d * (ll - l[0]) < 0) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <23e7ee12a6674fd5ace30e1647987f47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <23e7ee12a6674fd5ace30e1647987f47>:0 \n"
  stdout: ''
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        return\
    \ l.SequenceEqual(l.OrderBy(i => i)) || l.SequenceEqual(l.OrderByDescending(i\
    \ => i));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        var\
    \ incr = l[0] <= l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n    \
    \        if (incr && l[i] > l[i + 1]) {\n                return false;\n     \
    \       }\n            if (!incr && l[i] < l[i + 1]) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increase = true;\n        bool decrease = true;\n        for (int i = 0; i <\
    \ l.Count - 1; i++) {\n            if (l[i] > l[i + 1])\n                increase\
    \ = false;\n            if (l[i] < l[i + 1])\n                decrease = false;\n\
    \        }\n        return increase || decrease;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 3) {\n            return true;\n        }\n        long cmp = l[1] - l[0];\n\
    \        bool increasing = cmp > 0L;\n        bool decreasing = cmp < 0L;\n  \
    \      for (long i = 2L; i < l.Count; i++) {\n            long cmp2 = l[i] - l[i\
    \ - 1L];\n            if (cmp2 > 0L) {\n                increasing = true;\n \
    \           }\n            else if (cmp2 < 0L) {\n                decreasing =\
    \ true;\n            }\n            if (increasing && decreasing) {\n        \
    \        return false;\n            }\n        }\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr3hw2rkb.cs(24,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpr3hw2rkb.cs(24,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976693
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ r = true;\n        if ((l.Count == 0)) {\n            r = false;\n        }\n\
    \        else {\n            if ((l.Count == 1)) {\n                r = true;\n\
    \            }\n            else {\n                for (int i = 0; (i < (l.Count\
    \ - 1)); i++) {\n                    long a = l[i];\n                    long\
    \ b = l[(i + 1)];\n                    if (((a < b) && (l[(i + 1)] < l[(i + 2)])))\
    \ {\n                        r = true;\n                    }\n              \
    \      else {\n                        if (((a > b) && (l[(i + 1)] > l[(i + 2)])))\
    \ {\n                            r = true;\n                        }\n      \
    \                  else {\n                            if (((a == b) && (l[(i\
    \ + 1)] == l[(i + 2)]))) {\n                                r = true;\n      \
    \                      }\n                            else {\n               \
    \                 r = false;\n                                break;\n       \
    \                     }\n                        }\n                    }\n  \
    \              }\n            }\n        }\n        return r;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Monotonic\
    \ (System.Collections.Generic.List`1[T] l) [0x0005c] in <0bd57eebdecb43a09cb5a486c58bb0c2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00017] in <0bd57eebdecb43a09cb5a486c58bb0c2>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Monotonic\
    \ (System.Collections.Generic.List`1[T] l) [0x0005c] in <0bd57eebdecb43a09cb5a486c58bb0c2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00017] in <0bd57eebdecb43a09cb5a486c58bb0c2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976693
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        long diff = l[1L] - l[0L];\n\
    \        for (long i = 1L; i < l.Count; i++) {\n            if (l[i] - l[i - 1L]\
    \ != diff) {\n                return false;\n            }\n        }\n      \
    \  return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp89zt9312.cs(20,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp89zt9312.cs(20,31): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp89zt9312.cs(22,19): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp89zt9312.cs(22,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 3) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ dec=false;\n        bool inc=false;\n        for (int i=1; i<l.Count; i++) {\n\
    \            if (l[i] > l[i-1]) {\n                inc=true;\n            } else\
    \ if (l[i] < l[i-1]) {\n                dec=true;\n            }\n           \
    \ if (inc && dec) {\n                return false;\n            }\n        }\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        var\
    \ c = 0;\n        while (c < l.Count() - 1) {\n            var d = l[c + 1] -\
    \ l[c];\n            var any = (c != 0) && d != 0;\n            var monotonic\
    \ = (c == 0) || d * l[c] > 0;\n            if (any && !monotonic) {\n        \
    \        return false;\n            }\n            c += 1;\n        }\n      \
    \  return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eca53553856d400b936a4c0693723b96>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eca53553856d400b936a4c0693723b96>:0 \n"
  stdout: ''
  timestamp: 1659976694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = l[0] < l[1];\n        for (long i = (long)1L; i < len(l) - 1; i++)\
    \ {\n            if (increasing && l[i] > l[i + 1]) {\n                return\
    \ false;\n            }\n            else if (!increasing && l[i] < l[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl0ewcln1.cs(18,37): error CS0103: The name ''len'' does not exist in the
    current context

    /tmp/tmpl0ewcln1.cs(19,33): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpl0ewcln1.cs(19,40): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpl0ewcln1.cs(22,39): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpl0ewcln1.cs(22,46): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        long current = l[0];\n\
    \        bool increasing = true;\n        bool decreasing = true;\n        for\
    \ (int i = 1; i < l.Count; i++) {\n            if (current >= l[i]) {\n      \
    \          increasing = false;\n            }\n            if (current <= l[i])\
    \ {\n                decreasing = false;\n            }\n            current =\
    \ l[i];\n        }\n        return increasing || decreasing;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb47bd4ec94048ae87546e1f7c4b3164>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb47bd4ec94048ae87546e1f7c4b3164>:0 \n"
  stdout: ''
  timestamp: 1659976694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = false;\n        bool decreasing = false;\n        for (int i =\
    \ 1; i < l.Count; i++) {\n            if (l[i] > l[i - 1]) {\n               \
    \ increasing = true;\n            }\n            if (l[i] < l[i - 1]) {\n    \
    \            decreasing = true;\n            }\n        }\n        return !(increasing\
    \ && decreasing);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            increasing = increasing && (l[i - 1] <= l[i]);\n\
    \            decreasing = decreasing && (l[i - 1] >= l[i]);\n        }\n     \
    \   return increasing || decreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        int\
    \ n = l.Count;\n        if (n <= 1) {\n            return true;\n        }\n \
    \       if (l[(int)0L] < l[(int)1L]) {\n            var i = (int)1L;\n       \
    \     while (i < n - 1) {\n                if (l[i] > l[i + 1]) {\n          \
    \          return false;\n                }\n                i = i + 1;\n    \
    \        }\n            return true;\n        }\n        if (l[(int)0L] > l[(int)1L])\
    \ {\n            var i = (int)1L;\n            while (i < n - 1) {\n         \
    \       if (l[i] < l[i + 1]) {\n                    return false;\n          \
    \      }\n                i = i + 1;\n            }\n            return true;\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a60ee5c9a0584a25a62127ee09bae6b3>:0 \n"
  stdout: ''
  timestamp: 1659976694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        bool up = l[(int)0L] <\
    \ l[(int)1L];\n        for (long i = (long)1L; i < len(l) - 1L; i++) {\n     \
    \       bool curup = l[(int)i] < l[(int)(i + 1L)];\n            if (curup != up)\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzvhsd2jv.cs(21,37): error CS0103: The name ''len'' does not exist in the
    current context

    '
  timestamp: 1659976694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ inc = false;\n        bool dec = false;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] > l[i - 1]) {\n                inc = true;\n  \
    \          } else if (l[i] < l[i - 1]) {\n                dec = true;\n      \
    \      }\n            if (inc && dec) {\n                return false;\n     \
    \       }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long cur = l[0];\n   \
    \     bool dec = false;\n        bool inc = false;\n        for (int i = 0; i\
    \ < l.Count; i++) {\n            if (l[i] > cur) {\n                if (dec) {\n\
    \                    return false;\n                }\n                inc = true;\n\
    \            }\n            else if (l[i] < cur) {\n                if (inc) {\n\
    \                    return false;\n                }\n                dec = true;\n\
    \            }\n            cur = l[i];\n        }\n        return true;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        var first = l[0];\n  \
    \      bool increasing = false;\n        bool decreasing = false;\n        for\
    \ (int i = 1; i < l.Count; i++) {\n            var second = l[i];\n          \
    \  if (first < second) {\n                increasing = true;\n            }\n\
    \            else if (first > second) {\n                decreasing = true;\n\
    \            }\n            if (increasing && decreasing) {\n                return\
    \ false;\n            }\n            first = second;\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increase = true;\n        for (int i = 1; i < l.Count; i++) {\n            if\
    \ (l[i - 1] == l[i]) {\n                continue;\n            }\n           \
    \ if (increase && l[i - 1] > l[i]) {\n                increase = false;\n    \
    \        } else if (!increase && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        return\n\
    \            // All elements are equal\n            (l.Distinct().Count() == 1)\
    \ ||\n            // List elements are monotonically increasing\n            (l.SequenceEqual(l.OrderBy(x\
    \ => x))) ||\n            // List elements are monotonically decreasing\n    \
    \        (l.SequenceEqual(l.OrderByDescending(x => x)));\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increase = true;\n        bool decrease = true;\n        for (int i = 1; i <\
    \ l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increase\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decrease = false;\n            }\n        }\n        return increase || decrease;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        var\
    \ len = l.Count;\n        var i = (long)1L;\n        var diff = new List<long>((new\
    \ long[]{(long)0L}));\n        // Compute all the diffs.\n        while (i < len)\n\
    \        {\n            diff.Add(l[(int)(i)] - l[(int)(i - 1L)]);\n          \
    \  i++;\n        }\n        // If all are non-negative or non-positive, then the\
    \ list is monotonic.\n        if (diff.All((x => x >= 0L)))\n        {\n     \
    \       return true;\n        }\n\n        if (diff.All((x => x <= 0L)))\n   \
    \     {\n            return true;\n        }\n\n        return false;\n\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if ((l.Count\
    \ == (long)0L)) {\n            return true;\n        }\n\n        var (n, c) =\
    \ ((l[(int)(0L)]), (long)0L);\n        foreach (var (i, e) in l.Skip(1L))\n  \
    \      {\n            var (_, d) = ((e - n), (long)0L);\n            if (d ==\
    \ (long)0L) {\n                continue;\n            }\n\n            if (c !=\
    \ (long)0L) {\n                return false;\n            }\n\n            c =\
    \ d;\n\n        }\n\n        return true;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9lt_0lz4.cs(22,39): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp9lt_0lz4.cs(22,23): error CS8130: Cannot infer the type of implicitly-typed
    deconstruction variable ''i''.

    /tmp/tmp9lt_0lz4.cs(22,26): error CS8130: Cannot infer the type of implicitly-typed
    deconstruction variable ''e''.

    '
  timestamp: 1659976694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        var\
    \ s = new List<long>(l);\n        s.Sort();\n        return (l.SequenceEqual(s)\
    \ || l.SequenceEqual(s.AsEnumerable().Reverse()));\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        int\
    \ n = l.Count;\n        // increasing or equal\n        for (int i = 0; i < n\
    \ - 1; i++) {\n            if (l[i] > l[i + 1]) {\n                break;\n  \
    \          }\n            if (i == n - 2) {\n                return true;\n  \
    \          }\n        }\n        // decreasing or equal\n        for (int i =\
    \ 0; i < n - 1; i++) {\n            if (l[i] < l[i + 1]) {\n                break;\n\
    \            }\n            if (i == n - 2) {\n                return true;\n\
    \            }\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long?\
    \ last = null;\n        foreach (long x in l) {\n            if (last == null)\
    \ {\n                last = x;\n            } else {\n                if (x <\
    \ last) {\n                    if (x < last) {\n                        return\
    \ false;\n                    }\n                } else {\n                  \
    \  if (x > last) {\n                        return false;\n                  \
    \  }\n                }\n                last = x;\n            }\n        }\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88cc864c3161442db3c14daf1aed63bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88cc864c3161442db3c14daf1aed63bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        int\
    \ direction = 0;\n        for (long i = (long)1L; i < (long)l.Count; i++)\n  \
    \      {\n            long delta = l[(int)(i)] - l[(int)(i - 1L)];\n         \
    \   if (delta == 0L)\n            {\n                continue;\n            }\n\
    \n            int curDirection = 1;\n            if (delta < 0L)\n           \
    \ {\n                curDirection = -1;\n            }\n\n            if (direction\
    \ == 0L)\n            {\n                direction = curDirection;\n         \
    \   }\n            else if (direction != curDirection)\n            {\n      \
    \          return false;\n            }\n\n        }\n\n        return true;\n\
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        else {\n            long\
    \ t = (long) 0L;\n            bool increasing = true;\n            bool decreasing\
    \ = true;\n            for (int i = 1; i < l.Count; i++) {\n                if\
    \ (l[i] < l[i - 1]) {\n                    increasing = false;\n             \
    \   }\n                else if (l[i] > l[i - 1]) {\n                    decreasing\
    \ = false;\n                }\n            }\n            return increasing ||\
    \ decreasing;\n        }\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ d = 0L;\n        long prev = l[0L];\n        foreach (var x in l) {\n      \
    \      if (d == 0L) {\n                d = x - prev;\n            }\n        \
    \    else if (d > 0L && x - prev < 0L) {\n                return false;\n    \
    \        }\n            else if (d < 0L && x - prev > 0L) {\n                return\
    \ false;\n            }\n            prev = x;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcck1n33h.cs(18,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        long diff0 = l[1] - l[0];\n\
    \        bool incr = diff0 > 0;\n        bool decr = diff0 < 0;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            long diff = l[i] - l[i - 1];\n     \
    \       bool _incr = diff > 0;\n            bool _decr = diff < 0;\n         \
    \   if (_incr != incr || _decr != decr) {\n                return false;\n   \
    \         }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <53377e7a4f8a4bc895a577dbf3394026>:0 \n"
  stdout: ''
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long last = l[0];\n  \
    \      var increasing = true;\n        foreach (var x in l) {\n            if\
    \ (x > last) {\n                if (!increasing) {\n                    return\
    \ false;\n                }\n            } else if (x < last) {\n            \
    \    if (increasing) {\n                    increasing = false;\n            \
    \    }\n            }\n            last = x;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976695
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        for\
    \ (long i = (long)1L; i < (long)l.Count(); i++)\n        {\n            if ((l[(int)(i\
    \ - (long)1L)] > l[(int)i] && l[(int)i] < l[(int)(i + (long)1L)]) || (l[(int)(i\
    \ - (long)1L)] < l[(int)i] && l[(int)i] > l[(int)(i + (long)1L)]))\n         \
    \   {\n                return false;\n            }\n\n        }\n\n        return\
    \ true;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Monotonic\
    \ (System.Collections.Generic.List`1[T] l) [0x0004e] in <8645b5ee804e4c499a19efad3cf1f3f4>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00017] in <8645b5ee804e4c499a19efad3cf1f3f4>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Monotonic\
    \ (System.Collections.Generic.List`1[T] l) [0x0004e] in <8645b5ee804e4c499a19efad3cf1f3f4>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00017] in <8645b5ee804e4c499a19efad3cf1f3f4>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        var\
    \ i = 0;\n        while (i < l.Count - 1 && l[i] == l[i + 1]) {\n            i\
    \ += 1;\n        }\n        if (i == l.Count - 1) {\n            return true;\n\
    \        } else {\n            var sign = Math.Sign(l[i + 1] - l[i]);\n      \
    \      for (; i < l.Count - 1; i++) {\n                if (Math.Sign(l[i + 1]\
    \ - l[i]) != sign) {\n                    return false;\n                }\n \
    \           }\n            return true;\n        }\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <17955c1605ac431ea11ef8717d9a0933>:0 \n"
  stdout: ''
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        int\
    \ n = l.Count;\n        if (n <= 1) return true;\n        bool inc = l[1] > l[0];\n\
    \        for (int i = 2; i < n; i++) {\n            if (inc && l[i] < l[i - 1])\
    \ return false;\n            if (!inc && l[i] > l[i - 1]) return false;\n    \
    \    }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        return\
    \ l.SequenceEqual(l.OrderBy(a => a)) || l.SequenceEqual(l.OrderByDescending(a\
    \ => a));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        int direction = 0;\n \
    \       long prev = l[0];\n        foreach (long x in l) {\n            if (x\
    \ > prev) {\n                if (direction == 0) {\n                    direction\
    \ = 1;\n                }\n                else if (direction == -1) {\n     \
    \               return false;\n                }\n            }\n            else\
    \ if (x < prev) {\n                if (direction == 0) {\n                   \
    \ direction = -1;\n                }\n                else if (direction == 1)\
    \ {\n                    return false;\n                }\n            }\n   \
    \         prev = x;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i - 1] > l[i]) {\n                increasing\
    \ = false;\n            }\n            if (l[i - 1] < l[i]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        for\
    \ (int i = 1; i < l.Count; i++) {\n            if ((l[i] - l[i - 1]) * (l[1] -\
    \ l[0]) < 0) {\n                return false;\n            }\n        }\n    \
    \    return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = long.MaxValue;\n        long max = long.MinValue;\n        long last =\
    \ long.MinValue;\n        foreach (long v in l) {\n            if (v < min) {\n\
    \                min = v;\n            }\n            if (v > max) {\n       \
    \         max = v;\n            }\n            if (last == long.MinValue) {\n\
    \                last = v;\n            } else {\n                if (last !=\
    \ v) {\n                    return false;\n                }\n            }\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <223986f8d44b4a24a63ce89ca58a52b0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <223986f8d44b4a24a63ce89ca58a52b0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long last = l[0];\n  \
    \      for (int i = 1; i < l.Count; i++) {\n            if (l[i] < last) {\n \
    \               for (int j = i; j < l.Count; j++) {\n                    if (l[j]\
    \ > last) {\n                        return false;\n                    }\n  \
    \                  last = l[j];\n                }\n                return true;\n\
    \            }\n            last = l[i];\n        }\n        return true;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing)\
    \ {\n                if (l[i] < l[i - 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] > l[i - 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ mon = true;\n        for (int i = 1; i < l.Count; i++) {\n            mon =\
    \ mon && (l[i] - l[i - 1]) * (l[0] - l[1]) >= 0;\n        }\n        return mon;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21f42e94fd2048c880346a4b1232c4b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21f42e94fd2048c880346a4b1232c4b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) return true;\n        long sign = 0;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long x = l[i] - l[i - 1];\n            if (x == 0) continue;\n\
    \            if (sign != 0 && sign != x / Math.Abs(x)) {\n                return\
    \ false;\n            }\n            sign = x / Math.Abs(x);\n        }\n    \
    \    return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        int\
    \ i = 0;\n        for (; i + 1 < l.Count; i++) {\n            if (l[i] > l[i +\
    \ 1]) {\n                break;\n            }\n        }\n        if (i + 1 ==\
    \ l.Count) {\n            return true;\n        }\n        for (; i + 1 < l.Count;\
    \ i++) {\n            if (l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976695
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = false;\n        bool decreasing = false;\n        for (long i =\
    \ (long)1L; i < len(l); i++)\n        {\n            if (l[i] > l[i - 1L])\n \
    \           {\n                increasing = true;\n            }\n\n         \
    \   if (l[i] < l[i - 1L])\n            {\n                decreasing = true;\n\
    \            }\n\n        }\n\n        return !(increasing && decreasing);\n\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps8wdd_sk.cs(19,37): error CS0103: The name ''len'' does not exist in the
    current context

    /tmp/tmps8wdd_sk.cs(21,19): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmps8wdd_sk.cs(21,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmps8wdd_sk.cs(26,19): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmps8wdd_sk.cs(26,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool inc = l[1] > l[0];\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (inc && l[i] < l[i\
    \ - 1]) {\n                return false;\n            }\n            if (!inc\
    \ && l[i] > l[i - 1]) {\n                return false;\n            }\n      \
    \  }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ is_monotonic = true;\n        if (l.Count <= 1) {\n            is_monotonic\
    \ = true;\n        } else {\n            long first = l[0];\n            bool\
    \ increasing = first < l[1];\n            for (int i = 1; i < l.Count; i++) {\n\
    \                if (increasing && l[i] < l[i - 1]) {\n                    is_monotonic\
    \ = false;\n                    break;\n                } else if (!increasing\
    \ && l[i] > l[i - 1]) {\n                    is_monotonic = false;\n         \
    \           break;\n                }\n            }\n        }\n        return\
    \ is_monotonic;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        long delta = l[1] - l[0];\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (delta * (l[i] -\
    \ l[i - 1]) < 0) {\n                return false;\n            }\n        }\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) return true;\n        return (l[0] < l[1] && l.Skip(1).Zip(l, (a, b) =>\
    \ a >= b).All(x => x)) ||\n               (l[0] > l[1] && l.Skip(1).Zip(l, (a,\
    \ b) => a <= b).All(x => x));\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b1d5316c1d6e4ab182f611e18cc4187f>:0 \n"
  stdout: ''
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        return\
    \ l.SequenceEqual(l.OrderBy(x => x)) || l.SequenceEqual(l.OrderByDescending(x\
    \ => x));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976695
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        return\
    \ (((l.Count) < (2L)) || (Enumerable.All(l, (long x, long y) => ((x) <= (y)))))\
    \ || (Enumerable.All(l, (long x, long y) => ((x) >= (y))));\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppsy6wo5e.cs(17,58): error CS1593: Delegate ''Func<long, bool>'' does not
    take 2 arguments

    /tmp/tmppsy6wo5e.cs(17,116): error CS1593: Delegate ''Func<long, bool>'' does
    not take 2 arguments

    '
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 0;\
    \ i < l.Count - 1; i++) {\n            if (l[i] > l[i + 1]) {\n              \
    \  increasing = false;\n            }\n            if (l[i] < l[i + 1]) {\n  \
    \              decreasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if ((l.Count\
    \ == (long)1L)) {\n            return true;\n        }\n\n        var mode = -(long)1L;\n\
    \        for (long i = (long)1L; i < len(l); i++)\n        {\n            var\
    \ delta = l[i] - l[i - 1L];\n            if (delta == (long)0L) {\n          \
    \      continue;\n            }\n\n            if (mode == -(long)1L)\n      \
    \      {\n                mode = delta;\n            }\n            else if (mode\
    \ != delta)\n            {\n                return false;\n            }\n\n \
    \       }\n        return true;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp43d4a38y.cs(22,37): error CS0103: The name ''len'' does not exist in the
    current context

    /tmp/tmp43d4a38y.cs(24,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp43d4a38y.cs(24,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976695
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        long dir = l[(int)1L]\
    \ - l[(int)0L];\n        var i__prev1 = i;\n\n        for (long i = (long)1L;\
    \ i < len(l) - 1L; i++) {\n            var next = l[(int)(i + 1L)] - l[(int)i];\n\
    \            if (dir * next < (long)0L) {\n                return false;\n   \
    \         }\n\n        }\n\n\n        i = i__prev1;\n        return true;\n\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5cu9um1x.cs(21,24): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmp5cu9um1x.cs(23,37): error CS0103: The name ''len'' does not exist in the
    current context

    /tmp/tmp5cu9um1x.cs(32,9): error CS0103: The name ''i'' does not exist in the
    current context

    '
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        for\
    \ (int i = 1; i < l.Count; i++) {\n            if (Math.Sign(l[i] - l[i - 1])\
    \ * Math.Sign(l[1] - l[0]) < 0) {\n                return false;\n           \
    \ }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l[0];\n        bool increasing = true;\n        bool decreasing = true;\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] < first) {\n\
    \                increasing = false;\n            }\n            if (l[i] > first)\
    \ {\n                decreasing = false;\n            }\n            first = l[i];\n\
    \        }\n        return increasing || decreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long start = l[0];\n \
    \       long delta = 0;\n        foreach (long ll in l) {\n            if (delta\
    \ == 0) {\n                delta = ll - start;\n            }\n            else\
    \ {\n                if (delta > 0) {\n                    if (ll - start < 0)\
    \ {\n                        return false;\n                    }\n          \
    \      }\n                else {\n                    if (ll - start > 0) {\n\
    \                        return false;\n                    }\n              \
    \  }\n            }\n            start = ll;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) return true;\n        long prev = l[0];\n        bool increasing = true;\n\
    \        bool decreasing = true;\n        foreach (long x in l) {\n          \
    \  if (prev < x) {\n                decreasing = false;\n            } else if\
    \ (prev > x) {\n                increasing = false;\n            }\n         \
    \   prev = x;\n        }\n        return increasing || decreasing;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count()\
    \ == 0) {\n            return true;\n        }\n        if (l.Count() == 1) {\n\
    \            return true;\n        }\n        long prev = l[0];\n        bool\
    \ prev_set = false;\n        bool is_increasing = false;\n        foreach (long\
    \ x in l) {\n            if (prev_set) {\n                if (x > prev) {\n  \
    \                  if (is_increasing) {\n                        prev = x;\n \
    \                       continue;\n                    }\n                   \
    \ else {\n                        return false;\n                    }\n     \
    \           }\n                else if (x < prev) {\n                    if (is_increasing)\
    \ {\n                        return false;\n                    }\n          \
    \          else {\n                        prev = x;\n                       \
    \ continue;\n                    }\n                }\n                else {\n\
    \                    prev = x;\n                    continue;\n              \
    \  }\n            }\n            else {\n                prev = x;\n         \
    \       prev_set = true;\n                continue;\n            }\n        }\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0fc4174b811493d89fe369fe65e8f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0fc4174b811493d89fe369fe65e8f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        return\
    \ l.SequenceEqual(l.OrderBy(x => x)) || l.SequenceEqual(l.OrderByDescending(x\
    \ => x));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976695
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        var\
    \ order = 0;\n        for (int i = 1; i < l.Count; i++) {\n            var diff\
    \ = l[i] - l[i - 1];\n            if (diff == 0) {\n                continue;\n\
    \            }\n            if (order == 0) {\n                order = diff /\
    \ Math.Abs(diff);\n            } else if (order != diff / Math.Abs(diff)) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdx0nmagw.cs(24,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n\n        int diff = l[1] > l[0]\
    \ ? 1 : -1;\n        for (int i = 2; i < l.Count; i++) {\n            int new_diff\
    \ = l[i] > l[i - 1] ? 1 : -1;\n            if (new_diff != diff) {\n         \
    \       return false;\n            }\n        }\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976696
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        var\
    \ (st, prev) = (0L, l[0L]);\n        foreach (var v in l) {\n            if (st\
    \ == 0L) {\n                if (v < prev) {\n                    st = -1L;\n \
    \               }\n                else if (v > prev) {\n                    st\
    \ = 1L;\n                }\n            }\n            else if (st == -1L) {\n\
    \                if (v > prev) {\n                    return false;\n        \
    \        }\n            }\n            else if (st == 1L) {\n                if\
    \ (v < prev) {\n                    return false;\n                }\n       \
    \     }\n            prev = v;\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpopuwtlke.cs(17,33): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ down = false;\n        bool up = false;\n        for (int i = 0; i < l.Count\
    \ - 1; i++) {\n            if (l[i] > l[i + 1]) {\n                down = true;\n\
    \            }\n            if (l[i] < l[i + 1]) {\n                up = true;\n\
    \            }\n        }\n        return down ^ up;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ffa8196a231f4cda8ce75b334d45559a>:0 \n"
  stdout: ''
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        return\
    \ l.SequenceEqual(l.OrderBy(i => i)) || l.SequenceEqual(l.OrderByDescending(i\
    \ => i));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        int\
    \ sign = 0;\n        for (int i = 1; i < l.Count; i++) {\n            int thisSign\
    \ = 0;\n            if (l[i] > l[i - 1]) {\n                thisSign = 1;\n  \
    \          } else if (l[i] < l[i - 1]) {\n                thisSign = -1;\n   \
    \         }\n            if (sign == 0) {\n                sign = thisSign;\n\
    \            } else if (sign != thisSign) {\n                return false;\n \
    \           }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a684ea13a4014b04ab078496dd1e86b3>:0 \n"
  stdout: ''
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = (l[(int)0L]\
    \ < l[(int)1L]);\n        for (long i = (long)1L; i < (long)l.Count; i++) {\n\
    \            if (increasing) {\n                if (l[(int)i] < l[(int)(i - (long)1L)])\
    \ {\n                    return false;\n                }\n            }\n   \
    \         else {\n                if (l[(int)i] > l[(int)(i - (long)1L)]) {\n\
    \                    return false;\n                }\n            }\n       \
    \ }\n        return true;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ >= l[0];\n        for (int i = 2; i < l.Count; i++) {\n            bool newincrease\
    \ = l[i] >= l[i - 1];\n            if (newincrease != increasing) {\n        \
    \        return false;\n            }\n        }\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <10a1409d10bf46af8b6d3cd396c40f4e>:0 \n"
  stdout: ''
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ monotonic = true;\n        long sign = l[1] - l[0];\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            long new_sign = l[i] - l[i - 1];\n        \
    \    if (sign * new_sign < 0) {\n                monotonic = false;\n        \
    \        break;\n            }\n        }\n        return monotonic;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        long prev = l[0];\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n\
    \                increasing = false;\n            }\n            if (l[i] > prev)\
    \ {\n                decreasing = false;\n            }\n            prev = l[i];\n\
    \        }\n        return increasing || decreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        long sign = Math.Sign(l[1]\
    \ - l[0]);\n        for (int i = 1; i < l.Count; i++) {\n            if (Math.Sign(l[i]\
    \ - l[i - 1]) != sign) {\n                return false;\n            }\n     \
    \   }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <42370888d5fe4b7683ab185dd49eeb51>:0 \n"
  stdout: ''
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        long prev = l[0];\n   \
    \     bool inc = false;\n        bool dec = false;\n        for (int i = 1; i\
    \ < l.Count; i++) {\n            if (l[i] > prev) {\n                if (dec)\
    \ {\n                    return false;\n                }\n                inc\
    \ = true;\n            }\n            else if (l[i] < prev) {\n              \
    \  if (inc) {\n                    return false;\n                }\n        \
    \        dec = true;\n            }\n            prev = l[i];\n        }\n   \
    \     return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        var v = l[0];\n        var inc = true;\n       \
    \ foreach (var e in l) {\n            if (e == v) continue;\n            if (inc\
    \ && e < v) {\n                inc = false;\n            } else if (!inc && e\
    \ > v) {\n                return false;\n            }\n            v = e;\n \
    \       }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ monotonic = true;\n        int sign = 0;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long this_sign = l[i - 1] - l[i];\n            if (this_sign\
    \ == 0) {\n                continue;\n            }\n            if (sign == 0)\
    \ {\n                sign = (int)this_sign;\n            } else if (this_sign\
    \ > 0) {\n                if (sign < 0) {\n                    monotonic = false;\n\
    \                    break;\n                }\n            } else {\n       \
    \         if (sign > 0) {\n                    monotonic = false;\n          \
    \          break;\n                }\n            }\n        }\n        return\
    \ monotonic;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        bool decreasing = l[0] > l[1];\n        for (int\
    \ i = 2; i < l.Count; i++) {\n            if (decreasing != (l[i - 1] > l[i]))\
    \ return false;\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9bf398cd74814c83aa61336b62b5d4e3>:0 \n"
  stdout: ''
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long last = l[0];\n  \
    \      bool increasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            long next = l[i];\n            if (next == last) {\n            \
    \    continue;\n            }\n            if (next > last) {\n              \
    \  if (!increasing) {\n                    return false;\n                }\n\
    \            } else {\n                if (increasing) {\n                   \
    \ increasing = false;\n                }\n            }\n            last = next;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976696
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        for\
    \ (long i = 1; i < l.Count; i++) {\n            if (Math.Sign(l[i] - l[i - 1])\
    \ * Math.Sign(l[l.Count - 1] - l[0]) != 1) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4d33hdni.cs(18,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4d33hdni.cs(18,36): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        int direction = 0;\n \
    \       for (int i = 1; i < l.Count; i++) {\n            if (l[i - 1] < l[i])\
    \ {\n                if (direction < 0) {\n                    return false;\n\
    \                }\n                direction = 1;\n            }\n          \
    \  else if (l[i - 1] > l[i]) {\n                if (direction > 0) {\n       \
    \             return false;\n                }\n                direction = -1;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976696
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ inc = false;\n        bool dec = false;\n        long last = (long)0L;\n   \
    \     foreach (long v in l)\n        {\n            if (v > last)\n          \
    \  {\n                inc = true;\n            }\n            else if (v < last)\n\
    \            {\n                dec = true;\n            }\n            else\n\
    \            {\n                throw new System.Exception(\"Expected monotonic\
    \ list\");\n            }\n            last = v;\n            if (inc && dec)\n\
    \            {\n                return false;\n            }\n        }\n    \
    \    return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9c79cacd7e884dd0a1173132741c652a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9c79cacd7e884dd0a1173132741c652a>:0 \n\nUnhandled Exception:\n\
    System.Exception: Expected monotonic list\n  at Problem.Monotonic (System.Collections.Generic.List`1[T]\
    \ l) [0x0003f] in <9c79cacd7e884dd0a1173132741c652a>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00104] in <9c79cacd7e884dd0a1173132741c652a>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.Exception: Expected monotonic l"
  stdout: ''
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        // Assume\
    \ we have an increasing list by default.\n        bool increasing = true;\n  \
    \      // Check last element.\n        long last = l[0L];\n        // Start i\
    \ at the second element.\n        long i = 1L;\n        // Iterate through list.\n\
    \        while (i < len(l))\n        {\n            // Check if we are decreasing.\n\
    \            if (l[i] < last)\n            {\n                increasing = false;\n\
    \                break;\n            }\n\n            last = l[i];\n         \
    \   i++;\n        }\n\n        // If we find one decreasing, we will catch it\
    \ here.\n        if (increasing)\n        {\n            return true;\n      \
    \  }\n\n        // Assume we have a decreasing list by default.\n        bool\
    \ decreasing = true;\n        // Check last element.\n        last = l[0L];\n\
    \        // Start i at the second element.\n        i = 1L;\n        // Iterate\
    \ through list.\n        while (i < len(l))\n        {\n            // Check if\
    \ we are increasing.\n            if (l[i] > last)\n            {\n          \
    \      decreasing = false;\n                break;\n            }\n\n        \
    \    last = l[i];\n            i++;\n        }\n\n        return decreasing;\n\
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeeghfmfg.cs(20,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpeeghfmfg.cs(24,20): error CS0103: The name ''len'' does not exist in the
    current context

    /tmp/tmpeeghfmfg.cs(27,19): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpeeghfmfg.cs(33,22): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpeeghfmfg.cs(46,18): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpeeghfmfg.cs(50,20): error CS0103: The name ''len'' does not exist in the
    current context

    /tmp/tmpeeghfmfg.cs(53,19): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpeeghfmfg.cs(59,22): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        if (l[0] < l[1]) {\n  \
    \          // Increasing\n            for (int i = 1; i < l.Count; i++) {\n  \
    \              if (l[i] < l[i - 1]) {\n                    return false;\n   \
    \             }\n            }\n        } else if (l[0] > l[1]) {\n          \
    \  // Decreasing\n            for (int i = 1; i < l.Count; i++) {\n          \
    \      if (l[i] > l[i - 1]) {\n                    return false;\n           \
    \     }\n            }\n        } else {\n            return Monotonic(l.GetRange(1,\
    \ l.Count - 1));\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if ((l.Count\
    \ == (long)1L)) {\n            return true;\n        }\n\n        bool inc = (l[(int)((long)1L)]\
    \ >= l[(int)((long)0L)]);\n        for (long i = (long)2L; i < (long)l.Count;\
    \ i++)\n        {\n            if ((inc && (l[(int)(i)] < l[(int)((i - (long)1L))]))\
    \ || (!inc && (l[(int)(i)] > l[(int)((i - (long)1L))])))\n            {\n    \
    \            return false;\n            }\n\n        }\n\n        return true;\n\
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976696
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        long d = l[(int)1L] - l[(int)0L];\n\
    \        {\n            long i__prev1 = i;\n\n            for (long i = (long)1L;\
    \ i < len(l) - 1L; i++)\n            {\n                if (d * (l[(int)(i + 1L)]\
    \ - l[(int)i]) < 0L)\n                {\n                    return false;\n \
    \               }\n\n            }\n\n\n            i = i__prev1;\n        }\n\
    \        return true;\n\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmy63hduj.cs(22,29): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmpmy63hduj.cs(24,41): error CS0103: The name ''len'' does not exist in the
    current context

    /tmp/tmpmy63hduj.cs(34,13): error CS0103: The name ''i'' does not exist in the
    current context

    '
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        var\
    \ n = l.Count;\n        var up = true;\n        var down = true;\n        for\
    \ (int i = 1; i < n; i++) {\n            if (l[i] > l[i - 1]) {\n            \
    \    down = false;\n            } else if (l[i] < l[i - 1]) {\n              \
    \  up = false;\n            }\n        }\n        return up || down;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976696
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = true;\n\
    \        if (l[(int)0L] > l[(int)1L]) {\n            increasing = false;\n   \
    \     }\n        for (long i = (long)1L; i < len(l) - 1L; i++) {\n           \
    \ if (increasing && l[(int)(i + 1L)] < l[(int)i]) {\n                return false;\n\
    \            }\n            if (!increasing && l[(int)(i + 1L)] > l[(int)i]) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx2krs8r6.cs(24,37): error CS0103: The name ''len'' does not exist in the
    current context

    '
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        var a = l[0];\n       \
    \ var b = l[1];\n        if (a < b) {\n            // Increasing\n           \
    \ for (var i = 1; i < l.Count; i += 1) {\n                if (l[i] < l[i - 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     } else if (a > b) {\n            // Decreasing\n            for (var i =\
    \ 1; i < l.Count; i += 1) {\n                if (l[i] > l[i - 1]) {\n        \
    \            return false;\n                }\n            }\n        } else {\n\
    \            return false;\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf5c584ff9ea4a0d9395d23c8c394c42>:0 \n"
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n            if (l[i] < l[i - 1]) {\n              \
    \  increasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        long o = 0L;\n        long\
    \ m = l[0];\n        long M = l[0];\n        foreach (long v in l) {\n       \
    \     if (v > M) {\n                M = v;\n            }\n            if (v <\
    \ m) {\n                m = v;\n            }\n        }\n        if (M == m)\
    \ {\n            return true;\n        }\n        if (l[0] < l[1]) {\n       \
    \     o = 1L;\n        }\n        if (l[0] > l[1]) {\n            o = -1L;\n \
    \       }\n        foreach (long i in Enumerable.Range(0L, (long)(l.Count - 1)))\
    \ {\n            if (o == 0L) {\n                return true;\n            }\n\
    \            if (o == 1L) {\n                if (l[i] > l[i + 1]) {\n        \
    \            return false;\n                }\n            }\n            if (o\
    \ == -1L) {\n                if (l[i] < l[i + 1]) {\n                    return\
    \ false;\n                }\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_zzxgzla.cs(40,45): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_zzxgzla.cs(40,49): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp_zzxgzla.cs(45,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_zzxgzla.cs(45,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_zzxgzla.cs(50,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_zzxgzla.cs(50,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976696
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long d = l[(int)0L];\n\
    \        for (long i = (long)1L; i < len(l); i++) {\n            long d2 = l[(int)i];\n\
    \            if (((d > d2) && (d <= d2)) || ((d < d2) && (d >= d2))) {\n     \
    \           return false;\n            }\n            d = d2;\n        }\n   \
    \     return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ut8wgqy.cs(21,37): error CS0103: The name ''len'' does not exist in the
    current context

    '
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ d = l[1]-l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if\
    \ (d != l[i]-l[i-1]) return false;\n        }\n        return true;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72b86b0aca9d4b118573f012509fe927>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72b86b0aca9d4b118573f012509fe927>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        int first = 0;\n     \
    \   int last = l.Count - 1;\n        long firstVal = l[first];\n        long lastVal\
    \ = l[last];\n        if (firstVal < lastVal) {\n            for (int i = first;\
    \ i < last; i += 1) {\n                if (l[i] > l[i + 1]) {\n              \
    \      return false;\n                }\n            }\n        }\n        else\
    \ {\n            for (int i = first; i < last; i += 1) {\n                if (l[i]\
    \ < l[i + 1]) {\n                    return false;\n                }\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        if (l[0] == l[1]) {\n \
    \           return Monotonic(l.GetRange(1, l.Count - 1));\n        }\n       \
    \ if (l[0] < l[1]) {\n            for (int i = 1; i < l.Count - 1; i++) {\n  \
    \              if (l[i] > l[i + 1]) {\n                    return false;\n   \
    \             }\n            }\n        } else {\n            for (int i = 1;\
    \ i < l.Count - 1; i++) {\n                if (l[i] < l[i + 1]) {\n          \
    \          return false;\n                }\n            }\n        }\n      \
    \  return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        int\
    \ sgn = 0;\n        for (int i = 1; i < l.Count; i++) {\n            int sgn2\
    \ = l[i].CompareTo(l[i - 1]);\n            if (sgn2 == 0) {\n                continue;\n\
    \            }\n            if (sgn != 0 && sgn != sgn2) {\n                return\
    \ false;\n            }\n            sgn = sgn2;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        else {\n            long\
    \ first = l[0];\n            bool increasing = false;\n            foreach (long\
    \ e in l) {\n                if (first != e) {\n                    increasing\
    \ = first < e;\n                    break;\n                }\n            }\n\
    \            foreach (long e in l) {\n                if (increasing && e < first)\
    \ {\n                    return false;\n                }\n                else\
    \ if (!increasing && e > first) {\n                    return false;\n       \
    \         }\n                first = e;\n            }\n            return true;\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976696
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        if (l.Count == 1) {\n\
    \            return true;\n        }\n        bool increasing = true;\n      \
    \  if (l[(int)0L] > l[(int)1L]) {\n            increasing = false;\n        }\n\
    \        foreach (var (i, x) in l.Skip(1L).Select((x, i) => (i, x))) {\n     \
    \       var p = l[(int)(i - 1L)];\n            if (increasing) {\n           \
    \     if (x < p) {\n                    return false;\n                }\n   \
    \         }\n            else {\n                if (x > p) {\n              \
    \      return false;\n                }\n            }\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpflnau9_c.cs(27,39): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpflnau9_c.cs(27,23): error CS8130: Cannot infer the type of implicitly-typed
    deconstruction variable ''i''.

    /tmp/tmpflnau9_c.cs(27,26): error CS8130: Cannot infer the type of implicitly-typed
    deconstruction variable ''x''.

    '
  timestamp: 1659976696
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        var\
    \ len = l.Count;\n        var dir = true;\n        var i = 0;\n        while (i\
    \ < len - 1) {\n            if (l[i] < l[i + 1]) {\n                if (!dir)\
    \ {\n                    return false;\n                }\n            } else\
    \ if (l[i] > l[i + 1]) {\n                if (dir) {\n                    dir\
    \ = false;\n                }\n            }\n            i += 1;\n        }\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            increasing = increasing && (l[i - 1] <= l[i]);\n\
    \            decreasing = decreasing && (l[i - 1] >= l[i]);\n        }\n     \
    \   return increasing || decreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ last = 0;\n        bool first = true;\n        bool increasing = false;\n  \
    \      foreach (long x in l) {\n            if (first) {\n                last\
    \ = x;\n                first = false;\n            } else {\n               \
    \ if (x == last) {\n                    return false;\n                } else\
    \ if (x > last) {\n                    if (increasing && x < last) {\n       \
    \                 return false;\n                    }\n                    increasing\
    \ = true;\n                } else {\n                    if (!increasing && x\
    \ > last) {\n                        return false;\n                    }\n  \
    \                  increasing = false;\n                }\n                last\
    \ = x;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <35da3e886e144f2880ce7cce8e8a19b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <35da3e886e144f2880ce7cce8e8a19b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            if (l[i] != prev) {\n                increasing = l[i] > prev;\n\
    \                break;\n            }\n        }\n        for (int i = 1; i <\
    \ l.Count; i++) {\n            if (increasing && l[i] < prev) {\n            \
    \    return false;\n            }\n            if (!increasing && l[i] > prev)\
    \ {\n                return false;\n            }\n            prev = l[i];\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            increasing = increasing && (l[i] >= l[i - 1]);\n\
    \            decreasing = decreasing && (l[i] <= l[i - 1]);\n        }\n     \
    \   return increasing || decreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        long difference = l[1]\
    \ - l[0];\n        foreach (long v in l.Skip(1)) {\n            if (difference\
    \ * (v - l[0]) < 0) {\n                return false;\n            }\n        }\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8c402a9135f84d70bc59e891f51f1c1a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8c402a9135f84d70bc59e891f51f1c1a>:0 \n"
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count()\
    \ == 0) {\n            return true;\n        }\n        long current_val = l[0];\n\
    \        bool increasing = true;\n        foreach (long i in l) {\n          \
    \  if (i == current_val) {\n                continue;\n            }\n       \
    \     else if (i > current_val) {\n                if (increasing == false) {\n\
    \                    return false;\n                }\n                increasing\
    \ = true;\n            }\n            else {\n                if (increasing ==\
    \ true) {\n                    return false;\n                }\n            \
    \    increasing = false;\n            }\n            current_val = i;\n      \
    \  }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e144934fe38b4d3da822553baf2261c7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e144934fe38b4d3da822553baf2261c7>:0 \n"
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        var\
    \ sl = new List<long>(l);\n        var t = new List<long>(l);\n        t.Sort();\n\
    \        if (sl == t) {\n            return true;\n        }\n        t.Reverse();\n\
    \        if (sl == t) {\n            return true;\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <10af2ccfdccc46328e66552b42ad3b6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <10af2ccfdccc46328e66552b42ad3b6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool up = l[1] >= l[0];\n\
    \        bool down = l[1] <= l[0];\n        for (int i = 2; i < l.Count; i++)\
    \ {\n            if (!(up && l[i] >= l[i - 1]) && !(down && l[i] <= l[i - 1]))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ mono;\n        if ((l.Count<= (long)1L)) {\n            mono = true;\n     \
    \   }\n        else if ((l[(int)(0L)] < l[(int)(1L)])) {\n            mono = true;\n\
    \            for (long _i = (long)1L; _i < (long)l.Count - (long)1L; _i++) {\n\
    \                long i = _i;\n                if ((l[(int)(i)] > l[(int)(i +\
    \ (long)1L)])) {\n                    mono = false;\n                    break;\n\
    \                }\n\n            }\n\n        }\n        else {\n           \
    \ mono = true;\n            for (long _i = (long)1L; _i < (long)l.Count - (long)1L;\
    \ _i++) {\n                long i = _i;\n                if ((l[(int)(i)] < l[(int)(i\
    \ + (long)1L)])) {\n                    mono = false;\n                    break;\n\
    \                }\n\n            }\n\n        }\n\n        return mono;\n\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976697
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        long prev = l[0];\n\
    \        long i = 1L;\n        while (true) {\n            {\n               \
    \ var (__break, __continue) = (false, false);\n                var __finally =\
    \ (Action)(() => { });\n                try {\n                    for (; i <\
    \ len(l); i++) {\n                        var v = l[i];\n                    \
    \    if (prev > v) {\n                            increasing = false;\n      \
    \                  }\n                        else {\n                       \
    \     if (prev < v) {\n                                decreasing = false;\n \
    \                           }\n                        }\n                   \
    \     if (!increasing && !decreasing) {\n                            __break =\
    \ true;\n                            break;\n                        }\n     \
    \                   prev = v;\n                    }\n                }\n    \
    \            catch (Exception __ex__) {\n                    __ex__ = __ExceptionInfo__(__ex__);\n\
    \                    if (__ex__.IsThrow) {\n                        throw __ex__.Exception;\n\
    \                    }\n                    else {\n                        __break\
    \ = true;\n                    }\n                }\n                finally {\n\
    \                    __finally();\n                }\n                if (__break)\
    \ {\n                    break;\n                }\n            }\n        }\n\
    \        return increasing || decreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvnzm3wau.cs(26,32): error CS0103: The name ''len'' does not exist in the
    current context

    /tmp/tmpvnzm3wau.cs(27,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpvnzm3wau.cs(44,30): error CS0103: The name ''__ExceptionInfo__'' does
    not exist in the current context

    /tmp/tmpvnzm3wau.cs(45,32): error CS1061: ''Exception'' does not contain a definition
    for ''IsThrow'' and no accessible extension method ''IsThrow'' accepting a first
    argument of type ''Exception'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpvnzm3wau.cs(46,38): error CS1061: ''Exception'' does not contain a definition
    for ''Exception'' and no accessible extension method ''Exception'' accepting a
    first argument of type ''Exception'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ mono = true;\n        bool inc = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long p = l[i - 1];\n            long c = l[i];\n       \
    \     long delta = p - c;\n            if (inc) {\n                if (delta <\
    \ 0) {\n                    // switch to dec\n                    inc = false;\n\
    \                } else if (delta > 0) {\n                    // switch to mono\n\
    \                    inc = false;\n                    mono = false;\n       \
    \         }\n            } else {\n                if (delta > 0) {\n        \
    \            // switch to inc\n                    mono = false;\n           \
    \     } else if (delta < 0) {\n                    // switch to mono\n       \
    \             mono = false;\n                }\n            }\n        }\n   \
    \     return mono;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad125576bf9242e78244895b986e1ce7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad125576bf9242e78244895b986e1ce7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ old = l[0];\n        bool decreasing = false;\n        foreach (long i in l)\
    \ {\n            if (i < old) {\n                if (decreasing) {\n         \
    \           return false;\n                }\n                decreasing = true;\n\
    \            } else if (old < i) {\n                if (!decreasing) {\n     \
    \               return false;\n                }\n            }\n            old\
    \ = i;\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <51ea1e2c8ee64059b84cdd8c7943454e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <51ea1e2c8ee64059b84cdd8c7943454e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ decreasing = false;\n        bool increasing = false;\n        if (l.Count <\
    \ 2) {\n            return true;\n        }\n        else {\n            long\
    \ prev = l[0];\n            foreach (long n in l) {\n                if (n < prev)\
    \ {\n                    decreasing = true;\n                }\n             \
    \   else if (n > prev) {\n                    increasing = true;\n           \
    \     }\n                if (decreasing && increasing) {\n                   \
    \ return false;\n                }\n                prev = n;\n            }\n\
    \            return true;\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ inc = true;\n        bool dec = true;\n        for (int i = 0; i < l.Count -\
    \ 1; i++) {\n            if (l[i] > l[i + 1]) {\n                inc = false;\n\
    \            }\n            if (l[i] < l[i + 1]) {\n                dec = false;\n\
    \            }\n        }\n        return inc || dec;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976697
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        long c = l[(int)0L];\n\
    \        bool inc = false;\n        bool dec = false;\n        {\n           \
    \ var i__prev1 = i;\n\n            foreach (var (__i, __v) in l.GetEnumerator())\n\
    \            {\n                i = __i;\n                v = __v;\n         \
    \       if (i == 0L)\n                {\n                    continue;\n     \
    \           }\n\n                if (v == c)\n                {\n            \
    \        continue;\n                }\n\n                if (v > c)\n        \
    \        {\n                    inc = true;\n                }\n             \
    \   else\n                {\n                    dec = true;\n               \
    \ }\n\n                if (inc && dec)\n                {\n                  \
    \  return false;\n                }\n\n                c = v;\n\n            }\n\
    \n            i = i__prev1;\n        }\n\n        return true;\n\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaua5bslg.cs(24,28): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmpaua5bslg.cs(26,40): error CS1579: foreach statement cannot operate on
    variables of type ''List<long>.Enumerator'' because ''List<long>.Enumerator''
    does not contain a public instance definition for ''GetEnumerator''

    /tmp/tmpaua5bslg.cs(26,27): error CS8130: Cannot infer the type of implicitly-typed
    deconstruction variable ''__i''.

    /tmp/tmpaua5bslg.cs(26,32): error CS8130: Cannot infer the type of implicitly-typed
    deconstruction variable ''__v''.

    /tmp/tmpaua5bslg.cs(28,17): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmpaua5bslg.cs(29,17): error CS0103: The name ''v'' does not exist in the
    current context

    /tmp/tmpaua5bslg.cs(30,21): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmpaua5bslg.cs(35,21): error CS0103: The name ''v'' does not exist in the
    current context

    /tmp/tmpaua5bslg.cs(40,21): error CS0103: The name ''v'' does not exist in the
    current context

    /tmp/tmpaua5bslg.cs(54,21): error CS0103: The name ''v'' does not exist in the
    current context

    /tmp/tmpaua5bslg.cs(58,13): error CS0103: The name ''i'' does not exist in the
    current context

    '
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        var next = l[0];\n   \
    \     var inc = true;\n        foreach (var val in l) {\n            if (next\
    \ != val) {\n                inc = next < val;\n                break;\n     \
    \       }\n        }\n        next = l[0];\n        foreach (var val in l) {\n\
    \            if (inc) {\n                if (next > val) {\n                 \
    \   return false;\n                }\n            } else {\n                if\
    \ (next < val) {\n                    return false;\n                }\n     \
    \       }\n            next = val;\n        }\n        return true;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ inc = true;\n        bool dec = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            inc &= l[i] >= l[i - 1];\n            dec &= l[i] <= l[i\
    \ - 1];\n        }\n        return inc || dec;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        var\
    \ len = l.Count;\n        var last = l[0];\n        var d = 0;\n        var c\
    \ = 0;\n        for (var i = 1L; i < len; i++) {\n            var x = l[(int)i];\n\
    \            if (x == last) {\n                c++;\n            } else if (x\
    \ > last) {\n                if (d < 0) {\n                    return false;\n\
    \                }\n                d = 1;\n            } else {\n           \
    \     if (d > 0) {\n                    return false;\n                }\n   \
    \             d = -1;\n            }\n            last = x;\n        }\n     \
    \   return c < len - 1;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <deaa531201d747d09d58aa76a6c3332b>:0 \n"
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ isIncreasing = false;\n        bool isDecreasing = false;\n        for (int\
    \ i = 0; i < l.Count-1; i++) {\n            if (l[i] < l[i+1]) {\n           \
    \     isIncreasing = true;\n            } else if (l[i] > l[i+1]) {\n        \
    \        isDecreasing = true;\n            }\n            if (isIncreasing &&\
    \ isDecreasing) return false;\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l[0];\n        long prev = first;\n        long last = l[l.Count - 1];\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (first <= last) {\n\
    \                if (prev > l[i]) {\n                    return false;\n     \
    \           }\n            } else {\n                if (prev < l[i]) {\n    \
    \                return false;\n                }\n            }\n           \
    \ prev = l[i];\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count()\
    \ < 2) return true;\n        int idx = 0;\n        while (idx < l.Count() - 1\
    \ && l[idx] == l[idx + 1]) {\n            idx++;\n        }\n        bool ascending\
    \ = false;\n        if (idx == l.Count() - 1) return true;\n        else if (l[idx]\
    \ < l[idx + 1]) ascending = true;\n        for (int i = idx; i < l.Count() - 1;\
    \ i++) {\n            if (ascending && l[i] > l[i + 1]) return false;\n      \
    \      if (!ascending && l[i] < l[i + 1]) return false;\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        var\
    \ c = l[(int)0L];\n        var increasing = true;\n        foreach (var x in l)\n\
    \        {\n            if (x < c)\n            {\n                increasing\
    \ = false;\n                break;\n            }\n\n            c = x;\n\n  \
    \      }\n\n        if (increasing)\n        {\n            return true;\n   \
    \     }\n\n        c = l[(int)0L];\n        foreach (var x in l)\n        {\n\
    \            if (x > c)\n            {\n                return false;\n      \
    \      }\n\n            c = x;\n\n        }\n\n        return true;\n\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976697
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increased = true;\n        bool decreased = true;\n        for (long i = (long)1L;\
    \ i < len(l); i++)\n        {\n            increased = increased && l[i] >= l[i\
    \ - 1L];\n            decreased = decreased && l[i] <= l[i - 1L];\n        }\n\
    \n        return increased || decreased;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx0ew605a.cs(19,37): error CS0103: The name ''len'' does not exist in the
    current context

    /tmp/tmpx0ew605a.cs(21,40): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpx0ew605a.cs(21,48): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpx0ew605a.cs(22,40): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpx0ew605a.cs(22,48): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        bool incr = l[0] < l[1];\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (incr && l[i - 1] > l[i]) return false;\n\
    \            if (!incr && l[i - 1] < l[i]) return false;\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        return\
    \ l.Take(l.Count - 1).Zip(l.Skip(1), (a, b) => (a - b)).All(x => (x == (long)0L)\
    \ || (x < (long)0L)) || l.Take(l.Count - 1).Zip(l.Skip(1), (a, b) => (a - b)).All(x\
    \ => (x == (long)0L) || (x > (long)0L));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n            if (l[i] < l[i - 1]) {\n              \
    \  increasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976692
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (((l.Count)\
    \ < (long)2L)) {\n            return true;\n        }\n\n        var t = l[0L];\n\
    \        var (state, num) = (1L, (long)0L);\n        foreach (var (_, v) in l)\n\
    \        {\n            switch (state)\n            {\n                case 1L:\
    \ \n                    if ((v == t))\n                    {\n               \
    \         _breakState = 1;\n                        break;\n                 \
    \   }\n\n                    if ((v > t))\n                    {\n           \
    \             state = (long)2L;\n                        break;\n            \
    \        }\n\n                    state = (long)3L;\n                    break;\n\
    \                case 2L: \n                    if ((v < t))\n               \
    \     {\n                        return false;\n                    }\n\n    \
    \                break;\n                case 3L: \n                    if ((v\
    \ > t))\n                    {\n                        return false;\n      \
    \              }\n\n                    break;\n            }\n\n            t\
    \ = v;\n            num++;\n\n            if (_breakState == 1)\n            {\n\
    \                break;\n            }\n        }\n\n        return true;\n\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmkc08u_9.cs(21,19): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpmkc08u_9.cs(23,32): error CS1061: ''long'' does not contain a definition
    for ''Deconstruct'' and no accessible extension method ''Deconstruct'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpmkc08u_9.cs(23,32): error CS8129: No suitable ''Deconstruct'' instance
    or extension method was found for type ''long'', with 2 out parameters and a void
    return type.

    /tmp/tmpmkc08u_9.cs(23,23): error CS8130: Cannot infer the type of implicitly-typed
    deconstruction variable ''_''.

    /tmp/tmpmkc08u_9.cs(23,23): error CS8183: Cannot infer the type of implicitly-typed
    discard.

    /tmp/tmpmkc08u_9.cs(23,26): error CS8130: Cannot infer the type of implicitly-typed
    deconstruction variable ''v''.

    /tmp/tmpmkc08u_9.cs(30,25): error CS0103: The name ''_breakState'' does not exist
    in the current context

    /tmp/tmpmkc08u_9.cs(61,17): error CS0103: The name ''_breakState'' does not exist
    in the current context

    '
  timestamp: 1659976697
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        // count\
    \ up and down\n        int up = 0;\n        int down = 0;\n        long prev =\
    \ l[0L];\n        foreach (var i in l) {\n            if (i > prev) {\n      \
    \          up++;\n            }\n            else if (i < prev) {\n          \
    \      down++;\n            }\n            prev = i;\n        }\n        return\
    \ up == 0L || down == 0L;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgq8q3tvi.cs(20,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count()\
    \ <= 1) {\n            return true;\n        }\n        var x = l[0];\n      \
    \  var dx = l[1] - x;\n        for (int i = 1; i < l.Count(); i++) {\n       \
    \     var y = l[i];\n            var dy = y - x;\n            if (dx * dy < 0)\
    \ {\n                return false;\n            }\n            x = y;\n      \
    \      dx = dy;\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976697
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        if (l.Count == 1) {\n\
    \            return true;\n        }\n        bool increasing = (l[1] > l[0]);\n\
    \        for (int i = 2; i < l.Count; i++) {\n            if (increasing) {\n\
    \                if (l[i] < l[i - 1]) {\n                    return false;\n \
    \               }\n            } else {\n                if (l[i] > l[i - 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976698
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if ((l.Count\
    \ <= (long)2L)) {\n            return true;\n        }\n\n        var increasing\
    \ = (l[1L] > l[0L]);\n        var i = (long)2L;\n        while (true) {\n    \
    \        if (!(i < len(l))) {\n                break;\n            }\n\n     \
    \       if ((l[i] == l[i - 1L])) {\n                i = i + (long)1L;\n      \
    \          continue;\n            }\n\n            if ((l[i] > l[i - 1L])) {\n\
    \                if (!increasing) {\n                    return false;\n     \
    \           }\n\n                i = i + (long)1L;\n                continue;\n\
    \            }\n\n            if (!(l[i] < l[i - 1L])) {\n                i =\
    \ i + (long)1L;\n                continue;\n            }\n\n            if (increasing)\
    \ {\n                return false;\n            }\n\n            i = i + (long)1L;\n\
    \n        }\n\n        return true;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5apxfz3k.cs(21,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp5apxfz3k.cs(21,37): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp5apxfz3k.cs(24,23): error CS0103: The name ''len'' does not exist in the
    current context

    /tmp/tmp5apxfz3k.cs(28,20): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp5apxfz3k.cs(28,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp5apxfz3k.cs(33,20): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp5apxfz3k.cs(33,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp5apxfz3k.cs(42,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp5apxfz3k.cs(42,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976698
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        long previous = l[0];\n\
    \        bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long n in l) {\n            if (n < previous) {\n                increasing\
    \ = false;\n            }\n            if (n > previous) {\n                decreasing\
    \ = false;\n            }\n            previous = n;\n        }\n        return\
    \ increasing || decreasing;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976698
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        for\
    \ (int i = 1; i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n      \
    \          for (int j = i + 1; j < l.Count; j++) {\n                    if (l[j]\
    \ >= l[j - 1]) {\n                        return false;\n                    }\n\
    \                }\n                return true;\n            }\n            if\
    \ (l[i] > l[i - 1]) {\n                for (int j = i + 1; j < l.Count; j++) {\n\
    \                    if (l[j] <= l[j - 1]) {\n                        return false;\n\
    \                    }\n                }\n                return true;\n    \
    \        }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9bbef65b9c8443d6b90a606ab0fb2ccc>:0 \n"
  stdout: ''
  timestamp: 1659976698
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        for (int i = 1; i < l.Count; i++) {\n          \
    \  if (l[i] > l[i - 1]) {\n                if (!increasing) {\n              \
    \      return false;\n                }\n            } else if (l[i] < l[i - 1])\
    \ {\n                increasing = false;\n            }\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976698
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        long lastval =\
    \ l[0];\n        foreach (long val in l) {\n            if (val < lastval) {\n\
    \                increasing = false;\n            }\n            if (val > lastval)\
    \ {\n                decreasing = false;\n            }\n            lastval =\
    \ val;\n        }\n        return increasing || decreasing;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976698
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (((l)[0]\
    \ < (l)[1])) {\n            {\n                long i = (long)1L;\n          \
    \      while (i < len(l))\n                {\n                    if (((l)[i]\
    \ < (l)[i - 1]))\n                    {\n                        return false;\n\
    \                    }\n\n                    i = i + (long)1L;\n\n          \
    \      }\n\n            }\n\n        }\n        else\n        {\n            {\n\
    \                long i__1 = (long)1L;\n                while (i__1 < len(l))\n\
    \                {\n                    if (((l)[i__1] > (l)[i__1 - 1]))\n   \
    \                 {\n                        return false;\n                 \
    \   }\n\n                    i__1 = i__1 + (long)1L;\n\n                }\n\n\
    \            }\n\n        }\n\n        return true;\n\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn82hwt3s.cs(20,28): error CS0103: The name ''len'' does not exist in the
    current context

    /tmp/tmpn82hwt3s.cs(22,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpn82hwt3s.cs(22,39): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpn82hwt3s.cs(38,31): error CS0103: The name ''len'' does not exist in the
    current context

    /tmp/tmpn82hwt3s.cs(40,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpn82hwt3s.cs(40,42): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976698
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ ok = true;\n        var res = ((long)0L);\n        for (long i = (long)1L; i\
    \ < len(l); i++)\n        {\n            var j = i - 1L;\n            if (res\
    \ == 0L)\n            {\n                if (l[i] > l[j])\n                {\n\
    \                    res = 1L;\n                }\n                else if (l[i]\
    \ < l[j])\n                {\n                    res = -1L;\n               \
    \ }\n\n            }\n            else if (res > 0L && l[i] < l[j])\n        \
    \    {\n                ok = false;\n                break;\n            }\n \
    \           else if (res < 0L && l[i] > l[j])\n            {\n               \
    \ ok = false;\n                break;\n            }\n\n        }\n\n        return\
    \ ok;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp57f9yw01.cs(19,37): error CS0103: The name ''len'' does not exist in the
    current context

    /tmp/tmp57f9yw01.cs(24,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp57f9yw01.cs(24,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp57f9yw01.cs(28,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp57f9yw01.cs(28,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp57f9yw01.cs(34,36): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp57f9yw01.cs(34,43): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp57f9yw01.cs(39,36): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp57f9yw01.cs(39,43): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976698
