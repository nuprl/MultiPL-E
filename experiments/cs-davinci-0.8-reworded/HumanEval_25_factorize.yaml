name: HumanEval_25_factorize
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return list of prime factors of given integer in the order from\
  \ smallest to largest.\n    // Each of the factors should be listed number of times\
  \ corresponding to how many times it appeares in factorization.\n    // Input number\
  \ should be equal to the product of all factors\n    // >>> Factorize((8L))\n  \
  \  // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>> Factorize((25L))\n\
  \    // (new List<long>(new long[]{(long)5L, (long)5L}))\n    // >>> Factorize((70L))\n\
  \    // (new List<long>(new long[]{(long)2L, (long)5L, (long)7L}))\n    public static\
  \ List<long> Factorize(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
  \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
  \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
  \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
completions: ["        List<long> factors = new List<long>();\n        while (n %\
    \ 2 == 0) {\n            factors.Add(2);\n            n /= 2;\n        }\n   \
    \     int i = 3;\n        while (i <= Math.Sqrt(n)) {\n            while (n %\
    \ i == 0) {\n                factors.Add(i);\n                n /= i;\n      \
    \      }\n            i += 2;\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> res = new List<long>();\n\
    \        long d = 2;\n        while (n > 1) {\n            while (n % d == 0)\
    \ {\n                res.Add(d);\n                n /= d;\n            }\n   \
    \         d += 1;\n        }\n        return res;", "        List<long> ret =\
    \ new List<long>();\n        for (long p = 2; p * p <= n; p++) {\n           \
    \ while (n % p == 0) {\n                ret.Add(p);\n                n /= p;\n\
    \            }\n        }\n        if (n > 1) {\n            ret.Add(n);\n   \
    \     }\n        return ret;", "        List<long> res = new List<long>();\n \
    \       for (long i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n\
    \                res.Add(i);\n                n /= i;\n            }\n       \
    \ }\n        if (n > 1) {\n            res.Add(n);\n        }\n        return\
    \ res;", "        List<long> factors = new List<long>();\n        for (long f\
    \ = 2; f <= n; f++) {\n            while (n % f == 0) {\n                factors.Add(f);\n\
    \                n /= f;\n            }\n        }\n        return factors;",
  "        // First approach: factorize by trying all numbers from 2 up to sqrt(n).\n\
    \        // If n is a factor, number n/factor is smaller than n, so we can recursively\
    \ factorize n/factor to obtain factors for n.\n        // Time complexity: O(sqrt(n))\n\
    \        // Memory complexity: O(sqrt(n))\n        List<long> factors = new List<long>();\n\
    \        for (long factor = 2; factor * factor <= n; factor++) {\n           \
    \ while (n % factor == 0) {\n                factors.Add(factor);\n          \
    \      n /= factor;\n            }\n        }\n        if (n > 1) {\n        \
    \    factors.Add(n);\n        }\n        return factors;", "        // TODO: Implement\
    \ solution\n        List<long> result = new List<long>();\n        if (n <= 1)\
    \ {\n            return result;\n        }\n        while ((n % 2L) == 0L) {\n\
    \            result.Add(2L);\n            n /= 2L;\n        }\n        for (long\
    \ d = 3L; d * d <= n; d += 2L) {\n            while ((n % d) == 0L) {\n      \
    \          result.Add(d);\n                n /= d;\n            }\n        }\n\
    \        if (n > 1L) {\n            result.Add(n);\n        }\n        return\
    \ result;", "        var factors = new List<long>();\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            while (n % i == 0) {\n                factors.Add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         factors.Add(n);\n        }\n        return factors;", "        if (n\
    \ == 1) {\n            return new List<long>();\n        }\n        List<long>\
    \ factors = new List<long>();\n        long _p0 = (long)2L;\n        while (n\
    \ % _p0 == 0) {\n            factors.Add(_p0);\n            n /= _p0;\n      \
    \  }\n        long _p1 = (long)3L;\n        while (n % _p1 == 0) {\n         \
    \   factors.Add(_p1);\n            n /= _p1;\n        }\n        long _p2 = (long)5L;\n\
    \        while (n % _p2 == 0) {\n            factors.Add(_p2);\n            n\
    \ /= _p2;\n        }\n        long _p3 = (long)7L;\n        while (n % _p3 ==\
    \ 0) {\n            factors.Add(_p3);\n            n /= _p3;\n        }\n    \
    \    for (long p = (long)11L; p * p <= n; p += (long)2L) {\n            while\
    \ (n % p == 0) {\n                factors.Add(p);\n                n /= p;\n \
    \           }\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        var factors = new List<long>();\n\
    \        for (long i = 2; i * i <= n; i++) {\n            int count = 0;\n   \
    \         while (n % i == 0) {\n                n /= i;\n                count++;\n\
    \            }\n            if (count != 0) {\n                for (int j = 0;\
    \ j < count; j++) {\n                    factors.Add(i);\n                }\n\
    \            }\n        }\n        if (n != 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> result = new List<long>();\n\
    \        int i = 2;\n        while (n > 1) {\n            int cnt = 0;\n     \
    \       while (n % i == 0) {\n                cnt++;\n                n /= i;\n\
    \            }\n            for (int j = 0; j < cnt; j++)\n                result.Add(i);\n\
    \            i++;\n        }\n        return result;", "        long p = n;\n\
    \        List<long> factors = new List<long>();\n        for (long d = 2L; d *\
    \ d <= p; d++) {\n            int count = 0;\n            while (p % d == 0L)\
    \ {\n                p /= d;\n                count++;\n            }\n      \
    \      if (count > 0) {\n                factors.Add(d);\n            }\n    \
    \    }\n        if (p > 1L) {\n            factors.Add(p);\n        }\n      \
    \  return factors;", "        List<long> factors = new List<long>();\n       \
    \ // implement me\n        return factors;", "        Debug.Assert(n >= 1);\n\
    \        var result = new List<long>();\n        if (n == 1) {\n            return\
    \ result;\n        }\n        var nn = n;\n        while (nn % 2 == 0) {\n   \
    \         result.Add(2);\n            nn /= 2;\n        }\n        var d = 3L;\n\
    \        while (d * d <= nn) {\n            while (nn % d == 0) {\n          \
    \      result.Add(d);\n                nn /= d;\n            }\n            d\
    \ += 2;\n        }\n        if (nn != 1) {\n            result.Add(nn);\n    \
    \    }\n        return result;", "        List<long> res = new List<long>();\n\
    \        for (long i = 2; i * i <= n; i++) {\n            int cnt = 0;\n     \
    \       while (n % i == 0) {\n                cnt++;\n                n /= i;\n\
    \            }\n            if (cnt > 0) {\n                res.Add(i);\n    \
    \        }\n        }\n        if (n > 1) {\n            res.Add(n);\n       \
    \ }\n        return res;", "        List<long> factors = new List<long>();\n \
    \       long sqrt = (long)Math.Sqrt(n);\n        while (n % 2 == 0) {\n      \
    \      factors.Add(2);\n            n /= 2;\n        }\n        for (long i =\
    \ 3; i <= sqrt; i += 2) {\n            while (n % i == 0) {\n                factors.Add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 2) {\n   \
    \         factors.Add(n);\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        int i = 2;\n        while (n > 1) {\n \
    \           if (n % i == 0) {\n                factors.Add(i);\n             \
    \   n /= i;\n            } else {\n                i++;\n            }\n     \
    \   }\n        return factors;", "        var factors = new List<long>();\n  \
    \      long i = 2;\n        while (n > 1) {\n            int cnt = 0;\n      \
    \      while (n % i == 0) {\n                cnt++;\n                n /= i;\n\
    \            }\n            for (int j = 0; j < cnt; j++) {\n                factors.Add(i);\n\
    \            }\n            i++;\n        }\n        return factors;", "     \
    \   List<long> factors = new List<long>();\n        for (long d = 2; d * d <=\
    \ n; d++) {\n            int cnt = 0;\n            while (n % d == 0) {\n    \
    \            n /= d;\n                cnt++;\n            }\n            if (cnt\
    \ > 0) {\n                factors.Add(d);\n            }\n        }\n        if\
    \ (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
  "        var factors = new List<long>();\n        for (long i = 2; i * i <= n; i++)\
    \ {\n            while (n % i == 0) {\n                factors.Add(i);\n     \
    \           n /= i;\n            }\n        }\n        if (n > 1) {\n        \
    \    factors.Add(n);\n        }\n        return factors;", "        List<long>\
    \ result = new List<long>();\n        // Factorise n using trial division with\
    \ wheel factorization\n        // wheel = 2, 3, 5, 7\n        // wheel factorization:\
    \ use wheel to filter out all multiples of 2, 3, 5, 7.\n        // Only check\
    \ remaining candidates\n        // if prime, add to result\n        if (n <= 1)\
    \ {\n            throw new ArgumentException(\"n must be greater than 1\");\n\
    \        }\n        if (n == 2 || n == 3 || n == 5 || n == 7) {\n            result.Add(n);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(2);\n            n /= 2;\n        }\n        if (n % 3 == 0) {\n\
    \            result.Add(3);\n            n /= 3;\n        }\n        if (n % 5\
    \ == 0) {\n            result.Add(5);\n            n /= 5;\n        }\n      \
    \  if (n % 7 == 0) {\n            result.Add(7);\n            n /= 7;\n      \
    \  }\n        // Now n is not divisible by any of the numbers in wheel\n     \
    \   // Add remaining candidates to list and use wheel to filter out multiples\
    \ of 2, 3, 5, 7\n        List<long> candidates = new List<long>();\n        for\
    \ (long i = 11; i * i <= n; i += 2) {\n            if (i % 3 == 0 || i % 5 ==\
    \ 0 || i % 7 == 0) {\n                continue;\n            }\n            candidates.Add(i);\n\
    \        }\n        foreach (long candidate in candidates) {\n            if (n\
    \ % candidate == 0) {\n                result.Add(candidate);\n              \
    \  n /= candidate;\n            }\n        }\n        if (n > 1) {\n         \
    \   result.Add(n);\n        }\n        return result;", "        Debug.Assert(n\
    \ >= 2);\n        var result = new List<long>();\n        long originalN = n;\n\
    \        long p = 2;\n        while (p * p <= n) {\n            if (n % p == 0)\
    \ {\n                result.Add(p);\n                n /= p;\n            } else\
    \ {\n                p += 1;\n            }\n        }\n        if (n != 1) {\n\
    \            result.Add(n);\n        }\n        Debug.Assert(1L == result.Aggregate((a,\
    \ b) => a * b));\n        return result;", "        List<long> list = new List<long>();\n\
    \        for (long i = 2L; i <= n; i++) {\n            if (n % i == 0L) {\n  \
    \              list.Add(i);\n                n /= i;\n                i--;\n \
    \           }\n        }\n        return list;", "        List<long> res = new\
    \ List<long>();\n        for (long p = 2; p * p <= n; p++) {\n            int\
    \ cnt = 0;\n            while (n % p == 0) {\n                n /= p;\n      \
    \          cnt++;\n            }\n            for (int i = 0; i < cnt; i++) {\n\
    \                res.Add(p);\n            }\n        }\n        if (n > 1) {\n\
    \            res.Add(n);\n        }\n        return res;", "        List<long>\
    \ factors = new List<long>();\n        int i = 2;\n        while (n > 1) {\n \
    \           int power = 0;\n            while (n % i == 0) {\n               \
    \ power++;\n                n /= i;\n            }\n            if (power > 0)\
    \ {\n                factors.Add(i);\n            }\n            i++;\n      \
    \  }\n        return factors;", "        List<long> factors = new List<long>();\n\
    \        for (long i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n\
    \                factors.Add(i);\n                n /= i;\n            }\n   \
    \     }\n        if (n > 1) {\n            factors.Add(n);\n        }\n      \
    \  return factors;", "        var primes = PrimeSieve((long)Math.Sqrt(n));\n \
    \       var factors = new List<long>();\n        foreach (var p in primes) {\n\
    \            if (n % p == 0) {\n                factors.Add(p);\n            \
    \    n /= p;\n            }\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        for (long f = 2; f * f <= n; f++) {\n \
    \           while (n % f == 0) {\n                factors.Add(f);\n          \
    \      n /= f;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> result = new List<long>();\n\
    \        for (long i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n\
    \                result.Add(i);\n                n /= i;\n            }\n    \
    \    }\n        if (n > 1) {\n            result.Add(n);\n        }\n        return\
    \ result;", "        var res = new List<long>();\n        var i = 2L;\n      \
    \  while (i * i <= n) {\n            while (n % i == 0) {\n                res.Add(i);\n\
    \                n /= i;\n            }\n            i += 1L;\n        }\n   \
    \     if (n > 1L) {\n            res.Add(n);\n        }\n        return res;",
  "        List<long> factors = new List<long>();\n        long i = 2;\n        while\
    \ (n > 1) {\n            long f = FactorizeLoop(n, i);\n            if (f == 0)\
    \ {\n                i++;\n            } else {\n                factors.Add(f);\n\
    \                n /= f;\n            }\n        }\n        return factors;",
  "        List<long> answer = new List<long>();\n        long prime = 2;\n      \
    \  while (prime * prime <= n) {\n            if (n % prime == 0) {\n         \
    \       answer.Add(prime);\n                n /= prime;\n            }\n     \
    \       else {\n                prime++;\n            }\n        }\n        if\
    \ (n > 1) {\n            answer.Add(n);\n        }\n        return answer;", " \
    \       List<long> res = new List<long>();\n        if (n % 2 == 0) {\n      \
    \      res.Add(2);\n            while (n % 2 == 0) {\n                n /= 2;\n\
    \            }\n        }\n        long i = 3;\n        while (i <= n) {\n   \
    \         if (n % i == 0) {\n                res.Add(i);\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n            i += 2;\n        }\n        return res;", "        List<long>\
    \ facs = new List<long>();\n        if (n == 1) {\n            facs.Add(1);\n\
    \            return facs;\n        }\n        for (long d = 2L; d * d <= n; d++)\
    \ {\n            long a = 0L;\n            while (n % d == 0L) {\n           \
    \     a = d;\n                n = n / d;\n            }\n            if (a !=\
    \ 0L) {\n                facs.Add(a);\n            }\n        }\n        if (n\
    \ != 1L) {\n            facs.Add(n);\n        }\n        return facs;", "    \
    \    var primes = new List<long>();\n        for (long d = 2; d * d <= n; d++)\
    \ {\n            while (n % d == 0) {\n                primes.Add(d);\n      \
    \          n /= d;\n            }\n        }\n        if (n > 1) {\n         \
    \   primes.Add(n);\n        }\n        return primes;", "        if (n <= 1) {\n\
    \            return new List<long>();\n        }\n        long prime = 2L;\n \
    \       long _n = n;\n        List<long> primeFactors = new List<long>();\n  \
    \      while (_n > 1L) {\n            while (_n % prime == 0L) {\n           \
    \     primeFactors.Add(prime);\n                _n /= prime;\n            }\n\
    \            if (prime == 2L) {\n                prime = 3L;\n            }\n\
    \            else {\n                prime += 2L;\n            }\n        }\n\
    \        return primeFactors;", "        List<long> factors = new List<long>();\n\
    \        while (n % 2 == 0) {\n            factors.Add(2);\n            n /= 2;\n\
    \        }\n        for (long i = 3; i * i <= n; i += 2) {\n            while\
    \ (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n \
    \           }\n        }\n        if (n > 2) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> res = new List<long>();\n\
    \        long p = 2;\n        while (n != 1) {\n            if (n % p == 0) {\n\
    \                res.Add(p);\n                n /= p;\n            } else {\n\
    \                p += 1;\n            }\n        }\n        return res;", "  \
    \      var factors = new List<long>();\n        var multiplier = 2L;\n       \
    \ while (multiplier * multiplier <= n) {\n            if (n % multiplier == 0)\
    \ {\n                factors.Add(multiplier);\n                n /= multiplier;\n\
    \            } else {\n                multiplier++;\n            }\n        }\n\
    \        factors.Add(n);\n        return factors;", "        long d = 2;\n   \
    \     List<long> list = new List<long>();\n        while (n != 1L)\n        {\n\
    \            long e = 0L;\n            while (n % d == 0L)\n            {\n  \
    \              e++;\n                n /= d;\n            }\n\n            if\
    \ (e != 0L)\n            {\n                list.Add(d);\n            }\n\n  \
    \          d++;\n\n        }\n\n        return list;\n", "        var factors\
    \ = new List<long>();\n        for (long i = 2; i * i <= n; i++) {\n         \
    \   while (n % i == 0) {\n                factors.Add(i);\n                n /=\
    \ i;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        var factors = new List<long>();\n\
    \        var currentFactor = 1L;\n        while (n != 1) {\n            currentFactor\
    \ = PollardRho(n);\n            factors.Add(currentFactor);\n            n /=\
    \ currentFactor;\n        }\n        return factors;", "        List<long> res\
    \ = new List<long>();\n        for (long p = 2; p * p <= n; p++) {\n         \
    \   while (n % p == 0) {\n                res.Add(p);\n                n /= p;\n\
    \            }\n        }\n        if (n > 1) {\n            res.Add(n);\n   \
    \     }\n        return res;", "        List<long> factors = new List<long>();\n\
    \        if (n == 1) {\n            return factors;\n        }\n        if (n\
    \ % 2 == 0) {\n            factors.Add(2);\n            while (n % 2 == 0) {\n\
    \                n /= 2;\n            }\n        }\n        for (long i = 3; i\
    \ * i <= n; i += 2) {\n            if (n % i == 0) {\n                factors.Add(i);\n\
    \                while (n % i == 0) {\n                    n /= i;\n         \
    \       }\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> res = new List<long>();\n\
    \        long d = 2;\n        while (n > 1) {\n            while (n % d == 0)\
    \ {\n                res.Add(d);\n                n /= d;\n            }\n   \
    \         d++;\n        }\n        return res;", "        var factors = new List<long>();\n\
    \        while (n > 1) {\n            long factor = new long();\n            for\
    \ (factor = (long)2L; factor <= n; factor++) {\n                if (n % factor\
    \ == 0L) {\n                    break;\n                }\n            }\n   \
    \         factors.Add(factor);\n            n /= factor;\n        }\n        return\
    \ factors;", "        var f = new List<long>();\n        while (n > 1) {\n   \
    \         if (n % 2 == 0) {\n                f.Add(2);\n                n /= 2;\n\
    \            } else if (n % 3 == 0) {\n                f.Add(3);\n           \
    \     n /= 3;\n            } else if (n % 5 == 0) {\n                f.Add(5);\n\
    \                n /= 5;\n            } else if (n % 7 == 0) {\n             \
    \   f.Add(7);\n                n /= 7;\n            } else if (n % 11 == 0) {\n\
    \                f.Add(11);\n                n /= 11;\n            } else if (n\
    \ % 13 == 0) {\n                f.Add(13);\n                n /= 13;\n       \
    \     } else if (n % 17 == 0) {\n                f.Add(17);\n                n\
    \ /= 17;\n            } else if (n % 19 == 0) {\n                f.Add(19);\n\
    \                n /= 19;\n            } else if (n % 23 == 0) {\n           \
    \     f.Add(23);\n                n /= 23;\n            } else if (n % 29 == 0)\
    \ {\n                f.Add(29);\n                n /= 29;\n            } else\
    \ if (n % 31 == 0) {\n                f.Add(31);\n                n /= 31;\n \
    \           } else if (n % 37 == 0) {\n                f.Add(37);\n          \
    \      n /= 37;\n            } else if (n % 41 == 0) {\n                f.Add(41);\n\
    \                n /= 41;\n            } else if (n % 43 == 0) {\n           \
    \     f.Add(43);\n                n /= 43;\n            } else if (n % 47 == 0)\
    \ {\n                f.Add(47);\n                n /= 47;\n            } else\
    \ if (n % 53 == 0) {\n                f.Add(53);\n                n /= 53;\n \
    \           } else if (n % 59 == 0) {\n                f.Add(59);\n          \
    \      n /= 59;\n            } else if (n % 61 == 0) {\n                f.Add",
  "        List<long> factors = new List<long>();\n        for (long i = 2; i * i\
    \ <= n; i++) {\n            while (n % i == 0) {\n                factors.Add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         factors.Add(n);\n        }\n        return factors;", "        List<long>\
    \ output = new List<long>();\n        while (n % 2 == 0) {\n            output.Add(2);\n\
    \            n /= 2;\n        }\n        while (n % 3 == 0) {\n            output.Add(3);\n\
    \            n /= 3;\n        }\n        long k = (long)Math.Floor(Math.Sqrt(n));\n\
    \        long s = 5;\n        long d = 2;\n        while (s <= k) {\n        \
    \    if (n % s == 0) {\n                output.Add(s);\n                n /= s;\n\
    \                k = (long)Math.Floor(Math.Sqrt(n));\n            }\n        \
    \    else {\n                s += d;\n                d = 6 - d;\n           \
    \ }\n        }\n        if (n > 1) {\n            output.Add(n);\n        }\n\
    \        return output;", "        List<long> res = new List<long>();\n      \
    \  for (long i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n   \
    \             res.Add(i);\n                n /= i;\n            }\n        }\n\
    \        if (n > 1) {\n            res.Add(n);\n        }\n        return res;",
  "        var r = new List<long>();\n        long p = 2;\n        while (n > 1) {\n\
    \            if (n % p == 0) {\n                r.Add(p);\n                n /=\
    \ p;\n            } else {\n                p++;\n            }\n        }\n \
    \       return r;", "        List<long> result = new List<long>();\n        long\
    \ i = 2;\n        while (i * i <= n) {\n            while (n % i == 0) {\n   \
    \             result.Add(i);\n                n /= i;\n            }\n       \
    \     i += 1;\n        }\n        if (n > 1) {\n            result.Add(n);\n \
    \       }\n        return result;", "        List<long> factors = new List<long>();\n\
    \        long max = n;\n        for (long f = 2; f < max; f += 1) {\n        \
    \    if (n % f == 0) {\n                factors.Add(f);\n                max =\
    \ n / f;\n                while (n % f == 0) {\n                    n /= f;\n\
    \                }\n            }\n        }\n        factors.Add(n);\n      \
    \  return factors;", "        List<long> factors = new List<long>();\n       \
    \ for (long d = 2; d * d <= n; d++) {\n            int cnt = 0;\n            while\
    \ (n % d == 0) {\n                n /= d;\n                cnt++;\n          \
    \  }\n            for (int j = 0; j < cnt; j++) {\n                factors.Add(d);\n\
    \            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> result = new List<long>();\n\
    \        long d = 2;\n        while (n > 1) {\n            while (n % d == 0)\
    \ {\n                result.Add(d);\n                n /= d;\n            }\n\
    \            d += 1;\n        }\n        return result;", "        List<long>\
    \ res = new List<long>();\n        long v = n;\n        for (long i = 2L; i *\
    \ i <= v; i++) {\n            long count = 0L;\n            while (v % i == 0L)\
    \ {\n                v /= i;\n                count++;\n            }\n      \
    \      for (long j = 0L; j < count; j++) {\n                res.Add(i);\n    \
    \        }\n        }\n        if (v > 1L) {\n            res.Add(v);\n      \
    \  }\n        return res;", "        List<long> result = new List<long>();\n \
    \       while (n % 2 == 0) {\n            result.Add(2);\n            n /= 2;\n\
    \        }\n        long f = 3;\n        while (f * f <= n) {\n            if\
    \ (n % f == 0) {\n                result.Add(f);\n                n /= f;\n  \
    \          }\n            else {\n                f += 2;\n            }\n   \
    \     }\n        if (n != 1) {\n            result.Add(n);\n        }\n      \
    \  return result;", "        List<long> factors = new List<long>();\n        for\
    \ (long i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n        \
    \        factors.Add(i);\n                n /= i;\n            }\n        }\n\
    \        if (n > 1) {\n            factors.Add(n);\n        }\n        return\
    \ factors;", "        List<long> factors = new List<long>();\n        while (n\
    \ % 2 == 0) {\n            factors.Add(2);\n            n /= 2;\n        }\n \
    \       for (long i = 3; i * i <= n; i += 2) {\n            while (n % i == 0)\
    \ {\n                factors.Add(i);\n                n /= i;\n            }\n\
    \        }\n        if (n > 2)\n            factors.Add(n);\n        return factors;",
  "        List<long> res = new List<long>();\n        for (long i = 2; i * i <= n;\
    \ i++) {\n            while (n % i == 0) {\n                res.Add(i);\n    \
    \            n /= i;\n            }\n        }\n        if (n > 1) {\n       \
    \     res.Add(n);\n        }\n        return res;", "        List<long> res =\
    \ new List<long>();\n        for (long i = 2; i * i <= n; i++) {\n           \
    \ while (n % i == 0) {\n                res.Add(i);\n                n /= i;\n\
    \            }\n        }\n        if (n > 1) {\n            res.Add(n);\n   \
    \     }\n        return res;", "        var result = new List<long>();\n     \
    \   for (var p = 2L; n > 1; p++) {\n            var count = 0;\n            while\
    \ (n % p == 0) {\n                n /= p;\n                count++;\n        \
    \    }\n            if (count > 0) {\n                result.Add(p);\n       \
    \     }\n        }\n        return result;", "        List<long> primeFactors\
    \ = new List<long>();\n        for (long i = 2; i * i <= n; i++) {\n         \
    \   while (n % i == 0) {\n                primeFactors.Add(i);\n             \
    \   n /= i;\n            }\n        }\n        if (n > 1) {\n            primeFactors.Add(n);\n\
    \        }\n        return primeFactors;", "        List<long> ret = new List<long>();\n\
    \        long sn = (long)Math.Sqrt(n);\n        while (n > 1) {\n            while\
    \ (n % 2 == 0) {\n                ret.Add(2);\n                n /= 2;\n     \
    \       }\n            long i = 3;\n            while (i <= sn) {\n          \
    \      if (n % i == 0) {\n                    ret.Add(i);\n                  \
    \  n /= i;\n                    break;\n                }\n                i +=\
    \ 2;\n            }\n            if (i > sn) {\n                ret.Add(n);\n\
    \                n = 1;\n            }\n        }\n        return ret;", "   \
    \     if (n == 1)\n            return new List<long>();\n        // Special case\
    \ for small numbers\n        if (n < 100000) {\n            var res = new List<long>();\n\
    \            for (long i = 2; i <= n; i++) {\n                while (n % i ==\
    \ 0) {\n                    res.Add(i);\n                    n /= i;\n       \
    \         }\n            }\n            return res;\n        }\n        // Fast\
    \ solution for big numbers\n        var p = new PrimeSieve();\n        return\
    \ p.Factorize(n);", "        List<long> primes = new List<long>();\n        long\
    \ limit = (long)Math.Sqrt(n) + 1;\n        for (long possiblePrime = 2; possiblePrime\
    \ < limit; possiblePrime++) {\n            bool isPrime = true;\n            foreach\
    \ (long prime in primes) {\n                if (possiblePrime % prime == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime) {\n                primes.Add(possiblePrime);\n\
    \                long p = possiblePrime;\n                while (n % p == 0) {\n\
    \                    n /= p;\n                }\n            }\n        }\n  \
    \      if (n > 1) {\n            primes.Add(n);\n        }\n        return primes;",
  "        List<long> res = new List<long>();\n        while (n % 2 == 0) {\n    \
    \        res.Add(2);\n            n /= 2;\n        }\n        for (long x = 3;\
    \ x * x <= n; x += 2) {\n            while (n % x == 0) {\n                res.Add(x);\n\
    \                n /= x;\n            }\n        }\n        if (n > 1) {\n   \
    \         res.Add(n);\n        }\n        return res;", "        List<long> result\
    \ = new List<long>();\n        long d = 2;\n        while (n > 1) {\n        \
    \    if (n % d == 0) {\n                result.Add(d);\n                n /= d;\n\
    \            } else {\n                d += 1;\n            }\n        }\n   \
    \     return result;", '        return new List<long>();', "        // Implement\
    \ this function\n        return null;", "        long d = 2;\n        var factors\
    \ = new List<long>();\n        while (n > 1) {\n            if (n % d == 0) {\n\
    \                factors.Add(d);\n                n /= d;\n            } else\
    \ {\n                d++;\n            }\n        }\n        return factors;",
  '        return Factorize(n, 2);', "        if (n <= 0) throw new ArgumentException(\"\
    n must be positive\");\n        var res = new List<long>();\n        while (n\
    \ % 2 == 0) { res.Add(2); n /= 2; }\n        while (n % 3 == 0) { res.Add(3);\
    \ n /= 3; }\n        long f = 5;\n        while (n > 1) {\n            if (f *\
    \ f > n) { res.Add(n); break; }\n            if (n % f == 0) { res.Add(f); n /=\
    \ f; }\n            else { f += 2; if (n % f == 0) { res.Add(f); n /= f; } else\
    \ f += 4; }\n        }\n        return res;", "        List<long> factors = new\
    \ List<long>();\n        while (n % 2 == 0) {\n            factors.Add(2);\n \
    \           n /= 2;\n        }\n        for (long i = 3; i * i <= n; i += 2) {\n\
    \            while (n % i == 0) {\n                factors.Add(i);\n         \
    \       n /= i;\n            }\n        }\n        if (n > 2) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        long origN = n;\n        List<long>\
    \ factors = new List<long>();\n        for (long factor = 2L; factor <= n; factor++)\
    \ {\n            while (n % factor == 0L) {\n                factors.Add(factor);\n\
    \                n /= factor;\n            }\n        }\n        long product\
    \ = 1L;\n        foreach (long x in factors) {\n            product *= x;\n  \
    \      }\n        Debug.Assert(product == origN);\n        return factors;", " \
    \       List<long> list = new List<long>();\n        for (long d = 2L; d * d <=\
    \ n; d++) {\n            while (n % d == 0L) {\n                list.Add(d);\n\
    \                n /= d;\n            }\n\n        }\n\n        if (n > 1L) {\n\
    \            list.Add(n);\n        }\n\n        return list;\n", "        long\
    \ p = 2;\n        List<long> factors = new List<long>();\n        while (p * p\
    \ <= n) {\n            while (n % p == 0) {\n                factors.Add(p);\n\
    \                n /= p;\n            }\n            p += 1;\n        }\n    \
    \    if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
  "        List<long> factors = new List<long>();\n        while (n % 2 == 0) {\n\
    \            factors.Add(2);\n            n /= 2;\n        }\n        long d =\
    \ 3;\n        while (d * d <= n) {\n            if (n % d == 0) {\n          \
    \      factors.Add(d);\n                n /= d;\n            }\n            else\
    \ {\n                d += 2;\n            }\n        }\n        if (n > 1) {\n\
    \            factors.Add(n);\n        }\n        return factors;", "        var\
    \ factors = new List<long>();\n        for (long i = 2; i * i <= n; i++) {\n \
    \           while (n % i == 0) {\n                factors.Add(i);\n          \
    \      n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> factors = new List<long>();\n\
    \        // TODO: implement factorization and return the list of prime factors\n\
    \        long i = 2;\n        while (n > 1) {\n            while (n % i == 0)\
    \ {\n                factors.Add(i);\n                n /= i;\n            }\n\
    \            i += 1;\n        }\n        return factors;", "        List<long>\
    \ result = new List<long>();\n        for (long d = 2; d * d <= n; d++) {\n  \
    \          int cnt = 0;\n            while (n % d == 0) {\n                n /=\
    \ d;\n                cnt++;\n            }\n            for (int i = 0; i < cnt;\
    \ i++) {\n                result.Add(d);\n            }\n        }\n        if\
    \ (n > 1) {\n            result.Add(n);\n        }\n        return result;", " \
    \       List<long> factors = new List<long>();\n        // Insert your code here.\n\
    \        while (n % 2 == 0) {\n            factors.Add(2);\n            n /= 2;\n\
    \        }\n        for (long i = 3; i * i <= n; i += 2) {\n            while\
    \ (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n \
    \           }\n        }\n        if (n > 2)\n            factors.Add(n);\n  \
    \      return factors;", "        List<long> factors = new List<long>();\n   \
    \     long d = 2;\n        while (n > 1) {\n            while (n % d == 0) {\n\
    \                factors.Add(d);\n                n /= d;\n            }\n   \
    \         d += 1;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        for (long d = 2; d * d <= n; d++) {\n         \
    \   while (n % d == 0) {\n                factors.Add(d);\n                n /=\
    \ d;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        var r = new List<long>();\n   \
    \     for (long i = 2; i <= n; i++) {\n            while (n % i == 0) {\n    \
    \            r.Add(i);\n                n /= i;\n            }\n        }\n  \
    \      return r;", "        // Factorization of even number\n        List<long>\
    \ lst = new List<long>();\n        if ((n % (long)2L) == (long)0L) {\n       \
    \     while ((n % (long)2L) == (long)0L) {\n                lst.Add((long)2L);\n\
    \                n /= (long)2L;\n            }\n\n        }\n\n        // Odd\
    \ prime factorization\n        long i = (long)3L;\n        while (i * i <= n)\
    \ {\n            if ((n % i) == (long)0L) {\n                while ((n % i) ==\
    \ (long)0L) {\n                    lst.Add(i);\n                    n /= i;\n\
    \                }\n\n            }\n\n            i += (long)2L;\n        }\n\
    \n        if (n > (long)1L) {\n            lst.Add(n);\n        }\n\n        return\
    \ lst;\n", "        List<long> res = new List<long>();\n        while (n % 2 ==\
    \ 0) {\n            res.Add(2);\n            n /= 2;\n        }\n        if (n\
    \ == 1) {\n            return res;\n        }\n        long end = (long)Math.Sqrt(n);\n\
    \        for (long i = 3; i <= end; i += 2) {\n            while (n % i == 0)\
    \ {\n                res.Add(i);\n                n /= i;\n            }\n   \
    \     }\n        if (n != 1) {\n            res.Add(n);\n        }\n        return\
    \ res;", "        // start at smallest possible factor\n        long f = 2;\n\
    \        List<long> result = new List<long>();\n        while (n > 1) {\n    \
    \        while (n % f == 0) {\n                result.Add(f);\n              \
    \  n /= f;\n            }\n            f += 1;\n        }\n        return result;",
  "        List<long> ans = new List<long>();\n        for (long p = 2; p * p <= n;\
    \ p++) {\n            while (n % p == 0) {\n                ans.Add(p);\n    \
    \            n /= p;\n            }\n        }\n        if (n > 1) ans.Add(n);\n\
    \        return ans;", "        if (n <= 1) {\n            return new List<long>();\n\
    \        }\n\n        var ans = new List<long>();\n        for (var d = 2L; d\
    \ * d <= n; d++) {\n            while (n % d == 0) {\n                ans.Add(d);\n\
    \                n /= d;\n            }\n        }\n        if (n > 1) {\n   \
    \         ans.Add(n);\n        }\n        return ans;", "        var factors =\
    \ new List<long>();\n        while (n % 2 == 0) {\n            factors.Add(2);\n\
    \            n /= 2;\n        }\n        for (long i = 3; i * i <= n; i += 2)\
    \ {\n            while (n % i == 0) {\n                factors.Add(i);\n     \
    \           n /= i;\n            }\n        }\n        if (n > 1) {\n        \
    \    factors.Add(n);\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        while (n % 2 == 0) {\n            factors.Add(2);\n\
    \            n /= 2;\n        }\n        long limit = (long)Math.Sqrt(n);\n  \
    \      long divisor = 3;\n        while (n > 1 && divisor <= limit) {\n      \
    \      while (n % divisor == 0) {\n                factors.Add(divisor);\n   \
    \             n /= divisor;\n            }\n            divisor += 2;\n      \
    \  }\n        if (n > 1) {\n            factors.Add(n);\n        }\n        return\
    \ factors;", "        List<long> factors = new List<long>();\n        for (long\
    \ d = 2; d * d <= n; d++) {\n            if (n % d == 0) {\n                factors.Add(d);\n\
    \                n /= d;\n                d--;\n            }\n        }\n   \
    \     if (n > 1) {\n            factors.Add(n);\n        }\n        return factors;",
  "        var pf = new List<long>();\n        long d = 2;\n        while (n > 1)\
    \ {\n            while (n % d == 0) {\n                pf.Add(d);\n          \
    \      n /= d;\n            }\n            d += 1;\n        }\n        return\
    \ pf;", "        long d = 2;\n        List<long> factors = new List<long>();\n\
    \        while (n != 1) {\n            while (n % d == 0) {\n                factors.Add(d);\n\
    \                n /= d;\n            }\n            d++;\n        }\n       \
    \ return factors;", "        var factors = new List<long>();\n        for (long\
    \ d = 2; d * d <= n; d++) {\n            if (n % d == 0) {\n                factors.Add(d);\n\
    \                n /= d;\n                d -= 1;\n            }\n        }\n\
    \        if (n > 1) {\n            factors.Add(n);\n        }\n        return\
    \ factors;", "        List<long> results = new List<long>();\n        while (n\
    \ % 2 == 0) {\n            results.Add(2);\n            n /= 2;\n        }\n \
    \       long max = (long)Math.Sqrt(n);\n        long p = 3;\n        while (n\
    \ > 1 && p <= max) {\n            while (n % p == 0) {\n                results.Add(p);\n\
    \                n /= p;\n            }\n            p += 2;\n        }\n    \
    \    if (n > 1) {\n            results.Add(n);\n        }\n        return results;",
  "        var factors = new List<long>();\n        while (n % 2 == 0) {\n       \
    \     factors.Add(2);\n            n /= 2;\n        }\n        for (int i = 3;\
    \ i <= n; i += 2) {\n            while (n % i == 0) {\n                factors.Add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;",
  "        List<long> fact = new List<long>();\n        // Factorization is defined\
    \ for positive integers only\n        if (n < 0) {\n            // Add a factor\
    \ of -1\n            fact.Add(-1);\n            // Factorize the positive version\
    \ of the number\n            fact.AddRange(Factorize(-n));\n            return\
    \ fact;\n        }\n        // Handle case of 0 and 1 separately\n        if (n\
    \ <= 1) {\n            fact.Add(n);\n            return fact;\n        }\n   \
    \     // Factorization algorithm (trial division): keep dividing n by all integers\n\
    \        // starting from 2 until complete factorization is obtained.\n      \
    \  for (long i = 2; i <= n; i++) {\n            // If i divides n, then i is a\
    \ factor\n            while (n % i == 0) {\n                // Add i to the list\
    \ of factors\n                fact.Add(i);\n                // Divide out i and\
    \ start testing with the new value of n\n                n /= i;\n           \
    \ }\n        }\n        return fact;", "        List<long> ret = new List<long>();\n\
    \        long p = 2;\n        while (n > 1) {\n            while (n % p == 0)\
    \ {\n                ret.Add(p);\n                n /= p;\n            }\n   \
    \         p++;\n        }\n        return ret;", "        var factors = new List<long>();\n\
    \        // Add your code here\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        if (n == 0) {\n            return factors;\n\
    \        }\n        // Factorize N\n        {\n            long d = 2L;\n    \
    \        while (n != 1L) {\n                if (n % d == 0L) {\n             \
    \       factors.Add(d);\n                    n /= d;\n                }\n    \
    \            else {\n                    d++;\n                }\n           \
    \ }\n        }\n        return factors;", "        List<long> a = new List<long>();\n\
    \        while (n % 2 == 0) {\n            a.Add(2);\n            n /= 2;\n  \
    \      }\n        for (long p = 3; n > 1; p += 2) {\n            while (n % p\
    \ == 0) {\n                a.Add(p);\n                n /= p;\n            }\n\
    \        }\n        return a;", "        List<long> result = new List<long>();\n\
    \        while ((n % 2L) == 0L) {\n            result.Add(2L);\n            n\
    \ /= 2L;\n        }\n        long next = 3L;\n        while (next * next <= n)\
    \ {\n            while ((n % next) == 0L) {\n                result.Add(next);\n\
    \                n /= next;\n            }\n            next += 2L;\n        }\n\
    \        if (n > 1L) {\n            result.Add(n);\n        }\n        return\
    \ result;", "        List<long> factors = new List<long>();\n        while (n\
    \ % 2 == 0) {\n            factors.Add(2);\n            n /= 2;\n        }\n \
    \       for (long i = 3; i <= Math.Sqrt(n); i += 2) {\n            while (n %\
    \ i == 0) {\n                factors.Add(i);\n                n /= i;\n      \
    \      }\n        }\n        if (n > 2) {\n            factors.Add(n);\n     \
    \   }\n        return factors;", "        List<long> factors = new List<long>();\n\
    \        long end = (long)Math.Ceiling(Math.Sqrt(n));\n        for (long i = 2;\
    \ i <= end; i++) {\n            while (n % i == 0) {\n                factors.Add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         factors.Add(n);\n        }\n        return factors;", "        List<long>\
    \ res = new List<long>();\n        for (long d = 2; d * d <= n; d++) {\n     \
    \       while (n % d == 0) {\n                res.Add(d);\n                n /=\
    \ d;\n            }\n        }\n        if (n > 1) {\n            res.Add(n);\n\
    \        }\n        return res;", "        List<long> res = new List<long>();\n\
    \        long origN = n;\n        long x = 2;\n        while (n != 1 && x*x <=\
    \ n) {\n            if (n % x == 0) {\n                res.Add(x);\n         \
    \       n /= x;\n            }\n            else {\n                x++;\n   \
    \         }\n        }\n        if (n != 1) {\n            res.Add(n);\n     \
    \   }\n        long mul = 1;\n        foreach (long p in res) {\n            mul\
    \ *= p;\n        }\n        Debug.Assert(mul == origN);\n        return res;",
  "        List<long> result = new List<long>();\n        for (long i = 2; i <= n;\
    \ i++) {\n            while (n % i == 0) {\n                result.Add(i);\n \
    \               n /= i;\n            }\n        }\n        return result;", " \
    \       Debug.Assert(n >= 1);\n        List<long> factors = new List<long>();\n\
    \        while (n % 2 == 0) {\n            factors.Add(2);\n            n /= 2;\n\
    \        }\n        while (n % 5 == 0) {\n            factors.Add(5);\n      \
    \      n /= 5;\n        }\n        long d = 3;\n        while (d * d <= n) {\n\
    \            while (n % d == 0) {\n                factors.Add(d);\n         \
    \       n /= d;\n            }\n            d += 2;\n        }\n        if (n\
    \ > 1) {\n            factors.Add(n);\n        }\n        return factors;", " \
    \       var d = 2L;\n        var factorization = new List<long>();\n        while\
    \ (n > 1L) {\n            while (n % d == 0L) {\n                factorization.Add(d);\n\
    \                n /= d;\n            }\n            d += 1L;\n        }\n   \
    \     return factorization;", "        List<long> factors = new List<long>();\n\
    \        long m = n;\n        for (long i = 2; i * i <= m; i++) {\n          \
    \  int k = 0;\n            while (m % i == 0) {\n                k++;\n      \
    \          m /= i;\n            }\n            for (int j = 0; j < k; j++) {\n\
    \                factors.Add(i);\n            }\n        }\n        if (m > 1)\
    \ {\n            factors.Add(m);\n        }\n        return factors;", "     \
    \   List<long> res = new List<long>();\n        while (n > 1) {\n            long\
    \ p = PrimeFactorize(n);\n            res.Add(p);\n            n /= p;\n     \
    \   }\n        return res;", "        List<long> res = new List<long>();\n   \
    \     long factor = 2;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                res.Add(factor);\n                n /= factor;\n  \
    \          }\n            factor++;\n        }\n        return res;", "      \
    \  List<long> prime_factors = new List<long>();\n        for (long i = 2L; i *\
    \ i <= n; i++) {\n            if (n % i == 0L) {\n                prime_factors.Add(i);\n\
    \                while (n % i == 0L) {\n                    n /= i;\n        \
    \        }\n            }\n        }\n        if (n > 1L) {\n            prime_factors.Add(n);\n\
    \        }\n        return prime_factors;", "        if (n == 1)\n           \
    \ return new List<long>() { (long)1L };\n        if (n % 2 == 0)\n           \
    \ return new List<long>() { (long)2L }.Concat(Factorize(n / 2)).ToList();\n  \
    \      if (n % 3 == 0)\n            return new List<long>() { (long)3L }.Concat(Factorize(n\
    \ / 3)).ToList();\n        if (n % 5 == 0)\n            return new List<long>()\
    \ { (long)5L }.Concat(Factorize(n / 5)).ToList();\n        if (n % 7 == 0)\n \
    \           return new List<long>() { (long)7L }.Concat(Factorize(n / 7)).ToList();\n\
    \        long d = (long)2L;\n        long p = (long)3L;\n        while (p <= n)\
    \ {\n            if (n % p == 0) {\n                n /= p;\n                d\
    \ = p;\n            }\n            else {\n                p += 2;\n         \
    \   }\n        }\n        return new List<long>() { d }.Concat(Factorize(n)).ToList();",
  "        var output = new List<long>();\n        for (var i = 2L; i * i <= n; i\
    \ += 1L) {\n            while (n % i == 0L) {\n                output.Add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1L) {\n  \
    \          output.Add(n);\n        }\n        return output;", "        // AssertionError:\
    \ N should be >= 1\n        Debug.Assert((n >= (long)1L));\n        // AssertionError:\
    \ N should be <= 10^12\n        Debug.Assert((n <= (long)1000000000000L));\n \
    \       // Replace this pass\n        return null;", "        if (n == 1) {\n\
    \            return new List<long> { 1 };\n        }\n        List<long> res =\
    \ new List<long>();\n        for (long i = 2; i * i <= n; i++) {\n           \
    \ if (n % i == 0) {\n                res.Add(i);\n                n /= i;\n  \
    \              i--;\n            }\n        }\n        res.Add(n);\n        return\
    \ res;", "        List<long> res = new List<long>();\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            while (n % i == 0) {\n                res.Add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         res.Add(n);\n        }\n        return res;", "        long nSqrt =\
    \ (long)Math.Sqrt(n);\n        for (long f = 2L; f <= nSqrt; f++) {\n        \
    \    long i = 0L;\n            while (n % f == 0L) {\n                n = n /\
    \ f;\n                i++;\n            }\n            if (i > 0L) {\n       \
    \         var list = Factorize(n);\n                for (long j = 0L; j < i; j++)\
    \ {\n                    list.Insert(0, f);\n                }\n             \
    \   return list;\n            }\n        }\n        return new List<long>(new\
    \ long[]{n});", "        List<long> factors = new List<long>();\n        // Add\
    \ some code to solve the problem here\n        while (n % 2 == 0) {\n        \
    \    factors.Add(2);\n            n /= 2;\n        }\n        long d = 3;\n  \
    \      while (d * d <= n) {\n            if (n % d == 0) {\n                factors.Add(d);\n\
    \                n /= d;\n            }\n            else {\n                d\
    \ += 2;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        // Assume n is positive integer\n\
    \        List<long> factors = new List<long>();\n        for (long i = 2; i <=\
    \ n; i++) {\n            while (n % i == 0) {\n                factors.Add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;",
  "        List<long> res = new List<long>();\n        for (long d = 2; d * d <= n;\
    \ d++) {\n            int cnt = 0;\n            while (n % d == 0) {\n       \
    \         cnt++;\n                n /= d;\n            }\n            if (cnt\
    \ > 0) {\n                res.Add(d);\n            }\n        }\n        if (n\
    \ > 1) {\n            res.Add(n);\n        }\n        return res;", "        var\
    \ factors = new List<long>();\n        while ((n & 1L) == 0L) {\n            factors.Add(2L);\n\
    \            n = n >> 1L;\n        }\n        for (var i = 3L; i * i <= n; i =\
    \ i + 2L) {\n            while (n % i == 0L) {\n                factors.Add(i);\n\
    \                n = n / i;\n            }\n        }\n        if (n > 1L) {\n\
    \            factors.Add(n);\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        if (n == 1) {\n            return factors;\n\
    \        }\n        if (n == 2) {\n            factors.Add(2);\n            return\
    \ factors;\n        }\n        if (n == 3) {\n            factors.Add(3);\n  \
    \          return factors;\n        }\n        long factor = 2;\n        while\
    \ (factor * factor <= n) {\n            while (n % factor == 0) {\n          \
    \      factors.Add(factor);\n                n /= factor;\n            }\n   \
    \         factor += 1;\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> factors = new List<long>();\n\
    \        long sqrt = (long)Math.Sqrt(n);\n        // factors of (a*b) = factors\
    \ of a + factors of b\n        // so we iterate only up to sqrt of n, then factors\
    \ are in pair (a, b) where a*b = n and a <= b\n        for (long i = 2; i <= sqrt;\
    \ i++) {\n            while (n % i == 0) {\n                factors.Add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         factors.Add(n);\n        }\n        return factors;", "        var factors\
    \ = new List<long>();\n        long factor = 2;\n        while (factor <= n) {\n\
    \            if (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            } else {\n                factor++;\n\
    \            }\n        }\n        return factors;", "        var factors = new\
    \ List<long>();\n        // TODO: Factorize the given number\n        return factors;",
  "        // your code goes here\n        return null;", "        // General idea:\n\
    \        // 1. First we read about prime factorization and the p*q theorem and\
    \ then implemented it.\n        // 2. Then we decided to try to optimize using\
    \ some new math, we wrote down all numbers\n        //    from 2 to 100 and noticed\
    \ that each number can be represented as the product of some primes\n        //\
    \    and each prime can only be used as many times as it appears in factorization.\n\
    \        // 3. We then tried to store some numbers as List<long> with number of\
    \ each prime corresponding\n        //    to number of times it appears in the\
    \ factorization.\n        //    Then we compared each number with each prime and\
    \ tried to factor out as many times as we can.\n        //    Finally we add all\
    \ the factors to the resulting List<long>.\n        List<long> primes = Primes.GetPrimesSmallerThan((long)Math.Sqrt(n)\
    \ + 1L);\n        List<long> result = new List<long>();\n        foreach (long\
    \ p in primes) {\n            while (n % p == 0L) {\n                result.Add(p);\n\
    \                n /= p;\n            }\n        }\n        if (n != 1L) {\n \
    \           result.Add(n);\n        }\n        return result;", "        List<long>\
    \ factors = new List<long>();\n        long lastPrime = 2;\n        while (n >\
    \ 1) {\n            while (n % lastPrime == 0) {\n                factors.Add(lastPrime);\n\
    \                n /= lastPrime;\n            }\n            lastPrime++;\n  \
    \      }\n        return factors;", "        var res = new List<long>();\n   \
    \     long p = 2;\n        while (n > 1) {\n            long cnt = 0;\n      \
    \      while (n % p == 0) {\n                n /= p;\n                cnt++;\n\
    \            }\n            for (long i = 0; i < cnt; i++) {\n               \
    \ res.Add(p);\n            }\n            p++;\n        }\n        return res;",
  "        List<long> factors = new List<long>();\n        long d = 2;\n        while\
    \ (n > 1) {\n            while (n % d == 0) {\n                factors.Add(d);\n\
    \                n /= d;\n            }\n            d++;\n        }\n       \
    \ return factors;", "        List<long> ret = new List<long>();\n        for (long\
    \ i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n              \
    \  ret.Add(i);\n                n /= i;\n            }\n        }\n        if\
    \ (n > 1) {\n            ret.Add(n);\n        }\n        return ret;", "     \
    \   List<long> primeFactors = new List<long>();\n        while (n % 2 == 0) {\n\
    \            primeFactors.Add(2);\n            n /= 2;\n        }\n        for\
    \ (long i = 3; i <= Math.Sqrt(n); i += 2) {\n            while (n % i == 0) {\n\
    \                primeFactors.Add(i);\n                n /= i;\n            }\n\
    \        }\n        if (n > 2) {\n            primeFactors.Add(n);\n        }\n\
    \        return primeFactors;", "        long d = 2;\n        List<long> factors\
    \ = new List<long>();\n        while (n > 1) {\n            if (n % d == 0) {\n\
    \                factors.Add(d);\n                n /= d;\n            }\n   \
    \         else {\n                d++;\n            }\n        }\n        return\
    \ factors;", "        if (n <= 1) {\n            return new List<long>();\n  \
    \      }\n        List<long> factors = new List<long>();\n        while (n % 2\
    \ == 0) {\n            factors.Add(2);\n            n /= 2;\n        }\n\n   \
    \     var sqrt = (long)Math.Sqrt(n);\n        for (long factor = 3; factor <=\
    \ sqrt; factor += 2) {\n            while (n % factor == 0) {\n              \
    \  factors.Add(factor);\n                n /= factor;\n            }\n       \
    \ }\n\n        if (n > 2) {\n            factors.Add(n);\n        }\n        return\
    \ factors;", "        long d = 2;\n        List<long> factors = new List<long>();\n\
    \        while (n > 1) {\n            if (n % d == 0) {\n                factors.Add(d);\n\
    \                n /= d;\n            }\n            else {\n                d\
    \ += 1;\n            }\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        long f = 2;\n        while (n > 1) {\n\
    \            while (n % f == 0) {\n                factors.Add(f);\n         \
    \       n /= f;\n            }\n            f++;\n        }\n        return factors;",
  "        List<long> output = new List<long>();\n        for (long i = 2; i * i <=\
    \ n; i++) {\n            while (n % i == 0) {\n                output.Add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         output.Add(n);\n        }\n        return output;", "        var factors\
    \ = new List<long>();\n        for (long i = 2; i * i <= n; i++) {\n         \
    \   while (n % i == 0) {\n                factors.Add(i);\n                n /=\
    \ i;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> f = new List<long>();\n\
    \        long a = n;\n        for (long i = 2L; i * i <= a; i++) {\n         \
    \   if (a % i == 0L) {\n                f.Add(i);\n                a /= i;\n \
    \               i--;\n            }\n        }\n        if (a > 1L) {\n      \
    \      f.Add(a);\n        }\n        return f;", "        var i = 2L;\n      \
    \  var result = new List<long>();\n        while (i * i <= n) {\n            while\
    \ (n % i == 0) {\n                result.Add(i);\n                n /= i;\n  \
    \          }\n            i += 1;\n        }\n        if (n > 1) {\n         \
    \   result.Add(n);\n        }\n        return result;", "        List<long> factors\
    \ = new List<long>();\n        long d = 2;\n        while (n > 1) {\n        \
    \    while (n % d == 0) {\n                factors.Add(d);\n                n\
    \ /= d;\n            }\n            d += 1;\n        }\n        return factors;",
  "        var result = new List<long>();\n        var i = 2L;\n        while (i *\
    \ i <= n) {\n            while (n % i == 0) {\n                result.Add(i);\n\
    \                n /= i;\n            }\n            i += 1;\n        }\n    \
    \    if (n > 1) {\n            result.Add(n);\n        }\n        return result;",
  "        long root = (long)Math.Sqrt(n);\n        long res = n;\n        List<long>\
    \ factors = new List<long>();\n        for (long i = 2; i <= root; i++) {\n  \
    \          while (res % i == 0) {\n                factors.Add(i);\n         \
    \       res /= i;\n            }\n        }\n        if (res != 1) {\n       \
    \     factors.Add(res);\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        if (n > 1) {\n            int d = 2;\n\
    \            while (n > 1) {\n                int i = 0;\n                while\
    \ (n % d == 0) {\n                    n /= d;\n                    i++;\n    \
    \            }\n                for (int j = 0; j < i; j++) {\n              \
    \      factors.Add(d);\n                }\n                d++;\n            }\n\
    \        }\n        return factors;", "        var primes = Primes_up_to((ulong)n);\n\
    \        List<long> factors = new List<long>();\n        foreach (ulong prime\
    \ in primes) {\n            while (n % prime == 0) {\n                factors.Add((long)prime);\n\
    \                n /= prime;\n            }\n        }\n        return factors;",
  "        List<long> res = new List<long>();\n        int i = 2;\n        while (n\
    \ > 1) {\n            while (n % i == 0) {\n                res.Add(i);\n    \
    \            n /= i;\n            }\n            i++;\n        }\n        return\
    \ res;", "        List<long> factors = new List<long>();\n        long d = 2;\n\
    \        while (n != 1) {\n            long p = 0;\n            while (n % d ==\
    \ 0) {\n                n /= d;\n                p++;\n            }\n       \
    \     for (long i = 0; i < p; i++) {\n                factors.Add(d);\n      \
    \      }\n            d++;\n        }\n        return factors;", "        List<long>\
    \ factorization = new List<long>();\n        while (n > 1) {\n            long\
    \ divisor = FactorizeSmallestPrimeDivisor(n);\n            factorization.Add(divisor);\n\
    \            n /= divisor;\n        }\n        return factorization;", "     \
    \   List<long> list = new List<long>();\n        for (long i = 2L; i * i <= n;\
    \ i++) {\n            while (n % i == 0L) {\n                list.Add(i);\n  \
    \              n /= i;\n            }\n        }\n        if (n > 1L) {\n    \
    \        list.Add(n);\n        }\n        return list;", "        List<long> res\
    \ = new List<long>();\n        for (long i = 2; i * i <= n; i++) {\n         \
    \   while (n % i == 0) {\n                res.Add(i);\n                n /= i;\n\
    \            }\n        }\n        if (n > 1) {\n            res.Add(n);\n   \
    \     }\n        return res;", "        List<long> result = new List<long>();\n\
    \        long current = n;\n        for (long i = 2; i * i <= current; i++) {\n\
    \            while (current % i == 0) {\n                result.Add(i);\n    \
    \            current /= i;\n            }\n        }\n        if (current != 1)\
    \ {\n            result.Add(current);\n        }\n        return result;", " \
    \       List<long> res = new List<long>();\n        for (long i = 2; i * i <=\
    \ n; i++) {\n            while (n % i == 0) {\n                res.Add(i);\n \
    \               n /= i;\n            }\n        }\n        if (n > 1) res.Add(n);\n\
    \        return res;", "        long nn = n;\n        long p = 2;\n        List<long>\
    \ factors = new List<long>();\n        while (nn != 1) {\n            if (nn %\
    \ p == 0) {\n                factors.Add(p);\n                nn /= p;\n     \
    \       } else {\n                p++;\n            }\n        }\n        return\
    \ factors;", "        Debug.Assert(n > 0);\n        List<long> result = new List<long>();\n\
    \        for (long i = 2; i * i <= n; i++) {\n            int count = 0;\n   \
    \         while (n % i == 0) {\n                n /= i;\n                count++;\n\
    \            }\n            for (int j = 0; j < count; j++) {\n              \
    \  result.Add(i);\n            }\n        }\n        if (n > 1) {\n          \
    \  result.Add(n);\n        }\n        return result;", "        List<long> primes\
    \ = new List<long>();\n        for (long i = 2; i * i <= n; i++) {\n         \
    \   while (n % i == 0) {\n                primes.Add(i);\n                n /=\
    \ i;\n            }\n        }\n        if (n > 1) {\n            primes.Add(n);\n\
    \        }\n        return primes;", "        var factors = new List<long>();\n\
    \        while (n % 2 == 0) {\n            factors.Add(2);\n            n /= 2;\n\
    \        }\n        var p = 3L;\n        while (n > 1) {\n            if (n %\
    \ p == 0) {\n                factors.Add(p);\n                n /= p;\n      \
    \      }\n            else {\n                p += 2;\n            }\n       \
    \ }\n        return factors;", "        var result = new List<long>();\n     \
    \   for (long p = 2; p * p <= n; p++) {\n            while (n % p == 0) {\n  \
    \              result.Add(p);\n                n /= p;\n            }\n      \
    \  }\n        if (n > 1) result.Add(n);\n        return result;", "        long\
    \ n2 = n;\n        long d = 2L;\n        long dmax = Convert.ToInt64(Math.Ceiling(Math.Sqrt(n)));\n\
    \        List<long> factorization = new List<long>();\n        while (d <= dmax)\
    \ {\n            if (n2 % d == 0L) {\n                factorization.Add(d);\n\
    \                n2 = n2 / d;\n                while (n2 % d == 0L) {\n      \
    \              factorization.Add(d);\n                    n2 = n2 / d;\n     \
    \           }\n                dmax = Convert.ToInt64(Math.Ceiling(Math.Sqrt(n2)));\n\
    \            }\n            d = d + 1L;\n        }\n        if (n2 != 1L) {\n\
    \            factorization.Add(n2);\n        }\n        return factorization;",
  "        var d = new List<long>();\n        for (long k = 2; k * k <= n; k++) {\n\
    \            while (n % k == 0) {\n                d.Add(k);\n               \
    \ n /= k;\n            }\n        }\n        if (n > 1) {\n            d.Add(n);\n\
    \        }\n        return d;", "        var result = new List<long>();\n    \
    \    for (long i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n \
    \               result.Add(i);\n                n /= i;\n            }\n     \
    \   }\n        if (n > 1) {\n            result.Add(n);\n        }\n        return\
    \ result;", "        var min = Math.Min(n, 5);\n        var result = new List<long>();\n\
    \        while ((long)min * (long)min <= n) {\n            while (n % min == 0)\
    \ {\n                result.Add(min);\n                n /= min;\n           \
    \ }\n            min++;\n        }\n        if (n > 1) {\n            result.Add(n);\n\
    \        }\n        return result;", '        return FactorizeByPrimes(n, BuildPrimes(SmallestDivisor(n)));',
  "        var result = new List<long>();\n        var d = 2L;\n        while (n >\
    \ 1) {\n            if (n % d == 0) {\n                result.Add(d);\n      \
    \          n /= d;\n            } else {\n                d++;\n            }\n\
    \        }\n        return result;", "        List<long> factors = new List<long>();\n\
    \        for (long divisor = 2; n > 1; ) {\n            if (n % divisor == 0)\
    \ {\n                factors.Add(divisor);\n                n /= divisor;\n  \
    \          } else {\n                divisor++;\n            }\n        }\n  \
    \      return factors;", "        if (n < 2) {\n            return new List<long>();\n\
    \        }\n        long m = n;\n        long divisor = 2L;\n        var factors\
    \ = new List<long>();\n        while (m > 1L) {\n            if (m % divisor ==\
    \ 0L) {\n                factors.Add(divisor);\n                m /= divisor;\n\
    \            }\n            else {\n                divisor++;\n            }\n\
    \        }\n        return factors;", "        // assert n >= 2\n        List<long>\
    \ result = new List<long>();\n        if (n < 2) {\n            return result;\n\
    \        }\n        long p = 2;\n        while (p * p <= n) {\n            if\
    \ (n % p == 0) {\n                result.Add(p);\n                n /= p;\n  \
    \          } else {\n                p++;\n            }\n        }\n        result.Add(n);\n\
    \        return result;", "        var factors = new List<long>();\n        for\
    \ (long i = 2; i * i <= n; i++) {\n            int cnt = 0;\n            while\
    \ (n % i == 0) {\n                cnt++;\n                n /= i;\n          \
    \  }\n            for (int j = 0; j < cnt; j++) {\n                factors.Add(i);\n\
    \            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        var res = new List<long>();\n \
    \       for (long i = 2; i * i <= n; i++) {\n            int x = 0;\n        \
    \    while (n % i == 0) {\n                n /= i;\n                x++;\n   \
    \         }\n            for (int j = 0; j < x; j++)\n                res.Add(i);\n\
    \        }\n        if (n > 1) res.Add(n);\n        return res;", "        List<long>\
    \ res = new List<long>();\n        for (long i = 2; i * i <= n; i++) {\n     \
    \       while (n % i == 0) {\n                res.Add(i);\n                n /=\
    \ i;\n            }\n        }\n        if (n > 1) {\n            res.Add(n);\n\
    \        }\n        return res;", "        if (n == 1) {\n            return new\
    \ List<long>();\n        }\n        for (long i = 2L; i * i <= n; i++) {\n   \
    \         if (n % i == 0) {\n                var res = Factorize(n / i);\n   \
    \             res.Add(i);\n                return res;\n            }\n      \
    \  }\n        return new List<long>(new long[]{n});", "        if (n == 1) {\n\
    \            return new List<long>();\n        }\n        long b = 2L;\n     \
    \   while (n % b != 0L) {\n            b++;\n        }\n        List<long> factors\
    \ = Factorize(n / b);\n        factors.Add(b);\n        return factors;", "  \
    \      var ret = new List<long>();\n        for (long i = 2; i * i <= n; i++)\
    \ {\n            while (n % i == 0) {\n                ret.Add(i);\n         \
    \       n /= i;\n            }\n        }\n        if (n > 1) ret.Add(n);\n  \
    \      return ret;", "        List<long> factors = new List<long>();\n       \
    \ for (long d = 2; d <= n; d++) {\n            while (n % d == 0) {\n        \
    \        factors.Add(d);\n                n /= d;\n            }\n        }\n\
    \        return factors;", "        List<long> res = new List<long>();\n     \
    \   long i = 2;\n        while (i * i <= n) {\n            while (n % i == 0)\
    \ {\n                res.Add(i);\n                n /= i;\n            }\n   \
    \         i++;\n        }\n        if (n > 1) {\n            res.Add(n);\n   \
    \     }\n        return res;", "        Debug.Assert(n >= 1);\n        var factors\
    \ = new List<long>();\n        long m = n;\n        while (m > 1) {\n        \
    \    long factor = 2;\n            while (m % factor != 0) {\n               \
    \ factor++;\n            }\n            factors.Add(factor);\n            m /=\
    \ factor;\n        }\n        return factors;", "        Debug.Assert(n > 0);\n\
    \        List<long> factors = new List<long>();\n        while (n % 2 == 0) {\n\
    \            factors.Add(2);\n            n /= 2;\n        }\n        long d =\
    \ 3;\n        while (d * d <= n) {\n            if (n % d == 0) {\n          \
    \      factors.Add(d);\n                n /= d;\n            } else {\n      \
    \          d += 2;\n            }\n        }\n        if (n > 1) {\n         \
    \   factors.Add(n);\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        if (n == 0) {\n            return factors;\n\
    \        }\n        if (n == 1) {\n            factors.Add(1);\n            return\
    \ factors;\n        }\n        if (n < 0) {\n            factors.Add(-1);\n  \
    \          n = -n;\n        }\n        while (n % 2 == 0) {\n            factors.Add(2);\n\
    \            n /= 2;\n        }\n        if (n == 1) {\n            return factors;\n\
    \        }\n        for (long i = 3; ; i += 2) {\n            if (n == 1) {\n\
    \                break;\n            }\n            if (i * i > n) {\n       \
    \         factors.Add(n);\n                break;\n            }\n           \
    \ while (n % i == 0) {\n                factors.Add(i);\n                n /=\
    \ i;\n            }\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        if (n <= 0) {\n            throw new Exception(\"\
    Factorize requires positive input value.\");\n        }\n        long div = 2L;\n\
    \        while (n != 1L) {\n            while (n % div == 0L) {\n            \
    \    factors.Add(div);\n                n /= div;\n            }\n           \
    \ div += 1L;\n        }\n        return factors;", "        if (n == 1) {\n  \
    \          return new List<long>();\n        }\n        // Find factor of 2\n\
    \        List<long> factors = new List<long>();\n        while (n % 2 == 0) {\n\
    \            factors.Add(2);\n            n /= 2;\n        }\n        // Find\
    \ other factors\n        for (long f = 3; f * f <= n; f += 2) {\n            while\
    \ (n % f == 0) {\n                factors.Add(f);\n                n /= f;\n \
    \           }\n        }\n        if (n != 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        var factors = new List<long>();\n\
    \        long divisor = 2;\n        while (n > 1) {\n            while (n % divisor\
    \ == 0) {\n                factors.Add(divisor);\n                n /= divisor;\n\
    \            }\n            divisor += 1;\n        }\n        return factors;",
  "        var res = new List<long>();\n        for (long i = 2; i * i <= n; i++)\
    \ {\n            while (n % i == 0) {\n                res.Add(i);\n         \
    \       n /= i;\n            }\n        }\n        if (n > 1) {\n            res.Add(n);\n\
    \        }\n        return res;", "        List<long> ret = new List<long>();\n\
    \        while (n % 2 == 0) {\n            ret.Add(2);\n            n /= 2;\n\
    \        }\n        if (n > 1) {\n            long i = 3;\n            long end\
    \ = (long)Math.Sqrt(n);\n            while (i <= end) {\n                if (n\
    \ % i == 0) {\n                    ret.Add(i);\n                    n /= i;\n\
    \                    end = (long)Math.Sqrt(n);\n                }\n          \
    \      else {\n                    i += 2;\n                }\n            }\n\
    \            ret.Add(n);\n        }\n        return ret;", "        Debug.Assert(n\
    \ >= 0);\n        List<long> result = new List<long>();\n        if(n <= 1) {\n\
    \            return result;\n        }\n        int i = 2;\n        for(;i * i\
    \ <= n; ++i) {\n            if(n % i == 0) {\n                break;\n       \
    \     }\n        }\n        if(i * i > n) {\n            result.Add(n);\n    \
    \        return result;\n        }\n        for(; n % i == 0; n /= i) {\n    \
    \        result.Add(i);\n        }\n        result.AddRange(Factorize(n));\n \
    \       return result;", "        var factors = new List<long>();\n        for\
    \ (long i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n        \
    \        factors.Add(i);\n                n /= i;\n            }\n        }\n\
    \        if (n > 1) {\n            factors.Add(n);\n        }\n        return\
    \ factors;", "        var res = new List<long>();\n        for (long d = 2; d\
    \ * d <= n; d++) {\n            while (n % d == 0) {\n                res.Add(d);\n\
    \                n /= d;\n            }\n        }\n        if (n > 1) res.Add(n);\n\
    \        return res;", "        List<long> p = new List<long>();\n        while\
    \ (n % 2 == 0) {\n            p.Add(2);\n            n /= 2;\n        }\n    \
    \    for (long i = 3; i * i <= n; i += 2) {\n            while (n % i == 0) {\n\
    \                p.Add(i);\n                n /= i;\n            }\n        }\n\
    \        if (n > 1) {\n            p.Add(n);\n        }\n        return p;", " \
    \       var list = new List<long>();\n        long factor = 2;\n        while\
    \ (factor * factor <= n) {\n            if (n % factor == 0) {\n             \
    \   list.Add(factor);\n                n /= factor;\n            }\n         \
    \   else {\n                factor += 1;\n            }\n        }\n        if\
    \ (n > 1) {\n            list.Add(n);\n        }\n        return list;", "   \
    \     Debug.Assert(n > 0);\n        List<long> l = new List<long>();\n       \
    \ long x = n;\n        for (long p = 2; p * p <= x; p++) {\n            if (x\
    \ % p == 0) {\n                while (x % p == 0) {\n                    x /=\
    \ p;\n                    l.Add(p);\n                }\n            }\n      \
    \  }\n        if (x > 1) {\n            l.Add(x);\n        }\n        return l;",
  "        var res = new List<long>();\n        if (n <= 1) return res;\n        for\
    \ (long i = 2; i * i <= n; i++) {\n            int cnt = 0;\n            while\
    \ (n % i == 0) {\n                n /= i;\n                cnt++;\n          \
    \  }\n            if (cnt > 0) res.AddRange(Enumerable.Repeat(i, cnt));\n    \
    \    }\n        if (n > 1) res.Add(n);\n        return res;", "        List<long>\
    \ factors = new List<long>();\n        for (long i = 2; i * i <= n; i++) {\n \
    \           while (n % i == 0) {\n                factors.Add(i);\n          \
    \      n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        var answer = new List<long>();\n\
    \        for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n\
    \                answer.Add(i);\n                n /= i;\n                i--;\n\
    \            }\n        }\n        if (n > 1) answer.Add(n);\n        return answer;",
  "        List<long> factors = new List<long>();\n        long[] primes = Primes((long)Math.Sqrt(n)\
    \ + 1L);\n        for (long p = (long)0L; p < (long)primes.Length; p++)\n    \
    \    {\n            if (n == (long)1L)\n            {\n                break;\n\
    \            }\n\n            long i = (long)0L;\n            while (n % primes[p]\
    \ == (long)0L)\n            {\n                n /= primes[p];\n             \
    \   i++;\n            }\n\n            while (i > (long)0L)\n            {\n \
    \               factors.Add(primes[p]);\n                i--;\n            }\n\
    \n        }\n\n        return factors;\n", "        var factors = new List<long>();\n\
    \        for (long d = 2; d * d <= n; d++) {\n            while (n % d == 0) {\n\
    \                factors.Add(d);\n                n /= d;\n            }\n   \
    \     }\n        if (n > 1) {\n            factors.Add(n);\n        }\n      \
    \  return factors;", "        List<long> factors = new List<long>();\n       \
    \ long r = 2;\n        for (int i = 0; i < n; i += 1) {\n            if (n % r\
    \ == 0) {\n                factors.Add(r);\n                n /= r;\n        \
    \    } else {\n                r += 1;\n            }\n        }\n        return\
    \ factors;", "        List<long> factors = new List<long>();\n        long divisor\
    \ = 2;\n        while (n > 1) {\n            while (n % divisor == 0) {\n    \
    \            factors.Add(divisor);\n                n /= divisor;\n          \
    \  }\n            divisor += 1;\n        }\n        return factors;", "      \
    \  List<long> factors = new List<long>();\n        for (long i = 2; i * i <= n;\
    \ i++) {\n            while (n % i == 0) {\n                factors.Add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         factors.Add(n);\n        }\n        return factors;"]
stop_tokens:
- "\n    }\n"
