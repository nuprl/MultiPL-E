language: cs
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           sum += SumSignedDigits(arr[i]);\n        }\n        return sum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkjm8tt92.cs(22,20): error CS0103: The name ''SumSignedDigits'' does not
    exist in the current context

    '
  timestamp: 1659976281
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        int cnt = 0;\n        foreach (long x in arr) {\n            int
    s = 0;\n            foreach (int i in x.ToString().Select(c => c - '0')) {\n                s
    += i;\n            }\n            if (s > 0) {\n                cnt++;\n            }\n
    \       }\n        return cnt;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ae2af4a5e814a9a8524618e2fa5d371>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ae2af4a5e814a9a8524618e2fa5d371>:0
    \n"
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => Math.Abs(x).ToString().Sum(c => (int)char.GetNumericValue(c))
    > 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e9dde8137e2d46c086afad642eea852d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e9dde8137e2d46c086afad642eea852d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => x >= 0).Count() + arr.Where(x => x < 0).Count(y
    => y.ToString().Split(new char[] { '-' }).Sum(z => z.Sum(c => (int)c - 48)) >
    0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <13673381d88143b39a5e148eff1f93a8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <13673381d88143b39a5e148eff1f93a8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => Char.GetNumericValue(y)).Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <76f3f28b7d6c4553b20bca5afcc3e271>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <76f3f28b7d6c4553b20bca5afcc3e271>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (var n in arr) {\n            if
    (SumOfDigits(n) > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpesgc3s_z.cs(22,17): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    '
  timestamp: 1659976281
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // put your code here\n        int sum = 0;\n        for (int
    i = 0; i < arr.Count; i++) {\n            int temp = 0;\n            int digit
    = 0;\n            if (arr[i] < 0) {\n                temp = (int)Math.Abs(arr[i]);\n
    \               temp *= -1;\n            } else {\n                temp = (int)arr[i];\n
    \           }\n            while (temp != 0) {\n                digit = temp %
    10;\n                sum += digit;\n                temp /= 10;\n            }\n
    \           if (sum > 0) {\n                sum = 0;\n            } else {\n                sum
    = 0;\n                arr.RemoveAt(i);\n                i--;\n            }\n
    \       }\n        return arr.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee181ce142934e17bb7a5b843aecd2ae>:0
    \n"
  stdout: ''
  timestamp: 1659976282
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        throw new NotImplementedException();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00006] in <0ce1190bea01419695a7bc0e095e186c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00006]
    in <0ce1190bea01419695a7bc0e095e186c>:0 \n"
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.AsParallel().Count(x => x.ToString().Sum(c => c - '0')
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f648aa7c87cf4f50998257cc7c3f5cfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f648aa7c87cf4f50998257cc7c3f5cfe>:0
    \n"
  stdout: ''
  timestamp: 1659976282
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        var numDigits = arr.SelectMany(a => a.ToString().Select(c => int.Parse(c.ToString()))).Sum();\n
    \       return numDigits;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char c) [0x00007] in <5cc5467b97364f58a3ace3fcb673789f>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable+SelectManySingleSelectorIterator`2[TSource,TResult].MoveNext
    () [0x0006f] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00024] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00026]
    in <5cc5467b97364f58a3ace3fcb673789f>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <5cc5467b97364f58a3ace3fcb673789f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char c) [0x00007] in <5cc5467b97364f58a3ace3fcb673789f>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863"
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long sum = 0;\n            long n = arr[i];\n            if (n < 0)
    {\n                sum += -1;\n                n = -n;\n            }\n            while
    (n > 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1ed2e96ec870449d90ae582af46627a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1ed2e96ec870449d90ae582af46627a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <405293ff3a2a4a2984a864cfc664d814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <405293ff3a2a4a2984a864cfc664d814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Your code goes here\n        return arr.Select(x => Math.Abs(x)).Sum(x
    => x.ToString().Select(d => d - '0').Sum());\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <382587fddf7a4caaaa7156456f1692f1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <382587fddf7a4caaaa7156456f1692f1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long sum = 0;\n        foreach (var item in arr) {\n            sum
    += SignedDigits(item);\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0tw6ksp7.cs(22,20): error CS0103: The name ''SignedDigits'' does not exist
    in the current context

    '
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long num = arr[i];\n            long sum = 0;\n            if (num
    < 0) {\n                sum = num % 10;\n                num = -num / 10;\n            }\n
    \           while (num > 0) {\n                sum += num % 10;\n                num
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f313acb69e824afab80c806e37960f27>:0
    \n"
  stdout: ''
  timestamp: 1659976282
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return CountNums(arr, 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmndgf34a.cs(20,16): error CS1501: No overload for method ''CountNums''
    takes 2 arguments

    '
  timestamp: 1659976281
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long ans = 0;\n        foreach (long val in arr) {\n            string[]
    dig = val.ToString().Split('-');\n            long sum = 0;\n            for (int
    i = 0; i < dig.Length; i++) {\n                for (int j = 0; j < dig[i].Length;
    j++) {\n                    sum += (long)dig[i][j] - '0';\n                }\n
    \           }\n            if (sum > 0) {\n                ans++;\n            }\n
    \       }\n        return ans;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <054a7dfe68ce4935b8448ffefa3734b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <054a7dfe68ce4935b8448ffefa3734b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Your code goes here.\n        return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c8f30270542c4799a1c6633d922ea172>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c8f30270542c4799a1c6633d922ea172>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long __ret = default(long);\n        if (((((((((((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}).Contains((arr[(int)0L]))) && ((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L}).Contains((arr[(int)1L]))))) && ((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L}).Contains((arr[(int)2L]))))) && ((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L}).Contains((arr[(int)3L]))))) && ((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L}).Contains((arr[(int)4L]))))) && ((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L}\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpytt3jhi7.cs(21,946): error CS1026: ) expected

    /tmp/tmpytt3jhi7.cs(21,946): error CS1525: Invalid expression term ''}''

    /tmp/tmpytt3jhi7.cs(21,946): error CS1002: ; expected

    '
  timestamp: 1659976281
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        throw new NotImplementedException();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00006] in <0ce1190bea01419695a7bc0e095e186c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00006]
    in <0ce1190bea01419695a7bc0e095e186c>:0 \n"
  stdout: ''
  timestamp: 1659976282
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long sum = 0;\n        foreach (long i in arr) {\n            sum
    += AddDigits(i);\n        }\n        return sum;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkzn7f0gv.cs(22,20): error CS0103: The name ''AddDigits'' does not exist
    in the current context

    '
  timestamp: 1659976281
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        if (arr.Count == 0) {\n            return 0;\n        }\n        return
    arr.Where(x => Math.Abs(x).ToString().Sum(y => int.Parse(y.ToString())) > 0).Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16ac676c4b6f4d3f877d6202f28c0029>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16ac676c4b6f4d3f877d6202f28c0029>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // the number of elements which has a sum of digits > 0\n        long
    count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            // if a
    number is negative, then its first signed digit will be negative\n            if
    (arr[i] >= 0) {\n                // the number of elements which has a sum of
    digits > 0\n                // e.g. 123 has digits 1, 2, and 3\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <711965f956c64d44856ea071932b9a67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <711965f956c64d44856ea071932b9a67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long x in arr) {\n            if
    (SumDigits(x) > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kzotarb.cs(22,17): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659976281
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(i => i > 0 ? DigitSum(i) > 0 : DigitSum(-i) >
    0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp361_vxtz.cs(20,39): error CS0103: The name ''DigitSum'' does not exist
    in the current context

    /tmp/tmp361_vxtz.cs(20,57): error CS0103: The name ''DigitSum'' does not exist
    in the current context

    '
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long num = arr[i];\n            if (num < 0) {\n                num
    = -num;\n            }\n            long sum = 0;\n            for (; num > 0;
    num /= 10) {\n                sum += num % 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3296d85db4a4289b731387231cf7f13>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3296d85db4a4289b731387231cf7f13>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long result = 0;\n        foreach (long element in arr) {\n            int
    temp = 0;\n            string s = element.ToString();\n            foreach (char
    c in s) {\n                if (c != '-') {\n                    temp += Convert.ToInt32(c);\n
    \               }\n            }\n            if (temp > 0) {\n                result++;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d185f960d0140bc9a5fc409beb5a67a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d185f960d0140bc9a5fc409beb5a67a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x != 0 && x != long.MaxValue && Math.Abs(x).ToString().Select(ch
    => ch - '0').Sum() > 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea3f03410b14420db1c5841280d9c75f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea3f03410b14420db1c5841280d9c75f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x != 0 && x.ToString().Select(y => Math.Abs(int.Parse(y.ToString()))).Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <9c7d96870bc9401bbd21eef181f0fcbe>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00024] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x0002e] in <9c7d96870bc9401bbd21eef181f0fcbe>:0
    \n  at System.Linq.Enumerable.Count[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00001]
    in <9c7d96870bc9401bbd21eef181f0fcbe>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <9c7d96870bc9401bbd21eef181f0fcbe>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <9c7d96870bc9401b"
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long ret = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long v = arr[i];\n            if (v < 0) {\n                v = -v;\n
    \           }\n            ret += v.ToString().Sum(c => c - '0');\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00bf487f6a60458ea52231e9ace4d516>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00bf487f6a60458ea52231e9ace4d516>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => sumdigits(x) > 0);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcqqja245.cs(20,31): error CS0103: The name ''sumdigits'' does not exist
    in the current context

    '
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        //count of numbers with sum of digits greater than 0\n        int
    count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long num
    = arr[i];\n            long sum = 0;\n            while (num != 0) {\n                sum
    += num % 10;\n                num /= 10;\n            }\n            if (sum >
    0) {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25f3e8db04ac41a5a93f7be941d88619>:0
    \n"
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count((e) => e % 10 != 0);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <363b673c45bc42dca923610d915ee8a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <363b673c45bc42dca923610d915ee8a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976283
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        int CountNums(List<long> arr) {\n            return arr.Where(n
    => Math.Abs(n).ToString().Select(d => int.Parse(d.ToString())).Sum() > 0).Count();\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpftgl5zix.cs(20,13): warning CS8321: The local function ''CountNums'' is
    declared but never used

    /tmp/tmpftgl5zix.cs(19,24): error CS0161: ''Problem.CountNums(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659976282
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        throw new NotImplementedException();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00006] in <0ce1190bea01419695a7bc0e095e186c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00006]
    in <0ce1190bea01419695a7bc0e095e186c>:0 \n"
  stdout: ''
  timestamp: 1659976282
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long cnt = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           if (SumDigits(arr[i]) > 0) {\n                cnt++;\n            }\n
    \       }\n        return cnt;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfd1f0ivi.cs(22,17): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(n => Math.Abs(n).ToString().Sum(c => c - '0')
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7330980066444d80956a0a6ea3dfff67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7330980066444d80956a0a6ea3dfff67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976283
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(a => a.ToString().Sum(b => Math.Abs(b - '0'))
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afa59c81da5e475d85fedba8361ecadb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afa59c81da5e475d85fedba8361ecadb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976283
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           var num = arr[i];\n            var res = 0;\n            if (num <
    0) {\n                res += Math.Abs(num % 10);\n                num /= 10;\n
    \           }\n            while (num != 0) {\n                res += num % 10;\n
    \               num /= 10;\n            }\n            if (res > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaubrcc1s.cs(25,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpaubrcc1s.cs(29,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976283
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long n in arr) {\n            long
    nn = Math.Abs(n);\n            long sum = 0;\n            while (nn > 0) {\n                sum
    += nn % 10;\n                nn /= 10;\n            }\n            if (sum > 0)
    {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f91bb9a1d88041a8b5b393dcf5b5a91b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f91bb9a1d88041a8b5b393dcf5b5a91b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976283
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Your code here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f25d04b3b73041e3b8db4ca680612a6a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f25d04b3b73041e3b8db4ca680612a6a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976283
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => x.ToString().Sum(c => c - '0') > 0).Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39753b1841cd44d89368a6d8ff48d708>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39753b1841cd44d89368a6d8ff48d708>:0
    \n"
  stdout: ''
  timestamp: 1659976283
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        var r=arr.Aggregate(0L, (acc, n) => {\n            return acc
    + (Math.Abs(n)>0 ? 1 : 0);\n        });\n        return r;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b6e9b5f5ac75440b92039033973c94ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b6e9b5f5ac75440b92039033973c94ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976283
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => Math.Abs(x).ToString().Select(y => int.Parse(y.ToString())).Sum()
    > 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3fbed6e5a01477e96a944f60f99e331>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3fbed6e5a01477e96a944f60f99e331>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976283
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        throw new NotImplementedException();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00006] in <0ce1190bea01419695a7bc0e095e186c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00006]
    in <0ce1190bea01419695a7bc0e095e186c>:0 \n"
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // your code here\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <17de1b9eb94543738d574ba06664dbe8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <17de1b9eb94543738d574ba06664dbe8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976283
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long num = arr[i];\n            int sum = 0;\n            while (num
    != 0) {\n                sum += Math.Abs(num % 10);\n                num /= 10;\n
    \           }\n            if (sum > 0) {\n                count++;\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpweep_8p3.cs(25,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976283
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long result = 0;\n        foreach (long a in arr) {\n            if
    (SumDigits(a) > 0) {\n                result++;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsrn32vhv.cs(22,17): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659976283
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        throw new NotImplementedException();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00006] in <0ce1190bea01419695a7bc0e095e186c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00006]
    in <0ce1190bea01419695a7bc0e095e186c>:0 \n"
  stdout: ''
  timestamp: 1659976282
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        Func<int, int> SumDigits = null;\n        SumDigits = i => {\n
    \           return i < 0 ? SumDigits(-i) : i < 10 ? i : SumDigits(i / 10) + i
    % 10;\n        };\n        return arr.Count(i => SumDigits(i) > 0);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptan5rcky.cs(24,41): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976283
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        long sum = 0;\n        // TODO: implement
    here\n        return count;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1e6922a985b4440280a1d53086ccf274>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1e6922a985b4440280a1d53086ccf274>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976283
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        var total = 0L;\n        foreach (var i in arr) {\n            var
    sum = 0L;\n            var abs = Math.Abs(i);\n            var count = 0L;\n            while
    (abs != 0) {\n                var digit = abs % 10;\n                abs /= 10;\n
    \               sum += digit;\n                count++;\n            }\n            if
    (sum > 0) {\n                total++;\n            }\n        }\n        return
    total;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95f2bcbb99c54608b576cc70b9b05862>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95f2bcbb99c54608b576cc70b9b05862>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976283
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           if (GetSignedDigitsSum(arr[i]) > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpafgaqe3r.cs(22,17): error CS0103: The name ''GetSignedDigitsSum'' does
    not exist in the current context

    '
  timestamp: 1659976283
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           int sum = 0;\n            foreach (char c in (arr[i] < 0 ? arr[i].ToString().Substring(1)
    : arr[i].ToString()))\n                sum += (int)char.GetNumericValue(c);\n
    \           if (sum > 0)\n                count++;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1e47cac729c64a928234230cf6f13595>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1e47cac729c64a928234230cf6f13595>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976283
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Write your code here!\n        return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <557ff37d363f402eaab31e79c751ac5a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <557ff37d363f402eaab31e79c751ac5a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976283
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long r0 = 0L;\n        long r1 = 0L;\n        foreach (long a
    in arr) {\n            long r2 = a;\n            long r3 = 0L;\n            while
    (r2 > 0L) {\n                long r4 = r2;\n                r2 = r4 / 10L;\n                r3
    = r3 + r4 - r2 * 10L;\n            }\n            if (r3 > 0L) {\n                r0
    = r0 + 1L;\n            }\n        }\n        r1 = r0;\n        return r1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0aeff836c28d4d03a50bd267b5838ec0>:0
    \n"
  stdout: ''
  timestamp: 1659976283
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           if (arr[i] < 0) {\n                arr[i] = -arr[i];\n            }\n
    \           long sum = 0;\n            while (arr[i] > 0) {\n                sum
    += arr[i] % 10;\n                arr[i] /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff669e98a1754b9c84015aa04d7a44fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff669e98a1754b9c84015aa04d7a44fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976283
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        var result = 0L;\n        for (var i = 0; i < arr.Count; i++)
    {\n            result += SignedDigitsSum(arr[i]) > 0 ? 1 : 0;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6oys9zlr.cs(22,23): error CS0103: The name ''SignedDigitsSum'' does not
    exist in the current context

    '
  timestamp: 1659976283
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        int count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           int sum = 0;\n            if (arr[i] < 0) {\n                sum +=
    Math.Abs(arr[i] % 10);\n                arr[i] /= 10;\n            }\n            while
    (arr[i] > 0) {\n                sum += arr[i] % 10;\n                arr[i] /=
    10;\n            }\n            if (sum > 0) count++;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt6ccza2t.cs(24,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpt6ccza2t.cs(28,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976283
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        //int m = arr.Count;\n        //long cnt = 0;\n        //for (int
    i = 0; i < m; i++) {\n        //    if (arr[i] < 0) {\n        //        cnt++;\n
    \       //    }\n        //}\n        //return cnt;\n        return arr.Count(x
    => x < 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <09a76db0b7d34de5b6c6bad846b7a798>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <09a76db0b7d34de5b6c6bad846b7a798>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976284
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <405293ff3a2a4a2984a864cfc664d814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <405293ff3a2a4a2984a864cfc664d814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long ret = 0;\n        foreach (long x in arr) {\n            string
    s = x.ToString();\n            long t = 0;\n            foreach (char c in s)
    {\n                t += c - '0';\n            }\n            if (t > 0) ret++;\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbb98de084d04d9badcda47a194493fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbb98de084d04d9badcda47a194493fd>:0
    \n"
  stdout: ''
  timestamp: 1659976283
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           var x = arr[i];\n            long sum = 0;\n            while (x !=
    0) {\n                sum += x % 10;\n                x /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2b725be8195842f895294b656404c1cb>:0
    \n"
  stdout: ''
  timestamp: 1659976284
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Your code goes here.\n        return arr.Count(a => a.ToString().Select(c
    => Int32.Parse(c.ToString())).Sum() > 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char c) [0x00007] in <3ce70040b01a415eb9294c687cd7103c>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00024] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 a) [0x0002b] in <3ce70040b01a415eb9294c687cd7103c>:0
    \n  at System.Linq.Enumerable.Count[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00001]
    in <3ce70040b01a415eb9294c687cd7103c>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <3ce70040b01a415eb9294c687cd7103c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char c) [0x00007] in <3ce70040b01a415e"
  stdout: ''
  timestamp: 1659976283
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long cnt = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long sum = arr[i];\n            if (sum < 0) sum = -sum;\n            while
    (sum > 0) {\n                cnt += sum % 10;\n                sum /= 10;\n            }\n
    \       }\n        return cnt;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e4349794235f48b2989a544aade7a457>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e4349794235f48b2989a544aade7a457>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976284
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count( x => x < 0 || x % 9 != 0);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ec8636d38eb548b2a905b82185c61215>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ec8636d38eb548b2a905b82185c61215>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976284
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Your code goes here.\n        return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c8f30270542c4799a1c6633d922ea172>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c8f30270542c4799a1c6633d922ea172>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long i in arr) {\n            int
    sum = 0;\n            long num = Math.Abs(i);\n            if (num == 0) {\n                count++;\n
    \               continue;\n            }\n            while (num > 0) {\n                sum
    += (int)(num % 10);\n                num /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd5e33f979e34510a46fe16308bdb3ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd5e33f979e34510a46fe16308bdb3ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976284
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long res = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           if (SignedDigitsSum(arr[i]) > 0) {\n                res++;\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0nde8f91.cs(22,17): error CS0103: The name ''SignedDigitsSum'' does not
    exist in the current context

    '
  timestamp: 1659976283
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(c => {\n            long n = c;\n            long
    sum = 0;\n            bool negative = false;\n            if (n < 0) {\n                negative
    = true;\n                n = -n;\n            }\n            while (n > 0) {\n
    \               sum += n % 10;\n                n /= 10;\n            }\n            return
    negative ? sum < 0 : sum > 0;\n        });\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a802f17a15ca469897a22e46e66d5897>:0
    \n"
  stdout: ''
  timestamp: 1659976284
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => Math.Abs(x).ToString().Select(y => y - '0').Sum()
    > 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cc8b8b36a9db45f88f1d0bcdf41ab7ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cc8b8b36a9db45f88f1d0bcdf41ab7ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976284
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long ret = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long l = arr[i];\n            if (l < 0) {\n                ret +=
    (1L);\n                l = (-(l));\n            }\n            while (l > 0) {\n
    \               ret += (l % 10L);\n                l /= 10L;\n            }\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <017f8f88696e43e1b879e3e4d4198344>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <017f8f88696e43e1b879e3e4d4198344>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976284
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => { var s = Math.Abs(x).ToString(); return
    s.Sum(y => y - '0') > 0; });\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5db55f83009a4b5582e021ac4c85a3f2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5db55f83009a4b5582e021ac4c85a3f2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976284
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        List<long> a = new List<long>();\n        List<long> b = new List<long>();\n
    \       List<long> c = new List<long>();\n        List<long> d = new List<long>();\n
    \       for (int i = 0; i < arr.Count; i++) {\n            long k = arr[i];\n
    \           if (k < 0) {\n                a.Add(k);\n            } else {\n                b.Add(k);\n
    \           }\n        }\n        for (int i = 0; i < a.Count; i++) {\n            long
    k = a[i];\n            while (k != 0) {\n                c.Add(k % 10);\n                k
    /= 10;\n            }\n        }\n        for (int i = 0; i < b.Count; i++) {\n
    \           long k = b[i];\n            while (k != 0) {\n                d.Add(k
    % 10);\n                k /= 10;\n            }\n        }\n        long res =
    0;\n        for (int i = 0; i < c.Count; i++) {\n            long k = c[i];\n
    \           res += k;\n        }\n        for (int i = 0; i < d.Count; i++) {\n
    \           long k = d[i];\n            res += k;\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1a4f281a9864f2b8758ccda957e2ca7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1a4f281a9864f2b8758ccda957e2ca7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976284
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(item => {\n            long total = 0;\n            long
    num = item;\n            bool negative = num < 0;\n            if (negative) {\n
    \               num = -num;\n            }\n            while (num > 0) {\n                total
    += num % 10;\n                num /= 10;\n            }\n            return negative
    ? -total : total;\n        }).ToString().Count();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkuamx12m.cs(31,20): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmpkuamx12m.cs(31,20): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659976284
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           if (SumDigits(arr[i]) > 0)\n                count++;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpylblda2b.cs(22,17): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659976284
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long element in arr) {\n            if
    (sumdigits(element) > 0) {\n                count += 1;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplfjrqfur.cs(22,17): error CS0103: The name ''sumdigits'' does not exist
    in the current context

    '
  timestamp: 1659976284
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        //throw new NotImplementedException();\n        long count = 0;\n
    \       foreach (long i in arr) {\n            string s = Math.Abs(i).ToString();\n
    \           long sum = 0;\n            foreach (char c in s) {\n                sum
    += long.Parse(c.ToString());\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4c32e7d38ba44620a796e562dffcc601>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4c32e7d38ba44620a796e562dffcc601>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976284
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // >>> CountNums((new List<long>()))\n        // (0L)\n        if
    (arr.Count == 0) {\n            return 0;\n        }\n        else {\n            var
    list = new List<BigInteger>();\n            // >>> CountNums((new List<long>(new
    long[]{(long)-1L, (long)11L, (long)-11L})))\n            // (1L)\n            for
    (int i = 0; i < arr.Count; i++) {\n                var value = arr[i];\n                if
    (value < 0) {\n                    list.Add((BigInteger)value);\n                }\n
    \               else {\n                    list.Add((BigInteger)0);\n                }\n
    \           }\n            // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n            // (3L)\n            var sum = new BigInteger();\n
    \           for (int i = 0; i < list.Count; i++) {\n                sum += list[i];\n
    \           }\n            // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n            // (3L)\n            if (sum == 0) {\n                return
    (long)arr.Count;\n            }\n            // >>> CountNums((new List<long>(new
    long[]{(long)-1L, (long)11L, (long)-11L})))\n            // (1L)\n            else
    {\n                var count = 0;\n                for (int i = 0; i < arr.Count;
    i++) {\n                    var value = arr[i];\n                    if (value
    < 0) {\n                        count++;\n                    }\n                }\n
    \               return (long)count;\n            }\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <714146bf76b34e21ab402792483572b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <714146bf76b34e21ab402792483572b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976284
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // your code goes here\n        return arr.Count(x => Math.Abs(x).ToString().Select(y
    => y - '0').Sum() > 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c0d86f520a24565946e65701f864095>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c0d86f520a24565946e65701f864095>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976284
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Sum(x => SumDigits(x));\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp9mevh4r.cs(20,29): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659976284
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long number = arr[i];\n            if (number < 0) {\n                number
    = -number;\n            }\n            while (number > 0) {\n                count
    += number % 10;\n                number /= 10;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae608bb4502c421885292bb612da6c24>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae608bb4502c421885292bb612da6c24>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976284
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return -1;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5eb8b5d9f7634ab291147aa54935c877>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5eb8b5d9f7634ab291147aa54935c877>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976284
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(l => (l > 0 && l.ToString().Sum(c => c - '0')
    > 0) || (l < 0 && l.ToString().Sum(c => c - '0') > 0));\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <72caff82782e4ce88b0da19eb7c0fdfa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <72caff82782e4ce88b0da19eb7c0fdfa>:0
    \n"
  stdout: ''
  timestamp: 1659976284
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    total = 0;\n            string numStr = num.ToString();\n            if (numStr[0]
    == '-') {\n                foreach (char digit in numStr.Substring(1)) {\n                    total
    += int.Parse(digit.ToString());\n                }\n                total += 1;\n
    \           } else {\n                foreach (char digit in numStr) {\n                    total
    += int.Parse(digit.ToString());\n                }\n            }\n            if
    (total > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae3fcc371ce74c44997bb94adb3d65af>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae3fcc371ce74c44997bb94adb3d65af>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976284
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        int count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            string numString = num.ToString();\n            if (numString[0]
    == '-') {\n                sum += numString[1] - '0';\n                for (int
    i = 2; i < numString.Length; i++) {\n                    sum += numString[i] -
    '0';\n                }\n            } else {\n                for (int i = 0;
    i < numString.Length; i++) {\n                    sum += numString[i] - '0';\n
    \               }\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c86d04021474484da9971f40de9adefc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c86d04021474484da9971f40de9adefc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976284
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // REPLACE WITH YOUR CODE\n        return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84ebfc7c7b8c4f859b14968d37f39bb8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84ebfc7c7b8c4f859b14968d37f39bb8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976284
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        int count = 0;\n        foreach (long i in arr) {\n            string
    s = i.ToString();\n            int sum = 0;\n            foreach (char c in s)
    {\n                if (c != '-') {\n                    sum += (int)char.GetNumericValue(c);\n
    \               }\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <178a4c8daf93441f938750668faf2737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <178a4c8daf93441f938750668faf2737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976285
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           var sum = Math.Abs(arr[i]).ToString().Select(c => int.Parse(c.ToString())).Sum();\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0939083004b447e9839a9c887971010a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0939083004b447e9839a9c887971010a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976285
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x < 0 || x > 0 && x.ToString().Sum(c =>
    c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3605ce05589948229757bed64580aeab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3605ce05589948229757bed64580aeab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976285
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => Math.Abs(x).ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5450b0dc4ad4458a83ae3b90c547cdd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5450b0dc4ad4458a83ae3b90c547cdd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976285
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long cnt = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long tmp = 0;\n            if (arr[i] < 0)\n                tmp +=
    arr[i] % 10;\n            while (arr[i] != 0) {\n                tmp += arr[i]
    % 10;\n                arr[i] /= 10;\n            }\n            if (tmp > 0)\n
    \               cnt++;\n        }\n        return cnt;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2fb574362424b698816892564b9e248>:0
    \n"
  stdout: ''
  timestamp: 1659976285
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // write code here\n        int ret = 0;\n        for (int i =
    0; i < arr.Count; i++) {\n            int tmpsum = 0;\n            if (arr[i]
    < 0) {\n                tmpsum = arr[i] * -1;\n            } else {\n                tmpsum
    = arr[i];\n            }\n            while (tmpsum > 0) {\n                tmpsum
    -= tmpsum % 10;\n                tmpsum /= 10;\n            }\n            if
    (tmpsum != 0) {\n                ret++;\n            }\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_9gipoid.cs(25,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_9gipoid.cs(27,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976284
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long result = 0;\n        foreach (long x in arr) {\n            long
    r = 0;\n            long n = Math.Abs(x);\n            while (n > 0) {\n                r
    += n % 10;\n                n /= 10;\n            }\n            if (r > 0) {\n
    \               result++;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5799c56fa82474e8f9a2fcf4157cc43>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5799c56fa82474e8f9a2fcf4157cc43>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976285
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (long i = 0; i < arr.Count; i++)
    {\n            long sum = 0;\n            long digit = Math.Abs(arr[(int)i]);\n
    \           while (digit > 0) {\n                sum += digit % 10;\n                digit
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <524d7ff357b447459eb06532d6c984ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <524d7ff357b447459eb06532d6c984ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976285
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return Enumerable.Range(0, arr.Count).Where(i => arr[i] != 0).Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b706a69d29bc4ce38dfcd30694451bc1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b706a69d29bc4ce38dfcd30694451bc1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976285
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        int total = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           var item = arr[i];\n            var sum = 0;\n            while (item
    != 0) {\n                sum += item % 10;\n                item /= 10;\n            }\n
    \           if (sum > 0) total++;\n        }\n        return total;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdnj90vt6.cs(25,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976284
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count((_arg1) => {\n            return _arg1.Digits().Sum((_arg2)
    => {\n                return (long)_arg2;\n            }) > 0L;\n        });\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp88p9vrh9.cs(21,26): error CS1061: ''long'' does not contain a definition
    for ''Digits'' and no accessible extension method ''Digits'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659976285
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        int sum = 0;\n        int res = 0;\n        foreach (var item
    in arr) {\n            string x = item.ToString();\n            foreach (var digit
    in x) {\n                if (digit == '-') continue;\n                sum += (int)digit
    - 48;\n            }\n            if (sum > 0) res++;\n            sum = 0;\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba71859dbeef43fc965e886cf3e52f1c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba71859dbeef43fc965e886cf3e52f1c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976285
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(a => a.SumDigits() > 0).Count();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbw4v4qk9.cs(20,33): error CS1061: ''long'' does not contain a definition
    for ''SumDigits'' and no accessible extension method ''SumDigits'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976285
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(v => Math.Abs(v).ToString().Sum(c => c - '0')
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84b18a43b0824c5880097e0d139c3957>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84b18a43b0824c5880097e0d139c3957>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976285
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(e => e.ToString().ToCharArray().Select(c => c
    - '0').Sum() > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f17e60af8a8471dbd7dd8b789d71be8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f17e60af8a8471dbd7dd8b789d71be8>:0
    \n"
  stdout: ''
  timestamp: 1659976285
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Your code here...\n        return arr.Where(a => Math.Abs(a).ToString().Sum(b
    => b - '0') > 0).Count();\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0615a93343840618a42ecab7ad63398>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0615a93343840618a42ecab7ad63398>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976285
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // YOUR CODE HERE\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3468b1dd6fb4f8aa08c5698c196f661>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3468b1dd6fb4f8aa08c5698c196f661>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976285
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long l = arr[i];\n            if (l < 0) {\n                l = -l;\n
    \           }\n            while (l > 0) {\n                sum += l % 10;\n                l
    /= 10;\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5fef70a780dc480fbe030f375b43f8db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5fef70a780dc480fbe030f375b43f8db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976285
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long cnt = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long val = arr[i];\n            if (val < 0) {\n                val
    = -val;\n            }\n            long dsum = 0;\n            while (val > 0)
    {\n                dsum += val % 10;\n                val /= 10;\n            }\n
    \           if (dsum > 0) {\n                cnt++;\n            }\n        }\n
    \       return cnt;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ae6b494c2a54dc1bf3ac967158cabcd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ae6b494c2a54dc1bf3ac967158cabcd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976285
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => (DigitSum(x) > 0));\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppmywzcos.cs(20,32): error CS0103: The name ''DigitSum'' does not exist
    in the current context

    '
  timestamp: 1659976285
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x < 0 ?\n            (new List<long>(x.ToString().Replace(\"-\",
    \"\").Select(y => (long)Char.GetNumericValue(y)))).Sum() > 0 :\n            (new
    List<long>(x.ToString().Select(y => (long)Char.GetNumericValue(y)))).Sum() > 0);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <937a2a7258784db3b813ea348a47b3f2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <937a2a7258784db3b813ea348a47b3f2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976285
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        var ret = 0L;\n        foreach (var x in arr) {\n            var
    t = x < 0 ? -x : x;\n            if (t != 0)\n                ret += x % 10;\n
    \           while (t > 0) {\n                t /= 10;\n                ret +=
    t % 10;\n            }\n        }\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cee0e3be8d15471183260034f72125f1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cee0e3be8d15471183260034f72125f1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976285
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long sum = 0;\n        foreach (long i in arr) {\n            sum
    += GetDigitSum(i);\n        }\n        return sum;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa0xewpgx.cs(22,20): error CS0103: The name ''GetDigitSum'' does not exist
    in the current context

    '
  timestamp: 1659976285
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        var z = 0L;\n        foreach (var x in arr) {\n            var
    num = x < 0 ? -x : x;\n            while (num > 0) {\n                z += num
    % 10;\n                num /= 10;\n            }\n        }\n        return z;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <50cd1055f8f04ad182fb946fc1ea9b84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <50cd1055f8f04ad182fb946fc1ea9b84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976285
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // your code here\n        int positive = 0;\n        for (int
    i = 0; i < arr.Count; i++) {\n            if (arr[i] == 0) { continue; }\n            if
    (arr[i] < 0) {\n                int temp = -arr[i];\n                if (SumDigits(temp)
    > 0) { positive++; }\n            }\n            else {\n                if (SumDigits(arr[i])
    > 0) { positive++; }\n            }\n        }\n        return positive;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpykskelxl.cs(25,28): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpykskelxl.cs(26,21): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpykskelxl.cs(29,21): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659976285
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        var ans = 0L;\n        for (var i = 0; i < arr.Count; i++) {\n
    \           var x = arr[i];\n            var s = 0L;\n            while (x !=
    0) {\n                s += x % 10;\n                x /= 10;\n            }\n
    \           if (s > 0) {\n                ans++;\n            }\n        }\n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <026c0b07a6c641aa8390cf67a77edb82>:0
    \n"
  stdout: ''
  timestamp: 1659976286
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long counter = 0;\n        for (int i = 0; i < arr.Count; i++)
    {\n            var digits = SumDigits(arr[i]);\n            if (digits > 0) {\n
    \               counter++;\n            }\n        }\n        return counter;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv_o7bivi.cs(22,26): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659976285
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long result = (long)arr.Count();\n        for (int i = 0; i <
    arr.Count(); i++) {\n            long sum = 0;\n            long current = arr[i];\n
    \           if (current < 0) {\n                sum += current % 10;\n                current
    /= 10;\n            }\n            while (current != 0) {\n                sum
    += current % 10;\n                current /= 10;\n            }\n            if
    (sum <= 0) {\n                result--;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e4c9f7ac1fe74dccb8c0e54a3f529e69>:0
    \n"
  stdout: ''
  timestamp: 1659976286
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Select(x => x < 0 ? x * -1 : x).Sum();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ffd63c5bd7042d39bab8d9cf2792c0a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ffd63c5bd7042d39bab8d9cf2792c0a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976286
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(n => n.ToString().Sum(c => c - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25e60bf2d90748f09e3fd7f2e139c798>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25e60bf2d90748f09e3fd7f2e139c798>:0
    \n"
  stdout: ''
  timestamp: 1659976286
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (var e in arr) {\n            if
    (SumOfDigits(e) > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc895psn5.cs(22,17): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    '
  timestamp: 1659976285
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <405293ff3a2a4a2984a864cfc664d814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <405293ff3a2a4a2984a864cfc664d814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long cnt = 0;\n        long sum_of_digits = 0;\n        long digit
    = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long num = arr[i];\n
    \           if (num < 0) {\n                num = -num;\n                digit
    = -(num % 10);\n            } else {\n                digit = num % 10;\n            }\n
    \           sum_of_digits += digit;\n            num /= 10;\n            while
    (num > 0) {\n                digit = num % 10;\n                sum_of_digits
    += digit;\n                num /= 10;\n            }\n            if (sum_of_digits
    > 0) {\n                cnt++;\n            }\n            sum_of_digits = 0;\n
    \       }\n        return cnt;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf69cb26f9c34711b5a6add333f36fca>:0
    \n"
  stdout: ''
  timestamp: 1659976286
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <405293ff3a2a4a2984a864cfc664d814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <405293ff3a2a4a2984a864cfc664d814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return -1;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5eb8b5d9f7634ab291147aa54935c877>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5eb8b5d9f7634ab291147aa54935c877>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976284
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (long i = 0; i < arr.Count; i++)
    {\n            long sum = 0;\n            long n = arr[(int)i];\n            if
    (n < 0) {\n                sum = n;\n            }\n            else {\n                sum
    = n;\n            }\n            while (sum > 0) {\n                long d = sum
    % 10;\n                sum /= 10;\n                sum += d;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976291
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        throw new NotImplementedException();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00006] in <0ce1190bea01419695a7bc0e095e186c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00006]
    in <0ce1190bea01419695a7bc0e095e186c>:0 \n"
  stdout: ''
  timestamp: 1659976282
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.SumDigits() > 0);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8q4owipw.cs(20,33): error CS1061: ''long'' does not contain a definition
    for ''SumDigits'' and no accessible extension method ''SumDigits'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976285
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (long i = 0; i < arr.Count; i++)
    {\n            long n = arr[(int)i];\n            long d = n < 0 ? -n : n;\n            long
    sum = 0;\n            while (d > 0) {\n                sum += d % 10;\n                d
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40b2269171b247f49a736d04ec7a0939>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40b2269171b247f49a736d04ec7a0939>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976286
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long c = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long
    v = arr[i];\n            long s = 0;\n            if (v < 0) {\n                v
    = -v;\n                s = -1;\n            }\n            while (v > 0) {\n                s
    += v % 10;\n                v /= 10;\n            }\n            if (s > 0)\n
    \               c++;\n        }\n        return c;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <280ae0b697b94fd6b76f86f2324c179e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <280ae0b697b94fd6b76f86f2324c179e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976286
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(n => (n < 0 ? n : n) > 0).Count();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ad8a1d6364944aaae98e13739236661>:0
    \n"
  stdout: ''
  timestamp: 1659976286
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => Math.Abs(y - '0'))
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b20ff7a329a2495c9e3b5ed1057d6c6f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b20ff7a329a2495c9e3b5ed1057d6c6f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976286
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long cnt = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long num = arr[i];\n            if (num < 0) {\n                num
    = -num;\n            }\n            long acc = 0;\n            while (num > 0)
    {\n                acc += num % 10;\n                num /= 10;\n            }\n
    \           if (acc > 0) {\n                cnt++;\n            }\n        }\n
    \       return cnt;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1dda3cfa2cd242a2a3b5bdd816ffb954>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1dda3cfa2cd242a2a3b5bdd816ffb954>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976286
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <405293ff3a2a4a2984a864cfc664d814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <405293ff3a2a4a2984a864cfc664d814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long ans = 0;\n        foreach (long x in arr) {\n            int
    k = 0;\n            if (x < 0) {\n                x = -x;\n                k +=
    1;\n            }\n            while (x > 0) {\n                k += (int)(x %
    10);\n                x /= 10;\n            }\n            if (k > 0) {\n                ans
    += 1;\n            }\n        }\n        return ans;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpboxpuypq.cs(24,17): error CS1656: Cannot assign to ''x'' because it is
    a ''foreach iteration variable''

    /tmp/tmpboxpuypq.cs(29,17): error CS1656: Cannot assign to ''x'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659976286
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long sum = 0;\n            string str = arr[i].ToString();\n            if
    (str[0] == '-') {\n                sum += int.Parse(str[0].ToString());\n                str
    = str.Substring(1);\n            }\n            foreach (char c in str)\n                sum
    += int.Parse(c.ToString());\n            if (sum > 0)\n                count++;\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00043]
    in <45ceec82184f47c49c01c9113fc79c99>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <45ceec82184f47c49c01c9113fc79c99>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00043]
    in <45ceec82184f47c49c01c9113fc79c99>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <45ceec82184f47c49c01c9113fc79c99>:0 \n"
  stdout: ''
  timestamp: 1659976286
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Your code here...\n        int count = 0;\n        foreach
    (long i in arr) {\n            long signedDigits = 0;\n            foreach (char
    c in i.ToString()) {\n                signedDigits += c == '-' ? -(long.Parse(c.ToString()))
    : long.Parse(c.ToString());\n            }\n            if (signedDigits > 0)
    count++;\n        }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00050]
    in <4ba40128c8414d2d8a9beb8f1569fe7f>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <4ba40128c8414d2d8a9beb8f1569fe7f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00050]
    in <4ba40128c8414d2d8a9beb8f1569fe7f>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <4ba40128c8414d2d8a9beb8f1569fe7f>:0 \n"
  stdout: ''
  timestamp: 1659976286
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Write your solution here\n        return arr.Count(num =>\n
    \           num.ToString().Sum(c => c - '0') > 0\n        );\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63703672f4c74e83abad81429cc76445>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63703672f4c74e83abad81429cc76445>:0
    \n"
  stdout: ''
  timestamp: 1659976286
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => Convert.ToString(x).Sum(y => y - '0') >
    0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <574256401ad846ef97da2fe710c78f11>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <574256401ad846ef97da2fe710c78f11>:0
    \n"
  stdout: ''
  timestamp: 1659976286
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long result = 0;\n        for (long i = 0; i < arr.Count; i++)
    {\n            long s = 0;\n            long n = arr[(int)i];\n            while
    (n != 0) {\n                s += n % 10;\n                n /= 10;\n            }\n
    \           if (s > 0) {\n                result++;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <911f416a942e488f9436cde284df76c1>:0
    \n"
  stdout: ''
  timestamp: 1659976286
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(i => i.ToString().Sum(c => c - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d66fe6d1d7c5498483da13451c511d46>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d66fe6d1d7c5498483da13451c511d46>:0
    \n"
  stdout: ''
  timestamp: 1659976286
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long sum = 0;\n            long temp = 0;\n            if (arr[i]
    < 0)\n                temp = arr[i] * -1;\n            else\n                temp
    = arr[i];\n            while (temp > 0) {\n                sum += temp % 10;\n
    \               temp /= 10;\n            }\n            if (sum > 0)\n                count++;\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9cc2f0ba290440bc811af94c71ebe42f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9cc2f0ba290440bc811af94c71ebe42f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976286
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(n => n.Abs().Digits().Sum() > 0);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd34k6z15.cs(20,33): error CS1061: ''long'' does not contain a definition
    for ''Abs'' and no accessible extension method ''Abs'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659976286
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long i in arr) {\n            int
    sum = 0;\n            foreach (int d in i.ToString().Select(t => (int)Char.GetNumericValue(t)))
    {\n                sum += d;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0719a7c472974171be340672bec2e681>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0719a7c472974171be340672bec2e681>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976286
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        var count = 0L;\n        foreach (var a in arr) {\n            var
    ab = a;\n            var sum = 0L;\n            if (ab < 0) {\n                sum
    += -ab % 10;\n                ab /= 10;\n            }\n            while (ab
    > 0) {\n                sum += ab % 10;\n                ab /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c2e16fc95214ac2ad697dbd4a0179a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c2e16fc95214ac2ad697dbd4a0179a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976287
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(n => SumDigits(n) > 0).Count();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6oga8j5w.cs(20,31): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659976286
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => SumDigits(x) > 0).Count();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzei6c2nq.cs(20,31): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659976286
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x > 0 ? x.ToString().Select(c => int.Parse(c.ToString())).Sum()
    > 0 :\n            Math.Abs(x).ToString().Select(c => int.Parse(c.ToString())).Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <167a5b91718540bba78a39100bb90949>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <167a5b91718540bba78a39100bb90949>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976287
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Your code here!\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce22664faca84ffabc95b214baccccc9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce22664faca84ffabc95b214baccccc9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976287
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Replace this code with your own.\n        // If you make changes
    to the code below, be sure to add a test that\n        // shows it is broken and
    fix it.\n        return 0;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15d8bea13eec4d25afc15b8ac75c6ba4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15d8bea13eec4d25afc15b8ac75c6ba4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976287
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        throw new NotImplementedException();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00006] in <0ce1190bea01419695a7bc0e095e186c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00006]
    in <0ce1190bea01419695a7bc0e095e186c>:0 \n"
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // your code here\n        long count = 0;\n        for (long
    i = 0; i < arr.Count; i++) {\n            long sum = 0;\n            long num
    = arr[(int)i];\n            if (num < 0) {\n                sum += num % 10;\n
    \               num /= 10;\n            }\n            while (num != 0) {\n                sum
    += num % 10;\n                num /= 10;\n            }\n            if (sum >
    0) {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <401ea75af357438fb48b1a0350d20a99>:0
    \n"
  stdout: ''
  timestamp: 1659976287
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Select(sumDigits).Count(e => e > 0);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp23m4kxa7.cs(20,27): error CS0103: The name ''sumDigits'' does not exist
    in the current context

    '
  timestamp: 1659976286
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long retVal = 0;\n        for (int i = 0; i < arr.Count; i++)
    {\n            long s = arr[i];\n            bool isPositive = s >= 0;\n            while
    (s != 0) {\n                retVal += (s % 10) * (isPositive ? 1 : -1);\n                s
    /= 10;\n            }\n        }\n        return (retVal > 0) ? arr.Count : 0;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ca6ab5ffdc64a45a94297489d1c0f96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ca6ab5ffdc64a45a94297489d1c0f96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976287
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long ret = 0;\n        foreach (long x in arr) {\n            long
    sum = 0;\n            for (long p = x; p != 0; p /= 10) {\n                sum
    += p % 10;\n            }\n            if (sum > 0) {\n                ret++;\n
    \           }\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <733300fc682e4c458c00d0a02abc335b>:0
    \n"
  stdout: ''
  timestamp: 1659976287
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(n => n < 0 ? n % 10 != 0 : n > 0);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a38988e65fa74c6dbafb31db11fde443>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a38988e65fa74c6dbafb31db11fde443>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976287
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => SumDigits(x) > 0).Count();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzei6c2nq.cs(20,31): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659976286
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long c = 0;\n        foreach (long n in arr) {\n            int
    sum = 0;\n            long t = Math.Abs(n);\n            if (n < 0) {\n                sum
    = -1;\n            }\n            for (; t > 0; t /= 10) {\n                sum
    += (int)(t % 10);\n            }\n            if (sum > 0) {\n                c++;\n
    \           }\n        }\n        return c;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <914991001bcf4b12921758de4a09a2d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <914991001bcf4b12921758de4a09a2d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976287
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Replace the following line with your solution.\n        return
    0L;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40998bad7cda4171a41a281eb3733194>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40998bad7cda4171a41a281eb3733194>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976287
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(i => i.ToString().Sum(c => c - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d66fe6d1d7c5498483da13451c511d46>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d66fe6d1d7c5498483da13451c511d46>:0
    \n"
  stdout: ''
  timestamp: 1659976286
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // YOUR CODE HERE\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3468b1dd6fb4f8aa08c5698c196f661>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3468b1dd6fb4f8aa08c5698c196f661>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976285
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        var ct = arr.AsParallel().Select(x => Math.Abs(x)).Select(x =>
    x.ToString().Select(y => Convert.ToInt64(y.ToString())).Sum()).Sum();\n        return
    ct;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <93d97e33335244d284aeb89e02122ea7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <93d97e33335244d284aeb89e02122ea7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976287
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Implement your solution here\n        return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9abdbb3567b546ebad112c18905bad24>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9abdbb3567b546ebad112c18905bad24>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976287
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Write your code here.\n        return arr.Count(x => Math.Abs(x).ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4dfc0f530f364c8086f043dab7e4bf6f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4dfc0f530f364c8086f043dab7e4bf6f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976287
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long sum = 0;\n            long num = arr[i];\n            if (num
    < 0) {\n                sum = num % 10;\n                num = num / 10;\n            }\n
    \           for (int j = 0; j < 6; j++) {\n                sum += num % 10;\n
    \               num = num / 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9053c9113a824882839b42d508b36d1f>:0
    \n"
  stdout: ''
  timestamp: 1659976287
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // TODO: write your code here\n        // There is a trivial solution,
    but you will get 0 points for it.\n        // The below line is only here to make
    it compile.\n        return 0;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27b3335210744fda82b41b6e96144399>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27b3335210744fda82b41b6e96144399>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976287
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long num = arr[i];\n            if (num < 0) {\n                sum
    += 1;\n            } else {\n                sum += num;\n            }\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6831d6b745c49eda563547c0bbfcec9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6831d6b745c49eda563547c0bbfcec9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976287
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(\n            e =>\n                (e > 0 ?
    e : -e)\n                .ToString()\n                .Select(c => c - '0')\n
    \               .Sum() > 0\n        );\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <71acde1875564808ba07e9d63c842c09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <71acde1875564808ba07e9d63c842c09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976287
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        if (arr.Count == 0) {\n            return 0;\n        } else {\n
    \           var nums = arr.Select(num => num < 0 ? num : -num);\n            var
    result = nums.Count(num => SumDigits(num) > 0);\n            return result;\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppxd7vgs5.cs(24,44): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659976287
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // return the number of elements in `arr` with signed digit sum
    > 0\n        return arr.Where(x => x > 0 && x.ToString().Select(y => int.Parse(y.ToString())).Sum()
    > 0 || x < 0 && -x.ToString().Select(y => int.Parse(y.ToString())).Sum() > 0).Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_2 (System.Char y) [0x00007] in <b1df65ceee7d4d9093ffaf55696cc808>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00024] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x00068] in <b1df65ceee7d4d9093ffaf55696cc808>:0
    \n  at System.Linq.Enumerable+WhereListIterator`1[TSource].GetCount (System.Boolean
    onlyIfCheap) [0x00018] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Count[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00029] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00026]
    in <b1df65ceee7d4d9093ffaf55696cc808>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <b1df65ceee7d4d9093ffaf55696cc808>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b"
  stdout: ''
  timestamp: 1659976287
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => x.ToString().Sum(c => int.Parse(c.ToString()))
    > 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char c) [0x00007] in <b33c2e4e5d2040d3ba2e15fefaeb6cf2>:0
    \n  at System.Linq.Enumerable.Sum[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] selector) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x00007] in <b33c2e4e5d2040d3ba2e15fefaeb6cf2>:0
    \n  at System.Linq.Enumerable+WhereListIterator`1[TSource].GetCount (System.Boolean
    onlyIfCheap) [0x00018] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Count[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00029] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00026]
    in <b33c2e4e5d2040d3ba2e15fefaeb6cf2>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <b33c2e4e5d2040d3ba2e15fefaeb6cf2>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char c) [0x00007] i"
  stdout: ''
  timestamp: 1659976287
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Your code goes here.\n        return arr.Count(x => x != 0
    && x != -1 && x != 1 && Math.Abs(x) % 9 != 0);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9669eba6427c46a3826f4eaeb763ea4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9669eba6427c46a3826f4eaeb763ea4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976287
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <405293ff3a2a4a2984a864cfc664d814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <405293ff3a2a4a2984a864cfc664d814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        throw new NotImplementedException();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00006] in <0ce1190bea01419695a7bc0e095e186c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00006]
    in <0ce1190bea01419695a7bc0e095e186c>:0 \n"
  stdout: ''
  timestamp: 1659976282
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return CountNumsHelper(arr, 0, 0);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsmdxh23d.cs(20,16): error CS0103: The name ''CountNumsHelper'' does not
    exist in the current context

    '
  timestamp: 1659976287
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return (long)arr.Count(el => SumDigits(el) > 0);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj2t312iv.cs(20,38): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659976287
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long counter = 0;\n        foreach (long num in arr) {\n            if
    (SumOfDigits(num) > 0)\n                counter++;\n        }\n        return
    counter;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa_z0y4uw.cs(22,17): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    '
  timestamp: 1659976287
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long sum = 0;\n        foreach (var item in arr) {\n            var
    sItem = item.ToString();\n            for (int i = 0; i < sItem.Length; i++) {\n
    \               sum += int.Parse(sItem[i].ToString());\n            }\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00037]
    in <b2328ca39d6a49dfbcebe39678c7ced2>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <b2328ca39d6a49dfbcebe39678c7ced2>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00037]
    in <b2328ca39d6a49dfbcebe39678c7ced2>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <b2328ca39d6a49dfbcebe39678c7ced2>:0 \n"
  stdout: ''
  timestamp: 1659976288
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = Math.Abs(num);\n            while (n > 0) {\n                sum
    += n % 10;\n                n /= 10;\n            }\n            if (sum > 0)
    {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0719853d40684b4d9a4e1dac34d8d5b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0719853d40684b4d9a4e1dac34d8d5b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976288
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <405293ff3a2a4a2984a864cfc664d814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <405293ff3a2a4a2984a864cfc664d814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => x.ToString().Select(y => Convert.ToInt32(y.ToString())).Sum()
    > 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<CountNums>b__0_1
    (System.Char y) [0x00007] in <4acb6f498be34b0186391d2f552d758f>:0 \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00024] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x0002b] in <4acb6f498be34b0186391d2f552d758f>:0
    \n  at System.Linq.Enumerable+WhereListIterator`1[TSource].GetCount (System.Boolean
    onlyIfCheap) [0x00018] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Count[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00029] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00026]
    in <4acb6f498be34b0186391d2f552d758f>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <4acb6f498be34b0186391d2f552d758f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.Numb"
  stdout: ''
  timestamp: 1659976288
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long i in arr) {\n            if
    (i < 0) {\n                i = -i;\n            }\n            long num = i;\n
    \           long sum = 0;\n            while (num > 0) {\n                sum
    += num % 10;\n                num /= 10;\n            }\n            if (sum >
    0) {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpid69psd3.cs(23,17): error CS1656: Cannot assign to ''i'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659976288
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => Math.Abs(x).ToString().Sum(y => y - '0')
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9492994612824bdb86e9c448939140fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9492994612824bdb86e9c448939140fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976288
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        //return arr.Aggregate(0L, (acc, val) => { if (Math.Abs(val).ToString().ToCharArray().Select(ch
    => (long)Char.GetNumericValue(ch)).Sum() > 0) return acc + 1; else return acc;
    });\n        return arr.Where(val => val != 0 && val % 9 != 0).Count();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b8e08cc64ff41e2a3cc43dd2a872fd3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b8e08cc64ff41e2a3cc43dd2a872fd3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976288
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => Utils.DigitSum(x) > 0);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2krjb3x7.cs(20,31): error CS0122: ''Utils'' is inaccessible due to its
    protection level

    '
  timestamp: 1659976288
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // START SOLUTION\n        return arr.Count(x => Math.Abs(x).ToString().Sum(c
    => c - '0') > 0);\n        // END SOLUTION\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16d117240f794b918379e713e7901968>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16d117240f794b918379e713e7901968>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976288
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => GetDigitSum(x) > 0);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_pu0vi8q.cs(20,31): error CS0103: The name ''GetDigitSum'' does not exist
    in the current context

    '
  timestamp: 1659976288
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            count
    += (num < 0 ? -num : num);\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ca5cbd52ab6a4907900bec7f02c21951>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ca5cbd52ab6a4907900bec7f02c21951>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976288
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().ToCharArray().Sum(y => (y -
    '0')) > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <619f94f705b64b3cb606970e4f6be649>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <619f94f705b64b3cb606970e4f6be649>:0
    \n"
  stdout: ''
  timestamp: 1659976288
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => x.Abs().Digits().Sum() > 0).Count();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeyp7x4wg.cs(20,33): error CS1061: ''long'' does not contain a definition
    for ''Abs'' and no accessible extension method ''Abs'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659976288
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // returns the number of elements that has a sum of signed digits
    > 0\n        // 1 <= arr.Length <= 100\n        // -1,000,000,000 <= arr[i] <=
    1,000,000,000\n        // Return: The number of elements which has a sum of digits
    > 0\n        // 3 <= arr.Length <= 100\n        // -1,000,000,000 <= arr[i] <=
    1,000,000,000\n        // long run time\n        // return arr.Sum(x => x / 10
    + x % 10);\n        // long run time\n        // return arr.Sum(x => x.ToString().Select(c
    => (long)Char.GetNumericValue(c)).Sum());\n        return arr.Count(x => Math.Abs(x).ToString().Sum(c
    => Char.GetNumericValue(c)) > 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c257f227939c4f189b9414027261ca37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c257f227939c4f189b9414027261ca37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976288
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        var ret = 0L;\n        foreach (var n in arr) {\n            var
    n2 = n;\n            var sum = 0L;\n            while (n2 != 0) {\n                sum
    += Math.Abs(n2 % 10);\n                n2 /= 10;\n            }\n            if
    (sum > 0) {\n                ret++;\n            }\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd1fead9915d49aca10ef920be0079bf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd1fead9915d49aca10ef920be0079bf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976288
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(n => sum_digits(n) > 0).Count();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppqglsdav.cs(20,31): error CS0103: The name ''sum_digits'' does not exist
    in the current context

    '
  timestamp: 1659976288
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           var num = arr[i];\n            if (num < 0) {\n                num
    = -num;\n            }\n            int sum = 0;\n            while (num > 0)
    {\n                var digit = num % 10;\n                sum += (int)digit;\n
    \               num /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c89c283b40745209003c7a0943cb836>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c89c283b40745209003c7a0943cb836>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976288
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // INSERT CODE HERE\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b060284b83749feaaed56c3813d7a67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b060284b83749feaaed56c3813d7a67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976288
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           if (SignedDigitsSum(arr[i]) > 0)\n                count++;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfg_umhmu.cs(22,17): error CS0103: The name ''SignedDigitsSum'' does not
    exist in the current context

    '
  timestamp: 1659976288
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(n => n.ToString().Select(c => int.Parse(c.ToString())).Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char c) [0x00007] in <00028676794d4405a2aa2e57e656f279>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00024] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 n) [0x0002b] in <00028676794d4405a2aa2e57e656f279>:0
    \n  at System.Linq.Enumerable.Count[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00001]
    in <00028676794d4405a2aa2e57e656f279>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <00028676794d4405a2aa2e57e656f279>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char c) [0x00007] in <00028676794d4405"
  stdout: ''
  timestamp: 1659976288
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <405293ff3a2a4a2984a864cfc664d814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <405293ff3a2a4a2984a864cfc664d814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           if (SumDigits(arr[i]) > 0) {\n                count++;\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvn8r0n1u.cs(22,17): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659976288
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long i in arr) {\n            string
    s = i.ToString();\n            int sum = 0;\n            for (int j = 0; j < s.Length;
    j++) {\n                if (s[j] != '-') {\n                    sum += (int)Char.GetNumericValue(s[j]);\n
    \               }\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73df1749e195489b84ee682a878f2932>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73df1749e195489b84ee682a878f2932>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976288
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(n => signedDigits(n).Sum() > 0).Count();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpttzakdep.cs(20,31): error CS0103: The name ''signedDigits'' does not exist
    in the current context

    '
  timestamp: 1659976288
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => Math.Abs(x).ToString().Select(y => long.Parse(y.ToString())).Sum()
    > 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4fdb91177150483ea159bab9dd2f7a96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4fdb91177150483ea159bab9dd2f7a96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976289
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        if (arr.Count == 0) {\n            return 0;\n        }\n        return
    Enumerable.Range(0, arr.Count).Select(e => arr[e]).Count(e => e.SignedDigits().Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm953q6oz.cs(23,80): error CS1061: ''long'' does not contain a definition
    for ''SignedDigits'' and no accessible extension method ''SignedDigits'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976288
