language: cs
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        //return arr.OrderBy(x => NumberOfOnes(x)).ThenBy(x => x).ToList();\n
    \       return arr.OrderBy(x => x == 0 ? 0 : NumberOfOnes(x)).ThenBy(x => x).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphoguwrnv.cs(21,46): error CS0103: The name ''NumberOfOnes'' does not exist
    in the current context

    '
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var temp = arr.ToArray();\n        Array.Sort(temp, (long a, long
    b) => {\n            var onesA = CountOnes(a);\n            var onesB = CountOnes(b);\n
    \           if (onesA != onesB) {\n                return onesA - onesB;\n            }\n
    \           return (int)a - (int)b;\n        });\n        return temp.ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo92gu5j7.cs(22,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmpo92gu5j7.cs(23,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // use a temporary array to store information about each integer\n
    \       // key = number of ones, value = list of integers with that number of
    ones\n        Dictionary<int, List<long>> dict = new Dictionary<int, List<long>>();\n
    \       foreach (long n in arr) {\n            int ones = CountOnes(n);\n            if
    (!dict.ContainsKey(ones)) {\n                dict[ones] = new List<long>();\n
    \           }\n            dict[ones].Add(n);\n        }\n        // sort each
    list in ascending order by key\n        foreach (KeyValuePair<int, List<long>>
    pair in dict) {\n            List<long> list = pair.Value;\n            list.Sort();\n
    \       }\n        // concatenate each sorted list in ascending order by key\n
    \       List<long> ret = new List<long>();\n        foreach (KeyValuePair<int,
    List<long>> pair in dict.OrderBy(pair => pair.Key)) {\n            ret.AddRange(pair.Value);\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmyufregn.cs(24,24): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your Code here\n        // Console.WriteLine(string.Join(\",
    \", arr));\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y =>
    y == '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e6c4013d2a347089a2efd8f493498d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e6c4013d2a347089a2efd8f493498d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            var onesInA = a.ToString().Select(c
    => c == '1').Count();\n            var onesInB = b.ToString().Select(c => c ==
    '1').Count();\n            if (onesInA == onesInB) {\n                return a.CompareTo(b);\n
    \           }\n            return onesInA.CompareTo(onesInB);\n        });\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2573247d7b464ca881128ba55f3e1f8f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2573247d7b464ca881128ba55f3e1f8f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(a => Convert.ToString(a, 2).Count(b => b ==
    '1')).ThenBy(a => a).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8a9c263bbab4d0ea802b615aa849c2d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8a9c263bbab4d0ea802b615aa849c2d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.BitCount()).ThenBy(x => x).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkamv0y__.cs(20,35): error CS1061: ''long'' does not contain a definition
    for ''BitCount'' and no accessible extension method ''BitCount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var arr1 = arr.Select(x => new {\n            value = x,\n            count
    = CountOnes(x)\n        });\n        var sorted = arr1.OrderBy(x => x.count).ThenBy(x
    => x.value);\n        return sorted.Select(x => x.value).ToList();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi0k4oa9l.cs(22,21): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // We just make a list of the index of the item,\n        // and
    sort it according to the index, so the\n        // original list will be sorted
    by the order\n        // of the indexes.\n        List<long> indexes = new List<long>();\n
    \       List<long> newList = new List<long>();\n        for (int i = 0; i < arr.Count;
    i++) {\n            indexes.Add(i);\n        }\n        indexes.Sort((idx1, idx2)
    => {\n            // If they have the same number of ones, sort\n            //
    by decimal value.\n            if (CountOnesInBinary(arr[(int)idx1]) == CountOnesInBinary(arr[(int)idx2]))
    {\n                return arr[(int)idx1].CompareTo(arr[(int)idx2]);\n            }\n
    \           // Sort by number of ones in binary.\n            return CountOnesInBinary(arr[(int)idx1]).CompareTo(CountOnesInBinary(arr[(int)idx2]));\n
    \       });\n        foreach (long idx in indexes) {\n            newList.Add(arr[(int)idx]);\n
    \       }\n        return newList;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoqdh44be.cs(32,17): error CS0103: The name ''CountOnesInBinary'' does
    not exist in the current context

    /tmp/tmpoqdh44be.cs(32,54): error CS0103: The name ''CountOnesInBinary'' does
    not exist in the current context

    /tmp/tmpoqdh44be.cs(36,20): error CS0103: The name ''CountOnesInBinary'' does
    not exist in the current context

    /tmp/tmpoqdh44be.cs(36,64): error CS0103: The name ''CountOnesInBinary'' does
    not exist in the current context

    '
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> result = new List<long>();\n        var length = arr.Count;\n
    \       var dict = new Dictionary<long, long>();\n        for (var i = 0; i <
    length; i++) {\n            var n = arr[i];\n            var cnt = 0;\n            while
    (n > 0) {\n                cnt += (n & 1);\n                n >>= 1;\n            }\n
    \           if (!dict.ContainsKey(cnt)) {\n                dict[cnt] = 0;\n            }\n
    \           dict[cnt] = (dict[cnt] << 32) | arr[i];\n        }\n        foreach
    (var d in dict.OrderBy(x => x.Key)) {\n            while (d.Value > 0) {\n                result.Add(d.Value
    & 0xffffffff);\n                d.Value >>= 32;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppo36m3xd.cs(27,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmppo36m3xd.cs(38,17): error CS0200: Property or indexer ''KeyValuePair<long,
    long>.Value'' cannot be assigned to -- it is read only

    '
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(a => CountBits(a)).ThenBy(a => a).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7mss4h9x.cs(20,33): error CS0103: The name ''CountBits'' does not exist
    in the current context

    '
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var sorted = from x in arr\n                orderby CountOnes(x),
    x\n                select x;\n        return sorted.ToList();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz1dw_kot.cs(21,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> copy = new List<long>(arr);\n        copy.Sort(delegate(long
    x, long y) {\n            var x_ones = ones(x);\n            var y_ones = ones(y);\n
    \           if (x_ones == y_ones) {\n                return x < y ? -1 : 1;\n
    \           }\n            return x_ones < y_ones ? -1 : 1;\n        });\n        return
    copy;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw__bzd6n.cs(22,26): error CS0103: The name ''ones'' does not exist in
    the current context

    /tmp/tmpw__bzd6n.cs(23,26): error CS0103: The name ''ones'' does not exist in
    the current context

    '
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => HammingWeight(x))\n                .ThenBy(x
    => x)\n                .ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpblfr0uhw.cs(20,33): error CS0103: The name ''HammingWeight'' does not
    exist in the current context

    '
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> results = new List<long>();\n        var onesCount
    = new List<KeyValuePair<long, long>>();\n        for (long i = 0; i < arr.Count;
    i++) {\n            onesCount.Add(new KeyValuePair<long, long>(arr[(int)i], arr[(int)i].ToBinaryString().Count(c
    => c == '1')));\n        }\n        var sorted = onesCount.OrderBy(x => x.Value).ThenBy(x
    => x.Key);\n        foreach (var item in sorted) {\n            results.Add(item.Key);\n
    \       }\n        return results;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgg0awe04.cs(23,81): error CS1061: ''long'' does not contain a definition
    for ''ToBinaryString'' and no accessible extension method ''ToBinaryString'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            var aOneCount = BitCount(a);\n
    \           var bOneCount = BitCount(b);\n            if (aOneCount == bOneCount)
    {\n                return (int)a - (int)b;\n            }\n            return
    aOneCount - bOneCount;\n        });\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0qdo92li.cs(21,29): error CS0103: The name ''BitCount'' does not exist
    in the current context

    /tmp/tmp0qdo92li.cs(22,29): error CS0103: The name ''BitCount'' does not exist
    in the current context

    '
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var oneAndZero = arr.Select(x =>\n            new { Ones = CountOnes(x),
    Number = x });\n        return oneAndZero.OrderBy(x => x.Ones).ThenBy(x => x.Number).Select(x
    => x.Number).ToList();\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpazsnzyhe.cs(21,26): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((i, j) => {\n            if (CountOnes(i) == CountOnes(j))
    {\n                return i.CompareTo(j);\n            }\n            return CountOnes(i).CompareTo(CountOnes(j));\n
    \       });\n        return arr;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxtz_dw5w.cs(21,17): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmpxtz_dw5w.cs(21,33): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmpxtz_dw5w.cs(24,20): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmpxtz_dw5w.cs(24,43): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> sorted = new List<long>();\n        for (long i = 0;
    i < arr.Count; i++) {\n            sorted.Add(arr[(int)i]);\n        }\n        sorted.Sort((a,
    b) => compare(a, b));\n        return sorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyrmgqrlg.cs(24,31): error CS0103: The name ''compare'' does not exist
    in the current context

    '
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(a => a.ToString(\"b\").Count(c => c == '1')).ThenBy(a
    => a).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Format specifier was invalid.\n
    \ at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer&
    number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo
    info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T]
    format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<SortArray>b__0_0 (System.Int64 a) [0x00000] in <dc3253964c474439a89a20389ce1b219>:0
    \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements,
    System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap
    (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32
    count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap
    (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.OrderedEnumerable`1[TElement].ToList () [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.Enumerable.ToList[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] arr) [0x0004a] in <dc3253964c474439a89a20389ce1b219>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <dc3253964c474439a89a20389ce1b219>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Format specifier
    was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder&
    sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits,
    System.Globalization.N"
  stdout: ''
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var query = arr.Select(x => new {x, count = CountOnes(x)});\n
    \       return query.OrderBy(x => x.count).ThenBy(x => x.x).Select(x => x.x).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3m0_p2td.cs(20,53): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(a => Convert.ToString(a, 2).Count(c => c ==
    '1')).ThenBy(a => a).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ea66148a858475391c238dc7d35124f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ea66148a858475391c238dc7d35124f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // sort by number of bits, then by value\n        arr.Sort((x,
    y) => {\n            var xBits = getBits(x);\n            var yBits = getBits(y);\n
    \           if (xBits != yBits) {\n                return xBits - yBits;\n            }\n
    \           return (int) x - (int) y;\n        });\n        return arr;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9tgnkg5l.cs(22,25): error CS0103: The name ''getBits'' does not exist
    in the current context

    /tmp/tmp9tgnkg5l.cs(23,25): error CS0103: The name ''getBits'' does not exist
    in the current context

    '
  timestamp: 1660028234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(i => BigInteger.Parse(Convert.ToString(i, 2))).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecfe8e20c0d641ba8caa77ed5fdb75cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecfe8e20c0d641ba8caa77ed5fdb75cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46b8658b56df438ba07bab91442e21e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46b8658b56df438ba07bab91442e21e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => (int)CountOnes(x)).ThenBy(x => x).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp02bu16jx.cs(20,38): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var array = arr.Select(x => new Tuple<long, long>(x, CountBits(x))).ToArray();\n
    \       Array.Sort(array, (a, b) => {\n            if (a.Item2 == b.Item2) {\n
    \               return a.Item1.CompareTo(b.Item1);\n            }\n            return
    a.Item2.CompareTo(b.Item2);\n        });\n        return array.Select(x => x.Item1).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprpkau6j1.cs(20,62): error CS0103: The name ''CountBits'' does not exist
    in the current context

    '
  timestamp: 1660028234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(i => Convert.ToString(i, 2).Count(c => c ==
    '1')).ThenBy(i => i).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e7a2144bd71a47219a005d3cdca11859>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e7a2144bd71a47219a005d3cdca11859>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // NOTE: this is the correct algorithm but it's a bit slow:\n
    \       // return arr.OrderBy(x => Convert.ToString(x, 2)).ThenBy(x => x).ToList();\n
    \       // Writing it in a loop is faster:\n        return arr.OrderBy(x => BitCount(x)).ThenBy(x
    => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_f65ogdx.cs(23,33): error CS0103: The name ''BitCount'' does not exist
    in the current context

    '
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> sorted = new List<long>();\n        sorted.AddRange(arr);\n
    \       sorted.Sort(compare);\n        return sorted;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw6yuku5j.cs(22,21): error CS0103: The name ''compare'' does not exist
    in the current context

    '
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((x, y) => {\n            int numOnesA = CountOnes(x);\n
    \           int numOnesB = CountOnes(y);\n            if (numOnesA == numOnesB)
    {\n                return x < y ? -1 : 1;\n            }\n            return numOnesA
    < numOnesB ? -1 : 1;\n        });\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdlxqoron.cs(21,28): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmpdlxqoron.cs(22,28): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort(delegate(long x, long y) {\n            return CompareValues(x,
    y);\n        });\n        return arr;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2v27vxtj.cs(21,20): error CS0103: The name ''CompareValues'' does not
    exist in the current context

    '
  timestamp: 1660028234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j
    = i + 1; j < arr.Count; j++) {\n                if (arr[i] == arr[j]) {\n                    break;\n
    \               }\n                if (arr[i] > arr[j]) {\n                    long
    temp = arr[i];\n                    arr[i] = arr[j];\n                    arr[j]
    = temp;\n                }\n            }\n        }\n        return arr;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0cb63327c02f4987a4d3ea68178d037c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0cb63327c02f4987a4d3ea68178d037c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> copy = new List<long>(arr);\n        copy.Sort((x,
    y) => BinaryCompare(x, y));\n        return copy;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzbq3lhug.cs(21,29): error CS0103: The name ''BinaryCompare'' does not
    exist in the current context

    '
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code goes here\n        arr.Sort((x, y) => GetBit(x).CompareTo(GetBit(y)));\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyjlf4b_p.cs(21,28): error CS0103: The name ''GetBit'' does not exist in
    the current context

    /tmp/tmpyjlf4b_p.cs(21,48): error CS0103: The name ''GetBit'' does not exist in
    the current context

    '
  timestamp: 1660028234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> negatives = new List<long>();\n        List<long> positives
    = new List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] < 0) {\n                negatives.Add(arr[i]);\n            } else {\n
    \               positives.Add(arr[i]);\n            }\n        }\n        positives.Sort((a,
    b) => {\n            if (Convert.ToString(a, 2).Count(x => x == '1') == Convert.ToString(b,
    2).Count(x => x == '1')) {\n                return a.CompareTo(b);\n            }
    else {\n                return Convert.ToString(a, 2).Count(x => x == '1').CompareTo(Convert.ToString(b,
    2).Count(x => x == '1'));\n            }\n        });\n        negatives.Sort((a,
    b) => {\n            if (Convert.ToString(a, 2).Count(x => x == '1') == Convert.ToString(b,
    2).Count(x => x == '1')) {\n                return b.CompareTo(a);\n            }
    else {\n                return Convert.ToString(b, 2).Count(x => x == '1').CompareTo(Convert.ToString(a,
    2).Count(x => x == '1'));\n            }\n        });\n        List<long> result
    = new List<long>();\n        foreach (long x in negatives) {\n            result.Add(x);\n
    \       }\n        foreach (long x in positives) {\n            result.Add(x);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8f18ccbc60e34d229f3f30f2b17d9393>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8f18ccbc60e34d229f3f30f2b17d9393>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((x, y) => {\n            var xBits = countSetBits(x);\n
    \           var yBits = countSetBits(y);\n            if (xBits != yBits) {\n
    \               return xBits.CompareTo(yBits);\n            }\n            return
    x.CompareTo(y);\n        });\n        return arr;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkx2tvnk_.cs(21,25): error CS0103: The name ''countSetBits'' does not exist
    in the current context

    /tmp/tmpkx2tvnk_.cs(22,25): error CS0103: The name ''countSetBits'' does not exist
    in the current context

    '
  timestamp: 1660028234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        Dictionary<int, List<long>> dictionary = new Dictionary<int, List<long>>();\n
    \       arr.ForEach(e => {\n            var base2 = Convert.ToString(e, 2);\n
    \           var ones = base2.Count(c => c == '1');\n            if (!dictionary.ContainsKey(ones))
    {\n                dictionary.Add(ones, new List<long>());\n            }\n            dictionary[ones].Add(e);\n
    \       });\n        var keys = dictionary.Keys.ToList();\n        keys.Sort();\n
    \       var answer = new List<long>();\n        keys.ForEach(k => {\n            answer.AddRange(dictionary[k]);\n
    \       });\n        return answer;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <536d5ad0d0db403f9609d1427e0c7a82>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <536d5ad0d0db403f9609d1427e0c7a82>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort(delegate(long x, long y) {\n            int xOnes = CountOnes(x);\n
    \           int yOnes = CountOnes(y);\n            if (xOnes != yOnes) {\n                return
    xOnes - yOnes;\n            }\n            return (int)x - (int)y;\n        });\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_yacugo5.cs(21,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmp_yacugo5.cs(22,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return null;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00032] in <21f8b149119c4a9588422a750fedc019>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00032] in <21f8b149119c4a9588422a750fedc019>:0
    \n"
  stdout: ''
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        Dictionary<long, long> indexes = new Dictionary<long, long>();\n
    \       foreach (long element in arr) {\n            long bits = 0;\n            string
    binary = Convert.ToString(element, 2);\n            foreach (char bit in binary)
    {\n                if (bit == '1') bits++;\n            }\n            if (indexes.ContainsKey(bits))
    {\n                indexes[bits]++;\n            } else {\n                indexes.Add(bits,
    1);\n            }\n        }\n        List<long> sorted = new List<long>();\n
    \       foreach (KeyValuePair<long, long> entry in indexes) {\n            for
    (long i = 0; i < entry.Value; i++) {\n                sorted.Add(entry.Key);\n
    \           }\n        }\n        sorted.Sort();\n        for (long i = 0; i <
    arr.Count; i++) {\n            arr[i] = sorted[i];\n        }\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoq_794sj.cs(41,17): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpoq_794sj.cs(41,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660028234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => {\n            if (x >= 0) {\n                return
    Convert.ToString(x, 2).Replace(\"0\", \"\").Length.ToString() + x.ToString();\n
    \           } else {\n                return (-1 * Convert.ToString(-x, 2).Replace(\"0\",
    \"\").Length).ToString() + x.ToString();\n            }\n        }).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14bfdea75de94498a30d720c781aebdd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14bfdea75de94498a30d720c781aebdd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        if (arr == null) return arr;\n        List<long> answer = new
    List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n            answer.Add(arr[i]);\n
    \       }\n        if (arr.Count == 0) return answer;\n        for (int i = 0;
    i < arr.Count; i++) {\n            for (int j = 0; j < arr.Count; j++) {\n                if
    (answer[i] < answer[j]) {\n                    var tmp = answer[i];\n                    answer[i]
    = answer[j];\n                    answer[j] = tmp;\n                }\n            }\n
    \       }\n        // answer.Reverse();\n        return answer;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0b12f90d61ee4f40bf4da8080b5f4b14>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0b12f90d61ee4f40bf4da8080b5f4b14>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            var a_bits = CountBits(a);\n
    \           var b_bits = CountBits(b);\n            if (a_bits == b_bits) {\n
    \               return (int) (a - b);\n            }\n            return a_bits
    - b_bits;\n        });\n        return arr;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj4tddzpi.cs(21,26): error CS0103: The name ''CountBits'' does not exist
    in the current context

    /tmp/tmpj4tddzpi.cs(22,26): error CS0103: The name ''CountBits'' does not exist
    in the current context

    '
  timestamp: 1660028234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(n => CountOnes(n))\n                  .ThenBy(n
    => n)\n                  .ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2l7o2jls.cs(20,33): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Make a list of tuples of value and count of 1 bits\n        var
    tuples = new List<Tuple<long, int>>();\n        foreach (var item in arr) {\n
    \           int count = BitOperations.PopCount(item);\n            tuples.Add(new
    Tuple<long, int>(item, count));\n        }\n        // Sort the tuple list with
    custom comparer\n        tuples.Sort(new Num1BitCmp());\n        // Extract only
    the value list\n        var ret = new List<long>();\n        foreach (var item
    in tuples) {\n            ret.Add(item.Item1);\n        }\n        return ret;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyx1w5elp.cs(23,25): error CS0103: The name ''BitOperations'' does not
    exist in the current context

    /tmp/tmpyx1w5elp.cs(27,25): error CS0246: The type or namespace name ''Num1BitCmp''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // 1) Convert each element in the list to a BigInteger\n        //
    2) Convert each element to a string of 0's and 1's\n        // 3) Count the number
    of 1's\n        // 4) Return an order of number of 1's and array index, then sort\n
    \       // 5) Extract the list of 1's and return it\n        var bigIntList =
    arr.Select(x => new BigInteger(x)).ToList();\n        var bigIntBinaryList = bigIntList.Select(x
    => Convert.ToString(x, 2)).ToList();\n        var numOnesList = bigIntBinaryList.Select(x
    => x.Count(c => c == '1')).ToList();\n        var numOnesTupleList = numOnesList.Select((x,
    i) => new Tuple<int, int>(x, i)).ToList();\n        numOnesTupleList.Sort();\n
    \       var sortedIntList = numOnesTupleList.Select(x => bigIntList[x.Item2]).ToList();\n
    \       return sortedIntList.Select(x => (long)x).ToList();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpreak1_et.cs(26,75): error CS1503: Argument 2: cannot convert from ''int''
    to ''System.IFormatProvider''

    '
  timestamp: 1660028235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x < 0 ? 0 : x.ToString(\"X\").Count(c
    => c == '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6fb2aeb9b359416f92845d7639eb7a90>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6fb2aeb9b359416f92845d7639eb7a90>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(v => Convert.ToString(v, 2).Count(x => x ==
    '1')).ThenBy(v => v).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da116e13d478449e99bb24b1aae6d394>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da116e13d478449e99bb24b1aae6d394>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var list = arr.Select(v => (long)v).ToList();\n        for (int
    i = 0; i < list.Count; i++) {\n            for (int j = 0; j < list.Count; j++)
    {\n                if (list[i] == list[j]) continue;\n                var onesi
    = Convert.ToString(list[i], 2).Count(c => c == '1');\n                var onesj
    = Convert.ToString(list[j], 2).Count(c => c == '1');\n                if (onesi
    > onesj) {\n                    var temp = list[i];\n                    list[i]
    = list[j];\n                    list[j] = temp;\n                } else if (onesi
    == onesj) {\n                    if (list[i] > list[j]) {\n                        var
    temp = list[i];\n                        list[i] = list[j];\n                        list[j]
    = temp;\n                    }\n                }\n            }\n        }\n
    \       return list;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1c4a23193324c4588f449f217b16c98>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1c4a23193324c4588f449f217b16c98>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            var ca = CountOnes(a);\n            var
    cb = CountOnes(b);\n            if (ca < cb) return -1;\n            if (ca >
    cb) return 1;\n            return a < b ? -1 : 1;\n        });\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8nbp3d4n.cs(21,22): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmp8nbp3d4n.cs(22,22): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49bf05f49d804fdea399dc8e94401445>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49bf05f49d804fdea399dc8e94401445>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort(delegate(long a, long b) {\n            // The number
    of ones in the binary representation\n            // of |a| and |b| is irrelevant.\n
    \           var ab = Math.Abs(a) - Math.Abs(b);\n            if (ab == 0) {\n
    \               // If the number of ones is equal, the absolute value is irrelevant.\n
    \               ab = a - b;\n            }\n            if (ab == 0) {\n                //
    If the values are still equal, the signs are irrelevant.\n                ab =
    Math.Sign(a) - Math.Sign(b);\n            }\n            return ab;\n        });\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnoza2aoo.cs(32,20): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpnoza2aoo.cs(32,20): error CS1662: Cannot convert anonymous method to intended
    delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var numbers = arr.Select(n => new BinaryAndDecimal(n)).ToList();\n
    \       numbers.Sort((x, y) => {\n            if (x.Ones != y.Ones) {\n                return
    x.Ones - y.Ones;\n            }\n            return x.Decimal - y.Decimal;\n        });\n
    \       return numbers.Select(x => x.Decimal).ToList();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy0uffv6s.cs(20,43): error CS0246: The type or namespace name ''BinaryAndDecimal''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.CountOnes()).ThenBy(x => x).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp68f9n7bu.cs(20,35): error CS1061: ''long'' does not contain a definition
    for ''CountOnes'' and no accessible extension method ''CountOnes'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        int bits = 0;\n        long max = 0;\n        for (int i = 0;
    i < arr.Count; i++) {\n            long value = arr[i];\n            if (value
    < 0) {\n                value = Math.Abs(value);\n            }\n            if
    (value > max) {\n                max = value;\n            }\n        }\n        while
    (max > 0) {\n            bits++;\n            max >>= 1;\n        }\n        bits
    += 1;\n        arr.Sort(new OneComparator(bits));\n        return arr;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphpepjide.cs(36,22): error CS0246: The type or namespace name ''OneComparator''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660028235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        if (arr == null)\n            return null;\n        Dictionary<long,
    int> dic = new Dictionary<long, int>();\n        foreach (long x in arr) {\n            int
    binary_size = 0;\n            int binary_value = 0;\n            try {\n                binary_size
    = (int)Convert.ToString(x, 2).Length;\n                binary_value = Convert.ToString(x,
    2).ToCharArray().Count(c => c == '1');\n            } catch (Exception) {\n                Console.WriteLine(\"Warning:
    Not a number!\");\n            }\n            if (dic.ContainsKey(x)) {\n                if
    (dic[x] < binary_value)\n                    dic[x] = binary_value;\n            }
    else {\n                dic.Add(x, binary_value);\n            }\n        }\n
    \       arr.Sort();\n        arr.Sort((x, y) => dic[x].CompareTo(dic[y]));\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3df8f1e759c41a486a2e2e7d382fb81>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3df8f1e759c41a486a2e2e7d382fb81>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acd8283f197d41939165584662abd347>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acd8283f197d41939165584662abd347>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var digitMap = arr.ToDictionary(x => x, \n            x => new
    { Ones = Convert.ToString(x, 2).Count(y => y == '1'), Decimal = x });\n        var
    result = arr.OrderBy(x => digitMap[x].Ones).ThenBy(x => digitMap[x].Decimal).ToList();\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7517c30306844e2aa82febf8f9bf37ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7517c30306844e2aa82febf8f9bf37ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        int i = 0;\n        var result = new List<long>();\n        while
    (arr.Count > 0) {\n            long min = arr[0];\n            int minIndex =
    0;\n            for (int j = 0; j < arr.Count; j++) {\n                if (BinaryLength(arr[j])
    < BinaryLength(min)) {\n                    min = arr[j];\n                    minIndex
    = j;\n                } else if (BinaryLength(arr[j]) == BinaryLength(min)) {\n
    \                   if (arr[j] < min) {\n                        min = arr[j];\n
    \                       minIndex = j;\n                    }\n                }\n
    \           }\n            result.Add(min);\n            arr.RemoveAt(minIndex);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb0_1tw6t.cs(26,21): error CS0103: The name ''BinaryLength'' does not exist
    in the current context

    /tmp/tmpb0_1tw6t.cs(26,44): error CS0103: The name ''BinaryLength'' does not exist
    in the current context

    /tmp/tmpb0_1tw6t.cs(29,28): error CS0103: The name ''BinaryLength'' does not exist
    in the current context

    /tmp/tmpb0_1tw6t.cs(29,52): error CS0103: The name ''BinaryLength'' does not exist
    in the current context

    /tmp/tmpb0_1tw6t.cs(20,13): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    '
  timestamp: 1660028235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<Tuple<int,long>> onedictionary = new List<Tuple<int,long>>();\n
    \       for (int i = 0; i < arr.Count; i++) {\n            int onescount = 0;\n
    \           for (int j = 0; j < 8*sizeof(long); j++) {\n                if ((arr[i]
    & (1L << j)) != 0) {\n                    onescount++;\n                }\n            }\n
    \           onedictionary.Add(new Tuple<int,long>(onescount, arr[i]));\n        }\n
    \       onedictionary.Sort(\n            delegate(Tuple<int,long> left, Tuple<int,long>
    right) {\n                if (left.Item1 < right.Item1) return -1;\n                if
    (left.Item1 > right.Item1) return 1;\n                if (left.Item2 < right.Item2)
    return -1;\n                if (left.Item2 > right.Item2) return 1;\n                return
    0;\n            }\n        );\n        for (int i = 0; i < arr.Count; i++) {\n
    \           arr[i] = onedictionary[i].Item2;\n        }\n        return arr;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <618c4d25342543db862d4ea6ea26b614>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <618c4d25342543db862d4ea6ea26b614>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // return arr.OrderBy(n => {\n        //     if (n == 0) return
    0;\n        //     return GetBitCount(n);\n        // }).ThenBy(n => n).ToList();\n
    \       return arr.OrderBy(n => CountOnes(n)).ThenBy(n => n).ToList();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdbbv50qv.cs(24,33): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> sorted = new List<long>();\n        long binVal = 0L;\n
    \       int decVal = 0;\n        while (arr.Count > 0) {\n            long minVal
    = long.MaxValue;\n            foreach (long val in arr) {\n                binVal
    = val;\n                decVal = (int)val;\n                int ones = 0;\n                while
    (binVal > 0) {\n                    if (binVal % 2 == 1) ones++;\n                    binVal
    /= 2;\n                }\n                if (ones < minVal) {\n                    minVal
    = ones;\n                }\n            }\n            foreach (long val in arr)
    {\n                binVal = val;\n                decVal = (int)val;\n                int
    ones = 0;\n                while (binVal > 0) {\n                    if (binVal
    % 2 == 1) ones++;\n                    binVal /= 2;\n                }\n                if
    (ones == minVal) {\n                    sorted.Add(val);\n                    arr.Remove(val);\n
    \               }\n            }\n        }\n        return sorted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Collection was
    modified; enumeration operation may not execute.\n  at System.Collections.Generic.List`1+Enumerator[T].MoveNextRare
    () [0x00013] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.List`1+Enumerator[T].MoveNext
    () [0x0004a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] arr) [0x000f8] in <3107d47d83794db492fb68abb8a1b27d>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <3107d47d83794db492fb68abb8a1b27d>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Collection
    was modified; enumeration operation may not execute.\n  at System.Collections.Generic.List`1+Enumerator[T].MoveNextRare
    () [0x00013] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.List`1+Enumerator[T].MoveNext
    () [0x0004a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] arr) [0x000f8] in <3107d47d83794db492fb68abb8a1b27d>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <3107d47d83794db492fb68abb8a1b27d>:0
    \n"
  stdout: ''
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x == -1).ThenBy(x => CountOnesInBinary(x)).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph5icchxc.cs(20,54): error CS0103: The name ''CountOnesInBinary'' does
    not exist in the current context

    '
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => NumberOfOnesInBinary(x))\n            .ThenBy(x
    => x)\n            .ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpczqmujfs.cs(20,33): error CS0103: The name ''NumberOfOnesInBinary'' does
    not exist in the current context

    '
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> binary = new List<long>();\n        List<long> zeros
    = new List<long>();\n        List<long> ones = new List<long>();\n        foreach
    (long item in arr) {\n            string binaryRep = Convert.ToString(item, 2);\n
    \           binary.Add(Convert.ToInt64(binaryRep));\n        }\n        foreach
    (long item in binary) {\n            int numberOfOnes = 0;\n            char[]
    chars = item.ToString().ToCharArray();\n            foreach (char i in chars)
    {\n                if (i == '1') {\n                    numberOfOnes++;\n                }\n
    \           }\n            if (numberOfOnes == 0) {\n                zeros.Add(item);\n
    \           } else {\n                ones.Add(item);\n            }\n        }\n
    \       ones.Sort();\n        List<long> result = new List<long>();\n        foreach
    (long item in ones) {\n            result.Add(Convert.ToInt64(item.ToString(),
    2));\n        }\n        foreach (long item in zeros) {\n            result.Add(Convert.ToInt64(item.ToString(),
    2));\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1df0b6fca3d4b0faac1ab5c6e960b58>:0
    \n\nUnhandled Exception:\nSystem.OverflowException: Value was either too large
    or too small for an Int64.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt64 (System.String
    value) [0x0000c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] arr) [0x00032] in <d1df0b6fca3d4b0faac1ab5c6e960b58>:0
    \n  at Problem.Main (System.String[] args) [0x00053] in <d1df0b6fca3d4b0faac1ab5c6e960b58>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.OverflowException: Value was either
    too large or too small for an Int64.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number."
  stdout: ''
  timestamp: 1660028236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<int> ones = new List<int>();\n        foreach (long n in
    arr) {\n            int i = 0;\n            while (n > 0) {\n                if
    (n % 2 == 1) i++;\n                n /= 2;\n            }\n            ones.Add(i);\n
    \       }\n        List<long>[] lists = new List<long>[arr.Count];\n        for
    (int i = 0; i < lists.Length; i++) lists[i] = new List<long>();\n        for (int
    i = 0; i < arr.Count; i++) lists[ones[i]].Add(arr[i]);\n        lists = lists.OrderBy(l
    => l.First()).ToArray();\n        arr.Clear();\n        foreach (List<long> l
    in lists) {\n            l.Sort();\n            arr.AddRange(l);\n        }\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpctacuw7l.cs(25,17): error CS1656: Cannot assign to ''n'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> sorted = new List<long>();\n        foreach (long val
    in arr) {\n            sorted.Add(val);\n        }\n        sorted.Sort((a, b)
    => {\n            int a1 = (int)a, b1 = (int)b;\n            return BitCount(a1)
    - BitCount(b1) == 0 ? a1 - b1 : BitCount(a1) - BitCount(b1);\n        });\n        return
    sorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpojathy3m.cs(26,20): error CS0103: The name ''BitCount'' does not exist
    in the current context

    /tmp/tmpojathy3m.cs(26,35): error CS0103: The name ''BitCount'' does not exist
    in the current context

    /tmp/tmpojathy3m.cs(26,65): error CS0103: The name ''BitCount'' does not exist
    in the current context

    /tmp/tmpojathy3m.cs(26,80): error CS0103: The name ''BitCount'' does not exist
    in the current context

    '
  timestamp: 1660028235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acd8283f197d41939165584662abd347>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acd8283f197d41939165584662abd347>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => {\n            // Have to use something
    other than byte because byte is signed\n            // so you get nonsense like
    9 > 10 because 0b1001 < 0b1010\n            var bits = new BitArray(BitConverter.GetBytes(x));\n
    \           var count = bits.Cast<bool>().Count(b => b);\n            return (count,
    x);\n        }).ToList();\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf5dd32fu.cs(23,28): error CS0246: The type or namespace name ''BitArray''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => GetNumberOfOnes(x))\n                  .ThenBy(x
    => x)\n                  .ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgd6szyru.cs(20,33): error CS0103: The name ''GetNumberOfOnes'' does not
    exist in the current context

    '
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort(delegate(long left, long right) {\n            int leftBitCount
    = BitCount(left);\n            int rightBitCount = BitCount(right);\n            if
    (leftBitCount != rightBitCount) {\n                return leftBitCount - rightBitCount;\n
    \           }\n            return (int)left - (int)right;\n        });\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6qyo22u7.cs(21,32): error CS0103: The name ''BitCount'' does not exist
    in the current context

    /tmp/tmp6qyo22u7.cs(22,33): error CS0103: The name ''BitCount'' does not exist
    in the current context

    '
  timestamp: 1660028235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var ordered = arr.OrderBy(x => x);\n        var orderedDec = ordered.ThenBy(x
    => Convert.ToString(x, 2).Count(c => c == '1'));\n        return orderedDec.ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b17863373c684d42a7cb63c39ded1bc8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b17863373c684d42a7cb63c39ded1bc8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(a => CountOnes(a).ToString()).ThenBy(a => a).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7xjgy9qc.cs(20,33): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Here are the results of the test:\n        // [1L, 5L, 2L,
    3L, 4L] => [1L, 2L, 3L, 4L, 5L]\n        // [1L, 0L, 2L, 3L, 4L] => [0L, 1L, 2L,
    3L, 4L]\n        // [-2L, -3L, -4L, -5L, -6L] => [-6L, -5L, -4L, -3L, -2L]\n        //
    [-9L, 0L, -1L, 3L, 2L] => [-9L, -1L, 0L, 2L, 3L]\n        // [-9L, 2L, -1L, 3L,
    0L] => [-9L, -1L, 0L, 2L, 3L]\n        // [1L, 2L, 3L, 4L, 5L] => [1L, 2L, 3L,
    4L, 5L]\n        // [1L, 0L, -1L, 3L, 2L] => [-1L, 0L, 1L, 2L, 3L]\n        //
    [0L, -1L, 1L, 2L, 3L] => [-1L, 0L, 1L, 2L, 3L]\n        // [2L, 3L, 4L, 5L, 6L]
    => [2L, 3L, 4L, 5L, 6L]\n        // [0L, -9L, -1L, 3L, 2L] => [-9L, -1L, 0L, 2L,
    3L]\n        // [-9L, 0L, -1L, 2L, 3L] => [-9L, -1L, 0L, 2L, 3L]\n        // You
    can see that the last cases are very easy to break.\n        // It is pretty easy
    to determine whether the number is negative or not:\n        // >>> if (Num <=
    0L)\n        // ... ... ... return 1;\n        // ... ... ... else\n        //
    ... ... ... ... return 0;\n        // But there is no way to compare the number
    of ones in their\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfz0p991l.cs(19,30): error CS0161: ''Problem.SortArray(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1660028236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Add your code here\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a97684504091491991b997cbdd33f048>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a97684504091491991b997cbdd33f048>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> r = new List<long>();\n        // Loop through arr.\n
    \       foreach (long l in arr) {\n            int ones = 0;\n            string
    l2s = Convert.ToString(l, 2);\n            foreach (char c in l2s) {\n                if
    (c == '1') ones++;\n            }\n            // Add (ones, l) pair to result
    list.\n            r.Add(((long)ones) * ((long)Math.Pow(10, 12)) + l);\n        }\n
    \       // Sort the result list.\n        r.Sort();\n        // Remove the ones
    field.\n        for (int i = 0; i < r.Count; i++) {\n            r[i] = r[i] %
    ((long)Math.Pow(10, 12));\n        }\n        return r;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7c7fd90d9c854719950e2f8cfeefce53>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7c7fd90d9c854719950e2f8cfeefce53>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<int> ones = new List<int>();\n        foreach (long num in
    arr) {\n            ones.Add(BitConverter.GetBytes(num).Count(b => b == 1));\n
    \       }\n        arr.Sort((a, b) => {\n            int aOnes = BitConverter.GetBytes(a).Count(b
    => b == 1);\n            int bOnes = BitConverter.GetBytes(b).Count(b => b ==
    1);\n            if (aOnes != bOnes) {\n                return aOnes - bOnes;\n
    \           }\n            else {\n                return (int)a - (int)b;\n            }\n
    \       });\n        return arr;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6cc503aaa5614ce39ca098d32691fbb4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6cc503aaa5614ce39ca098d32691fbb4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Console.WriteLine(\"In: \" + String.Join(\", \", arr));\n        //
    if(arr.Count == 1) {\n        //     return arr;\n        // }\n        List<long>
    sorted = new List<long>();\n        // sorted.Add(arr[0]);\n        foreach(long
    i in arr) {\n            if(sorted.Count == 0) {\n                sorted.Add(i);\n
    \           } else {\n                // Console.WriteLine(\"Inserting \" + i);\n
    \               int n = 0;\n                int onesInI = (int)CountBits(i);\n
    \               // Console.WriteLine(\"Ones in \" + i + \" is \" + onesInI);\n
    \               while(n < sorted.Count) {\n                    int onesInN = (int)CountBits(sorted[n]);\n
    \                   // Console.WriteLine(\"Ones in \" + sorted[n] + \" is \" +
    onesInN);\n                    if(onesInI < onesInN) {\n                        sorted.Insert(n,
    i);\n                        break;\n                    } else if(onesInI ==
    onesInN) {\n                        if(i < sorted[n]) {\n                            sorted.Insert(n,
    i);\n                            break;\n                        }\n                    }\n
    \                   n++;\n                }\n                if(n == sorted.Count)
    {\n                    sorted.Add(i);\n                }\n            }\n        }\n
    \       // Console.WriteLine(\"Out: \" + String.Join(\", \", sorted));\n        return
    sorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb0qgt2u0.cs(32,36): error CS0103: The name ''CountBits'' does not exist
    in the current context

    /tmp/tmpb0qgt2u0.cs(35,40): error CS0103: The name ''CountBits'' does not exist
    in the current context

    '
  timestamp: 1660028236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => GetNumOnes(x)).ThenBy(x => x).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmb0o8amw.cs(20,33): error CS0103: The name ''GetNumOnes'' does not exist
    in the current context

    '
  timestamp: 1660028236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => GetBitCount(x)).ThenBy(x => x).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgvmjnoa8.cs(20,33): error CS0103: The name ''GetBitCount'' does not exist
    in the current context

    '
  timestamp: 1660028236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(a => Bin1s(a)).ThenBy(a => a).ToList();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppeenlfo1.cs(20,33): error CS0103: The name ''Bin1s'' does not exist in
    the current context

    '
  timestamp: 1660028236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        long[] array = arr.ToArray();\n        int[] index = new int[array.Length];\n
    \       int[] sort = new int[array.Length];\n        int[] ones = new int[array.Length];\n
    \       for (int i = 0; i < array.Length; i++) {\n            index[i] = i;\n
    \           sort[i] = i;\n            ones[i] = CountOnes(array[i]);\n        }\n
    \       Array.Sort(ones, index);\n        Array.Sort(array, sort);\n        for
    (int i = 0; i < array.Length; i++) {\n            if (index[i] != sort[i]) {\n
    \               int tmp = index[i];\n                index[i] = sort[i];\n                index[Array.IndexOf(index,
    sort[i])] = tmp;\n            }\n        }\n        List<long> result = new List<long>();\n
    \       for (int i = 0; i < array.Length; i++) {\n            result.Add(array[index[i]]);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb_b_suww.cs(27,23): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var len = arr.Count;\n        var ans = new List<long>(len);\n
    \       ans.AddRange(arr);\n        for (int i = 0; i < len; i++) {\n            var
    a = arr[i];\n            var b = ans[i];\n            var ones = Convert.ToString(a,
    2).Count(x => x == '1');\n            var j = i + 1;\n            while (j < len)
    {\n                var c = arr[j];\n                var ones2 = Convert.ToString(c,
    2).Count(x => x == '1');\n                if (ones > ones2) {\n                    ans[i]
    = c;\n                    ans[j] = b;\n                    break;\n                }
    else if (ones == ones2) {\n                    if (a > c) {\n                        ans[i]
    = c;\n                        ans[j] = b;\n                        break;\n                    }\n
    \               }\n                j++;\n            }\n        }\n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5c3af3a85daa43e48f29d0ade9a34cab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5c3af3a85daa43e48f29d0ade9a34cab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var list = new List<KeyValuePair<long, int>>();\n        for (int
    i = 0; i < arr.Count; i++) {\n            var kvp = new KeyValuePair<long, int>(arr[i],
    i);\n            list.Add(kvp);\n        }\n        list.Sort((a, b) => {\n            var
    aBitStr = GetBitString(a.Key);\n            var bBitStr = GetBitString(b.Key);\n
    \           if (aBitStr.Count() == bBitStr.Count()) {\n                return
    a.Key.CompareTo(b.Key);\n            }\n            return aBitStr.Count().CompareTo(bBitStr.Count());\n
    \       });\n        var listOrdered = new List<long>();\n        for (int i =
    0; i < list.Count; i++) {\n            listOrdered.Add(list[i].Key);\n        }\n
    \       return listOrdered;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2i8cq7sa.cs(26,27): error CS0103: The name ''GetBitString'' does not exist
    in the current context

    /tmp/tmp2i8cq7sa.cs(27,27): error CS0103: The name ''GetBitString'' does not exist
    in the current context

    '
  timestamp: 1660028236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var arrs = arr.ToArray();\n        long[] arrss = new long[arrs.Length];\n
    \       for (int i = 0; i < arrs.Length; i++) {\n            arrss[i] = arrs[i];\n
    \       }\n        var result = Sort(arrss);\n        List<long> resultl = new
    List<long>();\n        for (int i = 0; i < result.Length; i++) {\n            resultl.Add(result[i]);\n
    \       }\n        return resultl;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5dh2dlxc.cs(25,22): error CS0103: The name ''Sort'' does not exist in
    the current context

    '
  timestamp: 1660028236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // List<long> retval = new List<long>();\n        // int one_count
    = 0;\n        // long ones_count_max = 0;\n        // long max_val = 0;\n        //
    long ones_count_min = 0;\n        // long min_val = 0;\n        // long[] ones_count
    = new long[arr.Count];\n        // long[] values = new long[arr.Count];\n        //
    for (int i = 0; i < arr.Count; i++) {\n        //     for (int j = 0; j < arr.Count;
    j++) {\n        //         one_count = 0;\n        //         for (int k = 0;
    k < arr[j].ToString().Length; k++) {\n        //             if (arr[j].ToString()[k]
    == '1') {\n        //                 one_count++;\n        //             }\n
    \       //         }\n        //         ones_count[j] = one_count;\n        //
    \        values[j] = arr[j];\n        //     }\n        //     ones_count_max
    = ones_count.Max();\n        //     max_val = arr.Max();\n        //     ones_count_min
    = ones_count.Min();\n        //     min_val = arr.Min();\n        //     if (ones_count_max
    == ones_count_min) {\n        //         retval.Add(arr.Min());\n        //         arr.Remove(arr.Min());\n
    \       //     } else {\n        //         retval.Add(max_val);\n        //         arr.Remove(max_val);\n
    \       //     }\n        // }\n        // return retval;\n        return arr.OrderBy(i
    => i.ToString().Count(x => x == '1')).ThenBy(i => i).ToList();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8de2776e2615485d9a29af5a2ae3d61b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8de2776e2615485d9a29af5a2ae3d61b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var sortList = new List<long>(arr);\n        // var sortList =
    new List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L});\n
    \       for (int i = 0; i < sortList.Count; i++) {\n            for (int j = 0;
    j < sortList.Count; j++) {\n                // Console.WriteLine(i + \" \" + j);\n
    \               int a = NumberOfOnes(sortList[i]);\n                int b = NumberOfOnes(sortList[j]);\n
    \               // Console.WriteLine(a + \" \" + b);\n                if (a <
    b) {\n                    Swap(sortList, i, j);\n                } else if (a
    == b) {\n                    if (sortList[i] < sortList[j]) {\n                        Swap(sortList,
    i, j);\n                    }\n                }\n            }\n        }\n        return
    sortList;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe_6urrir.cs(25,25): error CS0103: The name ''NumberOfOnes'' does not exist
    in the current context

    /tmp/tmpe_6urrir.cs(26,25): error CS0103: The name ''NumberOfOnes'' does not exist
    in the current context

    /tmp/tmpe_6urrir.cs(29,21): error CS0103: The name ''Swap'' does not exist in
    the current context

    /tmp/tmpe_6urrir.cs(32,25): error CS0103: The name ''Swap'' does not exist in
    the current context

    '
  timestamp: 1660028236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        int[] bits = new int[arr.Count];\n        for (int i = 0; i <
    arr.Count; i++) {\n            bits[i] = Convert.ToString(arr[i], 2).Count(c =>
    c == '1');\n        }\n        for (int i = 0; i < arr.Count; i++) {\n            for
    (int j = 0; j < arr.Count - 1; j++) {\n                if (bits[j] > bits[j +
    1]) {\n                    Swap(ref bits[j], ref bits[j + 1]);\n                    Swap(ref
    arr[j], ref arr[j + 1]);\n                } else if (bits[j] == bits[j + 1]) {\n
    \                   if (arr[j] > arr[j + 1]) {\n                        Swap(ref
    arr[j], ref arr[j + 1]);\n                    }\n                }\n            }\n
    \       }\n        return arr;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcoodiv4g.cs(27,21): error CS0103: The name ''Swap'' does not exist in
    the current context

    /tmp/tmpcoodiv4g.cs(28,21): error CS0103: The name ''Swap'' does not exist in
    the current context

    /tmp/tmpcoodiv4g.cs(28,30): error CS0206: A property or indexer may not be passed
    as an out or ref parameter

    /tmp/tmpcoodiv4g.cs(28,42): error CS0206: A property or indexer may not be passed
    as an out or ref parameter

    /tmp/tmpcoodiv4g.cs(31,25): error CS0103: The name ''Swap'' does not exist in
    the current context

    /tmp/tmpcoodiv4g.cs(31,34): error CS0206: A property or indexer may not be passed
    as an out or ref parameter

    /tmp/tmpcoodiv4g.cs(31,46): error CS0206: A property or indexer may not be passed
    as an out or ref parameter

    '
  timestamp: 1660028236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(v => CountOnes(v)).ThenBy(v => v).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvw7a4ewl.cs(20,33): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Convert each number to binary\n        // Put each one in a
    tuple (Count of 1s, decimal number)\n        // Order by the tuple in ascending
    order\n        // Return the decimal values\n        return arr.Select(x => {\n
    \           var binary = Convert.ToString(x, 2);\n            return (binary.Count(y
    => y == '1'), x);\n        }).OrderBy(x => x.Item1).ThenBy(x => x.Item2).Select(x
    => x.Item2).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b41e17ee95914f8e9647e71523ec5e03>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b41e17ee95914f8e9647e71523ec5e03>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Sort the elements of the list based on number of ones in binary\n
    \       // representation, in ascending order.\n        // For similar number
    of ones, sort based on decimal value.\n        arr.Sort((a, b) => (getNumOnes(a)
    == getNumOnes(b)) ? a.CompareTo(b) : getNumOnes(a).CompareTo(getNumOnes(b)));\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps7urpqul.cs(23,29): error CS0103: The name ''getNumOnes'' does not exist
    in the current context

    /tmp/tmps7urpqul.cs(23,46): error CS0103: The name ''getNumOnes'' does not exist
    in the current context

    /tmp/tmps7urpqul.cs(23,80): error CS0103: The name ''getNumOnes'' does not exist
    in the current context

    /tmp/tmps7urpqul.cs(23,104): error CS0103: The name ''getNumOnes'' does not exist
    in the current context

    '
  timestamp: 1660028236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // using System.Linq;\n        return arr.OrderBy(num => num.ToString(\"X\").Replace(\"0\",
    \"\").Length).ThenBy(num => num).ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2bf3f815fed942adbd47d636d34a589f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2bf3f815fed942adbd47d636d34a589f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49bf05f49d804fdea399dc8e94401445>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49bf05f49d804fdea399dc8e94401445>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(i => i.ToString(\"X\").Count(c => c == '1')).ThenBy(i
    => i).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <030ab4147b12461dae065306ad0e0c3c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <030ab4147b12461dae065306ad0e0c3c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var ones = new List<Tuple<int, long>>();\n        var zeros =
    new List<Tuple<int, long>>();\n        foreach (var val in arr) {\n            var
    count = val.ToString().Count(c => c == '1');\n            if (count == 0) {\n
    \               zeros.Add(new Tuple<int, long>(val, val));\n            } else
    {\n                ones.Add(new Tuple<int, long>(count, val));\n            }\n
    \       }\n        var oneList = ones.OrderBy(p => p.Item1).ThenBy(p => p.Item2).Select(p
    => p.Item2).ToList();\n        var zeroList = zeros.OrderBy(p => p.Item1).ThenBy(p
    => p.Item2).Select(p => p.Item2).ToList();\n        oneList.AddRange(zeroList);\n
    \       return oneList;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxib9bseu.cs(25,48): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660028236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(v => v >= 0 ? new BitArray(BitConverter.GetBytes(v)).Cast<bool>().Count(b
    => b) : -1).ThenBy(v => v).ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg9p4relk.cs(20,46): error CS0246: The type or namespace name ''BitArray''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660028236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((left, right) => {\n            if (left == right) return
    0;\n            var leftOnes = CountOnes(left);\n            var rightOnes = CountOnes(right);\n
    \           if (leftOnes == rightOnes) {\n                return left < right
    ? -1 : 1;\n            }\n            return leftOnes < rightOnes ? -1 : 1;\n
    \       });\n        return arr;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb8rew43_.cs(22,28): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmpb8rew43_.cs(23,29): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Create a dictionary to store the number of ones as the key,
    and a list as the value.\n        // The number of ones will not be more than
    the number of bits, so the key will be a value between 0 and 64.\n        Dictionary<int,
    List<long>> ones = new Dictionary<int, List<long>>();\n        // Get the number
    of bits and create a new BigInteger.\n        int bits = sizeof(long) * 8;\n        BigInteger
    bi = new BigInteger();\n        // Iterate through the list, adding the numbers
    to the dictionary,\n        // sorted by number of ones in the binary representation.\n
    \       foreach (long n in arr) {\n            // Initialize the number of ones
    to 0.\n            int count = 0;\n            // Convert the number to a BigInteger.\n
    \           bi = n;\n            // Iterate through the bits, checking if the
    bit is 1 or 0.\n            for (int i = 0; i < bits; i++) {\n                if
    (bi % 2 == 1) {\n                    count++;\n                }\n                bi
    /= 2;\n            }\n            // If the key is not in the dictionary, create
    a new list.\n            if (!ones.ContainsKey(count)) {\n                ones.Add(count,
    new List<long>());\n            }\n            // Add the number to the dictionary.\n
    \           ones[count].Add(n);\n        }\n        // Create a new list and iterate
    through the dictionary to add each item in order.\n        List<long> sorted =
    new List<long>();\n        foreach (KeyValuePair<int, List<long>> kvp in ones)
    {\n            // Sort the list of numbers for the current key.\n            kvp.Value.Sort();\n
    \           // Add the list of numbers to the sorted list.\n            sorted.AddRange(kvp.Value);\n
    \       }\n        // Return the sorted list.\n        return sorted;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7286f16751ff46dd892e807b46edf753>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7286f16751ff46dd892e807b46edf753>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028237
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        Dictionary<int, List<long>> zeroes = new Dictionary<int, List<long>>();\n
    \       Dictionary<int, List<long>> ones = new Dictionary<int, List<long>>();\n
    \       for (int i = 0; i < arr.Count; i++) {\n            int count = CountOnes(arr[i]);\n
    \           if (arr[i] >= 0) {\n                if (!ones.ContainsKey(count))
    {\n                    ones[count] = new List<long>();\n                }\n                ones[count].Add(arr[i]);\n
    \           } else {\n                if (!zeroes.ContainsKey(count)) {\n                    zeroes[count]
    = new List<long>();\n                }\n                zeroes[count].Add(arr[i]);\n
    \           }\n        }\n        List<long> ret = new List<long>();\n        foreach
    (var val in zeroes.Values) {\n            ret.AddRange(val);\n        }\n        foreach
    (var val in ones.Values) {\n            ret.AddRange(val);\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvpjmrmum.cs(23,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var result = arr.Select(i => new { Count = CountOnesInBinary(i),
    Value = i })\n            .OrderBy(x => x.Count)\n            .ThenBy(x => x.Value)\n
    \           .Select(x => x.Value).ToList();\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt5cj7zpi.cs(20,52): error CS0103: The name ''CountOnesInBinary'' does
    not exist in the current context

    '
  timestamp: 1660028236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            var aOnes = Convert.ToString(a,
    2).Count(c => c == '1');\n            var bOnes = Convert.ToString(b, 2).Count(c
    => c == '1');\n            return aOnes == bOnes ? a.CompareTo(b) : aOnes.CompareTo(bOnes);\n
    \       });\n        return arr;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc712326ed3b4be2b8b1b03d44a727fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc712326ed3b4be2b8b1b03d44a727fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028237
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Sort the list first.\n        arr.Sort();\n        // Create
    a list of tuples of (number of ones, value).\n        List<Tuple<int, long>> numbers
    = new List<Tuple<int, long>>();\n        foreach (long n in arr) {\n            numbers.Add(new
    Tuple<int, long>(GetOnesCount(n), n));\n        }\n        // Sort by ones then
    value.\n        numbers.Sort((a, b) => {\n            int result = a.Item1.CompareTo(b.Item1);\n
    \           if (result == 0) {\n                result = a.Item2.CompareTo(b.Item2);\n
    \           }\n            return result;\n        });\n        // Recreate a
    list from the sorted tuples.\n        List<long> result = new List<long>();\n
    \       foreach (Tuple<int, long> t in numbers) {\n            result.Add(t.Item2);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt3zv2mtv.cs(25,46): error CS0103: The name ''GetOnesCount'' does not exist
    in the current context

    '
  timestamp: 1660028236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var ans = arr.ToArray();\n        Array.Sort(ans, delegate(long
    a, long b) {\n            var sa = Convert.ToString(a, 2);\n            var sb
    = Convert.ToString(b, 2);\n            int la = sa.Length;\n            int lb
    = sb.Length;\n            int cmp = la.CompareTo(lb);\n            if (cmp !=
    0) {\n                return cmp;\n            }\n            for (int i = 0;
    i < la; i++) {\n                cmp = (sa[i] - '0').CompareTo(sb[i] - '0');\n
    \               if (cmp != 0) {\n                    return cmp;\n                }\n
    \           }\n            return 0;\n        });\n        return ans.ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a06da516bf62407fb8c8af743fe28fbf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a06da516bf62407fb8c8af743fe28fbf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var sorted = arr.OrderBy(x => x.ToString(\"X\").Count(c => c ==
    '1')).ThenBy(x => x);\n        var ret = new List<long>();\n        foreach (var
    x in sorted) {\n            ret.Add(x);\n        }\n        return ret;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35ae612eebc247ccb2ee55dfba2b9721>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35ae612eebc247ccb2ee55dfba2b9721>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach
    (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n
    \           } else {\n                dict.Add(num, 1);\n            }\n        }\n
    \       var sortDict = dict.OrderBy(i => Convert.ToString(i.Key, 2).Count(c =>
    c == '1')).ThenBy(i => i.Key);\n        List<long> result = new List<long>();\n
    \       foreach (var kvp in sortDict) {\n            for (int i = 0; i < kvp.Value;
    i++) {\n                result.Add(kvp.Key);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a0b1e57de264856a5ea32d2c2305bda>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a0b1e57de264856a5ea32d2c2305bda>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028237
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(k => k.BitCount()).ThenBy(k => k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbxcd3ogh.cs(20,35): error CS1061: ''long'' does not contain a definition
    for ''BitCount'' and no accessible extension method ''BitCount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1660028237
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => HammingWeight(x))\n                  .ThenBy(x
    => x)\n                  .ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvuyitm14.cs(20,33): error CS0103: The name ''HammingWeight'' does not
    exist in the current context

    '
  timestamp: 1660028237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Write your code here\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <74e46760185d4f63b7b44818ea338179>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <74e46760185d4f63b7b44818ea338179>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        long[] a = arr.ToArray();\n        Array.Sort(a, (x, y) => {\n
    \           int xn = (int)x, yn = (int)y;\n            int xb = 0, yb = 0;\n            for
    (int i = 0; i < 32; i++) {\n                xb += (xn >> i) & 1;\n                yb
    += (yn >> i) & 1;\n            }\n            if (xb != yb) {\n                return
    xb - yb;\n            }\n            else {\n                return (int)x - (int)y;\n
    \           }\n        });\n        return new List<long>(a);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd4c00d45ca64965bd16609704867b74>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd4c00d45ca64965bd16609704867b74>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028237
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code is here...\n        List<long> ans = new List<long>();\n
    \       if (arr.Count == 0) return ans;\n        arr.Sort((x, y) => {\n            int
    xOnes = CountOnes(x);\n            int yOnes = CountOnes(y);\n            return
    (xOnes == yOnes) ? x.CompareTo(y) : xOnes.CompareTo(yOnes);\n        });\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptnuc1pie.cs(24,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmptnuc1pie.cs(25,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028237
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> onesList = new List<long>();\n        List<long> sorted
    = new List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (IsOne(arr[i])) {\n                onesList.Add(arr[i]);\n            } else {\n
    \               sorted.Add(arr[i]);\n            }\n        }\n        onesList.Sort();\n
    \       sorted.Sort();\n        sorted.Reverse();\n        foreach (long item
    in onesList) {\n            sorted.Add(item);\n        }\n        return sorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvfjybass.cs(23,17): error CS0103: The name ''IsOne'' does not exist in
    the current context

    '
  timestamp: 1660028237
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => CountSetBits(x))\n                  .ThenBy(x
    => x)\n                  .ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwt3pabln.cs(20,33): error CS0103: The name ''CountSetBits'' does not exist
    in the current context

    '
  timestamp: 1660028237
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(i => BinaryHelper.Binary(i).Count(b => b ==
    '1')).ThenBy(i => i).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42tk78w_.cs(20,33): error CS0103: The name ''BinaryHelper'' does not exist
    in the current context

    '
  timestamp: 1660028237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var result = arr.Select(x => new { Decimal = x, Binary = Convert.ToString(x,
    2) })\n            .Select(x => new { Decimal = x.Decimal, Binary = x.Binary.Count(y
    => y == '1') })\n            .GroupBy(x => x.Binary)\n            .OrderBy(x =>
    x.Key)\n            .SelectMany(x => x.OrderBy(y => y.Decimal))\n            .Select(x
    => x.Decimal)\n            .ToList();\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e819f7a7e83146679f3699723af84b84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e819f7a7e83146679f3699723af84b84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028237
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> result = new List<long>();\n        int maxValue =
    arr.Max();\n        int maxBits = Convert.ToString(maxValue, 2).Length;\n        for
    (int j = 0; j < maxBits; j++) {\n            for (int i = 0; i < arr.Count; i++)
    {\n                if (Convert.ToString(arr[i], 2).Length == j) {\n                    result.Add(arr[i]);\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbbhn_2pr.cs(21,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660028237
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.ToString(\"X\"), new DecimalHexComparer()).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsjp1mggr.cs(20,54): error CS0246: The type or namespace name ''DecimalHexComparer''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660028237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => \n        {\n            //If the number
    is negative then invert it so it looks like a positive number.\n            long
    num = x < 0 ? ~x : x;\n            return Convert.ToString(num, 2).Count(y =>
    y == '1');\n        }).ThenBy(x => x).ToList();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6918073734ea44f7ae5745bad9d7010d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6918073734ea44f7ae5745bad9d7010d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028237
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            // high ones first\n            int
    aOnes = GetOnes(a);\n            int bOnes = GetOnes(b);\n            if (aOnes
    != bOnes)\n                return bOnes - aOnes;\n            return (int)a -
    (int)b;\n        });\n        return arr;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkgkbq00o.cs(22,25): error CS0103: The name ''GetOnes'' does not exist
    in the current context

    /tmp/tmpkgkbq00o.cs(23,25): error CS0103: The name ''GetOnes'' does not exist
    in the current context

    '
  timestamp: 1660028237
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.ToString(), new BinaryOnesComparer()).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjq1cizbx.cs(20,51): error CS0246: The type or namespace name ''BinaryOnesComparer''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660028237
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // The solution is to use an intermediate data structure to maintain
    the relations of objects and\n        // then sort the intermediate data structure.
    The intermediate data structure could be a list of\n        // tuples, or a dictionary
    of lists, or even a list of classes.\n        // http://www.codewars.com/kata/reviews/557d12a588509eab1b00019a/groups/557f4b6478fe23fbd5002a63\n
    \       // I tried using a class, but the class instance does not have a proper
    sorting method.\n        // So I went for a dictionary.\n        // However, I
    really dislike the way the dictionary looks in my solution.\n        //  I think
    I should be able to do better.\n\n        // Idea:\n        // Have another list
    to keep track of the count of 1s.\n        // Have another list to keep track
    of the count of 0s.\n        // Loop through the list and add to the count lists.\n
    \       // Sort the count lists.\n        // Then loop through the count lists
    and add the numbers to the main list.\n        // Sort the main list.\n        //
    Return the main list.\n\n        Dictionary<int, int> onesCountDict = new Dictionary<int,
    int>();\n        Dictionary<int, int> zerosCountDict = new Dictionary<int, int>();\n
    \       List<int> finalList = new List<int>();\n        for (int i = 0; i < arr.Count;
    i++) {\n            int onesCount = GetNumberOfOnesInBinaryForm(arr[i]);\n            if
    (onesCountDict.ContainsKey(onesCount)) {\n                onesCountDict[onesCount]++;\n
    \           } else {\n                onesCountDict.Add(onesCount, 1);\n            }\n
    \           int zerosCount = GetNumberOfZerosInBinaryForm(arr[i]);\n            if
    (zerosCountDict.ContainsKey(zerosCount)) {\n                zerosCountDict[zerosCount]++;\n
    \           } else {\n                zerosCountDict.Add(zerosCount, 1);\n            }\n
    \       }\n        var sortedOnesCountDict = onesCountDict.OrderBy(x => x.Key);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpao330xtj.cs(42,29): error CS0103: The name ''GetNumberOfOnesInBinaryForm''
    does not exist in the current context

    /tmp/tmpao330xtj.cs(48,30): error CS0103: The name ''GetNumberOfZerosInBinaryForm''
    does not exist in the current context

    /tmp/tmpao330xtj.cs(19,30): error CS0161: ''Problem.SortArray(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1660028237
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort(delegate(long lhs, long rhs) {\n            int lhsOnes
    = CountOnes(lhs);\n            int rhsOnes = CountOnes(rhs);\n            if (lhsOnes
    == rhsOnes) {\n                return lhs.CompareTo(rhs);\n            }\n            return
    lhsOnes.CompareTo(rhsOnes);\n        });\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1l84fep2.cs(21,27): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmp1l84fep2.cs(22,27): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028237
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((x, y) => {\n            var count1 = CountOnes(x);\n
    \           var count2 = CountOnes(y);\n            if (count1 != count2) {\n
    \               return count1.CompareTo(count2);\n            }\n            return
    x.CompareTo(y);\n        });\n        return arr;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg_twfw6p.cs(21,26): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmpg_twfw6p.cs(22,26): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        Console.WriteLine(arr.Count);\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c320dfdd69104605a393ec5357c48bdd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c320dfdd69104605a393ec5357c48bdd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: '5

    5

    5

    0

    11

    6

    5

    5

    '
  timestamp: 1660028237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => {\n            // \u5BFE\u8C61\u306E\u30D3\u30C3\u30C8\u6570\n
    \           int keta = 64;\n            // \u30D3\u30C3\u30C8\u6570\u3067\u30EB\u30FC\u30D7\u3059\u308B\n
    \           for (int i = keta; i > 0; i--) {\n                // \u53F3\u306B\u30B7\u30D5\u30C8\u3057\u30661\u306E\u30D3\u30C3\u30C8\u3068\u8AD6\u7406\u7A4D\n
    \               // \u305D\u306E\u30D3\u30C3\u30C8\u304C1\u3067\u3042\u308C\u30701\u304C\u7D9A\u304F\u3068\u89E3\u91C8\n
    \               // 1\u304C\u7D9A\u304F\u3053\u3068\u3092\u6709\u52B9\u306B\u3059\u308B\u305F\u3081\u306E\u30D3\u30C3\u30C8\u30DE\u30B9\u30AF\n
    \               // \u6307\u5B9A\u306E\u30D3\u30C3\u30C8\u6570\u306E\u53F3\u306B\u7D9A\u304F1\u306E\u30D3\u30C3\u30C8\u6570\n
    \               // \u3053\u306E\u5024\u304C0\u306B\u306A\u308B\u3068i\u304C0\u306B\u306A\u308B\u307E\u3067\u7D9A\u304F\n
    \               // 1\u304C\u7D9A\u304F\u3053\u3068\u3092\u6709\u52B9\u306B\u3059\u308B\u305F\u3081\u306E\u30D3\u30C3\u30C8\u30DE\u30B9\u30AF\n
    \               // \u6307\u5B9A\u306E\u30D3\u30C3\u30C8\u6570\u306E\u53F3\u306B\u7D9A\u304F1\u306E\u30D3\u30C3\u30C8\u6570\n
    \               // \u3053\u306E\u5024\u304C0\u306B\u306A\u308B\u3068i\u304C0\u306B\u306A\u308B\u307E\u3067\u7D9A\u304F\n
    \               if ((x >> i & 1) != 0) {\n                    // 1\u304C\u7D9A\u304F\u30D3\u30C3\u30C8\u6570\n
    \                   int cnt = i;\n                    // \u307E\u30601\u304C\u7D9A\u304F\u5834\u5408\n
    \                   while (cnt > 0) {\n                        // 1\u30D3\u30C3\u30C8\u53F3\u306B\u30B7\u30D5\u30C8\n
    \                       x >>= 1;\n                        // \u3053\u306E\u30D3\u30C3\u30C8\u30821\u3067\u3042\u308C\u3070\u7D9A\u304F\n
    \                       if ((x & 1) != 0) {\n                            // 1\u304C\u7D9A\u304F\n
    \                           cnt--;\n                        } else {\n                            //
    1\u304C\u7D9A\u304B\u306A\u3044\n                            break;\n                        }\n
    \                   }\n                    // 1\u304C\u7D9A\u304F\u30D3\u30C3\u30C8\u6570\u3092\u8FD4\u3059\n
    \                   return cnt;\n                }\n            }\n            //
    \u5168\u30D3\u30C3\u30C8\u304C0\u3067\u3042\u308C\u30700\u3092\u8FD4\u3059\n            return
    0;\n        }).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <891bf0c06b61413b981e9acf52e67133>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <891bf0c06b61413b981e9acf52e67133>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((x, y) => {\n            var b1 = Convert.ToString(x,
    2);\n            var b2 = Convert.ToString(y, 2);\n            var ones1 = b1.Count(c
    => c == '1');\n            var ones2 = b2.Count(c => c == '1');\n            if
    (ones1 != ones2) {\n                return ones1.CompareTo(ones2);\n            }\n
    \           return x.CompareTo(y);\n        });\n        return arr;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b66a1c7da67f44ff8e333f6b3be46340>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b66a1c7da67f44ff8e333f6b3be46340>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(a => CountOnes(a)).ThenBy(a => a).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwmlrxsjf.cs(20,33): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(l => Convert.ToString(l, 2).Count(c => c ==
    '1')).ThenBy(l => l).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51460098e7c54356bcaf2067b3e0b87b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51460098e7c54356bcaf2067b3e0b87b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here.\n        //IEnumerable<long> solution = arr.Where(x
    => x >= 0).OrderBy(x => Convert.ToString(x, 2).Count(y => y == '1')).ThenBy(x
    => x);\n        return arr.Where(x => x >= 0).OrderBy(x => Convert.ToString(x,
    2).Count(y => y == '1')).ThenBy(x => x).ToList();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21df30dbe86e4a76aad2f304b79d6299>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21df30dbe86e4a76aad2f304b79d6299>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var myarr = new List<List<long>>();\n        for (var i = 0; i
    < arr.Count; i++) {\n            var ones = arr[i] >= 0 ? CountOnes(arr[i]) :
    -CountOnes(-arr[i]);\n            var decim = arr[i] >= 0 ? arr[i] : -arr[i];\n
    \           myarr.Add(new List<long>() { decim, ones, arr[i] });\n        }\n
    \       myarr.Sort(new Comparison<List<long>>((a, b) => {\n            if (a[1]
    > b[1]) return 1;\n            if (a[1] < b[1]) return -1;\n            if (a[0]
    > b[0]) return 1;\n            if (a[0] < b[0]) return -1;\n            return
    0;\n        }));\n        var result = new List<long>();\n        for (var i =
    0; i < myarr.Count; i++) {\n            result.Add(myarr[i][2]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4u082e6u.cs(22,38): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmp4u082e6u.cs(22,59): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((i, j) => {\n            var n = i.ToString(\"B\").Length
    - j.ToString(\"B\").Length;\n            if (n == 0) {\n                return
    i.CompareTo(j);\n            }\n            return n;\n        });\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Failed to compare
    two elements in the array. ---> System.FormatException: Format specifier was invalid.\n
    \ at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer&
    number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo
    info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T]
    format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<SortArray>b__0_0 (System.Int64 i, System.Int64 j) [0x00001]
    in <0c4d4960466b4e6ba9f54bf0b9b454b5>:0 \n  at System.Collections.Generic.ArraySortHelper`1[T].InsertionSort
    (T[] keys, System.Int32 lo, System.Int32 hi, System.Comparison`1[T] comparer)
    [0x0002a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.ArraySortHelper`1[T].IntroSort
    (T[] keys, System.Int32 lo, System.Int32 hi, System.Int32 depthLimit, System.Comparison`1[T]
    comparer) [0x0004b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.ArraySortHelper`1[T].IntrospectiveSort
    (T[] keys, System.Int32 left, System.Int32 length, System.Comparison`1[T] comparer)
    [0x00013] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.ArraySortHelper`1[T].Sort
    (T[] keys, System.Int32 index, System.Int32 length, System.Comparison`1[T] comparer)
    [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n   --- End of inner exception
    stack trace ---\n  at System.Collections.Generic.ArraySortHelper`1[T].Sort (T[]
    keys, System.Int32 index, System.Int32 length, System.Comparison`1[T] comparer)
    [0x00020] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.List`1[T].Sort
    (System.Comparison`1[T] comparison) [0x00013] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortArray (System.Collecti"
  stdout: ''
  timestamp: 1660028238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((long a, long b) => {\n            var binA = Convert.ToString(a,
    2);\n            var binB = Convert.ToString(b, 2);\n            var onesA = binA.Count(c
    => c == '1');\n            var onesB = binB.Count(c => c == '1');\n            if
    (onesA != onesB) {\n                return onesA.CompareTo(onesB);\n            }\n
    \           return a.CompareTo(b);\n        });\n        return arr;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3fb18067fab54a6583896ca7c9ec73f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3fb18067fab54a6583896ca7c9ec73f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        List<long> result = new List<long>();\n
    \       int minBitLength = int.MaxValue;\n        foreach (long x in arr) {\n
    \           int bitLength = BitLength(x);\n            if (bitLength < minBitLength)
    {\n                minBitLength = bitLength;\n            }\n        }\n        for
    (int i = 0; i < minBitLength; i++) {\n            result.AddRange(arr.Where(v
    => BitGet(v, i)).OrderBy(v => v));\n            result.AddRange(arr.Where(v =>
    !BitGet(v, i)).OrderBy(v => v));\n        }\n        result.AddRange(arr.Where(v
    => BitLength(v) == minBitLength).OrderBy(v => v));\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr6pdr6oj.cs(24,29): error CS0103: The name ''BitLength'' does not exist
    in the current context

    /tmp/tmpr6pdr6oj.cs(30,44): error CS0103: The name ''BitGet'' does not exist in
    the current context

    /tmp/tmpr6pdr6oj.cs(31,45): error CS0103: The name ''BitGet'' does not exist in
    the current context

    /tmp/tmpr6pdr6oj.cs(33,40): error CS0103: The name ''BitLength'' does not exist
    in the current context

    '
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x == 0 ? 0 : BitCount(Math.Abs(x))).ThenBy(x
    => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb6752ocv.cs(20,46): error CS0103: The name ''BitCount'' does not exist
    in the current context

    '
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            int c = CountBits(a).CompareTo(CountBits(b));\n
    \           if (c == 0) {\n                return a.CompareTo(b);\n            }\n
    \           return c;\n        });\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptetmbysj.cs(21,21): error CS0103: The name ''CountBits'' does not exist
    in the current context

    /tmp/tmptetmbysj.cs(21,44): error CS0103: The name ''CountBits'' does not exist
    in the current context

    '
  timestamp: 1660028237
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort(BinaryCompare);\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmporuti83o.cs(20,18): error CS0103: The name ''BinaryCompare'' does not
    exist in the current context

    '
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort(SortByBinaryRepresentation);\n        return arr;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzfaa1yt0.cs(20,18): error CS0103: The name ''SortByBinaryRepresentation''
    does not exist in the current context

    '
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        for (int k = 0; k < arr.Count - 1; k++) {\n            for (int
    i = 0; i < arr.Count - 1; i++) {\n                if (getOnes(arr[i]) > getOnes(arr[i
    + 1])) {\n                    long tmp = arr[i];\n                    arr[i] =
    arr[i + 1];\n                    arr[i + 1] = tmp;\n                } else if
    (getOnes(arr[i]) == getOnes(arr[i + 1])) {\n                    if (arr[i] > arr[i
    + 1]) {\n                        long tmp = arr[i];\n                        arr[i]
    = arr[i + 1];\n                        arr[i + 1] = tmp;\n                    }\n
    \               }\n            }\n        }\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmcvotcv9.cs(22,21): error CS0103: The name ''getOnes'' does not exist
    in the current context

    /tmp/tmpmcvotcv9.cs(22,39): error CS0103: The name ''getOnes'' does not exist
    in the current context

    /tmp/tmpmcvotcv9.cs(26,28): error CS0103: The name ''getOnes'' does not exist
    in the current context

    /tmp/tmpmcvotcv9.cs(26,47): error CS0103: The name ''getOnes'' does not exist
    in the current context

    '
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Sort the list, so that any elements with the same number of\n
    \       // ones are adjacent to each other, and then convert the list\n        //
    to a sequence of tuples (number of ones, element)\n        var sorted = arr.OrderBy(x
    => CountOnes(x));\n        var sortedTuples = sorted.Select(x => Tuple.Create(CountOnes(x),
    x));\n        // Group the tuples by their number of ones, so that each group
    is\n        // a sequence of tuples with the same number of ones.\n        var
    groups = sortedTuples.GroupBy(x => x.Item1);\n        // Sort each group by the
    second element of each tuple, so that the\n        // elements within each group
    are sorted based on their decimal value.\n        var sortedGroups = groups.Select(g
    => g.OrderBy(t => t.Item2));\n        // Flatten the groups into a single sequence
    and return the second\n        // elements of each tuple (which are the actual
    list elements)\n        return sortedGroups.SelectMany(x => x).Select(x => x.Item2).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_c026v5t.cs(23,39): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmp_c026v5t.cs(24,60): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j
    = i + 1; j < arr.Count; j++) {\n                if (Compare(arr[i], arr[j]) >
    0) {\n                    var x = arr[i];\n                    arr[i] = arr[j];\n
    \                   arr[j] = x;\n                }\n            }\n        }\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu1kablat.cs(22,21): error CS0103: The name ''Compare'' does not exist
    in the current context

    '
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> res = new List<long>();\n        Dictionary<int, List<long>>
    dic = new Dictionary<int, List<long>>();\n        foreach (long num in arr) {\n
    \           int ones = GetNumberOfOnes(num);\n            if (!dic.ContainsKey(ones))
    {\n                dic.Add(ones, new List<long>());\n            }\n            dic[ones].Add(num);\n
    \       }\n        foreach (KeyValuePair<int, List<long>> pair in dic) {\n            pair.Value.Sort();\n
    \           res.AddRange(pair.Value);\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_33r1fso.cs(23,24): error CS0103: The name ''GetNumberOfOnes'' does not
    exist in the current context

    '
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        //arr.Sort((a, b) => {\n        //    var aInt = (int)a;\n        //
    \   var bInt = (int)b;\n        //    return BitCount(aInt) == BitCount(bInt)
    ? aInt.CompareTo(bInt) : BitCount(aInt).CompareTo(BitCount(bInt));\n        //});\n
    \       //return arr;\n        arr.Sort((a, b) => {\n            var aInt = (int)a;\n
    \           var bInt = (int)b;\n            return BitCount(aInt) == BitCount(bInt)
    ? aInt.CompareTo(bInt) : BitCount(aInt).CompareTo(BitCount(bInt));\n        });\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzzfz7_ux.cs(29,20): error CS0103: The name ''BitCount'' does not exist
    in the current context

    /tmp/tmpzzfz7_ux.cs(29,38): error CS0103: The name ''BitCount'' does not exist
    in the current context

    /tmp/tmpzzfz7_ux.cs(29,78): error CS0103: The name ''BitCount'' does not exist
    in the current context

    /tmp/tmpzzfz7_ux.cs(29,103): error CS0103: The name ''BitCount'' does not exist
    in the current context

    '
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var sorted = new SortedDictionary<long, long[]>();\n        foreach
    (var x in arr) {\n            var bin = Convert.ToString(x, 2);\n            var
    ones = bin.Count(c => c == '1');\n            if (!sorted.ContainsKey(ones)) {\n
    \               sorted[ones] = new long[arr.Count];\n            }\n            sorted[ones][x]
    = x;\n        }\n        var result = new List<long>();\n        foreach (var
    kvp in sorted) {\n            foreach (var x in kvp.Value) {\n                if
    (x != 0) {\n                    result.Add(x);\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.SortArray (System.Collections.Generic.List`1[T]
    arr) [0x0007d] in <62bd8caa28f04dbe9755c9199b734664>:0 \n  at Problem.Main (System.String[]
    args) [0x00017] in <62bd8caa28f04dbe9755c9199b734664>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.SortArray (System.Collections.Generic.List`1[T] arr) [0x0007d]
    in <62bd8caa28f04dbe9755c9199b734664>:0 \n  at Problem.Main (System.String[] args)
    [0x00017] in <62bd8caa28f04dbe9755c9199b734664>:0 \n"
  stdout: ''
  timestamp: 1660028238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n
    \       for (int i = 0; i < arr.Count; i++) {\n            long val = arr[i];\n
    \           long ones = 0;\n            while (val > 0) {\n                ones
    += val % 2;\n                val /= 2;\n            }\n            res.Add(new
    Tuple<long, long>(ones, arr[i]));\n        }\n        res.Sort((a, b) => {\n            if
    (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n            }\n
    \           return a.Item2.CompareTo(b.Item2);\n        });\n        List<long>
    result = new List<long>();\n        for (int i = 0; i < res.Count; i++) {\n            result.Add(res[i].Item2);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7884d31aa8ef4ada8b617b4881cd483c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7884d31aa8ef4ada8b617b4881cd483c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x < 0 ? int.MaxValue : (int)Math.Ceiling(Math.Log(x
    + 1, 2))).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <853dbd3cb4784b4f89bd1ab20036b88d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <853dbd3cb4784b4f89bd1ab20036b88d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var oneCount = new int[arr.Count];\n        var original = new
    long[arr.Count];\n        for (int i = 0; i < arr.Count; i++) {\n            var
    a = arr[i];\n            if (a == 0) {\n                oneCount[i] = 0;\n                original[i]
    = 0;\n            } else {\n                var one = 0;\n                while
    (a > 0) {\n                    one += a & 1;\n                    a >>= 1;\n                }\n
    \               oneCount[i] = one;\n                original[i] = arr[i];\n            }\n
    \       }\n        Array.Sort(oneCount, original);\n        return new List<long>(original);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz8dw_xyo.cs(30,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> result = new List<long>();\n        foreach (var num
    in arr) {\n            result.Add(num);\n        }\n        result.Sort((a, b)
    => {\n            var first = (int)a;\n            var second = (int)b;\n            var
    diff = GetBits(first) - GetBits(second);\n            if (diff == 0) {\n                diff
    = first - second;\n            }\n            return diff;\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1ll3qwr9.cs(27,24): error CS0103: The name ''GetBits'' does not exist
    in the current context

    /tmp/tmp1ll3qwr9.cs(27,41): error CS0103: The name ''GetBits'' does not exist
    in the current context

    '
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // The ultimate sorting\n        return arr.OrderBy(e => CountOnes(e)).ThenBy(e
    => e).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppmffxb7o.cs(21,33): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49bf05f49d804fdea399dc8e94401445>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49bf05f49d804fdea399dc8e94401445>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return null;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00032] in <21f8b149119c4a9588422a750fedc019>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00032] in <21f8b149119c4a9588422a750fedc019>:0
    \n"
  stdout: ''
  timestamp: 1660028234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Write your code here\n        // Assuming the integers in the
    list are non-negative.\n        // Assuming the integers in the list are all in
    the range of Int64.\n        var list = arr.Select(x => new Tuple<long, string>(x,
    Convert.ToString(x, 2))).ToList();\n        list.Sort((x, y) =>\n        {\n            var
    r = x.Item2.Count(c => c == '1') - y.Item2.Count(c => c == '1');\n            if
    (r != 0)\n                return r;\n            return (int)(x.Item1 - y.Item1);\n
    \       });\n        return list.Select(x => x.Item1).ToList();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <771a5a1d88b3404cbc9f4ac71e17cd2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <771a5a1d88b3404cbc9f4ac71e17cd2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49bf05f49d804fdea399dc8e94401445>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49bf05f49d804fdea399dc8e94401445>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // write code here\n        arr.Sort(delegate(long a, long b)
    {\n            int counta = 0;\n            int countb = 0;\n            int digit
    = 0;\n            while (digit < 64) {\n                if (((1L << digit) & a)
    > 0) {\n                    counta++;\n                }\n                if (((1L
    << digit) & b) > 0) {\n                    countb++;\n                }\n                digit++;\n
    \           }\n            if (counta == countb) {\n                return a.CompareTo(b);\n
    \           }\n            return counta.CompareTo(countb);\n        });\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e6d79c20bb8425aa3df3632af90fa68>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e6d79c20bb8425aa3df3632af90fa68>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        Dictionary<int, List<long>> dict = new Dictionary<int, List<long>>();\n
    \       for (int i = 0; i < arr.Count; i++) {\n            int ones = BitCount(arr[i]);\n
    \           if (!dict.ContainsKey(ones)) {\n                dict[ones] = new List<long>();\n
    \           }\n            dict[ones].Add(arr[i]);\n        }\n        var sorted
    = dict.OrderBy(kvp => kvp.Key);\n        List<long> result = new List<long>();\n
    \       foreach (var kvp in sorted) {\n            result.AddRange(kvp.Value.OrderBy(x
    => x));\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8wm6q7s2.cs(22,24): error CS0103: The name ''BitCount'' does not exist
    in the current context

    '
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // from the start of arr, \n        // look for elements that
    have the same number of \"1\"s\n        // and put them in the result list\n\n
    \       // if the element to be added has more \"1\"s than the elements in the
    result list,\n        // put it at the end\n\n        // if the element to be
    added has less \"1\"s than the elements in the result list,\n        // put it
    at the appropriate index\n        var result = new List<long>();\n        foreach
    (var num in arr) {\n            var ones = BitCount(num);\n            var index
    = 0;\n            foreach (var r in result) {\n                if (BitCount(r)
    < ones) {\n                    index++;\n                } else {\n                    break;\n
    \               }\n            }\n            result.Insert(index, num);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmgh7ntw3.cs(31,24): error CS0103: The name ''BitCount'' does not exist
    in the current context

    /tmp/tmpmgh7ntw3.cs(34,21): error CS0103: The name ''BitCount'' does not exist
    in the current context

    '
  timestamp: 1660028238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // sort by number of 1s, then by value\n        return arr.OrderBy(x
    => Convert.ToString(x, 2).Count(c => c == '1')).ThenBy(x => x).ToList();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <451c2bd542f64d10909e2cf82adfc22d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <451c2bd542f64d10909e2cf82adfc22d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            var aOnes = OneCount(a);\n            var
    bOnes = OneCount(b);\n            if (aOnes == bOnes) {\n                return
    a.CompareTo(b);\n            }\n            return aOnes.CompareTo(bOnes);\n        });\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp67huarej.cs(21,25): error CS0103: The name ''OneCount'' does not exist
    in the current context

    /tmp/tmp67huarej.cs(22,25): error CS0103: The name ''OneCount'' does not exist
    in the current context

    '
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        if (arr == null)\n            return
    null;\n        List<long> res = new List<long>();\n        List<long> res2 = new
    List<long>();\n        foreach (long i in arr) {\n            if (i >= 0)\n                res.Add(i);\n
    \           else\n                res2.Add(i);\n        }\n        res.Sort((a,
    b) => {\n            if (OneInBinary(a) == OneInBinary(b))\n                return
    a.CompareTo(b);\n            else\n                return OneInBinary(a).CompareTo(OneInBinary(b));\n
    \       });\n        res2.Sort((a, b) => {\n            if (OneInBinary(a) ==
    OneInBinary(b))\n                return a.CompareTo(b);\n            else\n                return
    OneInBinary(a).CompareTo(OneInBinary(b));\n        });\n        res2.Reverse();\n
    \       res.AddRange(res2);\n        return res;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmyw91zfs.cs(32,17): error CS0103: The name ''OneInBinary'' does not exist
    in the current context

    /tmp/tmpmyw91zfs.cs(32,35): error CS0103: The name ''OneInBinary'' does not exist
    in the current context

    /tmp/tmpmyw91zfs.cs(35,24): error CS0103: The name ''OneInBinary'' does not exist
    in the current context

    /tmp/tmpmyw91zfs.cs(35,49): error CS0103: The name ''OneInBinary'' does not exist
    in the current context

    /tmp/tmpmyw91zfs.cs(38,17): error CS0103: The name ''OneInBinary'' does not exist
    in the current context

    /tmp/tmpmyw91zfs.cs(38,35): error CS0103: The name ''OneInBinary'' does not exist
    in the current context

    /tmp/tmpmyw91zfs.cs(41,24): error CS0103: The name ''OneInBinary'' does not exist
    in the current context

    /tmp/tmpmyw91zfs.cs(41,49): error CS0103: The name ''OneInBinary'' does not exist
    in the current context

    '
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        Dictionary<long, long> ones = new Dictionary<long, long>();\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < 0) continue;\n
    \           long key = 0;\n            long num = arr[i];\n            while (num
    > 0) {\n                key += num % 2;\n                num /= 2;\n            }\n
    \           if (ones.ContainsKey(key)) {\n                ones[key] += (long)Math.Pow(10,
    numOfDigits(arr[i]));\n            } else {\n                ones[key] = (long)Math.Pow(10,
    numOfDigits(arr[i]));\n            }\n        }\n        ones = ones.OrderBy(x
    => x.Key).ToDictionary(x => x.Key, x => x.Value);\n        List<long> l = new
    List<long>();\n        foreach (var item in ones) {\n            long num = item.Value;\n
    \           long digits = numOfDigits(num);\n            long key = item.Key;\n
    \           for (int i = 0; i < digits; i++) {\n                l.Add(num % 10);\n
    \               num /= 10;\n            }\n        }\n        int pos = 0;\n        for
    (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                l.Insert(pos,
    arr[i]);\n                pos++;\n            }\n        }\n        return l;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8miow4my.cs(30,49): error CS0103: The name ''numOfDigits'' does not exist
    in the current context

    /tmp/tmp8miow4my.cs(32,48): error CS0103: The name ''numOfDigits'' does not exist
    in the current context

    /tmp/tmp8miow4my.cs(39,27): error CS0103: The name ''numOfDigits'' does not exist
    in the current context

    '
  timestamp: 1660028238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            var ones_a = Convert.ToString(a,
    2).Count(x => x == '1');\n            var ones_b = Convert.ToString(b, 2).Count(x
    => x == '1');\n            if (ones_a == ones_b) {\n                return (int)a
    - (int)b;\n            }\n            return ones_a - ones_b;\n        });\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc1ab5067f4b41368e45e99e39ca1c97>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc1ab5067f4b41368e45e99e39ca1c97>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> results = new List<long>();\n        var sorted = arr.OrderBy(x
    => CountBits(x)).ToList();\n        for (var i = sorted.Count - 1; i >= 0; i--)
    {\n            if (CountBits(sorted[i]) % 2 == 0) {\n                results.Add(sorted[i]);\n
    \           } else {\n                results.Insert(0, sorted[i]);\n            }\n
    \       }\n        return results;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmsimag2z.cs(21,39): error CS0103: The name ''CountBits'' does not exist
    in the current context

    /tmp/tmpmsimag2z.cs(22,22): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''method group'' and ''int''

    /tmp/tmpmsimag2z.cs(23,17): error CS0103: The name ''CountBits'' does not exist
    in the current context

    '
  timestamp: 1660028238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            var binA = BigInteger.Parse(Convert.ToString(a,
    2));\n            var binB = BigInteger.Parse(Convert.ToString(b, 2));\n            return
    binA.ToString().Count(c => c == '1').CompareTo(binB.ToString().Count(c => c ==
    '1'));\n        });\n        return arr;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <93ea079e10384af8a00a97325330e133>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <93ea079e10384af8a00a97325330e133>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((x, y) => {\n            if (x < 0 && y < 0) {\n                return
    (int)(x - y);\n            }\n            return (int)(Bits(x) - Bits(y));\n        });\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqhliezv5.cs(24,26): error CS0103: The name ''Bits'' does not exist in
    the current context

    /tmp/tmpqhliezv5.cs(24,36): error CS0103: The name ''Bits'' does not exist in
    the current context

    '
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort(delegate(long a, long b) {\n            int A = CountOnes(a);\n
    \           int B = CountOnes(b);\n            if (A == B) {\n                return
    (int) (a - b);\n            }\n            return A - B;\n        });\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk8v4nn88.cs(21,21): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmpk8v4nn88.cs(22,21): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> sorted = new List<long>();\n        long len = arr.Count;\n
    \       for (long i = 0; i < len; i++) {\n            sorted.Add(arr[(int)i]);\n
    \       }\n        sorted.Sort((x, y) => CountOnes(x).CompareTo(CountOnes(y)));\n
    \       return sorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgz624yul.cs(25,31): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmpgz624yul.cs(25,54): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            int aOnes = a == 0 ? 0 : Convert.ToString(a,
    2).Count(c => c == '1');\n            int bOnes = b == 0 ? 0 : Convert.ToString(b,
    2).Count(c => c == '1');\n            return aOnes == bOnes ? Math.Sign(a - b)
    : aOnes - bOnes;\n        });\n        return arr;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41d22e57b5c3441bb5cf879ee34615cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41d22e57b5c3441bb5cf879ee34615cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(num => GetOnesCount(num)).ThenBy(num => num).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw34owcam.cs(20,35): error CS0103: The name ''GetOnesCount'' does not exist
    in the current context

    '
  timestamp: 1660028238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var pairs = arr.Select(n => Tuple.Create(n, n.ToString(\"X\").Count(x
    => x == '1'))).ToList();\n        pairs.Sort((a, b) =>\n            a.Item2 !=
    b.Item2 ? a.Item2.CompareTo(b.Item2) : a.Item1.CompareTo(b.Item1));\n        return
    pairs.Select(p => p.Item1).ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f77addaa91e4e049eecd0b9d4da589a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f77addaa91e4e049eecd0b9d4da589a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // The input is not valid: contains negative value\n        if
    (arr.Any(a => a < 0)) {\n            throw new ArgumentException();\n        }\n
    \       // Get the decimal and binary value for each number\n        arr = arr.Select(a
    => {\n            var val = (decimal: a, binary: Convert.ToString(a, 2));\n            return
    val;\n        }).ToList();\n        // Sort in reverse order of number of 1s in
    their binary representation\n        arr = arr.OrderByDescending(a => a.binary.Count(c
    => c == '1')).ThenBy(a => a.decimal).ToList();\n        // Return the decimal
    values\n        return arr.Select(a => a.decimal).ToList();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxwlg48pk.cs(26,24): error CS1525: Invalid expression term ''decimal''

    /tmp/tmpxwlg48pk.cs(26,31): error CS1026: ) expected

    /tmp/tmpxwlg48pk.cs(26,31): error CS1002: ; expected

    /tmp/tmpxwlg48pk.cs(26,31): error CS1513: } expected

    /tmp/tmpxwlg48pk.cs(26,34): error CS1002: ; expected

    /tmp/tmpxwlg48pk.cs(26,34): error CS1513: } expected

    /tmp/tmpxwlg48pk.cs(26,66): error CS1002: ; expected

    /tmp/tmpxwlg48pk.cs(26,66): error CS1513: } expected

    /tmp/tmpxwlg48pk.cs(28,10): error CS1519: Invalid token '')'' in class, struct,
    or interface member declaration

    /tmp/tmpxwlg48pk.cs(30,13): error CS1519: Invalid token ''='' in class, struct,
    or interface member declaration

    /tmp/tmpxwlg48pk.cs(30,36): error CS1519: Invalid token ''('' in class, struct,
    or interface member declaration

    /tmp/tmpxwlg48pk.cs(30,39): error CS8124: Tuple must contain at least two elements.

    /tmp/tmpxwlg48pk.cs(30,39): error CS1026: ) expected

    /tmp/tmpxwlg48pk.cs(30,39): error CS1519: Invalid token ''=>'' in class, struct,
    or interface member declaration

    /tmp/tmpxwlg48pk.cs(30,56): error CS1519: Invalid token ''('' in class, struct,
    or interface member declaration

    /tmp/tmpxwlg48pk.cs(30,59): error CS8124: Tuple must contain at least two elements.

    /tmp/tmpxwlg48pk.cs(30,59): error CS1026: ) expected

    /tmp/tmpxwlg48pk.cs(30,59): error CS1519: Invalid token ''=>'' in class, struct,
    or interface member declaration

    /tmp/tmpxwlg48pk.cs(30,64): error CS1519: Invalid token ''=='' in class, struct,
    or interface member declaration

    /tmp/tmpxwlg48pk.cs(30,82): error CS1001: Identifier expected

    /tmp/tmpxwlg48pk.cs(30,82): error CS1003: Syntax error, '','' expected

    /tmp/tmpxwlg48pk.cs(30,85): error CS1003: Syntax error, '','' expected

    /tmp/tmpxwlg48pk.cs(30,87): error CS1001: Identifier expected

    /tmp/tmpxwlg48pk.cs(30,87): error CS1003: Syntax error, '','' expected

    /tmp/tmpxwlg48pk.cs(30,94): error CS1001: Identifier expected

    /tmp/tmpxwlg48pk.cs(30,95): error '
  timestamp: 1660028238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        Dictionary<long, long> dic = new Dictionary<long, long>();\n        int
    n = arr.Count;\n        for (int i = 0; i < n; i++) {\n            long num =
    arr[i];\n            long bits = 0;\n            while (num > 0) {\n                bits
    += num % 2;\n                num /= 2;\n            }\n            if (!dic.ContainsKey(bits))
    {\n                dic.Add(bits, 1);\n            } else {\n                dic[bits]
    += 1;\n            }\n        }\n        List<long>[] arr_bits = new List<long>[dic.Count];\n
    \       int i_a = 0;\n        foreach (KeyValuePair<long, long> kvp in dic) {\n
    \           arr_bits[i_a] = new List<long>();\n            arr_bits[i_a].Add(kvp.Key);\n
    \           arr_bits[i_a].Add(kvp.Value);\n            i_a++;\n        }\n        Array.Sort(arr_bits,
    delegate (List<long> x, List<long> y) {\n            if (x[0] < y[0]) return -1;\n
    \           if (x[0] > y[0]) return 1;\n            return 0;\n        });\n        List<long>
    sorted = new List<long>();\n        for (int i = 0; i < dic.Count; i++) {\n            for
    (int j = 0; j < arr_bits[i][1]; j++) {\n                sorted.Add(arr[j]);\n
    \           }\n            int k = 0;\n            for (int j = (int)arr_bits[i][1];
    j < n; j++) {\n                sorted.Add(arr[j]);\n                arr[k] = arr[j];\n
    \               k++;\n            }\n            n -= (int)arr_bits[i][1];\n        }\n
    \       return sorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38bddf2cd6824dc4854cd8a12f1f5433>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38bddf2cd6824dc4854cd8a12f1f5433>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028239
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1599c856f0d4375a3086d8c73128dc8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1599c856f0d4375a3086d8c73128dc8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028239
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        //\n        // This is not a good solution, I just wanted to try
    to learn how to use\n        // sort and compare in c#. It doesn't work for values
    with more than 63\n        // bits and since this is long, it only counts 32 bits.\n
    \       //\n        arr.Sort((left, right) => {\n            var sleft = Convert.ToString(left,
    2);\n            var sright = Convert.ToString(right, 2);\n            if (sleft.Where(ch
    => ch == '1').Count() == sright.Where(ch => ch == '1').Count()) {\n                return
    left.CompareTo(right);\n            }\n            return sleft.Where(ch => ch
    == '1').Count().CompareTo(sright.Where(ch => ch == '1').Count());\n        });\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1fe640fdbf9c4d49960ea3a9372c730a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1fe640fdbf9c4d49960ea3a9372c730a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => GetOneCount(x)).ThenBy(x => x).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp78nk3wk7.cs(20,33): error CS0103: The name ''GetOneCount'' does not exist
    in the current context

    '
  timestamp: 1660028239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        int[] sort_list = arr.Select(BitConverter.GetBytes).Select(b =>
    b.Where(byte_ => byte_ == 1).Count()).ToArray();\n        int[] index_list = new
    int[arr.Count];\n        for (int i = 0; i < arr.Count; i++) index_list[i] = i;\n
    \       Array.Sort(sort_list, index_list);\n        int j = 0;\n        for (int
    i = 1; i < sort_list.Length; i++) {\n            if (sort_list[i] == sort_list[i
    - 1]) continue;\n            Array.Sort(arr.ToArray(), index_list[j], i - j);\n
    \           j = i;\n        }\n        Array.Sort(arr.ToArray(), index_list[j],
    arr.Count - j);\n        return arr;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <433f140f1db9422da71f80d722f52bad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <433f140f1db9422da71f80d722f52bad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028239
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        Dictionary<long, long> hashtable = new Dictionary<long, long>();\n
    \       foreach (long n in arr) {\n            long i = n;\n            long b
    = 0;\n            while (i > 0) {\n                b += i % 2;\n                i
    /= 2;\n            }\n            hashtable[n] = b;\n        }\n        arr.Sort((a,
    b) => {\n            if (hashtable[a] < hashtable[b]) return -1;\n            if
    (hashtable[a] > hashtable[b]) return 1;\n            if (a < b) return -1;\n            if
    (a > b) return 1;\n            return 0;\n        });\n        return arr;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <add2e3aa2ae1464e98cdd7264f9834fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <add2e3aa2ae1464e98cdd7264f9834fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => BitCount(x)).ThenBy(x => x).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp83n012x7.cs(20,33): error CS0103: The name ''BitCount'' does not exist
    in the current context

    '
  timestamp: 1660028239
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        //return arr.OrderBy(n => Convert.ToString(n, 2).Count(c => c
    == '1')).ThenBy(n => n).ToList();\n        return arr.OrderBy(n => Convert.ToString(n,
    2).Count(c => c == '1')).ThenBy(n => n).ToList();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3748f82e9d1441eb970108b3f548d4c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3748f82e9d1441eb970108b3f548d4c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> outlist = new List<long>();\n        var myDict = new
    Dictionary<long, int>();\n        int count = 0;\n        // dictionary to hold
    number of 1's\n        foreach (long item in arr) {\n            if (item > 0)
    {\n                count = 0;\n                while (item > 0) {\n                    count++;\n
    \                   item = item / 2;\n                }\n                myDict.Add(item,
    count);\n            }\n        }\n        foreach (long x in arr) {\n            //
    if you have a number with more ones than another number, put it first\n            //
    if you have a number with the same number of ones as another number,\n            //
    put the smaller number first. If a number has zero ones, just put it\n            //
    at the end of the list\n            if (myDict[x] > 0) {\n                // if
    the list is empty, or you have more ones than any other number\n                //
    already in the list, place the number at the beginning\n                if (outlist.Count
    == 0 || myDict[x] > myDict[outlist[0]]) {\n                    outlist.Insert(0,
    x);\n                }\n                // otherwise, go through the list to find
    where it should go\n                else {\n                    for (int i = 1;
    i < outlist.Count; i++) {\n                        // if the number of ones of
    the number is less than the number\n                        // in the list, insert
    the number in that position\n                        if (myDict[x] < myDict[outlist[i]])
    {\n                            outlist.Insert(i, x);\n                            break;\n
    \                       }\n                        // if the number of ones of
    the number is equal to the number\n                        // in the list, and
    the number is smaller than the number in the\n                        // list,
    insert the number in that position\n                        else if (myDict[x]
    == myDict[outlist[i]] && x < outlist[i]) {\n                            outlist.Insert(i,
    x);\n                            break;\n                        }\n                        //
    otherwise, go to the next number in the list\n                        else {\n
    \                           continue;\n                        }\n                    }\n
    \              \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprhathp9k.cs(68,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmprhathp9k.cs(79,2): error CS1513: } expected

    '
  timestamp: 1660028238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // TODO\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00032] in <3018289367344d189cb198432ad7eb82>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00032] in <3018289367344d189cb198432ad7eb82>:0
    \n"
  stdout: ''
  timestamp: 1660028239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var result = arr.Select(x => Tuple.Create(x, HammingWeight(x))).OrderBy(x
    => x.Item2).ThenBy(x => x.Item1).Select(x => x.Item1).ToList();\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd21frhb4.cs(20,54): error CS0103: The name ''HammingWeight'' does not
    exist in the current context

    '
  timestamp: 1660028239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(item => Convert.ToString(item, 2), new Comparison<string>((s1,
    s2) => {\n            if (s1.Count(c => c == '1') < s2.Count(c => c == '1')) {\n
    \               return -1;\n            } else if (s1.Count(c => c == '1') > s2.Count(c
    => c == '1')) {\n                return 1;\n            } else {\n                if
    (s1.CompareTo(s2) < 0) {\n                    return -1;\n                } else
    if (s1.CompareTo(s2) > 0) {\n                    return 1;\n                }
    else {\n                    return 0;\n                }\n            }\n        })).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptotofh62.cs(20,63): error CS1503: Argument 3: cannot convert from ''System.Comparison<string>''
    to ''System.Collections.Generic.IComparer<string>''

    '
  timestamp: 1660028239
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var sorted = from num in arr\n                     orderby Convert.ToString(num,
    2).Count(x => x == '1'), num\n                     select num;\n        return
    sorted.ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eadefa265c304e40b320774399dc0deb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eadefa265c304e40b320774399dc0deb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        //// sorter func. sort by ones\n        //var list = arr.Select(x
    => {\n        //    var bits = new BitArray(BitConverter.GetBytes(x)).Cast<bool>().ToArray();\n
    \       //    return new {\n        //        count = bits.Count(b => b),\n        //
    \       value = x\n        //    };\n        //}).OrderBy(x => x.count).ThenBy(x
    => x.value).ToList();\n        //return list.Select(x => x.value).ToList();\n\n
    \       //// hacky solution\n        //var list = arr.Select(x => {\n        //
    \   var bits = new BitArray(BitConverter.GetBytes(x)).Cast<bool>().ToArray();\n
    \       //    return new {\n        //        count = bits.Count(b => b),\n        //
    \       value = x\n        //    };\n        //}).OrderBy(x => x.count).ThenBy(x
    => x.value).ToList();\n        //return list.Select(x => x.value).ToList();\n\n
    \       //// working solution\n        //var list = arr.Select(x => {\n        //
    \   var bits = new BitArray(BitConverter.GetBytes(x)).Cast<bool>().ToArray();\n
    \       //    return new {\n        //        count = bits.Count(b => b),\n        //
    \       value = x\n        //    };\n        //}).OrderBy(x => x.count).ThenBy(x
    => x.value).ToList();\n        //return list.Select(x => x.value).ToList();\n\n
    \       //// working solution\n        //var list = arr.Select(x => {\n        //
    \   var bits = new BitArray(BitConverter.GetBytes(x)).Cast<bool>().ToArray();\n
    \       //    return new {\n        //        count = bits.Count(b => b),\n        //
    \       value = x\n        //    };\n        //}).OrderBy(x => x.count).ThenBy(x
    => x.value).ToList();\n        //return list.Select(x => x.value).ToList();\n\n
    \       //// working solution\n        //var\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi7sfi4y5.cs(19,30): error CS0161: ''Problem.SortArray(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1660028239
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort(\n            (a, b) => {\n                var bitA =
    Convert.ToString(a, 2);\n                var bitB = Convert.ToString(b, 2);\n
    \               var countA = bitA.Count(x => x == '1');\n                var countB
    = bitB.Count(x => x == '1');\n                if (countA == countB) {\n                    return
    a.CompareTo(b);\n                }\n                return countA.CompareTo(countB);\n
    \           }\n        );\n        return arr;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <42bba1ede295478593ea146f58e5d513>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <42bba1ede295478593ea146f58e5d513>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => (new OnesAndDecimals(a)).CompareTo(new OnesAndDecimals(b)));\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoixosoej.cs(20,33): error CS0246: The type or namespace name ''OnesAndDecimals''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpoixosoej.cs(20,67): error CS0246: The type or namespace name ''OnesAndDecimals''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660028239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // This sortArray function uses the custom IComparer defined below\n
    \       arr.Sort(new SortByNumberOfOnes());\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyx19nrlb.cs(21,22): error CS0246: The type or namespace name ''SortByNumberOfOnes''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660028239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => CountOnes(x))\n                  .ThenBy(x
    => x)\n                  .ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbqmfmpb_.cs(20,33): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        int[] ones = new int[arr.Count];\n        for (int i = 0; i <
    arr.Count; i++) {\n            ones[i] = (int)toOnes(arr[i]);\n        }\n        return
    quicksort(arr, ones, 0, arr.Count - 1);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvduktem4.cs(22,28): error CS0103: The name ''toOnes'' does not exist in
    the current context

    /tmp/tmpvduktem4.cs(24,16): error CS0103: The name ''quicksort'' does not exist
    in the current context

    '
  timestamp: 1660028239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        if (arr == null) {\n            return null;\n        }\n        arr.Sort((x,
    y) => {\n            long xones = CountBits(x);\n            long yones = CountBits(y);\n
    \           if (xones < yones) {\n                return -1;\n            } else
    if (xones > yones) {\n                return 1;\n            } else {\n                return
    x.CompareTo(y);\n            }\n        });\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8llbdutk.cs(24,26): error CS0103: The name ''CountBits'' does not exist
    in the current context

    /tmp/tmp8llbdutk.cs(25,26): error CS0103: The name ''CountBits'' does not exist
    in the current context

    '
  timestamp: 1660028239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        long[] onesList = new long[arr.Count];\n
    \       int[] indexList = new int[arr.Count];\n        long[] sortedOnesList =
    new long[arr.Count];\n        long[] reorderedList = new long[arr.Count];\n        int[]
    reorderedIndexList = new int[arr.Count];\n        int listLength = 0;\n        long
    tempLong = 0;\n        int tempInt = 0;\n        for (int i = 0; i < arr.Count;
    i++) {\n            onesList[i] = arr[i];\n            sortedOnesList[i] = arr[i];\n
    \           indexList[i] = i;\n            listLength = i;\n        }\n        for
    (int i = 0; i < listLength; i++) {\n            for (int j = 0; j < listLength;
    j++) {\n                if (onesList[i] < onesList[j]) {\n                    tempLong
    = onesList[i];\n                    onesList[i] = onesList[j];\n                    onesList[j]
    = tempLong;\n                    tempInt = indexList[i];\n                    indexList[i]
    = indexList[j];\n                    indexList[j] = tempInt;\n                }\n
    \           }\n        }\n        for (int i = 0; i < listLength; i++) {\n            onesList[i]
    = Ones(onesList[i]);\n        }\n        for (int i = 0; i < listLength; i++)
    {\n            for (int j = 0; j < listLength; j++) {\n                if (onesList[i]
    < onesList[j]) {\n                    tempLong = onesList[i];\n                    onesList[i]
    = onesList[j];\n                    onesList[j] = tempLong;\n                    tempInt
    = indexList[i];\n                    indexList[i] = indexList[j];\n                    indexList[j]
    = tempInt;\n                }\n            }\n        }\n        int finalListIndex
    = 0;\n        for (int i = 0; i < listLength; i++) {\n            finalListIndex
    = 0;\n            for (int j = 0; j < listLength; j++) {\n                if\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl27c0dk3.cs(66,19): error CS1003: Syntax error, ''('' expected

    /tmp/tmpl27c0dk3.cs(66,19): error CS1525: Invalid expression term ''}''

    /tmp/tmpl27c0dk3.cs(66,19): error CS1026: ) expected

    /tmp/tmpl27c0dk3.cs(66,19): error CS1002: ; expected

    /tmp/tmpl27c0dk3.cs(68,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpl27c0dk3.cs(79,2): error CS1513: } expected

    '
  timestamp: 1660028239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        //          .........\n        // also what we do with negative
    numbers\n        return arr.OrderBy(n => CountOnes(n)).ThenBy(n => n).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv14d7r9_.cs(22,33): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1660028239
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Count the number of bits set in each number\n        // This
    will be our sort key\n        var bitCount = new Dictionary<long, int>();\n        foreach
    (var n in arr) {\n            var n1 = n;\n            var count = 0;\n            while
    (n1 > 0) {\n                count += (int)(n1 & 1);\n                n1 >>= 1;\n
    \           }\n            bitCount[n] = count;\n        }\n        // Sort the
    list based on the bit count\n        arr.Sort((a, b) => bitCount[a] == bitCount[b]
    ?\n            a.CompareTo(b) : bitCount[a].CompareTo(bitCount[b]));\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d672404decd646d5b365e3d940a5db74>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d672404decd646d5b365e3d940a5db74>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028240
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((l1, l2) => {\n            int n1 = CountBits(l1);\n
    \           int n2 = CountBits(l2);\n            if (n1 != n2) {\n                return
    n1 - n2;\n            }\n            return (int)l1 - (int)l2;\n        });\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpktaxioq4.cs(21,22): error CS0103: The name ''CountBits'' does not exist
    in the current context

    /tmp/tmpktaxioq4.cs(22,22): error CS0103: The name ''CountBits'' does not exist
    in the current context

    '
  timestamp: 1660028239
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var test = arr.OrderBy(x => Convert.ToString(x, 2).Count(b =>
    b == '1')).ThenBy(x => x).ToList();\n        return test;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c7885c88d894f98ab83c1acbf453123>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c7885c88d894f98ab83c1acbf453123>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028240
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acd8283f197d41939165584662abd347>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acd8283f197d41939165584662abd347>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        int i,j;\n        long temp;\n        for (i = 0; i < arr.Count
    - 1; i++) {\n            for (j = 0; j < arr.Count - i - 1; j++) {\n                if
    (arr[j] > arr[j + 1]) {\n                    temp = arr[j];\n                    arr[j]
    = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n
    \       }\n        return arr;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5119a1089ee246a58133d6a157d7c4f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5119a1089ee246a58133d6a157d7c4f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028240
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // for each array element\n        // compute the number of 1s
    in the binary representation\n        // sort based on those values\n        //
    this is O(n^2) because it's a simple sort\n        var sorted = arr.OrderBy(x
    => {\n            var ones = (new BigInteger(x)).ToString(2).Count(c => c == '1');\n
    \           return new { Ones = ones, Decimal = x };\n        });\n        return
    sorted.Select(x => x.Decimal).ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkydfuz5w.cs(25,53): error CS1503: Argument 1: cannot convert from ''int''
    to ''System.IFormatProvider''

    '
  timestamp: 1660028240
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var sorted = from num in arr\n                     orderby (from
    bit in Convert.ToString(num, 2)\n                              where bit == '1'\n
    \                             select bit).Count(), num\n                     select
    num;\n        return sorted.ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671027a9207f4eae8a6fe7e980876768>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <671027a9207f4eae8a6fe7e980876768>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028240
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // return arr.OrderBy(i => CountOnes(i)).ThenBy(i => i).ToList();\n
    \       return arr.OrderBy(i => BitCount(i)).ThenBy(i => i).ToList();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgzhlrba6.cs(21,33): error CS0103: The name ''BitCount'' does not exist
    in the current context

    '
  timestamp: 1660028240
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // for each number in the array\n        //     find the binary
    rep.\n        //     for each digit in binary rep.\n        //         count 1s\n
    \       //     add number to list of tuples (number, count of 1s)\n        //
    sort list\n        // return sorted array\n        var numCounts = new List<(long
    num, int count)>();\n        foreach (var num in arr) {\n            var binaryRep
    = new StringBuilder();\n            var n = num;\n            while (n > 0) {\n
    \               binaryRep.Append(n % 2);\n                n /= 2;\n            }\n
    \           var count = binaryRep.ToString().Count(c => c == '1');\n            numCounts.Add((num,
    count));\n        }\n        var sortedNums = numCounts.OrderBy(n => n.count).ThenBy(n
    => n.num).Select(n => n.num).ToList();\n        return sortedNums;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c688d54c7bbe433093abf98203bd16b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c688d54c7bbe433093abf98203bd16b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028240
