name: HumanEval_44_change_base
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Change numerical base of input number x to base.\n    // return\
  \ string representation after the conversion.\n    // base numbers are less than\
  \ 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>> ChangeBase((8L),\
  \ (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n    // (\"111\")\n\
  \    public static string ChangeBase(long x, long numBase) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
  \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\"\
  )));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L),\
  \ (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"\
  1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L),\
  \ (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\"\
  )));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L),\
  \ (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\"\
  )));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n}\n"
completions: ["        var sb = new StringBuilder();\n        long rest = x;\n   \
    \     while (rest != 0) {\n            long digit = rest % numBase;\n        \
    \    rest = rest / numBase;\n            sb.Append(digit);\n        }\n      \
    \  return sb.ToString();", "        var ret = new StringBuilder();\n        do\
    \ {\n            ret.Append(x % numBase);\n            x /= numBase;\n       \
    \ } while (x > 0);\n        return new string(ret.ToString().Reverse().ToArray());",
  "        var res = \"\";\n        while (x > 0) {\n            res = (x % numBase).ToString()\
    \ + res;\n            x /= numBase;\n        }\n        return res;", "      \
    \  string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;", "      \
    \  string ret = \"\";\n        while (x != 0) {\n            ret = (((int)(x %\
    \ numBase))).ToString() + ret;\n            x /= numBase;\n        }\n       \
    \ return ret;", "        var result = new List<long>();\n        do {\n      \
    \      result.Add(x % numBase);\n            x /= numBase;\n        } while (x\
    \ > 0);\n        result.Reverse();\n        return string.Join(\"\", result);",
  "        var sb = new StringBuilder();\n        do {\n            var c = x % numBase;\n\
    \            sb.Append(c);\n            x /= numBase;\n        } while (x > 0);\n\
    \        return new string(sb.ToString().Reverse().ToArray());", "        string\
    \ ret = \"\";\n        while (x > 0) {\n            long current = x % numBase;\n\
    \            x /= numBase;\n            ret = Convert.ToString(current) + ret;\n\
    \        }\n        return ret;", "        //result = new string()\n        var\
    \ result = new StringBuilder();\n        while (x > 0) {\n            var reminder\
    \ = x % numBase;\n            result.Append(reminder);\n            x = x / numBase;\n\
    \        }\n        // return reversed(result)\n        return new string(result.ToString().Reverse().ToArray());",
  "        if (x < numBase) {\n            return x.ToString();\n        }\n     \
    \   else {\n            return ChangeBase(x / numBase, numBase) + (x % numBase).ToString();\n\
    \        }", "        var sb = new StringBuilder();\n        while (x > 0) {\n\
    \            sb.Append(x % numBase);\n            x /= numBase;\n        }\n \
    \       var s = sb.ToString();\n        var ch = s.ToCharArray();\n        Array.Reverse(ch);\n\
    \        return new string(ch);", "        var ret = new List<long>();\n     \
    \   while (x != 0) {\n            ret.Add(x % numBase);\n            x /= numBase;\n\
    \        }\n        ret.Reverse();\n        return new string(ret.Select(d =>\
    \ d.ToString()[0]).ToArray());", "        var res = new StringBuilder();\n   \
    \     while (x > 0) {\n            res.Append(x % numBase);\n            x /=\
    \ numBase;\n        }\n        return res.ToString();", "        // in case of\
    \ negative number.\n        // convert to positive.\n        string minus_flag\
    \ = \"\";\n        if (x < 0) {\n            minus_flag = \"-\";\n           \
    \ x = -x;\n        }\n        // create the string for base num_base,\n      \
    \  // and proceed character by character,\n        // starting with the back of\
    \ the string.\n        // if x is zero, there is only one character.\n       \
    \ string str_num = \"\";\n        while (x > 0) {\n            str_num = str_num.Insert(0,((char)(x\
    \ % numBase + '0')).ToString());\n            x /= numBase;\n        }\n     \
    \   if (str_num == \"\") {\n            str_num = \"0\";\n        }\n        //\
    \ restore minus if necessary.\n        str_num = minus_flag + str_num;\n     \
    \   return str_num;", "        string reversed = \"\";\n        while (x > 0)\
    \ {\n            reversed += (x % numBase).ToString();\n            x /= numBase;\n\
    \        }\n        char[] arr = reversed.ToCharArray();\n        Array.Reverse(arr);\n\
    \        return new string(arr);", "        //x = X\n        //numBase = B\n \
    \       //X' = sum{X % B^i * B^(digits - i)}, i = 0 to digits - 1\n        //digits\
    \ = ln(X) / ln(B)\n        //if B^digits < X, digits = digits + 1\n        string\
    \ result = \"\";\n        double digits = Math.Log(x) / Math.Log(numBase);\n \
    \       if (Math.Pow(numBase, digits) < x)\n            digits = digits + 1;\n\
    \        for (int i = 0; i < digits; i++) {\n            long temp = x % (long)Math.Pow(numBase,\
    \ i + 1);\n            //int temp = x % (int)Math.Pow(numBase, i + 1);\n     \
    \       long temp2 = temp / (long)Math.Pow(numBase, i);\n            //int temp2\
    \ = temp / (int)Math.Pow(numBase, i);\n            result = temp2.ToString() +\
    \ result;\n        }\n        return result;", "        StringBuilder sb = new\
    \ StringBuilder();\n        // (base_num - 1) because we want to represent [0,\
    \ n] for base n\n        // and [0, 9] for decimal base.\n        // we are representing\
    \ a number x in numBase where 0 <= x < numBase\n        var max_num = numBase\
    \ - 1;\n        while (x > 0) {\n            var digit = x % numBase;\n      \
    \      sb.Append(digit);\n            x = x / numBase;\n        }\n        return\
    \ sb.ToString();", "        string res = \"\";\n        while (x > 0) {\n    \
    \        long amari = x % numBase;\n            x /= numBase;\n            res\
    \ = string.Format(\"{0}{1}\", amari, res);\n        }\n        return res;", " \
    \       string retVal = \"\";\n        while (x > 0) {\n            retVal = (x\
    \ % numBase).ToString() + retVal;\n            x /= numBase;\n        }\n    \
    \    return retVal;", "        List<char> digits = new List<char>();\n       \
    \ while (x > 0) {\n            digits.Add((char)((x % numBase) + '0'));\n    \
    \        x /= numBase;\n        }\n        digits.Reverse();\n        return new\
    \ string(digits.ToArray());", "        List<long> digits = new List<long>();\n\
    \        while (x > 0) {\n            digits.Add(x % numBase);\n            x\
    \ /= numBase;\n        }\n        digits.Reverse();\n        return String.Join(\"\
    \", digits);", "        string ret = \"\";\n        while (x > 0) {\n        \
    \    ret = (x % numBase).ToString() + ret;\n            x /= numBase;\n      \
    \  }\n        return ret;", "        StringBuilder res = new StringBuilder();\n\
    \        while (x > 0) {\n            res.Append(x % numBase);\n            x\
    \ /= numBase;\n        }\n        res.Reverse();\n        return res.ToString();",
  "        var y = new List<char>();\n        while (x != 0) {\n            y.Add((char)(x\
    \ % numBase + '0'));\n            x /= numBase;\n        }\n        y.Reverse();\n\
    \        return new string(y.ToArray());", "        if (x == 0) {\n          \
    \  return \"0\";\n        }\n        var result = new StringBuilder();\n     \
    \   while (x > 0) {\n            long digit = x % numBase;\n            x /= numBase;\n\
    \            result.Insert(0, digit);\n        }\n        return result.ToString();",
  "        if (x == 0) {\n            return \"0\";\n        }\n\n        string result\
    \ = \"\";\n        while (x > 0) {\n            result = (x % numBase).ToString()\
    \ + result;\n            x /= numBase;\n        }\n        return result;", " \
    \       StringBuilder sb = new StringBuilder();\n        while (x != 0) {\n  \
    \          sb.Append(x % numBase);\n            x /= numBase;\n        }\n   \
    \     char[] arr = sb.ToString().ToCharArray();\n        Array.Reverse(arr);\n\
    \        return new string(arr);", "        var baseDigits = new List<long>();\n\
    \        do {\n            var b = x % numBase;\n            baseDigits.Add(b);\n\
    \            x = x / numBase;\n        } while (x > 0);\n        var builder =\
    \ new StringBuilder();\n        foreach (var i in baseDigits)\n            builder.Append(i);\n\
    \        var ret = builder.ToString();\n        return ret;", "        var xx\
    \ = new List<long>();\n        while (x > 0) {\n            xx.Add(x % numBase);\n\
    \            x /= numBase;\n        }\n        var ans = \"\";\n        foreach\
    \ (var i in xx) {\n            ans += i.ToString();\n        }\n        return\
    \ string.Join(\"\", ans.Reverse());", "        string result = \"\";\n       \
    \ while (x > 0) {\n            result = (x % numBase).ToString() + result;\n \
    \           x /= numBase;\n        }\n        return result;", "        string\
    \ res = \"\";\n        do {\n            res = (x % numBase).ToString() + res;\n\
    \            x /= numBase;\n        } while (x > 0);\n        return res;", " \
    \       string ans = \"\";\n        for (long d = x; d > 0; d /= numBase) {\n\
    \            ans = (d % numBase).ToString() + ans;\n        }\n        return\
    \ ans;", "        StringBuilder num = new StringBuilder();\n        while (x >\
    \ 0) {\n            num.Append(x % numBase);\n            x /= numBase;\n    \
    \    }\n        num.Reverse();\n        return num.ToString();", "        int[]\
    \ revdigits = new int[32];\n        int ndigits = 0;\n        while (x > 0) {\n\
    \            revdigits[ndigits++] = (int)(x % numBase);\n            x /= numBase;\n\
    \        }\n        string ret = \"\";\n        for (int i = ndigits - 1; i >=\
    \ 0; i--) {\n            ret += revdigits[i].ToString();\n        }\n        return\
    \ ret;", "        string result = \"\";\n        int c = 0;\n        while (x\
    \ > 0) {\n            long r = x % numBase;\n            result = r.ToString()\
    \ + result;\n            x = x / numBase;\n            c += 1;\n        }\n  \
    \      return result;", "        int digits = 0;\n        for (long v = x; v >\
    \ 0; v /= numBase) {\n            digits++;\n        }\n        char[] chars =\
    \ new char[digits];\n        for (int i = 0; i < digits; i++) {\n            long\
    \ v = x % numBase;\n            chars[digits - i - 1] = (char)('0' + v);\n   \
    \         x /= numBase;\n        }\n        return new string(chars);", "    \
    \    string result = \"\";\n        while (x > 0) {\n            long r = x %\
    \ numBase;\n            result = r.ToString() + result;\n            x /= numBase;\n\
    \        }\n        return result;", "        var ret = new List<char>();\n  \
    \      while (x > 0) {\n            ret.Add((char)('0' + (x % numBase)));\n  \
    \          x /= numBase;\n        }\n        return new string(ret.ToArray());",
  "        var result = \"\";\n        var div = x;\n        var mod = 0L;\n     \
    \   while (div > 0) {\n            mod = div % numBase;\n            div = div\
    \ / numBase;\n            result = mod.ToString() + result;\n        }\n     \
    \   return result;", "        string ret = \"\";\n        while (x > 0) {\n  \
    \          ret = (x % numBase).ToString() + ret;\n            x /= numBase;\n\
    \        }\n        return ret;", "        string ret = \"\";\n        while (x\
    \ > 0) {\n            ret = (x % numBase).ToString() + ret;\n            x /=\
    \ numBase;\n        }\n        return ret;", "        List<long> res = new List<long>();\n\
    \        while (x > 0) {\n            res.Add(x % numBase);\n            x /=\
    \ numBase;\n        }\n        res.Reverse();\n        return new string(res.Select(i\
    \ => (char)('0' + i)).ToArray());", "        int baseLength = 1;\n        long\
    \ tmp = numBase;\n        while (tmp > 9) {\n            tmp /= 10;\n        \
    \    baseLength++;\n        }\n        char[] arr = new char[baseLength];\n  \
    \      for (int i = 0; i < baseLength; i++) {\n            arr[i] = (char)((x\
    \ % numBase) + '0');\n            x /= numBase;\n        }\n        return new\
    \ string(arr);", "        if (x == 0) {\n            return \"0\";\n        }\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n  \
    \          sb.Append(x % numBase);\n            x /= numBase;\n        }\n   \
    \     return new string(sb.ToString().Reverse().ToArray());", "        string\
    \ reversed = \"\";\n        long n = x;\n        while (n > 0) {\n           \
    \ long nn = n / numBase;\n            long d = n - nn * numBase;\n           \
    \ n = nn;\n            reversed += d.ToString();\n        }\n        char[] array\
    \ = reversed.ToCharArray();\n        Array.Reverse(array);\n        return new\
    \ string(array);", "        var sb = new StringBuilder();\n        for (; x >\
    \ 0; x /= numBase) {\n            sb.Append(x % numBase);\n        }\n       \
    \ return new string(sb.ToString().Reverse().ToArray());", "        var sb = new\
    \ StringBuilder();\n        while (x > 0) {\n            var d = x % numBase;\n\
    \            sb.Append(d);\n            x /= numBase;\n        }\n        return\
    \ sb.ToString();", "        var dict = new Dictionary<int, char>();\n        for\
    \ (var i = 0; i < 10; i++) {\n            dict[i] = i.ToString()[0];\n       \
    \ }\n        for (var i = 10; i < 16; i++) {\n            dict[i] = (char)('A'\
    \ + i - 10);\n        }\n        var ans = new StringBuilder();\n        while\
    \ (x > 0) {\n            ans.Append(dict[(int)(x % numBase)]);\n            x\
    \ /= numBase;\n        }\n        return ans.ToString();", "        string ret\
    \ = \"\";\n        do {\n            ret = (x % numBase).ToString() + ret;\n \
    \           x /= numBase;\n        } while (x > 0);\n        return ret;", " \
    \       string s = \"\";\n        while (x > 0) {\n            s = (x % numBase).ToString()\
    \ + s;\n            x /= numBase;\n        }\n        return s;", "        //\
    \ First convert to base 10.\n        string s = null;\n        while (x != 0)\
    \ {\n            long r = x % 10;\n            x /= 10;\n            s = r.ToString()\
    \ + s;\n        }\n        // Now convert from base 10 to base numBase.\n    \
    \    long base10 = long.Parse(s);\n        s = null;\n        while (base10 !=\
    \ 0) {\n            long r = base10 % numBase;\n            base10 /= numBase;\n\
    \            s = r.ToString() + s;\n        }\n        return s;", "        List<long>\
    \ result = new List<long>();\n        for (long i = 0; i < 100000; i++) {\n  \
    \          long rem = x % numBase;\n            result.Add(rem);\n           \
    \ x = x / numBase;\n            if (x == 0) break;\n        }\n        result.Reverse();\n\
    \        return string.Join(\"\", result);", "        StringBuilder result = new\
    \ StringBuilder();\n        while (x > 0) {\n            result.Append(x % numBase);\n\
    \            x /= numBase;\n        }\n        return string.Join(\"\", result.ToString().Reverse());",
  "        // x is a positive number\n        // numBase is a positive integer\n \
    \       // returns string representation of x in numBase\n        // print(ChangeBase(8,\
    \ 3))\n        // >>> \"22\"\n        if (x == 0) {\n            return \"0\"\
    ;\n        }\n        StringBuilder sb = new StringBuilder();\n        while (x\
    \ > 0) {\n            sb.Append(x % numBase);\n            x /= numBase;\n   \
    \     }\n        return Reverse(sb.ToString());", "        long f = 1;\n     \
    \   List<long> digits = new List<long>();\n        while (f <= x) {\n        \
    \    digits.Add((x / f) % numBase);\n            f *= numBase;\n        }\n  \
    \      string s = \"\";\n        for (int i = digits.Count - 1; i >= 0; i--) {\n\
    \            s += digits[i].ToString();\n        }\n        return s;", "    \
    \    if (x < numBase) {\n            return x.ToString();\n        }\n       \
    \ else {\n            return ChangeBase(x / numBase, numBase) + (x % numBase).ToString();\n\
    \        }", "        string result = \"\";\n        while (x > 0) {\n       \
    \     result = (x % numBase).ToString() + result;\n            x /= numBase;\n\
    \        }\n        return result;", "        if (x == 0) return \"0\";\n    \
    \    string d = \"\";\n        long q = x;\n        while (q > 0) {\n        \
    \    long i = q % numBase;\n            q = q / numBase;\n            d = i.ToString()\
    \ + d;\n        }\n        return d;", "        string output = \"\";\n      \
    \  for (long i = x; i > 0; i /= numBase) {\n            output = (i % numBase).ToString()\
    \ + output;\n        }\n        return output;", "        string result = \"\"\
    ;\n        while (x > 0) {\n            long r = x % numBase;\n            x /=\
    \ numBase;\n            result = r.ToString() + result;\n        }\n        return\
    \ result;", "        List<long> digits = new List<long>();\n        while (x >\
    \ 0) {\n            digits.Add(x % numBase);\n            x /= numBase;\n    \
    \    }\n        digits.Reverse();\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (var i in digits) {\n            sb.Append(i);\n        }\n \
    \       return sb.ToString();", "        if (x == 0) {\n            return \"\
    0\";\n        }\n        var result = new List<long>();\n        while (x > 0)\
    \ {\n            var r = x % numBase;\n            result.Add(r);\n          \
    \  x /= numBase;\n        }\n        result.Reverse();\n        return string.Join(\"\
    \", result);", "        var result = new StringBuilder();\n        do {\n    \
    \        result.Append(x % numBase);\n            x /= numBase;\n        } while\
    \ (x > 0);\n        return result.ToString();", "        string result = \"\"\
    ;\n        while (x > 0) {\n            var remainder = x % numBase;\n       \
    \     result = remainder.ToString() + result;\n            x /= numBase;\n   \
    \     }\n        return result;", "        string s = \"\";\n        while (x\
    \ > 0) {\n            s = s + x % numBase;\n            x = x / numBase;\n   \
    \     }\n        var result = s.Reverse().ToArray();\n        return new string(result);",
  "        if (x < numBase) return x.ToString();\n        var result = ChangeBase(x\
    \ / numBase, numBase);\n        var digit = x % numBase;\n        return result\
    \ + digit.ToString();", "        string ret = \"\";\n        while (x > 0) {\n\
    \            ret = x % numBase + ret;\n            x /= numBase;\n        }\n\
    \        return ret;", "        int base_digit = (int) numBase;\n        var sb\
    \ = new StringBuilder();\n        while (x != 0) {\n            int rem = (int)\
    \ (x % base_digit);\n            sb.Append(rem);\n            x /= base_digit;\n\
    \        }\n        sb.Reverse();\n        return sb.ToString();", "        string\
    \ outstr = \"\";\n        while (x > 0) {\n            outstr = (x % numBase).ToString()\
    \ + outstr;\n            x /= numBase;\n        }\n        return outstr;", " \
    \       StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n   \
    \         sb.Append(x % numBase);\n            x /= numBase;\n        }\n    \
    \    return sb.ToString();", "        string ret = \"\";\n        while (x > 0)\
    \ {\n            ret = (x % numBase).ToString() + ret;\n            x /= numBase;\n\
    \        }\n        return ret;", "        var b = new StringBuilder();\n    \
    \    var div = x;\n        var mod = 0L;\n        while (div != 0) {\n       \
    \     mod = div % numBase;\n            div = div / numBase;\n            b.Append(mod);\n\
    \        }\n        return string.Join(\"\", b.ToString().Reverse());", "    \
    \    var sb = new StringBuilder();\n        do {\n            var rest = x % numBase;\n\
    \            sb.Append(rest);\n            x /= numBase;\n        } while (x >\
    \ 0);\n        var ans = sb.ToString();\n        Array.Reverse(ans.ToCharArray());\n\
    \        return ans;", "        Debug.Assert(numBase < 10);\n        var a = new\
    \ List<char>();\n        while (x != 0) {\n            a.Add((char)('0' + (x %\
    \ numBase)));\n            x /= numBase;\n        }\n        a.Reverse();\n  \
    \      return new string(a.ToArray());", "        if (x < 0 || numBase < 2) {\n\
    \            throw new ArgumentException();\n        }\n        if (x == 0) {\n\
    \            return \"0\";\n        }\n        var sb = new StringBuilder();\n\
    \        while (x > 0) {\n            var remainder = x % numBase;\n         \
    \   x /= numBase;\n            sb.Append(remainder);\n        }\n        return\
    \ ReverseString(sb.ToString());", "        var result = \"\";\n        while (x\
    \ > 0) {\n            var rest = x % numBase;\n            result = rest.ToString()\
    \ + result;\n            x /= numBase;\n        }\n        return result;", " \
    \       StringBuilder sb = new StringBuilder();\n        for (long i = x; i >\
    \ 0; i /= numBase) {\n            sb.Append(i % numBase);\n        }\n       \
    \ return sb.ToString();", "        StringBuilder sb = new StringBuilder();\n \
    \       while (x > 0) {\n            sb.Append(x % numBase);\n            x /=\
    \ numBase;\n        }\n        sb.Reverse();\n        return sb.ToString();",
  "        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        sb.Reverse();\n \
    \       return sb.ToString();", "        string ret = \"\";\n        for (int\
    \ i = 0; x > 0; i++) {\n            ret = ret.Insert(0, x % numBase + \"\");\n\
    \            x /= numBase;\n        }\n        return ret;", "        string rep\
    \ = \"\";\n        while (x != 0) {\n            rep = ((x % numBase)).ToString()\
    \ + rep;\n            x /= numBase;\n        }\n        return rep;", "      \
    \  string ret = \"\";\n        while (x > 0) {\n            var xmodbase = x %\
    \ numBase;\n            x = x / numBase;\n            ret = xmodbase.ToString()\
    \ + ret;\n        }\n        return ret;", "        StringBuilder sb = new StringBuilder();\n\
    \        while (x > 0) {\n            sb.Append(x % numBase);\n            x /=\
    \ numBase;\n        }\n        var output = sb.ToString();\n        return new\
    \ string(output.Reverse().ToArray());", "        if (x == 0) {\n            return\
    \ \"0\";\n        }\n        StringBuilder ans = new StringBuilder();\n      \
    \  while (x > 0) {\n            ans.Append(x % numBase);\n            x /= numBase;\n\
    \        }\n        ans.Reverse();\n        return ans.ToString();", "       \
    \ Debug.Assert(x >= 0);\n        Debug.Assert(numBase >= 2);\n        Debug.Assert(numBase\
    \ <= 10);\n        string ans = \"\";\n        while (x != 0) {\n            ans\
    \ = (x % numBase).ToString() + ans;\n            x /= numBase;\n        }\n  \
    \      return ans;", "        string result = \"\";\n        while (x > 0) {\n\
    \            result = string.Format(\"{0}{1}\", x % numBase, result);\n      \
    \      x /= numBase;\n        }\n        return result;", "        var sb = new\
    \ StringBuilder();\n        while (x > 0) {\n            sb.Append(x % numBase);\n\
    \            x /= numBase;\n        }\n        return string.Join(\"\", sb.ToString().Reverse());",
  "        var baseNum = new List<long>();\n        while (x > 0) {\n            baseNum.Add(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return string.Join(\"\
    \", baseNum.ToArray().Reverse());", "        if (x == 0) {\n            return\
    \ \"0\";\n        }\n        var result = \"\";\n        while (x > 0) {\n   \
    \         result = (x % numBase).ToString() + result;\n            x /= numBase;\n\
    \        }\n        return result;", "        string s = \"\";\n        while\
    \ (x > 0) {\n            s = (x % numBase).ToString() + s;\n            x /= numBase;\n\
    \        }\n        return s;", "        string s = \"\";\n        while (x >\
    \ 0) {\n            s = (x % numBase).ToString() + s;\n            x /= numBase;\n\
    \        }\n        return s;", "        Debug.Assert(x >= 0 && numBase > 1);\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n  \
    \          long rest = x % numBase;\n            x /= numBase;\n            sb.Append(rest);\n\
    \        }\n        sb.Reverse();\n        return sb.ToString();", "        var\
    \ r = string.Empty;\n        do {\n            r = string.Format(\"{0}{1}\", x\
    \ % numBase, r);\n            x /= numBase;\n        } while (x > 0);\n      \
    \  return r;", "        var sb = new StringBuilder();\n        while (x > 0) {\n\
    \            sb.Append(x % numBase);\n            x /= numBase;\n        }\n \
    \       return string.Join(\"\", sb.ToString().Reverse());", "        var result\
    \ = new StringBuilder();\n        while (x > 0) {\n            var n = x % numBase;\n\
    \            result.Append(n);\n            x /= numBase;\n        }\n       \
    \ var chars = result.ToString().ToCharArray();\n        Array.Reverse(chars);\n\
    \        return new string(chars);", "        StringBuilder res = new StringBuilder();\n\
    \        while (x > 0) {\n            var r = x % numBase;\n            res.Append(r);\n\
    \            x /= numBase;\n        }\n        res.Reverse();\n        return\
    \ res.ToString();", '        return Convert.ToString(x, (int)numBase);', "   \
    \     Debug.Assert(numBase < 10);\n        var sb = new StringBuilder();\n   \
    \     while (x > 0) {\n            sb.Append(x % numBase);\n            x /= numBase;\n\
    \        }\n        sb.Reverse();\n        return sb.ToString();", "        var\
    \ ans = new List<long>();\n        while (x > 0) {\n            ans.Add(x % numBase);\n\
    \            x /= numBase;\n        }\n        return string.Join(\"\", ans.ToArray());",
  "        if (x == 0) {\n            return \"0\";\n        }\n        var sb = new\
    \ StringBuilder();\n        while (x > 0) {\n            sb.Append(x % numBase);\n\
    \            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());",
  "        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return string.Join(\"\
    \", sb.ToString().Reverse());", "        if (x == 0) {\n            return \"\
    0\";\n        }\n        StringBuilder res = new StringBuilder();\n        int\
    \ offset = '0';\n        while (x > 0) {\n            long d = x % numBase;\n\
    \            res.Append((char)(offset + d));\n            x /= numBase;\n    \
    \    }\n        return new string(res.ToString().Reverse().ToArray());", "   \
    \     StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n     \
    \       long r = x % numBase;\n            sb.Append(r);\n            x /= numBase;\n\
    \        }\n        return new string(sb.ToString().Reverse().ToArray());", " \
    \       string result = \"\";\n        long divisor = numBase;\n        while\
    \ (x > 0) {\n            result = (x % divisor).ToString() + result;\n       \
    \     x /= divisor;\n        }\n        return result;", "        // Create a\
    \ dictionary to map digits to their ASCII chars.\n        Dictionary<long, char>\
    \ dict = new Dictionary<long, char>();\n        for (long i = 0; i < 10; i++)\
    \ {\n            dict.Add(i, Convert.ToChar(i + 48));\n        }\n        string\
    \ result = \"\";\n        while (x > 0) {\n            // Get the last digit.\n\
    \            long digit = x % numBase;\n            result = dict[digit] + result;\n\
    \            x /= numBase;\n        }\n        return result;", "        if (x\
    \ == 0) return \"0\";\n        var sb = new StringBuilder();\n        while (x\
    \ > 0) {\n            sb.Append(x % numBase);\n            x /= numBase;\n   \
    \     }\n        return new string(sb.ToString().Reverse().ToArray());", "   \
    \     var result = new List<int>();\n        while (x > 0) {\n            long\
    \ remainder = x % numBase;\n            result.Add((int)remainder);\n        \
    \    x /= numBase;\n        }\n        result.Reverse();\n        return string.Join(\"\
    \", result);", "        Debug.Assert(numBase <= 10);\n        string result =\
    \ \"\";\n        while (x != 0) {\n            result = (x % numBase).ToString()\
    \ + result;\n            x /= numBase;\n        }\n        return result;", " \
    \       string result = \"\";\n        while (x > 0) {\n            long r = x\
    \ % numBase;\n            x /= numBase;\n            result = r.ToString() + result;\n\
    \        }\n        return result;", "        if (x < 0) {\n            return\
    \ (\"-\" + ChangeBase((-x), numBase));\n        }\n        var ret = new List<long>();\n\
    \        while (x > 0) {\n            ret.Add(x % numBase);\n            x /=\
    \ numBase;\n        }\n        ret.Reverse();\n        return string.Join(\"\"\
    , ret);", "        var sb = new StringBuilder();\n        while (x > 0) {\n  \
    \          sb.Append(x % numBase);\n            x /= numBase;\n        }\n   \
    \     var ret = sb.ToString();\n        ret = new string(ret.Reverse().ToArray());\n\
    \        return ret;", "        string str = \"\";\n        while (x > 0) {\n\
    \            str = x % numBase + str;\n            x /= numBase;\n        }\n\
    \        return str;", "        var ret = new StringBuilder();\n        while\
    \ (x > 0) {\n            ret.Append(x % numBase);\n            x /= numBase;\n\
    \        }\n        ret.Reverse();\n        return ret.ToString();", "       \
    \ string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;", "      \
    \  string ans = \"\";\n        while (x != 0) {\n            ans = x % numBase\
    \ + ans;\n            x /= numBase;\n        }\n        return ans;", "      \
    \  List<int> result = new List<int>();\n        while (x > 0) {\n            result.Add((int)(x\
    \ % numBase));\n            x /= numBase;\n        }\n        result.Reverse();\n\
    \        return string.Join(\"\", result);", "        Debug.Assert(x > 0);\n \
    \       Debug.Assert(numBase > 0);\n        Debug.Assert(numBase < 10);\n    \
    \    var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        var ans = sb.ToString();\n\
    \        return new string(ans.Reverse().ToArray());", "        long r = 0;\n\
    \        long q = x;\n        var sb = new StringBuilder();\n        while (q\
    \ > 0) {\n            r = q % numBase;\n            q = q / numBase;\n       \
    \     sb.Append(r);\n        }\n        var result = sb.ToString();\n        return\
    \ new string(result.Reverse().ToArray());", "        var b = new StringBuilder();\n\
    \        while (x > 0) {\n            var r = x % numBase;\n            b.Append(r);\n\
    \            x /= numBase;\n        }\n        return string.Join(\"\", b.ToString().Reverse());",
  "        string s = \"\";\n        while (x > 0) {\n            s = string.Format(\"\
    {0}{1}\", x % numBase, s);\n            x /= numBase;\n        }\n        return\
    \ s;", "        if (x == 0) {\n            return \"0\";\n        }\n        string\
    \ s = \"\";\n        while (x > 0) {\n            s = (x % numBase).ToString()\
    \ + s;\n            x /= numBase;\n        }\n        return s;", "        string\
    \ result = \"\";\n        long quotient = x;\n        long remainder = 0;\n  \
    \      do {\n            remainder = quotient % numBase;\n            quotient\
    \ = quotient / numBase;\n            result = remainder.ToString() + result;\n\
    \        } while (quotient > 0);\n        return result;", "        // we need\
    \ to find modulo with new base (numBase).\n        var result = new StringBuilder();\n\
    \        while (x > 0) {\n            var digit = x % numBase;\n            result.Append(digit);\n\
    \            x /= numBase;\n        }\n        return string.Join(\"\", result.ToString().Reverse());",
  "        long quo = x / numBase;\n        long rem = x % numBase;\n        string\
    \ ret = rem.ToString();\n        if (quo > 0) {\n            ret = ChangeBase(quo,\
    \ numBase) + ret;\n        }\n        return ret;", "        List<long> numList\
    \ = new List<long>();\n        long n = x;\n        while (n > 0) {\n        \
    \    numList.Add(n % numBase);\n            n /= numBase;\n        }\n       \
    \ string s = \"\";\n        foreach (var i in numList) {\n            s += (char)('0'\
    \ + i);\n        }\n        return s;", "        List<int> digits = new List<int>();\n\
    \        while (x > 0) {\n            digits.Add((int)(x % numBase));\n      \
    \      x /= numBase;\n        }\n        digits.Reverse();\n        string ret\
    \ = \"\";\n        foreach (int digit in digits) {\n            ret += (digit.ToString());\n\
    \        }\n        return ret;", "        var res = new StringBuilder();\n  \
    \      while (x > 0) {\n            res.Append(x % numBase);\n            x /=\
    \ numBase;\n        }\n        return new string(res.ToString().Reverse().ToArray());",
  "        string representation = \"\";\n        do {\n            representation\
    \ = ((x % numBase) + representation);\n            x /= numBase;\n        } while\
    \ (x > 0);\n        return representation;", "        StringBuilder ans = new\
    \ StringBuilder();\n        while (x > 0) {\n            long mod = x % numBase;\n\
    \            ans.Append(mod);\n            x = x / numBase;\n        }\n     \
    \   return Reverse(ans.ToString());", "        List<long> digits = new List<long>();\n\
    \        long quotient = x, remainder = 0;\n        while (quotient > 0) {\n \
    \           remainder = quotient % numBase;\n            quotient = quotient /\
    \ numBase;\n            digits.Add(remainder);\n        }\n        //list.reverse()\n\
    \        digits.Reverse();\n        return string.Join(\"\", digits);", "    \
    \    var nums = new List<int>();\n        while (x > 0) {\n            nums.Add((int)(x\
    \ % numBase));\n            x /= numBase;\n        }\n        nums.Reverse();\n\
    \        var sb = new StringBuilder();\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            sb.Append(nums[i]);\n        }\n        return sb.ToString();",
  "        List<long> res = new List<long>();\n        long d = x;\n        while\
    \ (d > 0) {\n            res.Add(d % numBase);\n            d /= numBase;\n  \
    \      }\n        res.Reverse();\n        return string.Join(\"\", res);", " \
    \       if (x == 0) {\n            return \"0\";\n        }\n        string ans\
    \ = \"\";\n        while (x > 0) {\n            ans = string.Format(\"{0}{1}\"\
    , (x % numBase), ans);\n            x /= numBase;\n        }\n        return ans;",
  "        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n    \
    \        sb.Append(x % numBase);\n            x /= numBase;\n        }\n     \
    \   sb.Reverse();\n        return sb.ToString();", "        Debug.Assert(numBase\
    \ < 10);\n        if (x == 0) {\n            return \"0\";\n        }\n      \
    \  string ret = \"\";\n        while (x > 0) {\n            ret = String.Format(\"\
    {0}{1}\", x % numBase, ret);\n            x /= numBase;\n        }\n        return\
    \ ret;", "        StringBuilder ans = new StringBuilder();\n        while (x >\
    \ 0) {\n            ans.Append(x % numBase);\n            x /= numBase;\n    \
    \    }\n        ans.Reverse();\n        return ans.ToString();", "        string\
    \ result = \"\";\n        int rem;\n        while (x != 0) {\n            rem\
    \ = (int)(x % numBase);\n            x = x / numBase;\n            result = rem.ToString()\
    \ + result;\n        }\n        return result;", "        if (x == 0) {\n    \
    \        return \"0\";\n        }\n        var minus = false;\n        if (x <\
    \ 0) {\n            minus = true;\n            x = -x;\n        }\n        var\
    \ sb = new StringBuilder();\n        while (x > 0) {\n            var d = x %\
    \ numBase;\n            sb.Append(d);\n            x /= numBase;\n        }\n\
    \        if (minus) {\n            sb.Append(\"-\");\n        }\n        var chars\
    \ = sb.ToString().ToCharArray();\n        Array.Reverse(chars);\n        return\
    \ new string(chars);", "        string result = \"\";\n        while (x > 0) {\n\
    \            result = (x % numBase).ToString() + result;\n            x /= numBase;\n\
    \        }\n        return result;", "        long[] digits = new long[100];\n\
    \        int index = 0;\n        while (x > 0) {\n            digits[index] =\
    \ x % numBase;\n            x /= numBase;\n            index++;\n        }\n \
    \       var sb = new StringBuilder();\n        for (int i = index - 1; i >= 0;\
    \ i--) {\n            sb.Append(digits[i]);\n        }\n        return sb.ToString();",
  "        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n    \
    \        sb.Append(x % numBase);\n            x /= numBase;\n        }\n     \
    \   sb.Reverse();\n        return sb.ToString();", "        string s = \"\";\n\
    \        while (x > 0) {\n            s = (x % numBase).ToString() + s;\n    \
    \        x /= numBase;\n        }\n        return s;", "        string y = \"\"\
    ;\n        long r;\n        do {\n            r = x % numBase;\n            x\
    \ = x / numBase;\n            y = r.ToString() + y;\n        } while (x > 0);\n\
    \        return y;", "        long remainder = 0;\n        string output = \"\"\
    ;\n        while (x != 0) {\n            remainder = x % numBase;\n          \
    \  x = x / numBase;\n            output = remainder.ToString() + output;\n   \
    \     }\n        return output;", "        List<char> s = new List<char>();\n\
    \        while (x > 0) {\n            s.Add((char)('0' + (x % numBase)));\n  \
    \          x /= numBase;\n        }\n        s.Reverse();\n        return new\
    \ string(s.ToArray());", "        if (x < numBase) {\n            return x.ToString();\n\
    \        }\n        string s = \"\";\n        while (x >= numBase) {\n       \
    \     long r = x % numBase;\n            s = r.ToString() + s;\n            x\
    \ = x / numBase;\n        }\n        s = x.ToString() + s;\n        return s;",
  "        string s = \"\";\n        while (x > 0) {\n            s = (x % numBase).ToString()\
    \ + s;\n            x /= numBase;\n        }\n        return s;", "        string\
    \ result = \"\";\n        while (x != 0) {\n            result = (x % numBase).ToString()\
    \ + result;\n            x /= numBase;\n        }\n        return result;", " \
    \       string ret = \"\";\n        while (x != 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;", "      \
    \  if (x < numBase) {\n            return string.Format(\"{0}\", x);\n       \
    \ } else {\n            return ChangeBase(x / numBase, numBase) + string.Format(\"\
    {0}\", x % numBase);\n        }", "        if (x == 0) {\n            return \"\
    0\";\n        }\n        var ans = new List<long>();\n        while (x > 0) {\n\
    \            ans.Add(x % numBase);\n            x /= numBase;\n        }\n   \
    \     ans.Reverse();\n        return string.Join(\"\", ans);", "        int maxBits\
    \ = (int)Math.Ceiling(Math.Log(x) / Math.Log(numBase));\n        int[] ret = new\
    \ int[maxBits];\n        int i = 0;\n        while (x > 0) {\n            ret[i]\
    \ = (int)(x % numBase);\n            x /= numBase;\n            i++;\n       \
    \ }\n        var sb = new StringBuilder();\n        for (int j = maxBits - 1;\
    \ j >= 0; j--) {\n            sb.Append(ret[j]);\n        }\n        return sb.ToString();",
  "        if (x == 0) {\n            return \"0\";\n        }\n\n        // store\
    \ reversed order.\n        var sb = new StringBuilder();\n        while (x > 0)\
    \ {\n            long rem = x % numBase;\n            sb.Append(rem);\n      \
    \      x /= numBase;\n        }\n\n        // reverse string representation.\n\
    \        return new string(sb.ToString().Reverse().ToArray());", "        string\
    \ result = \"\";\n        while (x != 0) {\n            long num = x % numBase;\n\
    \            x /= numBase;\n            result = num.ToString() + result;\n  \
    \      }\n        return result;", "        var sb = new StringBuilder();\n  \
    \      while (x > 0) {\n            sb.Append(x % numBase);\n            x /=\
    \ numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());",
  "        string str = \"\";\n        while (x > 0) {\n            str = x % numBase\
    \ + str;\n            x /= numBase;\n        }\n        return str;", "      \
    \  string rep = \"\";\n        long d = 0;\n        while (x > 0) {\n        \
    \    d = x % numBase;\n            rep = d.ToString() + rep;\n            x =\
    \ x / numBase;\n        }\n        return rep;", "        string result = \"\"\
    ;\n        while (x > 0) {\n            result = x % numBase + result;\n     \
    \       x /= numBase;\n        }\n        return result;", "        List<char>\
    \ base2 = new List<char>();\n        while (x != 0) {\n            long c = x\
    \ % numBase;\n            base2.Add((char)(c + '0'));\n            x /= numBase;\n\
    \        }\n        base2.Reverse();\n        return new string(base2.ToArray());",
  "        string r = \"\";\n        while (x > 0) {\n            r = (x % numBase).ToString()\
    \ + r;\n            x /= numBase;\n        }\n        return r;", "        string\
    \ s = \"\";\n        while (x > 0) {\n            s = (x % numBase).ToString()\
    \ + s;\n            x /= numBase;\n        }\n        return s;", "        long\
    \ x_ = x;\n        long base_ = numBase;\n        string ret = \"\";\n       \
    \ while (x_ > 0) {\n            long tmp = x_ % base_;\n            ret = ret\
    \ + tmp.ToString();\n            x_ = x_ / base_;\n        }\n        ret = new\
    \ string(ret.Reverse().ToArray());\n        return ret;", "        StringBuilder\
    \ sb = new StringBuilder();\n        do {\n            sb.Append(x % numBase);\n\
    \            x /= numBase;\n        } while (x > 0);\n        return new string(sb.ToString().Reverse().ToArray());",
  "        string ret = string.Empty;\n        while (x > 0) {\n            var digit\
    \ = x % numBase;\n            ret = digit.ToString() + ret;\n            x /=\
    \ numBase;\n        }\n        return ret;", "        var result = new StringBuilder();\n\
    \        while (x > 0) {\n            result.Append(x % numBase);\n          \
    \  x /= numBase;\n        }\n        var s = result.ToString();\n        return\
    \ new string(s.Reverse().ToArray());", "        Debug.Assert(numBase < 10);\n\
    \        string res = \"\";\n        for (int i = 0; i < 32; i++) {\n        \
    \    res = ((x & 1) > 0 ? \"1\" : \"0\") + res;\n            x >>= 1;\n      \
    \  }\n        return res;", "        var sb = new StringBuilder();\n        while\
    \ (x > 0) {\n            var b = x % numBase;\n            sb.Append(b);\n   \
    \         x /= numBase;\n        }\n        return string.Join(\"\", sb.ToString().Reverse());",
  "        var baseChars = \"0123456789\";\n        var digits = new List<char>();\n\
    \        while (x != 0) {\n            digits.Add(baseChars[(int)(x % numBase)]);\n\
    \            x /= numBase;\n        }\n        digits.Reverse();\n        return\
    \ new string(digits.ToArray());", "        var sb = new StringBuilder();\n   \
    \     while (x > 0) {\n            sb.Append(x % numBase);\n            x /= numBase;\n\
    \        }\n        return new string(sb.ToString().Reverse().ToArray());", " \
    \       List<long> r = new List<long>();\n        while (x > 0) {\n          \
    \  r.Add(x % numBase);\n            x /= numBase;\n        }\n        string answer\
    \ = \"\";\n        foreach (var it in r) {\n            answer += (char)('0' +\
    \ it);\n        }\n        return new string(answer.Reverse().ToArray());", " \
    \       string ans = \"\";\n        while (x != 0) {\n            long r = x %\
    \ numBase;\n            ans = r.ToString() + ans;\n            x /= numBase;\n\
    \        }\n        return ans;", "        long div = x;\n        string ret =\
    \ \"\";\n        while (div > 0) {\n            ret = (div % numBase).ToString()\
    \ + ret;\n            div /= numBase;\n        }\n        return ret;", "    \
    \    string ret = \"\";\n        while (x > 0) {\n            var v = x % numBase;\n\
    \            ret = v.ToString() + ret;\n            x /= numBase;\n        }\n\
    \        return ret;", "        if (x == 0) {\n            return \"0\";\n   \
    \     }\n        StringBuilder sb = new StringBuilder();\n        while (x > 0)\
    \ {\n            sb.Append(x % numBase);\n            x /= numBase;\n        }\n\
    \        var ans = sb.ToString();\n        return ans;", "        long r;\n  \
    \      StringBuilder sb = new StringBuilder();\n        while (x != 0) {\n   \
    \         r = x % numBase;\n            x = x / numBase;\n            sb.Append(r);\n\
    \        }\n        return new string(sb.ToString().Reverse().ToArray());", " \
    \       if (x == 0) {\n            return \"0\";\n        }\n        string result\
    \ = \"\";\n        while (x > 0) {\n            result = (x % numBase).ToString()\
    \ + result;\n            x /= numBase;\n        }\n        return result;", " \
    \       string res = \"\";\n        while (x > 0) {\n            res = (x % numBase).ToString()\
    \ + res;\n            x /= numBase;\n        }\n        return res;", "      \
    \  long[] remainders = new long[20];\n        int remainder = 0;\n        long\
    \ quotient = x;\n        int i = 0;\n        StringBuilder sb = new StringBuilder();\n\
    \        while (quotient != 0) {\n            remainder = (int)(quotient % numBase);\n\
    \            remainders[i] = remainder;\n            quotient = quotient / numBase;\n\
    \            i++;\n        }\n        for (int j = i - 1; j >= 0; j--) {\n   \
    \         sb.Append(remainders[j]);\n        }\n        return sb.ToString();",
  "        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n    \
    \        sb.Append(x % numBase);\n            x /= numBase;\n        }\n     \
    \   return sb.ToString();", "        var base2 = Convert.ToString(x, 2);\n   \
    \     var base3 = Convert.ToString(x, 3);\n        var base4 = Convert.ToString(x,\
    \ 4);\n        var base5 = Convert.ToString(x, 5);\n        var base6 = Convert.ToString(x,\
    \ 6);\n        var base7 = Convert.ToString(x, 7);\n        var base8 = Convert.ToString(x,\
    \ 8);\n        var base9 = Convert.ToString(x, 9);\n        var base10 = Convert.ToString(x,\
    \ 10);\n        var base11 = Convert.ToString(x, 11);\n        var base12 = Convert.ToString(x,\
    \ 12);\n        var base13 = Convert.ToString(x, 13);\n        var base14 = Convert.ToString(x,\
    \ 14);\n        var base15 = Convert.ToString(x, 15);\n        var base16 = Convert.ToString(x,\
    \ 16);\n        var base17 = Convert.ToString(x, 17);\n        var base18 = Convert.ToString(x,\
    \ 18);\n        var base19 = Convert.ToString(x, 19);\n        var base20 = Convert.ToString(x,\
    \ 20);\n        var base21 = Convert.ToString(x, 21);\n        var base22 = Convert.ToString(x,\
    \ 22);\n        var base23 = Convert.ToString(x, 23);\n        var base24 = Convert.ToString(x,\
    \ 24);\n        var base25 = Convert.ToString(x, 25);\n        var base26 = Convert.ToString(x,\
    \ 26);\n        var base27 = Convert.ToString(x, 27);\n        var base28 = Convert.ToString(x,\
    \ 28);\n        var base29 = Convert.ToString(x, 29);\n        var base30 = Convert.ToString(x,\
    \ 30);\n        var base31 = Convert.ToString(x, 31);\n        var base32 = Convert.ToString(x,\
    \ 32);\n        var base33 = Convert.ToString(x, 33);\n        var base34 = Convert.ToString(x,\
    \ 34);\n        var base35 = Convert.ToString(x, 35);\n       ", "        string\
    \ ans = \"\";\n        while (x != 0) {\n            var remainder = x % numBase;\n\
    \            ans = remainder.ToString() + ans;\n            x /= numBase;\n  \
    \      }\n        return ans;", "        string ret = \"\";\n        for (; x\
    \ > 0; x /= numBase) {\n            ret = x % numBase + ret;\n        }\n    \
    \    return ret;", "        var sb = new StringBuilder();\n        while (x >\
    \ 0) {\n            sb.Append(x % numBase);\n            x /= numBase;\n     \
    \   }\n        return Reverse(sb.ToString());", "        List<long> ret = new\
    \ List<long>();\n        while (x > 0) {\n            ret.Add(x % numBase);\n\
    \            x /= numBase;\n        }\n        ret.Reverse();\n        return\
    \ string.Join(\"\", ret);", "        var builder = new StringBuilder();\n    \
    \    while (x > 0) {\n            builder.Append(x % numBase);\n            x\
    \ /= numBase;\n        }\n        return new string(builder.ToString().Reverse().ToArray());",
  "        var stringBuilder = new StringBuilder();\n        while (x > 0) {\n   \
    \         stringBuilder.Append(x % numBase);\n            x /= numBase;\n    \
    \    }\n        stringBuilder.Reverse();\n        return stringBuilder.ToString();",
  "        Debug.Assert(x >= 0);\n        Debug.Assert(2 <= numBase && numBase <=\
    \ 10);\n        var list = new List<int>();\n        while (x > 0) {\n       \
    \     list.Add((int)(x % numBase));\n            x /= numBase;\n        }\n  \
    \      list.Reverse();\n        var sb = new StringBuilder();\n        foreach\
    \ (var d in list)\n            sb.Append(d);\n        return sb.ToString();",
  "        if (x == 0) {\n            return \"0\";\n        }\n        string ret\
    \ = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;", "      \
    \  string r = \"\";\n        while (x > 0) {\n            r = (x % numBase).ToString()\
    \ + r;\n            x /= numBase;\n        }\n        return r;", "        var\
    \ sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        var result = sb.ToString();\n\
    \        Array.Reverse(result.ToCharArray());\n        return result;", "    \
    \    StringBuilder sb = new StringBuilder();\n        while (x != 0) {\n     \
    \       long rem = x % numBase;\n            sb.Append(rem);\n            x /=\
    \ numBase;\n        }\n        char[] charArray = sb.ToString().ToCharArray();\n\
    \        Array.Reverse(charArray);\n        return new string(charArray);", " \
    \       string result = \"\";\n        string digits = \"0123456789\";\n     \
    \   while (x > 0) {\n            long r = x % numBase;\n            x = x / numBase;\n\
    \            result = digits[(int)r] + result;\n        }\n        return result;",
  "        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n    \
    \        sb.Append(x % numBase);\n            x /= numBase;\n        }\n     \
    \   char[] arr = sb.ToString().ToCharArray();\n        Array.Reverse(arr);\n \
    \       return new string(arr);", "        string result = \"\";\n        while\
    \ (x > 0) {\n            result = (x % numBase).ToString() + result;\n       \
    \     x /= numBase;\n        }\n        return result;", "        string res =\
    \ string.Empty;\n        while (x != 0) {\n            res = (x % numBase).ToString()\
    \ + res;\n            x /= numBase;\n        }\n        return res;", "      \
    \  // >>> ChangeBase((8L), (3L))\n        // (\"22\")\n        // >>> ChangeBase((8L),\
    \ (2L))\n        // (\"1000\")\n        // >>> ChangeBase((7L), (2L))\n      \
    \  // (\"111\")\n        long maxDigit = x;\n        long digitCount = 0;\n  \
    \      while (maxDigit > 0) {\n            maxDigit /= numBase;\n            digitCount++;\n\
    \        }\n        char[] res = new char[digitCount];\n        for (long i =\
    \ 0; i < digitCount; i++) {\n            res[i] = (char)(x % numBase + '0');\n\
    \            x /= numBase;\n        }\n        return new string(res);", "   \
    \     int n = (int)numBase;\n        char[] res = new char[50];\n        int i\
    \ = 0;\n        while (x != 0) {\n            res[i++] = (char)('0' + (x % n));\n\
    \            x /= n;\n        }\n        return new string(res, 0, i);", "   \
    \     string ret = \"\";\n        do {\n            long remainder = x % numBase;\n\
    \            x /= numBase;\n            ret = remainder.ToString() + ret;\n  \
    \      } while (x > 0);\n        return ret;", "        string revAns = \"\";\n\
    \        while (x > 0) {\n            revAns += (x % numBase).ToString();\n  \
    \          x /= numBase;\n        }\n        string ans = \"\";\n        for (int\
    \ i = revAns.Length - 1; i >= 0; i--) {\n            ans += revAns[i];\n     \
    \   }\n        return ans;", "        var result = new List<char>();\n       \
    \ while (x > 0) {\n            result.Add((char)('0' + (x % numBase)));\n    \
    \        x /= numBase;\n        }\n        result.Reverse();\n        return new\
    \ string(result.ToArray());"]
stop_tokens:
- "\n    }\n"
