name: HumanEval_148_bf
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // There are eight planets in our solar system: the closerst to\
  \ the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
  \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
  \ names as strings planet1 and planet2. \n    // The function should return a tuple\
  \ containing all planets whose orbits are \n    // located between the orbit of\
  \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
  \ \n    // The function should return an empty tuple if planet1 or planet2\n   \
  \ // are not correct planet names. \n    // Examples\n    // >>> Bf((\"Jupiter\"\
  ), (\"Neptune\"))\n    // (new List<string>(new string[]{(string)\"Saturn\", (string)\"\
  Uranus\"}))\n    // >>> Bf((\"Earth\"), (\"Mercury\"))\n    // (List<string>(\"\
  Venus\"))\n    // >>> Bf((\"Mercury\"), (\"Uranus\"))\n    // (new List<string>(new\
  \ string[]{(string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"Jupiter\"\
  , (string)\"Saturn\"}))\n    public static List<string> Bf(string planet1, string\
  \ planet2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Bf((\"\
  Jupiter\"), (\"Neptune\")).Equals((new List<string>(new string[]{(string)\"Saturn\"\
  , (string)\"Uranus\"}))));\n    Debug.Assert(Bf((\"Earth\"), (\"Mercury\")).Equals((new\
  \ List<string>(new string[]{(string)\"Venus\"}))));\n    Debug.Assert(Bf((\"Mercury\"\
  ), (\"Uranus\")).Equals((new List<string>(new string[]{(string)\"Venus\", (string)\"\
  Earth\", (string)\"Mars\", (string)\"Jupiter\", (string)\"Saturn\"}))));\n    Debug.Assert(Bf((\"\
  Neptune\"), (\"Venus\")).Equals((new List<string>(new string[]{(string)\"Earth\"\
  , (string)\"Mars\", (string)\"Jupiter\", (string)\"Saturn\", (string)\"Uranus\"\
  }))));\n    Debug.Assert(Bf((\"Earth\"), (\"Earth\")).Equals((new List<string>())));\n\
  \    Debug.Assert(Bf((\"Mars\"), (\"Earth\")).Equals((new List<string>())));\n \
  \   Debug.Assert(Bf((\"Jupiter\"), (\"Makemake\")).Equals((new List<string>())));\n\
  \    }\n\n}\n"
completions: ["        List<string> planetList = new List<string>(new string[]{(string)\"\
    Mercury\", (string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"\
    Jupiter\", (string)\"Saturn\", (string)\"Uranus\", (string)\"Neptune\"});\n  \
    \      List<string> result = new List<string>();\n        if (!planetList.Contains(planet1)\
    \ || !planetList.Contains(planet2)) {\n            return result;\n        }\n\
    \        if (planetList.IndexOf(planet1) > planetList.IndexOf(planet2)) {\n  \
    \          for (int i = planetList.IndexOf(planet2); i < planetList.IndexOf(planet1);\
    \ i++) {\n                result.Add(planetList[i]);\n            }\n        }\
    \ else {\n            for (int i = planetList.IndexOf(planet1); i < planetList.IndexOf(planet2);\
    \ i++) {\n                result.Add(planetList[i]);\n            }\n        }\n\
    \        return result;", "        var planets = new List<string>() { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        if (!planets.Contains(planet1) || !planets.Contains(planet2))\n\
    \            return new List<string>();\n        var from = planets.IndexOf(planet1);\n\
    \        var to = planets.IndexOf(planet2);\n        if (from > to) {\n      \
    \      var tmp = from;\n            from = to;\n            to = tmp;\n      \
    \  }\n        return planets.GetRange(from + 1, to - from - 1);", "        //\
    \ >>> YOUR CODE GOES HERE <<<\n        return new List<string>();", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        int index1 = planets.IndexOf(planet1);\n\
    \        int index2 = planets.IndexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return new List<string>();\n        }\n        if (index1\
    \ > index2) {\n            return planets.GetRange(index2 + 1, index1 - index2\
    \ - 1);\n        }\n        return planets.GetRange(index1 + 1, index2 - index1\
    \ - 1);", '        return (new List<string>(new string[] { }));', "        var\
    \ a = new List<string>();\n        var b = new List<string>() { \"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var s = b.IndexOf(planet1);\n        var f = b.IndexOf(planet2);\n\
    \        if (s > f)\n        {\n            var buf = s;\n            s = f;\n\
    \            f = buf;\n        }\n        else if (s == f)\n        {\n      \
    \      return a;\n        }\n        if ((s == -1) || (f == -1))\n        {\n\
    \            return a;\n        }\n        for (int i = 0; i < b.Count; i++)\n\
    \        {\n            if ((s < i) && (i < f))\n            {\n             \
    \   a.Add(b[i]);\n            }\n        }\n        return a;", "        string[]\
    \ planets = new string[] {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"};\n        int[] distances = new int[] {57,\
    \ 108, 150, 228, 778, 1427, 2871, 4497};\n        var res = new List<string>();\n\
    \        int start = 0;\n        int end = planets.Length - 1;\n        int startind\
    \ = 0;\n        int endind = 0;\n        int dist1 = 0;\n        int dist2 = 0;\n\
    \        for (int i = 0; i < planets.Length; i++) {\n            if (planets[i]\
    \ == planet1) {\n                start = distances[i];\n                startind\
    \ = i;\n            }\n            if (planets[i] == planet2) {\n            \
    \    end = distances[i];\n                endind = i;\n            }\n       \
    \ }\n        if (start == 0 || end == 0) {\n            return res;\n        }\n\
    \        for (int i = startind; i <= endind; i++) {\n            if (distances[i]\
    \ >= start && distances[i] <= end) {\n                res.Add(planets[i]);\n \
    \           }\n        }\n        return res;", "        // TODO\n        return\
    \ null;", "        List<string> planets = new List<string>(new string[]{\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    });\n        int idx1 = planets.IndexOf(planet1);\n        int idx2 = planets.IndexOf(planet2);\n\
    \        if (idx1 == -1 || idx2 == -1) {\n            return new List<string>();\n\
    \        }\n        if (idx1 < idx2) {\n            return planets.GetRange(idx1\
    \ + 1, idx2 - idx1 - 1);\n        } else {\n            return planets.GetRange(idx2\
    \ + 1, idx1 - idx2 - 1);\n        }", "        List<string> planets = new List<string>(new\
    \ string[] {\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"\n        });\n        int i1 = planets.IndexOf(planet1);\n\
    \        int i2 = planets.IndexOf(planet2);\n        int i1p = Math.Min(i1, i2);\n\
    \        int i2p = Math.Max(i1, i2);\n        return planets.GetRange(i1p+1, i2p-i1p-1);",
  "        Dictionary<string, int> planets = new Dictionary<string, int>() {\n   \
    \         { \"Mercury\", 0 },\n            { \"Venus\", 1 },\n            { \"\
    Earth\", 2 },\n            { \"Mars\", 3 },\n            { \"Jupiter\", 4 },\n\
    \            { \"Saturn\", 5 },\n            { \"Uranus\", 6 },\n            {\
    \ \"Neptune\", 7 }\n        };\n        int p1 = planets[planet1];\n        int\
    \ p2 = planets[planet2];\n        if (p1 > p2) {\n            int temp = p1;\n\
    \            p1 = p2;\n            p2 = temp;\n        }\n        List<string>\
    \ result = new List<string>();\n        for (int i = p1 + 1; i < p2; i++) {\n\
    \            result.Add(planets.FirstOrDefault(x => x.Value == i).Key);\n    \
    \    }\n        return result;", "        // IMPLEMENT THIS FUNCTION\n       \
    \ if (planet1 == planet2) {\n            return new List<string>();\n        }\n\
    \n        var planets = new List<string>() {\n            \"Mercury\",\n     \
    \       \"Venus\",\n            \"Earth\",\n            \"Mars\",\n          \
    \  \"Jupiter\",\n            \"Saturn\",\n            \"Uranus\",\n          \
    \  \"Neptune\"\n        };\n\n        var startIndex = planets.IndexOf(planet1);\n\
    \        var endIndex = planets.IndexOf(planet2);\n\n        if (startIndex ==\
    \ -1 || endIndex == -1) {\n            return new List<string>();\n        }\n\
    \n        if (startIndex < endIndex) {\n            var tmp = startIndex;\n  \
    \          startIndex = endIndex;\n            endIndex = tmp;\n        }\n\n\
    \        var result = new List<string>();\n        for (int i = startIndex - 1;\
    \ i > endIndex; i--) {\n            result.Add(planets[i]);\n        }\n\n   \
    \     return result;", "        var planets = new List<string>{\n        \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \n    };\n        return planets.SkipWhile(p => p != planet1).TakeWhile(p => p\
    \ != planet2).ToList();", '        return new List<string>();', "        string\
    \ planetName = planet1;\n        // TODO:\n        return new List<string>();",
  "        var planets = new List<string>{\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        var maxIndex = planets.IndexOf(planet1);\n\
    \        var minIndex = planets.IndexOf(planet2);\n        if (maxIndex == -1\
    \ || minIndex == -1) return new List<string>();\n        if (maxIndex < minIndex)\
    \ {\n            var temp = maxIndex;\n            maxIndex = minIndex;\n    \
    \        minIndex = temp;\n        }\n        var result = new List<string>();\n\
    \        for (int i = minIndex; i <= maxIndex; i++) {\n            result.Add(planets[i]);\n\
    \        }\n        return result;", "        var planets = new Dictionary<string,\
    \ List<string>> {\n            { \"Mercury\", new List<string>() },\n        \
    \    { \"Venus\", new List<string>() },\n            { \"Earth\", new List<string>()\
    \ },\n            { \"Mars\", new List<string>() },\n            { \"Jupiter\"\
    , new List<string>() },\n            { \"Saturn\", new List<string>() },\n   \
    \         { \"Uranus\", new List<string>() },\n            { \"Neptune\", new\
    \ List<string>() }\n        };\n        if (!planets.ContainsKey(planet1) || !planets.ContainsKey(planet2))\
    \ {\n            return new List<string>();\n        }\n        string[] planetsSorted\
    \ = new string[] { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\" };\n        List<string> result = new List<string>();\n\
    \        int idx1 = Array.IndexOf(planetsSorted, planet1);\n        int idx2 =\
    \ Array.IndexOf(planetsSorted, planet2);\n        // TODO: Implement your solution\
    \ here\n        bool ascending = true;\n        if (idx1 > idx2) {\n         \
    \   ascending = false;\n        }\n        int i = idx1;\n        while (true)\
    \ {\n            result.Add(planetsSorted[i]);\n            if (i == idx2) {\n\
    \                break;\n            }\n            if (ascending) {\n       \
    \         i++;\n            } else {\n                i--;\n            }\n  \
    \      }\n        return result;", "        List<string> planetList = new List<string>(new\
    \ string[]{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"});\n        int idx1 = planetList.IndexOf(planet1);\n\
    \        int idx2 = planetList.IndexOf(planet2);\n        if (idx1 < 0 || idx2\
    \ < 0) {\n            return new List<string>();\n        }\n        if (idx1\
    \ > idx2) {\n            int tmp = idx1;\n            idx1 = idx2;\n         \
    \   idx2 = tmp;\n        }\n        return planetList.GetRange(idx1+1, idx2-idx1-1);",
  '        return null;', "        // Your code goes here\n        string[] planets\
    \ = { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\" };\n        var answer = new List<string>();\n        for\
    \ (int i = 0; i < planets.Length; i++) {\n            if (planets[i] == planet1)\
    \ {\n                for (int j = i + 1; j < planets.Length; j++) {\n        \
    \            if (planets[j] == planet2) {\n                        for (int k\
    \ = i + 1; k < j; k++) {\n                            answer.Add(planets[k]);\n\
    \                        }\n                        return answer;\n         \
    \           }\n                }\n            }\n        }\n        return answer;",
  "        // write your code here.\n        throw new NotImplementedException();",
  "        var planets = new string[] { \"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var h = new Dictionary<string,\
    \ int>();\n        for (int i = 0; i < planets.Length; i++)\n            h[planets[i]]\
    \ = i;\n        if (!h.ContainsKey(planet1) || !h.ContainsKey(planet2))\n    \
    \        return new List<string>();\n        var min = Math.Min(h[planet1], h[planet2]);\n\
    \        var max = Math.Max(h[planet1], h[planet2]);\n        var res = new List<string>();\n\
    \        for (int i = min + 1; i < max; i++)\n            res.Add(planets[i]);\n\
    \        return res;", "        Dictionary<string, int> p = new Dictionary<string,\
    \ int> { { \"Mercury\", 1 }, { \"Venus\", 2 }, { \"Earth\", 3 }, { \"Mars\", 4\
    \ }, { \"Jupiter\", 5 }, { \"Saturn\", 6 }, { \"Uranus\", 7 }, { \"Neptune\",\
    \ 8 } };\n        List<string> l = new List<string>();\n        int a = 0;\n \
    \       int b = 0;\n        if (p.ContainsKey(planet1)) {\n            a = p[planet1];\n\
    \        }\n        if (p.ContainsKey(planet2)) {\n            b = p[planet2];\n\
    \        }\n        if (a != 0 && b != 0) {\n            if (a < b) {\n      \
    \          for (int i = a + 1; i < b; i++) {\n                    l.Add(p.FirstOrDefault(x\
    \ => x.Value == i).Key);\n                }\n            } else {\n          \
    \      for (int i = b + 1; i < a; i++) {\n                    l.Add(p.FirstOrDefault(x\
    \ => x.Value == i).Key);\n                }\n            }\n        }\n      \
    \  return l;", "        // REPLACE THE BODY OF THIS METHOD WITH YOUR OWN IMPLEMENTATION\n\
    \        string[] planets = new string[]{(string)\"Mercury\", (string)\"Venus\"\
    , (string)\"Earth\", (string)\"Mars\", (string)\"Jupiter\", (string)\"Saturn\"\
    , (string)\"Uranus\", (string)\"Neptune\"};\n        int index1 = Array.IndexOf(planets,\
    \ planet1);\n        int index2 = Array.IndexOf(planets, planet2);\n        if\
    \ (index1 == -1 || index2 == -1) {\n            return (new List<string>());\n\
    \        }\n        if (index1 > index2) {\n            return (new List<string>(planets.Skip(index2\
    \ + 1).Take(index1 - index2 - 1)));\n        }\n        return (new List<string>(planets.Skip(index1\
    \ + 1).Take(index2 - index1 - 1)));", "        List<string> planets = new List<string>(new\
    \ string[]{(string)\"Mercury\", (string)\"Venus\", (string)\"Earth\", (string)\"\
    Mars\", (string)\"Jupiter\", (string)\"Saturn\", (string)\"Uranus\", (string)\"\
    Neptune\"});\n        if(!planets.Contains(planet1) || !planets.Contains(planet2))\
    \ {\n            return new List<string>();\n        }\n        int start = planets.IndexOf(planet1);\n\
    \        int end = planets.IndexOf(planet2);\n        if(start > end) {\n    \
    \        int tmp = start;\n            start = end;\n            end = tmp;\n\
    \        }\n        planets = planets.GetRange(start, end - start + 1);\n    \
    \    return planets;", "        List<string> planets = new List<string>(new string[]{\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"});\n        List<string> planetsFromPlanet1ToPlanet2 = new List<string>();\n\
    \        int planet1Position = 0;\n        int planet2Position = 0;\n        bool\
    \ isPlanet1Correct = false;\n        bool isPlanet2Correct = false;\n        bool\
    \ planet1Found = false;\n        bool planet2Found = false;\n        for (int\
    \ i = 0; i < planets.Count; i++) {\n            if (planets[i] == planet1) {\n\
    \                planet1Position = i;\n                isPlanet1Correct = true;\n\
    \                planet1Found = true;\n            }\n            if (planets[i]\
    \ == planet2) {\n                planet2Position = i;\n                isPlanet2Correct\
    \ = true;\n                planet2Found = true;\n            }\n            if\
    \ (planet1Found && planet2Found) {\n                break;\n            }\n  \
    \      }\n        if (isPlanet1Correct && isPlanet2Correct) {\n            if\
    \ (planet1Position > planet2Position) {\n                planetsFromPlanet1ToPlanet2\
    \ = GetPlanetsFromPlanet1ToPlanet2(planets, planet2Position, planet1Position);\n\
    \            } else {\n                planetsFromPlanet1ToPlanet2 = GetPlanetsFromPlanet1ToPlanet2(planets,\
    \ planet1Position, planet2Position);\n            }\n        }\n        return\
    \ planetsFromPlanet1ToPlanet2;", "        string[] planets = {\n            \"\
    Mercury\",\n            \"Venus\",\n            \"Earth\",\n            \"Mars\"\
    ,\n            \"Jupiter\",\n            \"Saturn\",\n            \"Uranus\",\n\
    \            \"Neptune\"\n        };\n        List<string> result = new List<string>();\n\
    \        int planet1Idx = Array.IndexOf(planets, planet1);\n        int planet2Idx\
    \ = Array.IndexOf(planets, planet2);\n        if (planet1Idx == -1 || planet2Idx\
    \ == -1) {\n            return result;\n        }\n        if (planet1Idx < planet2Idx)\
    \ {\n            result.AddRange(planets.Skip(planet1Idx + 1).Take(planet2Idx\
    \ - planet1Idx - 1));\n        } else {\n            result.AddRange(planets.Skip(planet2Idx\
    \ + 1).Take(planet1Idx - planet2Idx - 1));\n        }\n        return result;",
  "        List<string> planets = new List<string>(new string[]{\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"});\n \
    \       List<string> res = new List<string>();\n        int planet1Index = -1;\n\
    \        int planet2Index = -1;\n        for (int i = 0; i < planets.Count; i++)\
    \ {\n            if (planets[i] == planet1) {\n                planet1Index =\
    \ i;\n            }\n            if (planets[i] == planet2) {\n              \
    \  planet2Index = i;\n            }\n        }\n        if (planet1Index < 0 ||\
    \ planet2Index < 0) {\n            return res;\n        }\n        if (planet1Index\
    \ < planet2Index) {\n            for (int i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n                res.Add(planets[i]);\n            }\n        } else\
    \ {\n            for (int i = planet2Index + 1; i < planet1Index; i++) {\n   \
    \             res.Add(planets[i]);\n            }\n        }\n        return res;",
  '        return new List<string>();', "        List<string> planets = new List<string>(new\
    \ string[]{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"});\n        int index1 = planets.IndexOf(planet1);\n\
    \        int index2 = planets.IndexOf(planet2);\n        if (index1 < 0 || index2\
    \ < 0)\n            return new List<string>();\n        return planets.GetRange(index1\
    \ + 1, index2 - index1 - 1);", "        string[] planets = { \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n \
    \       List<string> planetsList = new List<string>(planets);\n        int ix1\
    \ = planetsList.IndexOf(planet1);\n        int ix2 = planetsList.IndexOf(planet2);\n\
    \        if (ix1 < 0 || ix2 < 0) return new List<string>();\n        if (ix1 >\
    \ ix2) {\n            int tmp = ix1;\n            ix1 = ix2;\n            ix2\
    \ = tmp;\n        }\n        List<string> res = new List<string>();\n        for\
    \ (int i = ix1 + 1; i < ix2; i++) res.Add(planetsList[i]);\n        return res;",
  "        List<string> result = new List<string>();\n        int index1 = planets.IndexOf(planet1);\n\
    \        int index2 = planets.IndexOf(planet2);\n        if (index1 < 0 || index2\
    \ < 0) {\n            return result;\n        }\n        if (index1 > index2)\
    \ {\n            int temp = index1;\n            index1 = index2;\n          \
    \  index2 = temp;\n        }\n        for (int i = index1 + 1; i < index2; i++)\
    \ {\n            result.Add(planets[i]);\n        }\n        return result;",
  "        List<string> res = new List<string>();\n        if (planet1.Equals(\"Mercury\"\
    )) {\n            if (planet2.Equals(\"Venus\")) {\n                res.Add(\"\
    Venus\");\n            } else if (planet2.Equals(\"Earth\")) {\n             \
    \   res.Add(\"Venus\");\n                res.Add(\"Earth\");\n            } else\
    \ if (planet2.Equals(\"Mars\")) {\n                res.Add(\"Venus\");\n     \
    \           res.Add(\"Earth\");\n                res.Add(\"Mars\");\n        \
    \    } else if (planet2.Equals(\"Jupiter\")) {\n                res.Add(\"Venus\"\
    );\n                res.Add(\"Earth\");\n                res.Add(\"Mars\");\n\
    \                res.Add(\"Jupiter\");\n            } else if (planet2.Equals(\"\
    Saturn\")) {\n                res.Add(\"Venus\");\n                res.Add(\"\
    Earth\");\n                res.Add(\"Mars\");\n                res.Add(\"Jupiter\"\
    );\n                res.Add(\"Saturn\");\n            } else if (planet2.Equals(\"\
    Uranus\")) {\n                res.Add(\"Venus\");\n                res.Add(\"\
    Earth\");\n                res.Add(\"Mars\");\n                res.Add(\"Jupiter\"\
    );\n                res.Add(\"Saturn\");\n                res.Add(\"Uranus\");\n\
    \            } else if (planet2.Equals(\"Neptune\")) {\n                res.Add(\"\
    Venus\");\n                res.Add(\"Earth\");\n                res.Add(\"Mars\"\
    );\n                res.Add(\"Jupiter\");\n                res.Add(\"Saturn\"\
    );\n                res.Add(\"Uranus\");\n                res.Add(\"Neptune\"\
    );\n            }\n        } else if (planet1.Equals(\"Venus\")) {\n         \
    \   if (planet2.Equals(\"Earth\")) {\n                res.Add(\"Earth\");\n  \
    \          } else if (planet2.Equals(\"Mars\")) {\n                res.Add(\"\
    Earth\");\n                res.Add(\"Mars\");\n            } else if (planet2.Equals(\"\
    Jupiter\")) {\n                res.Add(\"Earth\");\n                res.Add(\"\
    Mars\");\n                res.Add(\"Jupiter\");\n            } else if (planet2.Equals(\"\
    Saturn\")) {\n               ", "        var orbits = new List<string>();\n  \
    \      if(planet1 != \"Mercury\" && planet1 != \"Venus\" && planet1 != \"Earth\"\
    \ && planet1 != \"Mars\" && planet1 != \"Jupiter\" && planet1 != \"Saturn\" &&\
    \ planet1 != \"Uranus\" && planet1 != \"Neptune\") {\n            return orbits;\n\
    \        }\n        if(planet2 != \"Mercury\" && planet2 != \"Venus\" && planet2\
    \ != \"Earth\" && planet2 != \"Mars\" && planet2 != \"Jupiter\" && planet2 !=\
    \ \"Saturn\" && planet2 != \"Uranus\" && planet2 != \"Neptune\") {\n         \
    \   return orbits;\n        }\n        if(planet1 == \"Mercury\") {\n        \
    \    if(planet2 == \"Mercury\") {\n                return orbits;\n          \
    \  }\n            if(planet2 == \"Venus\") {\n                orbits.Add(\"Venus\"\
    );\n                return orbits;\n            }\n            if(planet2 == \"\
    Earth\") {\n                orbits.Add(\"Venus\");\n                orbits.Add(\"\
    Earth\");\n                return orbits;\n            }\n            if(planet2\
    \ == \"Mars\") {\n                orbits.Add(\"Venus\");\n                orbits.Add(\"\
    Earth\");\n                orbits.Add(\"Mars\");\n                return orbits;\n\
    \            }\n            if(planet2 == \"Jupiter\") {\n                orbits.Add(\"\
    Venus\");\n                orbits.Add(\"Earth\");\n                orbits.Add(\"\
    Mars\");\n                orbits.Add(\"Jupiter\");\n                return orbits;\n\
    \            }\n            if(planet2 == \"Saturn\") {\n                orbits.Add(\"\
    Venus\");\n                orbits.Add(\"Earth\");\n                orbits.Add(\"\
    Mars\");\n                orbits.Add(\"Jupiter\");\n                orbits.Add(\"\
    Saturn\");\n                return orbits;\n            }\n            if(planet2\
    \ == \"Uranus\") {\n                orbits.Add(\"Venus\");\n                orbits.Add(\"\
    Earth\");\n                orbits.Add(\"Mars\");\n                orbits.Add(\"\
    Jupiter\");\n                orbits.Add(\"Saturn\");\n                orbits.Add(\"\
    Uranus\");\n                return orbits;\n            }\n            if(planet2\
    \ == \"Neptune\") {\n                orbits.", "        // Fill here\n       \
    \ List<string> planets = new List<string>(new string[]{(string)\"Mercury\", (string)\"\
    Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"Jupiter\", (string)\"\
    Saturn\", (string)\"Uranus\", (string)\"Neptune\"});\n        int num1 = 0;\n\
    \        int num2 = 0;\n        for (int i = 0; i < planets.Count; i++) {\n  \
    \          if (planets[i] == planet1) {\n                num1 = i;\n         \
    \   }\n            if (planets[i] == planet2) {\n                num2 = i;\n \
    \           }\n        }\n        List<string> between = new List<string>();\n\
    \        if (num1 <= num2) {\n            for (int i = num1 + 1; i < num2; i++)\
    \ {\n                between.Add(planets[i]);\n            }\n        } else {\n\
    \            for (int i = num2 + 1; i < num1; i++) {\n                between.Add(planets[i]);\n\
    \            }\n        }\n        return between;", "        if (planet1 == planet2)\
    \ {\n            return new List<string>();\n        }\n        var planets =\
    \ new List<string>() {\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        };\n        var start\
    \ = planets.IndexOf(planet1);\n        var end = planets.IndexOf(planet2);\n \
    \       if (start == -1 || end == -1) {\n            return new List<string>();\n\
    \        }\n        if (start > end) {\n            var temp = start;\n      \
    \      start = end;\n            end = temp;\n        }\n        return planets.GetRange(start\
    \ + 1, end - start - 1);", "        // Add your implementation here.\n       \
    \ return new List<string>();", "        // Fill in the code\n        List<string>\
    \ p1 = new List<string>();\n        List<string> p2 = new List<string>();\n  \
    \      if (planet1 == \"Mercury\")\n        {\n            p1.Add(\"Venus\");\n\
    \            p1.Add(\"Earth\");\n            p1.Add(\"Mars\");\n            p1.Add(\"\
    Jupiter\");\n            p1.Add(\"Saturn\");\n            p1.Add(\"Uranus\");\n\
    \            p1.Add(\"Neptune\");\n        }\n        else if (planet1 == \"Venus\"\
    )\n        {\n            p1.Add(\"Earth\");\n            p1.Add(\"Mars\");\n\
    \            p1.Add(\"Jupiter\");\n            p1.Add(\"Saturn\");\n         \
    \   p1.Add(\"Uranus\");\n            p1.Add(\"Neptune\");\n        }\n       \
    \ else if (planet1 == \"Earth\")\n        {\n            p1.Add(\"Mars\");\n \
    \           p1.Add(\"Jupiter\");\n            p1.Add(\"Saturn\");\n          \
    \  p1.Add(\"Uranus\");\n            p1.Add(\"Neptune\");\n        }\n        else\
    \ if (planet1 == \"Mars\")\n        {\n            p1.Add(\"Jupiter\");\n    \
    \        p1.Add(\"Saturn\");\n            p1.Add(\"Uranus\");\n            p1.Add(\"\
    Neptune\");\n        }\n        else if (planet1 == \"Jupiter\")\n        {\n\
    \            p1.Add(\"Saturn\");\n            p1.Add(\"Uranus\");\n          \
    \  p1.Add(\"Neptune\");\n        }\n        else if (planet1 == \"Saturn\")\n\
    \        {\n            p1.Add(\"Uranus\");\n            p1.Add(\"Neptune\");\n\
    \        }\n        else if (planet1 == \"Uranus\")\n        {\n            p1.Add(\"\
    Neptune\");\n        }\n        else if (planet1 == \"Neptune\")\n        {\n\
    \            p1.Add(\"\");\n        }\n        if (planet2 == \"Mercury\")\n \
    \       {\n            p2.Add(\"Venus\");\n            p2.Add(\"Earth\");\n  \
    \          p", "        Debug.Assert(planet1 != null);\n        Debug.Assert(planet2\
    \ != null);\n        Debug.Assert(planet1.Length > 0);\n        Debug.Assert(planet2.Length\
    \ > 0);\n        // code here \n        return null;", "        List<string> result\
    \ = new List<string>();\n        if(planet1 == planet2) { return result; }\n \
    \       if(planet1 == \"Jupiter\") {\n            if(planet2 == \"Neptune\") {\n\
    \                result.Add(\"Saturn\");\n                result.Add(\"Uranus\"\
    );\n            }\n            if(planet2 == \"Saturn\") {\n                result.Add(\"\
    Saturn\");\n            }\n            if(planet2 == \"Uranus\") {\n         \
    \       result.Add(\"Saturn\");\n                result.Add(\"Uranus\");\n   \
    \         }\n        }\n        if(planet1 == \"Saturn\") {\n            if(planet2\
    \ == \"Neptune\") {\n                result.Add(\"Uranus\");\n            }\n\
    \            if(planet2 == \"Uranus\") {\n                result.Add(\"Uranus\"\
    );\n            }\n        }\n        if(planet1 == \"Mars\") {\n            if(planet2\
    \ == \"Neptune\") {\n                result.Add(\"Jupiter\");\n              \
    \  result.Add(\"Saturn\");\n                result.Add(\"Uranus\");\n        \
    \    }\n            if(planet2 == \"Jupiter\") {\n                result.Add(\"\
    Jupiter\");\n            }\n            if(planet2 == \"Saturn\") {\n        \
    \        result.Add(\"Jupiter\");\n                result.Add(\"Saturn\");\n \
    \           }\n            if(planet2 == \"Uranus\") {\n                result.Add(\"\
    Jupiter\");\n                result.Add(\"Saturn\");\n                result.Add(\"\
    Uranus\");\n            }\n        }\n        if(planet1 == \"Earth\") {\n   \
    \         if(planet2 == \"Neptune\") {\n                result.Add(\"Mars\");\n\
    \                result.Add(\"Jupiter\");\n                result.Add(\"Saturn\"\
    );\n                result.Add(\"Uranus\");\n            }\n            if(planet2\
    \ == \"Mars\") {\n                result.Add(\"Mars\");\n            }\n     \
    \       if(planet2 == \"Jupiter\") {\n                result.Add(\"Mars\");\n\
    \                result.Add(\"Jupiter\");\n            }\n            if(planet2\
    \ == \"Saturn\") {\n                result.Add(\"Mars\");\n                result.Add(\"\
    Jupiter\");\n               ", "        List<string> planets = new List<string>(new\
    \ string[]{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"});\n        if (planets.Contains(planet1) && planets.Contains(planet2))\
    \ {\n            if (planets.IndexOf(planet1) < planets.IndexOf(planet2)) {\n\
    \                return planets.GetRange(planets.IndexOf(planet1) + 1, planets.IndexOf(planet2)\
    \ - planets.IndexOf(planet1) - 1);\n            } else {\n                return\
    \ planets.GetRange(planets.IndexOf(planet2) + 1, planets.IndexOf(planet1) - planets.IndexOf(planet2)\
    \ - 1);\n            }\n        } else {\n            return new List<string>();\n\
    \        }", "        string[] planets = new string[]{\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \      List<string> result = new List<string>();\n        int indexOfPlanet1 =\
    \ Array.IndexOf(planets, planet1);\n        int indexOfPlanet2 = Array.IndexOf(planets,\
    \ planet2);\n        if(indexOfPlanet1 < 0 || indexOfPlanet2 < 0) {\n        \
    \    return result;\n        }\n        if(indexOfPlanet1 > indexOfPlanet2) {\n\
    \            int temp = indexOfPlanet1;\n            indexOfPlanet1 = indexOfPlanet2;\n\
    \            indexOfPlanet2 = temp;\n        }\n        for(int i = indexOfPlanet1\
    \ + 1; i < indexOfPlanet2; i++) {\n            result.Add(planets[i]);\n     \
    \   }\n        return result;", "        string[] planets = new string[] {(string)\"\
    Mercury\", (string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"\
    Jupiter\", (string)\"Saturn\", (string)\"Uranus\", (string)\"Neptune\"};\n   \
    \     List<string> result = new List<string>();\n        for (int i = 0; i < planets.Length;\
    \ i++) {\n            if (planets[i] == planet1) {\n                for (int j\
    \ = i + 1; j < planets.Length; j++) {\n                    if (planets[j] == planet2)\
    \ {\n                        for (int k = i + 1; k < j; k++) {\n             \
    \               result.Add(planets[k]);\n                        }\n         \
    \               return result;\n                    }\n                }\n   \
    \         }\n        }\n        return result;", "        // ReSharper disable\
    \ once UseObjectOrCollectionInitializer\n        var planets = new List<string>();\n\
    \        var order = new List<string> {\n            \"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        };\n\
    \        var index1 = order.IndexOf(planet1);\n        var index2 = order.IndexOf(planet2);\n\
    \        if (index1 < 0 || index2 < 0) {\n            return planets;\n      \
    \  }\n        if (index1 > index2) {\n            planets.AddRange(order.GetRange(index2,\
    \ index1 - index2 + 1));\n        } else {\n            planets.AddRange(order.GetRange(index1,\
    \ index2 - index1 + 1));\n        }\n        return planets;", '        throw
    new NotImplementedException();', "        var dict = new Dictionary<string, int>();\n\
    \        dict.Add(\"Mercury\", 0);\n        dict.Add(\"Venus\", 1);\n        dict.Add(\"\
    Earth\", 2);\n        dict.Add(\"Mars\", 3);\n        dict.Add(\"Jupiter\", 4);\n\
    \        dict.Add(\"Saturn\", 5);\n        dict.Add(\"Uranus\", 6);\n        dict.Add(\"\
    Neptune\", 7);\n        List<string> p1 = new List<string>();\n        List<string>\
    \ p2 = new List<string>();\n        if (dict.ContainsKey(planet1) && dict.ContainsKey(planet2))\n\
    \        {\n            p1.Add(planet1);\n            p2.Add(planet2);\n     \
    \   }\n        else\n        {\n            return new List<string>();\n     \
    \   }\n        List<string> ls = new List<string>();\n        foreach (var item\
    \ in dict)\n        {\n            if (dict[planet1] < dict[planet2])\n      \
    \      {\n                if (item.Value >= dict[planet1] && item.Value <= dict[planet2])\n\
    \                {\n                    ls.Add(item.Key);\n                }\n\
    \            }\n            else\n            {\n                if (item.Value\
    \ >= dict[planet2] && item.Value <= dict[planet1])\n                {\n      \
    \              ls.Add(item.Key);\n                }\n            }\n        }\n\
    \        return ls;", "        List<string> planets = new List<string>(new string[]{(string)\"\
    Mercury\", (string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"\
    Jupiter\", (string)\"Saturn\", (string)\"Uranus\", (string)\"Neptune\"});\n  \
    \      int p1 = planets.IndexOf(planet1);\n        int p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        if (p1\
    \ > p2) { int tmp = p1; p1 = p2; p2 = tmp; }\n        List<string> ret = new List<string>();\n\
    \        for (int i = p1 + 1; i < p2; i++) ret.Add(planets[i]);\n        return\
    \ ret;", "        List<string> orbits = new List<string>(new string[]{(string)\"\
    Mercury\", (string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"\
    Jupiter\", (string)\"Saturn\", (string)\"Uranus\", (string)\"Neptune\"});\n  \
    \      List<string> result = new List<string>();\n        int index1 = orbits.IndexOf(planet1);\n\
    \        int index2 = orbits.IndexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 > index2)\
    \ {\n            int temp = index1;\n            index1 = index2;\n          \
    \  index2 = temp;\n        }\n        for (int i = index1; i < index2; i++) {\n\
    \            result.Add(orbits[i]);\n        }\n        return result;", "   \
    \     int max, min;\n        if (Data.TryGetValue(planet1, out min) && Data.TryGetValue(planet2,\
    \ out max)) {\n            if (min < max)\n                return Data.Where(x\
    \ => x.Value > min && x.Value < max).OrderBy(x => x.Value).Select(x => x.Key).ToList();\n\
    \            else\n                return Data.Where(x => x.Value > max && x.Value\
    \ < min).OrderBy(x => x.Value).Select(x => x.Key).ToList();\n        }\n     \
    \   return new List<string>();", "        // make dictionary of planets\n    \
    \    Dictionary<string, int> planets = new Dictionary<string, int>();\n      \
    \  planets.Add(\"Mercury\", 0);\n        planets.Add(\"Venus\", 1);\n        planets.Add(\"\
    Earth\", 2);\n        planets.Add(\"Mars\", 3);\n        planets.Add(\"Jupiter\"\
    , 4);\n        planets.Add(\"Saturn\", 5);\n        planets.Add(\"Uranus\", 6);\n\
    \        planets.Add(\"Neptune\", 7);\n        // check input\n        if (!planets.ContainsKey(planet1)\
    \ || !planets.ContainsKey(planet2)) {\n            throw new ArgumentException(\"\
    Invalid argument\");\n        }\n        // create empty list\n        List<string>\
    \ result = new List<string>();\n        // find out the starting and ending point\n\
    \        int start = planets[planet1];\n        int end = planets[planet2];\n\
    \        // add all planets to result if starting point is greater than ending\
    \ point\n        if (start > end) {\n            while (start > end) {\n     \
    \           // add planet to result\n                result.Add(planets.FirstOrDefault(x\
    \ => x.Value == start).Key);\n                // decrement starting point\n  \
    \              start--;\n            }\n        }\n        // add all planets\
    \ to result if starting point is less than ending point\n        else if (start\
    \ < end) {\n            while (start < end) {\n                // add planet to\
    \ result\n                result.Add(planets.FirstOrDefault(x => x.Value == start).Key);\n\
    \                // increment starting point\n                start++;\n     \
    \       }\n        }\n        // return result\n        return result;", "   \
    \     List<string> planets = new List<string>(new string[]{\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"});\n \
    \       int startIdx = planets.IndexOf(planet1);\n        int endIdx = planets.IndexOf(planet2);\n\
    \        if (startIdx == -1 || endIdx == -1) {\n            return new List<string>();\n\
    \        }\n        if (startIdx < endIdx) {\n            return planets.GetRange(startIdx\
    \ + 1, endIdx - startIdx - 1);\n        } else {\n            return planets.GetRange(endIdx\
    \ + 1, startIdx - endIdx - 1);\n        }", "        List<string> list = new List<string>();\n\
    \        Dictionary<string, int> dic = new Dictionary<string, int>();\n      \
    \  dic.Add(\"Mercury\", 1);\n        dic.Add(\"Venus\", 2);\n        dic.Add(\"\
    Earth\", 3);\n        dic.Add(\"Mars\", 4);\n        dic.Add(\"Jupiter\", 5);\n\
    \        dic.Add(\"Saturn\", 6);\n        dic.Add(\"Uranus\", 7);\n        dic.Add(\"\
    Neptune\", 8);\n        if (dic.ContainsKey(planet1) && dic.ContainsKey(planet2))\
    \ {\n            if (dic[planet1] > dic[planet2]) {\n                int tmp =\
    \ dic[planet1];\n                dic[planet1] = dic[planet2];\n              \
    \  dic[planet2] = tmp;\n            }\n            for (int i = dic[planet1] +\
    \ 1; i < dic[planet2]; i++) {\n                foreach (var item in dic) {\n \
    \                   if (item.Value == i) {\n                        list.Add(item.Key);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ list;", "        string[] planets = new string[]{\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n      \
    \  if (!planets.Contains(planet1) || !planets.Contains(planet2))\n           \
    \ return new List<string>();\n        List<string> ans = new List<string>();\n\
    \        int l = planets.IndexOf(planet1);\n        int r = planets.IndexOf(planet2);\n\
    \        if (l > r) {\n            int k = l;\n            l = r;\n          \
    \  r = k;\n        }\n        for (int i = l + 1; i < r; i++)\n            ans.Add(planets[i]);\n\
    \        return ans;", "        List<string> allPlanets = new List<string>(new\
    \ string[]{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"});\n        List<string> answer = new List<string>();\n\
    \        int from = allPlanets.IndexOf(planet1);\n        int to = allPlanets.IndexOf(planet2);\n\
    \        if (from > to) {\n            from += to;\n            to = from - to;\n\
    \            from = from - to;\n        }\n        for (int i = from; i <= to;\
    \ i++) {\n            answer.Add(allPlanets[i]);\n        }\n        return answer;",
  "        var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 =\
    \ planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n    \
    \    if (p1 == -1 || p2 == -1) {\n            return new List<string>();\n   \
    \     }\n        var (min, max) = p1 < p2 ? (p1, p2) : (p2, p1);\n        return\
    \ planets.Skip(min + 1).Take(max - min - 1).ToList();", "        if (planet1 ==\
    \ null || planet2 == null)\n            return new List<string>();\n        var\
    \ planets = new List<string>(){\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        int index1 = planets.IndexOf(planet1);\n\
    \        int index2 = planets.IndexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1)\n            return new List<string>();\n        int first = Math.Min(index1,\
    \ index2);\n        int last = Math.Max(index1, index2);\n        return planets.GetRange(first\
    \ + 1, last - first - 1);", "        var planets = new List<string>();\n     \
    \   var list = new List<string>();\n        var first = planet2;\n        var\
    \ second = planet1;\n        planets.Add(\"Mercury\");\n        planets.Add(\"\
    Venus\");\n        planets.Add(\"Earth\");\n        planets.Add(\"Mars\");\n \
    \       planets.Add(\"Jupiter\");\n        planets.Add(\"Saturn\");\n        planets.Add(\"\
    Uranus\");\n        planets.Add(\"Neptune\");\n        if (planets.Contains(planet1)\
    \ && planets.Contains(planet2)) {\n            if (planets.IndexOf(planet1) <\
    \ planets.IndexOf(planet2)) {\n                first = planet1;\n            \
    \    second = planet2;\n            }\n            for (int i = planets.IndexOf(first)\
    \ + 1; i < planets.IndexOf(second); i++) {\n                list.Add(planets[i]);\n\
    \            }\n        }\n        return list;", "        // The idea is to first\
    \ get the planets in order from the closest \n        // to the sun to the farthest:\n\
    \        List<string> allPlanets = new List<string>(new string[] {\n         \
    \   \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n        });\n        // Then we check if planet1 and planet2 are\
    \ valid planet names\n        // and if so, we use the indexOf method to find\
    \ them in the \n        // array of planets.\n        if (!allPlanets.Contains(planet1)\
    \ || !allPlanets.Contains(planet2))\n            return new List<string>();\n\
    \        // Finally, we use the indexOf method to find the\n        // index of\
    \ the planets in the list of planets. \n        // Then, we return the sublist\
    \ starting at the index of planet1 \n        // and ending at the index of planet2.\n\
    \        int i1 = allPlanets.IndexOf(planet1);\n        int i2 = allPlanets.IndexOf(planet2);\n\
    \        return allPlanets.GetRange(i1, i2-i1+1);", "        List<string> ret\
    \ = new List<string>();\n        if (planet1 == \"Mercury\") {\n            if\
    \ (planet2 == \"Venus\") {\n                ret.Add(\"Venus\");\n            }\
    \ else if (planet2 == \"Earth\") {\n                ret.Add(\"Venus\");\n    \
    \            ret.Add(\"Earth\");\n            } else if (planet2 == \"Mars\")\
    \ {\n                ret.Add(\"Venus\");\n                ret.Add(\"Earth\");\n\
    \                ret.Add(\"Mars\");\n            } else if (planet2 == \"Jupiter\"\
    ) {\n                ret.Add(\"Venus\");\n                ret.Add(\"Earth\");\n\
    \                ret.Add(\"Mars\");\n                ret.Add(\"Jupiter\");\n \
    \           } else if (planet2 == \"Saturn\") {\n                ret.Add(\"Venus\"\
    );\n                ret.Add(\"Earth\");\n                ret.Add(\"Mars\");\n\
    \                ret.Add(\"Jupiter\");\n                ret.Add(\"Saturn\");\n\
    \            } else if (planet2 == \"Uranus\") {\n                ret.Add(\"Venus\"\
    );\n                ret.Add(\"Earth\");\n                ret.Add(\"Mars\");\n\
    \                ret.Add(\"Jupiter\");\n                ret.Add(\"Saturn\");\n\
    \                ret.Add(\"Uranus\");\n            } else if (planet2 == \"Neptune\"\
    ) {\n                ret.Add(\"Venus\");\n                ret.Add(\"Earth\");\n\
    \                ret.Add(\"Mars\");\n                ret.Add(\"Jupiter\");\n \
    \               ret.Add(\"Saturn\");\n                ret.Add(\"Uranus\");\n \
    \               ret.Add(\"Neptune\");\n            }\n        } else if (planet1\
    \ == \"Venus\") {\n            if (planet2 == \"Earth\") {\n                ret.Add(\"\
    Earth\");\n            } else if (planet2 == \"Mars\") {\n                ret.Add(\"\
    Earth\");\n                ret.Add(\"Mars\");\n            } else if (planet2\
    \ == \"Jupiter\") {\n                ret.Add(\"Earth\");\n                ret.Add(\"\
    Mars\");\n                ret.Add(\"Jupiter\");\n            } else if (planet2\
    \ == \"Saturn\") {\n                ret.Add(\"Earth\");\n                ret.Add(\"\
    Mars\");\n                ret.Add(\"Jupiter\");\n                ret", "     \
    \   // write your code here\n        return null;", "        var allPlanets =\
    \ new List<string>{\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        };\n        var planet1Position\
    \ = allPlanets.IndexOf(planet1);\n        var planet2Position = allPlanets.IndexOf(planet2);\n\
    \        var positionOfTheNewList = Math.Min(planet1Position, planet2Position);\n\
    \        var lengthOfTheNewList = Math.Abs(planet1Position - planet2Position)\
    \ + 1;\n        return allPlanets.GetRange(positionOfTheNewList, lengthOfTheNewList);",
  "        var planets = new string[]{\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        var planetPos1 =\
    \ Array.IndexOf(planets, planet1);\n        var planetPos2 = Array.IndexOf(planets,\
    \ planet2);\n        if (planetPos1 == -1 || planetPos2 == -1) {\n           \
    \ return new List<string>();\n        }\n        if (planetPos1 > planetPos2)\
    \ {\n            return new List<string>(new string[]{});\n        }\n       \
    \ return new List<string>(planets.Skip(planetPos1).Take(planetPos2 - planetPos1));",
  "        // copy-pasted from my Google Drive, initially written for Python\n   \
    \     var planets = new List<string>() {\n            \"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    \
    \    };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 < 0 || p2 < 0) return new List<string>();\n        var res = new\
    \ List<string>();\n        if (p1 > p2) {\n            p1 = p1 + p2;\n       \
    \     p2 = p1 - p2;\n            p1 = p1 - p2;\n        }\n        for (int i\
    \ = p1 + 1; i < p2; i++) {\n            res.Add(planets[i]);\n        }\n    \
    \    return res;", "        List<string> inner = new List<string> { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        if (!inner.Contains(planet1) || !inner.Contains(planet2)) {\n  \
    \          return new List<string>();\n        }\n        int i1 = inner.IndexOf(planet1);\n\
    \        int i2 = inner.IndexOf(planet2);\n        if (i1 > i2) {\n          \
    \  return inner.GetRange(i2 + 1, i1 - i2 - 1);\n        }\n        return inner.GetRange(i1\
    \ + 1, i2 - i1 - 1);", "        string[] planets = new string[] {\n          \
    \  \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n        };\n        int i1 = Array.IndexOf(planets, planet1);\n\
    \        int i2 = Array.IndexOf(planets, planet2);\n        if(i1 == -1 || i2\
    \ == -1) {\n            return new List<string>();\n        }\n        int min\
    \ = Math.Min(i1, i2);\n        int max = Math.Max(i1, i2);\n        List<string>\
    \ res = new List<string>();\n        for(int i = min + 1; i < max; i++) {\n  \
    \          res.Add(planets[i]);\n        }\n        return res;", "        string[]\
    \ planets = new string[]{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"};\n        int fromIndex = Array.IndexOf(planets,\
    \ planet1);\n        int toIndex = Array.IndexOf(planets, planet2);\n        if\
    \ (fromIndex == -1 || toIndex == -1) {\n            return new List<string>();\n\
    \        }\n        if (fromIndex > toIndex) {\n            int temp = fromIndex;\n\
    \            fromIndex = toIndex;\n            toIndex = temp;\n        }\n  \
    \      return planets.Skip(fromIndex + 1).Take(toIndex - fromIndex - 1).ToList();",
  "        List<string> result = new List<string>();\n        string[] planets = new\
    \ string[] {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n        int index1 = -1;\n        int index2 = -1;\n\
    \        for (int i = 0; i < planets.Length; i++) {\n            if (planets[i]\
    \ == planet1) {\n                index1 = i;\n            }\n            if (planets[i]\
    \ == planet2) {\n                index2 = i;\n            }\n        }\n     \
    \   if (index1 == -1 || index2 == -1) {\n            return result;\n        }\n\
    \        if (index1 > index2) {\n            return result;\n        }\n     \
    \   for (int i = index1 + 1; i < index2; i++) {\n            result.Add(planets[i]);\n\
    \        }\n        return result;", '        return Enumerable.Range(0, 8).Select(i
    => ((Orbits)i).ToString()).Where(planet => planet == planet1 || planet == planet2).ToList();',
  "        // Your code goes here\n        List<string> pt1 = new List<string> { \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        if (!pt1.Contains(planet1) || !pt1.Contains(planet2))\n\
    \        {\n            return new List<string>();\n        }\n        else\n\
    \        {\n            var index1 = pt1.IndexOf(planet1);\n            var index2\
    \ = pt1.IndexOf(planet2);\n            List<string> result = new List<string>();\n\
    \            if (index1 < index2)\n            {\n                for (int i =\
    \ index1 + 1; i < index2; i++)\n                {\n                    result.Add(pt1[i]);\n\
    \                }\n            }\n            else\n            {\n         \
    \       for (int i = index2 + 1; i < index1; i++)\n                {\n       \
    \             result.Add(pt1[i]);\n                }\n            }\n        \
    \    return result;\n        }", "        string[] planets = { \"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        List<string> result = new List<string>();\n        int pos1 = Array.IndexOf(planets,\
    \ planet1);\n        int pos2 = Array.IndexOf(planets, planet2);\n        if (pos1\
    \ == -1 || pos2 == -1) {\n            return result;\n        }\n        if (pos1\
    \ > pos2) {\n            pos1 = pos1 + pos2;\n            pos2 = pos1 - pos2;\n\
    \            pos1 = pos1 - pos2;\n        }\n        for (int i = pos1 + 1; i\
    \ < pos2; i++) {\n            result.Add(planets[i]);\n        }\n        return\
    \ result;", "        List<string> planets = new List<string>(new string[] { \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" });\n        int i1 = planets.IndexOf(planet1);\n        int i2\
    \ = planets.IndexOf(planet2);\n        List<string> ret;\n        if (i1 == -1\
    \ || i2 == -1)\n            ret = new List<string>();\n        else if (i1 < i2)\n\
    \            ret = planets.GetRange(i1 + 1, i2 - i1 - 1);\n        else\n    \
    \        ret = planets.GetRange(i2 + 1, i1 - i2 - 1);\n        return ret;", " \
    \       var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        int lower\
    \ = Math.Min(planets.IndexOf(planet1), planets.IndexOf(planet2));\n        int\
    \ upper = Math.Max(planets.IndexOf(planet1), planets.IndexOf(planet2));\n    \
    \    var result = new List<string>();\n        for (int i = lower + 1; i < upper;\
    \ i++) {\n            result.Add(planets[i]);\n        }\n        return result;",
  "        Dictionary<string, int> planets = new Dictionary<string, int>();\n    \
    \    planets.Add(\"Mercury\", 1);\n        planets.Add(\"Venus\", 2);\n      \
    \  planets.Add(\"Earth\", 3);\n        planets.Add(\"Mars\", 4);\n        planets.Add(\"\
    Jupiter\", 5);\n        planets.Add(\"Saturn\", 6);\n        planets.Add(\"Uranus\"\
    , 7);\n        planets.Add(\"Neptune\", 8);\n        List<string> sortedPlanets\
    \ = new List<string>();\n        if (planets.ContainsKey(planet1) && planets.ContainsKey(planet2))\
    \ {\n            int planet1Num = planets[planet1];\n            int planet2Num\
    \ = planets[planet2];\n            int start = Math.Min(planet1Num, planet2Num);\n\
    \            int end = Math.Max(planet1Num, planet2Num);\n            for (int\
    \ i = start; i <= end; i++) {\n                foreach (var planet in planets)\
    \ {\n                    if (planet.Value == i) {\n                        sortedPlanets.Add(planet.Key);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sortedPlanets;", "        Dictionary<string, double> planetDistance = new Dictionary<string,\
    \ double>();\n        planetDistance.Add(\"Mercury\", 57.9);\n        planetDistance.Add(\"\
    Venus\", 108.2);\n        planetDistance.Add(\"Earth\", 149.6);\n        planetDistance.Add(\"\
    Mars\", 227.9);\n        planetDistance.Add(\"Jupiter\", 778.3);\n        planetDistance.Add(\"\
    Saturn\", 1427.0);\n        planetDistance.Add(\"Uranus\", 2871.0);\n        planetDistance.Add(\"\
    Neptune\", 4497.1);\n        planetDistance.Add(\"Pluto\", 5913.0);\n        List<string>\
    \ planets = new List<string>();\n        if (!planetDistance.ContainsKey(planet1)\
    \ || !planetDistance.ContainsKey(planet2)) {\n            return planets;\n  \
    \      }\n        double min = planetDistance[planet1];\n        double max =\
    \ planetDistance[planet2];\n        if (min > max) {\n            min = planetDistance[planet2];\n\
    \            max = planetDistance[planet1];\n        }\n        foreach (var item\
    \ in planetDistance) {\n            if (item.Value > min && item.Value < max)\
    \ {\n                planets.Add(item.Key);\n            }\n        }\n      \
    \  return planets;", "        var list = new List<string>() {\n            \"\
    Mercury\",\n            \"Venus\",\n            \"Earth\",\n            \"Mars\"\
    ,\n            \"Jupiter\",\n            \"Saturn\",\n            \"Uranus\",\n\
    \            \"Neptune\"\n        };\n        var index1 = list.IndexOf(planet1);\n\
    \        var index2 = list.IndexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return new List<string>();\n        }\n        var s =\
    \ Math.Min(index1, index2);\n        var e = Math.Max(index1, index2);\n     \
    \   return list.GetRange(s, e - s);", "        List<string> planets = new List<string>(new\
    \ string[]{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"});\n        if (!planets.Contains(planet1) || !planets.Contains(planet2))\
    \ return new List<string>();\n        int start = planets.IndexOf(planet1), end\
    \ = planets.IndexOf(planet2);\n        if (start > end) {\n            start =\
    \ end;\n            end = planets.IndexOf(planet1);\n        }\n        return\
    \ planets.GetRange(start+1, end-start-1);", "        string[] planets = { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        List<string> list = new List<string>();\n        int p1 = -1;\n\
    \        int p2 = -1;\n        for (int i = 0; i < planets.Length; i++) {\n  \
    \          if (planets[i] == planet1) p1 = i;\n            if (planets[i] == planet2)\
    \ p2 = i;\n        }\n        if (p1 == -1 || p2 == -1) return list;\n       \
    \ int dir = 1;\n        if (p1 > p2) dir = -1;\n        for (int i = p1 + dir;\
    \ i != p2; i += dir) {\n            list.Add(planets[i]);\n        }\n       \
    \ return list;", "        List<string> planets = new List<string>(new string[]{\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"});\n        List<string> result = new List<string>();\n        int\
    \ index1 = planets.IndexOf(planet1);\n        int index2 = planets.IndexOf(planet2);\n\
    \        if (index1 < 0 || index2 < 0) {\n            return result;\n       \
    \ }\n        if (index1 < index2) {\n            for (int i = index1 + 1; i <\
    \ index2; i++) {\n                result.Add(planets[i]);\n            }\n   \
    \     } else {\n            for (int i = index2 + 1; i < index1; i++) {\n    \
    \            result.Add(planets[i]);\n            }\n        }\n        return\
    \ result;", "        List<string> p1 = new List<string>(new string[] { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ });\n        List<string> r = new List<string>();\n        int i1 = p1.IndexOf(planet1);\n\
    \        int i2 = p1.IndexOf(planet2);\n        if (i1 < 0 || i2 < 0) {\n    \
    \        return r;\n        }\n        int min = i1;\n        int max = i2;\n\
    \        if (min > max) {\n            int t = min;\n            min = max;\n\
    \            max = t;\n        }\n        for (int i = min + 1; i < max; i++)\
    \ {\n            r.Add(p1[i]);\n        }\n        return r;", "        var res\
    \ = new List<string>();\n        string[] planets = { \"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n \
    \       int planet1Index = Array.IndexOf(planets, planet1);\n        int planet2Index\
    \ = Array.IndexOf(planets, planet2);\n        if (planet1Index > planet2Index)\n\
    \        {\n            planet1Index = planet1Index ^ planet2Index;\n        \
    \    planet2Index = planet1Index ^ planet2Index;\n            planet1Index = planet1Index\
    \ ^ planet2Index;\n        }\n        if (planet1Index >= 0 && planet2Index >=\
    \ 0)\n        {\n            while (planet1Index <= planet2Index)\n          \
    \  {\n                res.Add(planets[planet1Index]);\n                planet1Index++;\n\
    \            }\n        }\n        return res;", "        List<string> planets\
    \ = new List<string>(new string[]{\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"});\n        int planet1_index\
    \ = planets.IndexOf(planet1);\n        int planet2_index = planets.IndexOf(planet2);\n\
    \        if (planet1_index == -1 || planet2_index == -1) {\n            return\
    \ new List<string>();\n        }\n        int start = planet1_index;\n       \
    \ int end = planet2_index;\n        if (planet1_index > planet2_index) {\n   \
    \         start = planet2_index;\n            end = planet1_index;\n        }\n\
    \        return planets.GetRange(start + 1, end - start - 1);", "        List<string>\
    \ planets = new List<string>(new string[]{\n                (string)\"Mercury\"\
    , (string)\"Venus\", (string)\"Earth\", (string)\"Mars\", \n                (string)\"\
    Jupiter\", (string)\"Saturn\", (string)\"Uranus\", (string)\"Neptune\"});\n  \
    \      List<string> res = new List<string>();\n        if (!planets.Contains(planet1)\
    \ || !planets.Contains(planet2)) {\n            return res;\n        }\n     \
    \   int p1 = planets.IndexOf(planet1);\n        int p2 = planets.IndexOf(planet2);\n\
    \        int s, e;\n        if (p1 < p2) {\n            s = p1;\n            e\
    \ = p2;\n        } else {\n            s = p2;\n            e = p1;\n        }\n\
    \        while (s < e) {\n            s += 1;\n            res.Add(planets[s]);\n\
    \        }\n        return res;", "        if (planet1 == \"Mercury\") {\n   \
    \         if (planet2 == \"Mercury\") {\n                return new List<string>();\n\
    \            }\n            if (planet2 == \"Venus\") {\n                return\
    \ new List<string>();\n            }\n            if (planet2 == \"Earth\") {\n\
    \                return new List<string>() { \"Venus\" };\n            }\n   \
    \         if (planet2 == \"Mars\") {\n                return new List<string>()\
    \ { \"Venus\", \"Earth\" };\n            }\n            if (planet2 == \"Jupiter\"\
    ) {\n                return new List<string>() { \"Venus\", \"Earth\", \"Mars\"\
    \ };\n            }\n            if (planet2 == \"Saturn\") {\n              \
    \  return new List<string>() { \"Venus\", \"Earth\", \"Mars\", \"Jupiter\" };\n\
    \            }\n            if (planet2 == \"Uranus\") {\n                return\
    \ new List<string>() { \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    \ };\n            }\n            if (planet2 == \"Neptune\") {\n             \
    \   return new List<string>() { \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\" };\n            }\n        }\n        if (planet1 == \"Venus\"\
    ) {\n            if (planet2 == \"Mercury\") {\n                return new List<string>();\n\
    \            }\n            if (planet2 == \"Venus\") {\n                return\
    \ new List<string>();\n            }\n            if (planet2 == \"Earth\") {\n\
    \                return new List<string>();\n            }\n            if (planet2\
    \ == \"Mars\") {\n                return new List<string>() { \"Earth\" };\n \
    \           }\n            if (planet2 == \"Jupiter\") {\n                return\
    \ new List<string>() { \"Earth\", \"Mars\" };\n            }\n            if (planet2\
    \ == \"Saturn\") {\n                return new List<string>() { \"Earth\", \"\
    Mars\", \"Jupiter\" };\n            }\n            if (planet2 == \"Uranus\")\
    \ {\n                return new List<string>() { \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\" };", "        Dictionary<string, int> dict = new Dictionary<string,\
    \ int>();\n        dict.Add(\"Mercury\", 1);\n        dict.Add(\"Venus\", 2);\n\
    \        dict.Add(\"Earth\", 3);\n        dict.Add(\"Mars\", 4);\n        dict.Add(\"\
    Jupiter\", 5);\n        dict.Add(\"Saturn\", 6);\n        dict.Add(\"Uranus\"\
    , 7);\n        dict.Add(\"Neptune\", 8);\n        List<string> res = new List<string>();\n\
    \        if (dict.ContainsKey(planet1) && dict.ContainsKey(planet2)) {\n     \
    \       int min = Math.Min(dict[planet1], dict[planet2]);\n            int max\
    \ = Math.Max(dict[planet1], dict[planet2]);\n            for (int i = min; i <=\
    \ max; i++) {\n                switch (i) {\n                    case 1:\n   \
    \                     res.Add(\"Mercury\");\n                        break;\n\
    \                    case 2:\n                        res.Add(\"Venus\");\n  \
    \                      break;\n                    case 3:\n                 \
    \       res.Add(\"Earth\");\n                        break;\n                \
    \    case 4:\n                        res.Add(\"Mars\");\n                   \
    \     break;\n                    case 5:\n                        res.Add(\"\
    Jupiter\");\n                        break;\n                    case 6:\n   \
    \                     res.Add(\"Saturn\");\n                        break;\n \
    \                   case 7:\n                        res.Add(\"Uranus\");\n  \
    \                      break;\n                    case 8:\n                 \
    \       res.Add(\"Neptune\");\n                        break;\n              \
    \  }\n            }\n        }\n        return res;", "        var planet_list\
    \ = new List<string>(new string[]{\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"});\n        int idx1 = planet_list.IndexOf(planet1);\n\
    \        int idx2 = planet_list.IndexOf(planet2);\n        var result = new List<string>();\n\
    \        for (int i = Math.Min(idx1, idx2) + 1; i < Math.Max(idx1, idx2); i++)\
    \ {\n            result.Add(planet_list[i]);\n        }\n        return result;",
  "        if (planet1 == null || planet2 == null) {\n            return new List<string>();\n\
    \        }\n        int i1 = Array.IndexOf(new string[]{(string)\"Mercury\", (string)\"\
    Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"Jupiter\", (string)\"\
    Saturn\", (string)\"Uranus\", (string)\"Neptune\"}, planet1);\n        int i2\
    \ = Array.IndexOf(new string[]{(string)\"Mercury\", (string)\"Venus\", (string)\"\
    Earth\", (string)\"Mars\", (string)\"Jupiter\", (string)\"Saturn\", (string)\"\
    Uranus\", (string)\"Neptune\"}, planet2);\n        int max = Math.Max(i1, i2);\n\
    \        int min = Math.Min(i1, i2);\n        List<string> res = new List<string>();\n\
    \        for (int i = min; i < max; i++) {\n            res.Add(new string[]{(string)\"\
    Mercury\", (string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"\
    Jupiter\", (string)\"Saturn\", (string)\"Uranus\", (string)\"Neptune\"}[i]);\n\
    \        }\n        return res;", "        string[] planets = new string[] { \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        int index1 = Array.IndexOf(planets, planet1);\n    \
    \    int index2 = Array.IndexOf(planets, planet2);\n        if (index1 < 0 ||\
    \ index2 < 0) return new List<string>();\n        if (index1 > index2) return\
    \ new List<string>();\n        return planets.ToList().GetRange(index1, index2\
    \ - index1 + 1);", "        string[] l = { \"Mercury\", \"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        int i1\
    \ = Array.IndexOf(l, planet1);\n        int i2 = Array.IndexOf(l, planet2);\n\
    \        List<string> r;\n        if (i1 == -1 || i2 == -1) {\n            r =\
    \ new List<string>();\n        } else if (i1 < i2) {\n            r = l.Skip(i1\
    \ + 1).Take(i2 - i1 - 1).ToList();\n        } else {\n            r = l.Skip(i2\
    \ + 1).Take(i1 - i2 - 1).ToList();\n        }\n        return r;", "        if\
    \ (planet1 == null || planet2 == null) {\n            throw new ArgumentNullException();\n\
    \        }\n        var planets = new List<string>{ \"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n     \
    \   if (!planets.Contains(planet1) || !planets.Contains(planet2)) {\n        \
    \    return new List<string>();\n        }\n        var planet1Index = planets.IndexOf(planet1);\n\
    \        var planet2Index = planets.IndexOf(planet2);\n        if (planet1Index\
    \ == planet2Index) {\n            return new List<string> { planet1 };\n     \
    \   }\n        var startIndex = planet1Index < planet2Index ? planet1Index : planet2Index;\n\
    \        var endIndex = planet1Index < planet2Index ? planet2Index : planet1Index;\n\
    \        return planets.GetRange(startIndex + 1, endIndex - startIndex - 1);",
  "        //Write a function body here\n        return null;", "        Dictionary<string,\
    \ int> planets = new Dictionary<string, int>();\n        planets.Add(\"Mercury\"\
    , 0);\n        planets.Add(\"Venus\", 1);\n        planets.Add(\"Earth\", 2);\n\
    \        planets.Add(\"Mars\", 3);\n        planets.Add(\"Jupiter\", 4);\n   \
    \     planets.Add(\"Saturn\", 5);\n        planets.Add(\"Uranus\", 6);\n     \
    \   planets.Add(\"Neptune\", 7);\n        if (planets.ContainsKey(planet1) &&\
    \ planets.ContainsKey(planet2)) {\n            int p1 = planets[planet1];\n  \
    \          int p2 = planets[planet2];\n            if (p1 < p2) {\n          \
    \      var ret = new List<string>();\n                for (int i = p1 + 1; i <\
    \ p2; i++) {\n                    ret.Add(planets.First(x => x.Value == i).Key);\n\
    \                }\n                return ret;\n            } else {\n      \
    \          var ret = new List<string>();\n                for (int i = p2 + 1;\
    \ i < p1; i++) {\n                    ret.Add(planets.First(x => x.Value == i).Key);\n\
    \                }\n                return ret;\n            }\n        } else\
    \ {\n            return new List<string>();\n        }", "      // Your code here\n\
    \      return null;", "        List<string> orbits = new List<string>(new string[]{(string)\"\
    Mercury\", (string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"\
    Jupiter\", (string)\"Saturn\", (string)\"Uranus\", (string)\"Neptune\"});\n  \
    \      int i1 = orbits.IndexOf(planet1);\n        int i2 = orbits.IndexOf(planet2);\n\
    \        if (i1 < 0 || i2 < 0) {\n            return new List<string>();\n   \
    \     }\n        if (i1 > i2) {\n            int temp = i1;\n            i1 =\
    \ i2;\n            i2 = temp;\n        }\n        return orbits.GetRange(i1 +\
    \ 1, i2 - i1 - 1);", "        var planets = new List<string> {\n            \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n        };\n        var idx1 = planets.IndexOf(planet1);\n    \
    \    var idx2 = planets.IndexOf(planet2);\n        var planetList = planets.GetRange(Math.Min(idx1,\
    \ idx2), Math.Abs(idx1 - idx2) + 1);\n        planetList.Remove(planet1);\n  \
    \      planetList.Remove(planet2);\n        return planetList;", "        Dictionary<string,\
    \ int> dict = new Dictionary<string, int>() { { \"Mercury\", 1 }, { \"Venus\"\
    , 2 }, { \"Earth\", 3 }, { \"Mars\", 4 }, { \"Jupiter\", 5 }, { \"Saturn\", 6\
    \ }, { \"Uranus\", 7 }, { \"Neptune\", 8 } };\n        if (dict.ContainsKey(planet1)\
    \ && dict.ContainsKey(planet2)) {\n            List<string> answer = new List<string>();\n\
    \            for (int i = dict[planet1]; i < dict[planet2]; i++) {\n         \
    \       answer.Add(dict.FirstOrDefault(x => x.Value == i).Key);\n            }\n\
    \            return answer;\n        }\n        return new List<string>();", " \
    \       List<string> list = new List<string>();\n        string[] planets = new\
    \ string[] { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\" };\n        int pos1 = -1;\n        int pos2 = -1;\n\
    \        for (int i = 0; i < planets.Length; i++) {\n            if (planets[i]\
    \ == planet1) {\n                pos1 = i;\n            }\n            if (planets[i]\
    \ == planet2) {\n                pos2 = i;\n            }\n        }\n       \
    \ if (pos1 == -1 || pos2 == -1) {\n            return list;\n        }\n     \
    \   if (pos1 == pos2) {\n            return list;\n        }\n        int start\
    \ = Math.Min(pos1, pos2);\n        int end = Math.Max(pos1, pos2);\n        for\
    \ (int i = start + 1; i < end; i++) {\n            list.Add(planets[i]);\n   \
    \     }\n        return list;", "        List<string> result = new List<string>();\n\
    \        var planets = new Dictionary<string, int>() {\n            {\"Mercury\"\
    , 1},\n            {\"Venus\", 2},\n            {\"Earth\", 3},\n            {\"\
    Mars\", 4},\n            {\"Jupiter\", 5},\n            {\"Saturn\", 6},\n   \
    \         {\"Uranus\", 7},\n            {\"Neptune\", 8}\n        };\n       \
    \ if (!planets.ContainsKey(planet1) || !planets.ContainsKey(planet2)) {\n    \
    \        return result;\n        }\n        int firstPlanet = planets[planet1];\n\
    \        int secondPlanet = planets[planet2];\n        if (firstPlanet > secondPlanet)\
    \ {\n            int temp = firstPlanet;\n            firstPlanet = secondPlanet;\n\
    \            secondPlanet = temp;\n        }\n        for (int i = firstPlanet\
    \ + 1; i < secondPlanet; i++) {\n            result.Add(planets.FirstOrDefault(x\
    \ => x.Value == i).Key);\n        }\n        return result;", "        Dictionary<string,\
    \ int> planets = new Dictionary<string, int>() {\n            { \"Mercury\", 0\
    \ },\n            { \"Venus\", 1 },\n            { \"Earth\", 2 },\n         \
    \   { \"Mars\", 3 },\n            { \"Jupiter\", 4 },\n            { \"Saturn\"\
    , 5 },\n            { \"Uranus\", 6 },\n            { \"Neptune\", 7 }\n     \
    \   };\n        int d = 0;\n        if (planets.ContainsKey(planet1) && planets.ContainsKey(planet2))\
    \ {\n            d = planets[planet1] - planets[planet2];\n        }\n       \
    \ List<string> list = new List<string>();\n        for (int i = 0; i < 8; i++)\
    \ {\n            if (d > 0) {\n                if (i >= planets[planet2] && i\
    \ <= planets[planet1]) {\n                    foreach (var x in planets) {\n \
    \                       if (x.Value == i) {\n                            list.Add(x.Key);\n\
    \                        }\n                    }\n                }\n       \
    \     } else if (d < 0) {\n                if (i >= planets[planet1] && i <= planets[planet2])\
    \ {\n                    foreach (var x in planets) {\n                      \
    \  if (x.Value == i) {\n                            list.Add(x.Key);\n       \
    \                 }\n                    }\n                }\n            }\n\
    \        }\n        return list;", "        List<string> allPlanets = new List<string>(new\
    \ string[]{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"});\n        List<string> result = new List<string>();\n\
    \        int i1 = allPlanets.IndexOf(planet1);\n        int i2 = allPlanets.IndexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) {\n            return result;\n        }\n\
    \        int min = Math.Min(i1, i2);\n        int max = Math.Max(i1, i2);\n  \
    \      for (int i = min + 1; i < max; i++) {\n            result.Add(allPlanets[i]);\n\
    \        }\n        return result;", "        var planets = new List<string>()\
    \ {\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"\n        };\n        var planet1Idx = planets.IndexOf(planet1);\n\
    \        var planet2Idx = planets.IndexOf(planet2);\n        if (planet1Idx ==\
    \ -1 || planet2Idx == -1) {\n            return new List<string>();\n        }\n\
    \        var minIdx = Math.Min(planet1Idx, planet2Idx);\n        var maxIdx =\
    \ Math.Max(planet1Idx, planet2Idx);\n        return planets.GetRange(minIdx +\
    \ 1, maxIdx - minIdx - 1);", "        string[] planets = new string[] { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        Dictionary<string, int> mp = new Dictionary<string, int>();\n  \
    \      for (int i = 0; i < planets.Length; i++) {\n            mp[planets[i]]\
    \ = i;\n        }\n        if (!mp.ContainsKey(planet1) || !mp.ContainsKey(planet2))\
    \ {\n            return new List<string>();\n        }\n        int l = Math.Min(mp[planet1],\
    \ mp[planet2]);\n        int r = Math.Max(mp[planet1], mp[planet2]);\n       \
    \ List<string> answer = new List<string>();\n        for (int i = l + 1; i < r;\
    \ i++) {\n            answer.Add(planets[i]);\n        }\n        return answer;",
  "        var planets = new string[] { \"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var pos1 = Array.IndexOf(planets,\
    \ planet1);\n        var pos2 = Array.IndexOf(planets, planet2);\n        if (pos1\
    \ == -1 || pos2 == -1) {\n            return new List<string>();\n        }\n\
    \        var min = Math.Min(pos1, pos2);\n        var max = Math.Max(pos1, pos2);\n\
    \        var result = new List<string>();\n        for (int i = min + 1; i < max;\
    \ i++) {\n            result.Add(planets[i]);\n        }\n        return result;",
  "        var our_planets = new List<string>(new string[]{(string)\"Mercury\", (string)\"\
    Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"Jupiter\", (string)\"\
    Saturn\", (string)\"Uranus\", (string)\"Neptune\"});\n        var planets = new\
    \ List<string>();\n        if (!our_planets.Contains(planet1) || !our_planets.Contains(planet2))\
    \ return planets;\n        var planet1_index = our_planets.IndexOf(planet1);\n\
    \        var planet2_index = our_planets.IndexOf(planet2);\n        for (int i\
    \ = planet1_index + 1; i < planet2_index; i++) {\n            planets.Add(our_planets[i]);\n\
    \        }\n        return planets;", "        var planets = new Dictionary<string,\
    \ int>() {\n            {\"Mercury\", 0},\n            {\"Venus\", 1},\n     \
    \       {\"Earth\", 2},\n            {\"Mars\", 3},\n            {\"Jupiter\"\
    , 4},\n            {\"Saturn\", 5},\n            {\"Uranus\", 6},\n          \
    \  {\"Neptune\", 7}\n        };\n        if (!planets.ContainsKey(planet1) ||\
    \ !planets.ContainsKey(planet2))\n            return new List<string>();\n   \
    \     var planets_list = new List<string> {\n            \"Mercury\",\n      \
    \      \"Venus\",\n            \"Earth\",\n            \"Mars\",\n           \
    \ \"Jupiter\",\n            \"Saturn\",\n            \"Uranus\",\n           \
    \ \"Neptune\"\n        };\n        var res = new List<string>();\n        var\
    \ start = planets[planet1];\n        var end = planets[planet2];\n        if (start\
    \ < end) {\n            for (var i = start + 1; i < end; i++)\n              \
    \  res.Add(planets_list[i]);\n        } else {\n            for (var i = start\
    \ - 1; i > end; i--)\n                res.Add(planets_list[i]);\n        }\n \
    \       return res;", '        return null;', "        var nameLookup = new Dictionary<string,\
    \ int>{\n            {\"Mercury\", 0},\n            {\"Venus\", 1},\n        \
    \    {\"Earth\", 2},\n            {\"Mars\", 3},\n            {\"Jupiter\", 4},\n\
    \            {\"Saturn\", 5},\n            {\"Uranus\", 6},\n            {\"Neptune\"\
    , 7}\n        };\n        var sorted = new List<string>{\n            \"Mercury\"\
    ,\n            \"Venus\",\n            \"Earth\",\n            \"Mars\",\n   \
    \         \"Jupiter\",\n            \"Saturn\",\n            \"Uranus\",\n   \
    \         \"Neptune\"\n        };\n        int from = -1;\n        int to = -1;\n\
    \        nameLookup.TryGetValue(planet1, out from);\n        nameLookup.TryGetValue(planet2,\
    \ out to);\n        if (from == -1 || to == -1) {\n            return new List<string>();\n\
    \        }\n        if (from < to) {\n            return sorted.GetRange(from,\
    \ to - from + 1);\n        } else {\n            return sorted.GetRange(to, from\
    \ - to + 1);\n        }", "        string[] planets = new string[] {(string)\"\
    Mercury\", (string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"\
    Jupiter\", (string)\"Saturn\", (string)\"Uranus\", (string)\"Neptune\"};\n   \
    \     int idx1 = Array.IndexOf(planets, planet1);\n        int idx2 = Array.IndexOf(planets,\
    \ planet2);\n        if (idx1 < 0 || idx2 < 0) return new List<string>();\n  \
    \      if (idx1 > idx2) return Bf(planet2, planet1);\n        return planets.Skip(idx1).Take(idx2\
    \ - idx1).ToList();", "        List<string> result = new List<string>();\n   \
    \     List<string> all_planets = new List<string>(new string[]{\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    });\n        int p1_ind = all_planets.IndexOf(planet1);\n        int p2_ind =\
    \ all_planets.IndexOf(planet2);\n        if (p1_ind == -1 || p2_ind == -1)\n \
    \           return result;\n        for (int i = p1_ind + 1; i < p2_ind; i++)\n\
    \            result.Add(all_planets[i]);\n        return result;", "        Dictionary<string,\
    \ int> planets = new Dictionary<string, int> {\n            { \"Mercury\", 1 },\n\
    \            { \"Venus\", 2 },\n            { \"Earth\", 3 },\n            { \"\
    Mars\", 4 },\n            { \"Jupiter\", 5 },\n            { \"Saturn\", 6 },\n\
    \            { \"Uranus\", 7 },\n            { \"Neptune\", 8 }\n        };\n\
    \        if (!planets.ContainsKey(planet1) || !planets.ContainsKey(planet2))\n\
    \            return new List<string>();\n        if (planets[planet1] > planets[planet2])\n\
    \            return new List<string>();\n        return planets.Where(p => p.Value\
    \ > planets[planet1] && p.Value < planets[planet2]).Select(p => p.Key).ToList();",
  "        string[] planets = { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\" };\n        int index1 = Array.IndexOf(planets,\
    \ planet1);\n        int index2 = Array.IndexOf(planets, planet2);\n        if\
    \ (index1 >= 0 && index2 >= 0) {\n            if (index1 > index2) {\n       \
    \         int tmp = index1;\n                index1 = index2;\n              \
    \  index2 = tmp;\n            }\n            List<string> res = new List<string>();\n\
    \            for (int i = index1 + 1; i < index2; i++) {\n                res.Add(planets[i]);\n\
    \            }\n            return res;\n        }\n        return new List<string>();",
  "        List<string> planets = new List<string>(new string[] { \"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ });\n        int start = planets.IndexOf(planet1);\n        int end = planets.IndexOf(planet2);\n\
    \        if (start == -1 || end == -1) {\n            return new List<string>();\n\
    \        }\n        if (start < end) {\n            return planets.GetRange(start\
    \ + 1, end - start - 1);\n        } else {\n            return planets.GetRange(end\
    \ + 1, start - end - 1);\n        }", "        string[] planets = new string[]\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        List<string> ans = new List<string>();\n        if (Array.IndexOf(planets,\
    \ planet1) == -1 || Array.IndexOf(planets, planet2) == -1)\n            return\
    \ ans;\n        int ind1 = Array.IndexOf(planets, planet1);\n        int ind2\
    \ = Array.IndexOf(planets, planet2);\n        if (ind1 > ind2) {\n           \
    \ int temp = ind1;\n            ind1 = ind2;\n            ind2 = temp;\n     \
    \   }\n        for (int i = ind1 + 1; i < ind2; i++)\n            ans.Add(planets[i]);\n\
    \        return ans;", "        var res = new List<string>();\n        if(planet1\
    \ == planet2) return res;\n        string s = \"Mercury,Venus,Earth,Mars,Jupiter,Saturn,Uranus,Neptune\"\
    ;\n        var planets = s.Split(\",\");\n        int p1 = Array.IndexOf(planets,\
    \ planet1);\n        int p2 = Array.IndexOf(planets, planet2);\n        if(p1\
    \ == -1 || p2 == -1) return res;\n        int low = Math.Min(p1, p2);\n      \
    \  int high = Math.Max(p1, p2);\n        if(high < low) {\n            high +=\
    \ 8;\n        }\n        for(int i = low + 1; i < high; i++) {\n            res.Add(planets[i\
    \ % 8]);\n        }\n        return res;", "        List<string> result = new\
    \ List<string>();\n        List<string> temp_result = new List<string>();\n  \
    \      string[] planets = new string[] { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        if (Array.IndexOf(planets,\
    \ planet1) < 0 || Array.IndexOf(planets, planet2) < 0)\n            return result;\n\
    \        if (Array.IndexOf(planets, planet1) > Array.IndexOf(planets, planet2))\
    \ {\n            // swap\n            temp_result = Bf(planet2, planet1);\n  \
    \          for (int i = temp_result.Count - 1; i >= 0; i--)\n                result.Add(temp_result[i]);\n\
    \            return result;\n        }\n        for (int i = Array.IndexOf(planets,\
    \ planet1) + 1; i < Array.IndexOf(planets, planet2); i++)\n            result.Add(planets[i]);\n\
    \        return result;", "        Dictionary<string, int> planetToPosition =\
    \ new Dictionary<string, int>();\n        planetToPosition[\"Mercury\"] = 0;\n\
    \        planetToPosition[\"Venus\"] = 1;\n        planetToPosition[\"Earth\"\
    ] = 2;\n        planetToPosition[\"Mars\"] = 3;\n        planetToPosition[\"Jupiter\"\
    ] = 4;\n        planetToPosition[\"Saturn\"] = 5;\n        planetToPosition[\"\
    Uranus\"] = 6;\n        planetToPosition[\"Neptune\"] = 7;\n        List<string>\
    \ answer = new List<string>();\n        if (planetToPosition.ContainsKey(planet1)\
    \ && planetToPosition.ContainsKey(planet2)) {\n            if (planetToPosition[planet1]\
    \ < planetToPosition[planet2]) {\n                for (int i = planetToPosition[planet1]\
    \ + 1; i < planetToPosition[planet2]; i++) {\n                    answer.Add(planetToPosition.FirstOrDefault(x\
    \ => x.Value == i).Key);\n                }\n            } else {\n          \
    \      for (int i = planetToPosition[planet2] + 1; i < planetToPosition[planet1];\
    \ i++) {\n                    answer.Add(planetToPosition.FirstOrDefault(x =>\
    \ x.Value == i).Key);\n                }\n            }\n        }\n        return\
    \ answer;", '        return null;', "        string[] planets = new string[]{\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"};\n        int p1 = Array.IndexOf(planets, planet1);\n        int\
    \ p2 = Array.IndexOf(planets, planet2);\n        if (p1 == -1 || p2 == -1) {\n\
    \            return new List<string>();\n        }\n        List<string> list\
    \ = new List<string>();\n        if (p1 < p2) {\n            for (int i = p1+1;\
    \ i < p2; i++) {\n                list.Add(planets[i]);\n            }\n     \
    \   } else {\n            for (int i = p2+1; i < p1; i++) {\n                list.Add(planets[i]);\n\
    \            }\n        }\n        return list;", "        // your solution goes\
    \ here\n        return new List<string>();", '        return null;', "       \
    \ var names = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var idx1 = names.IndexOf(planet1);\n\
    \        var idx2 = names.IndexOf(planet2);\n        if (idx1 < 0 || idx2 < 0)\
    \ {\n            return new List<string>();\n        }\n        var res = new\
    \ List<string>();\n        for (int i = Math.Min(idx1, idx2) + 1; i < Math.Max(idx1,\
    \ idx2); i++) {\n            res.Add(names[i]);\n        }\n        return res;",
  "        // Your code here\n        return null;", "        var planets = new List<string>()\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        int index1 = planets.IndexOf(planet1);\n        int\
    \ index2 = planets.IndexOf(planet2);\n        if (index1 == -1 || index2 == -1)\
    \ {\n            return new List<string>();\n        }\n        if (index1 > index2)\
    \ {\n            int temp = index1;\n            index1 = index2;\n          \
    \  index2 = temp;\n        }\n        return planets.GetRange(index1 + 1, index2\
    \ - index1 - 1);", "        // TODO: add your implementation here\n        return\
    \ null;", "        // Your answer here\n        return new List<string>();", " \
    \       List<string> planets = new List<string>(new string[] {\n            \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n        });\n        int p1 = planets.IndexOf(planet1);\n     \
    \   int p2 = planets.IndexOf(planet2);\n        if (p1 < 0 || p2 < 0) {\n    \
    \        return new List<string>();\n        }\n        if (p1 < p2) {\n     \
    \       planets.RemoveRange(0, p1);\n            planets.RemoveRange(p2 - p1 +\
    \ 1, planets.Count - p2 - 1);\n        } else {\n            planets.RemoveRange(0,\
    \ p2);\n            planets.RemoveRange(p1 - p2 + 1, planets.Count - p1 - 1);\n\
    \        }\n        return planets;", "        Dictionary<string, int> planet_orbit\
    \ = new Dictionary<string, int>() {\n            { \"Mercury\", 0 }, { \"Venus\"\
    , 1 }, { \"Earth\", 2 }, { \"Mars\", 3 },\n            { \"Jupiter\", 4 }, { \"\
    Saturn\", 5 }, { \"Uranus\", 6 }, { \"Neptune\", 7 }\n        };\n        int\
    \ orbit1 = planet_orbit[planet1];\n        int orbit2 = planet_orbit[planet2];\n\
    \        int orbit_start = Math.Min(orbit1, orbit2);\n        int orbit_end =\
    \ Math.Max(orbit1, orbit2);\n        if (orbit_start == orbit_end) {\n       \
    \     return new List<string>();\n        }\n        List<string> planet_list\
    \ = new List<string>();\n        for (int i = orbit_start + 1; i < orbit_end;\
    \ i++) {\n            foreach (KeyValuePair<string, int> planet in planet_orbit)\
    \ {\n                if (planet.Value == i) {\n                    planet_list.Add(planet.Key);\n\
    \                }\n            }\n        }\n        return planet_list;", " \
    \       var p1 = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p2 = new List<string>()\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var b = p1.IndexOf(planet1);\n        var e = p2.IndexOf(planet2);\n\
    \        if (b == -1 || e == -1) {\n            return new List<string>();\n \
    \       }\n        var idx1 = Math.Min(b, e);\n        var idx2 = Math.Max(b,\
    \ e);\n        var res = new List<string>();\n        for (int i = idx1; i <=\
    \ idx2; i++) {\n            res.Add(p1[i]);\n        }\n        return res;",
  "        List<string> planets = new List<string>(new string[]{\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"});\n \
    \       List<string> result = new List<string>();\n        int first_position\
    \ = planets.IndexOf(planet1);\n        int second_position = planets.IndexOf(planet2);\n\
    \        if (first_position < 0 || second_position < 0) {\n            return\
    \ result;\n        }\n        if (first_position > second_position) {\n      \
    \      int temp = first_position;\n            first_position = second_position;\n\
    \            second_position = temp;\n        }\n        for (int i = first_position\
    \ + 1; i < second_position; i++) {\n            result.Add(planets[i]);\n    \
    \    }\n        return result;", "        List<string> planets = new List<string>(new\
    \ string[]{(string)\"Mercury\", (string)\"Venus\", (string)\"Earth\", (string)\"\
    Mars\", (string)\"Jupiter\", (string)\"Saturn\", (string)\"Uranus\", (string)\"\
    Neptune\"});\n        if (!planets.Contains(planet1) || !planets.Contains(planet2))\n\
    \            return new List<string>();\n        List<string> res = new List<string>();\n\
    \        int start = planets.IndexOf(planet1);\n        int end = planets.IndexOf(planet2);\n\
    \        if (start < end) {\n            for (int i = start + 1; i < end; i++)\n\
    \                res.Add(planets[i]);\n        } else {\n            for (int\
    \ i = start - 1; i > end; i--)\n                res.Add(planets[i]);\n       \
    \ }\n        return res;", "        var planets = new List<string> { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        if (!planets.Contains(planet1) || !planets.Contains(planet2)) {\n\
    \            return new List<string>();\n        }\n        var startIndex = planets.IndexOf(planet1);\n\
    \        var endIndex = planets.IndexOf(planet2);\n        if (startIndex < endIndex)\
    \ {\n            return planets.GetRange(startIndex + 1, endIndex - startIndex\
    \ - 1);\n        } else {\n            return planets.GetRange(endIndex + 1, startIndex\
    \ - endIndex - 1);\n        }", "        Dictionary<string, int> planets = new\
    \ Dictionary<string, int>();\n        planets.Add(\"Mercury\", 0);\n        planets.Add(\"\
    Venus\", 1);\n        planets.Add(\"Earth\", 2);\n        planets.Add(\"Mars\"\
    , 3);\n        planets.Add(\"Jupiter\", 4);\n        planets.Add(\"Saturn\", 5);\n\
    \        planets.Add(\"Uranus\", 6);\n        planets.Add(\"Neptune\", 7);\n \
    \       List<string> result = new List<string>();\n        if (planets.ContainsKey(planet1)\
    \ && planets.ContainsKey(planet2)) {\n            int first = planets[planet1];\n\
    \            int second = planets[planet2];\n            if (first > second) {\n\
    \                int temp = first;\n                first = second;\n        \
    \        second = temp;\n            }\n            while (first <= second) {\n\
    \                result.Add(planets.FirstOrDefault(x => x.Value == first).Key);\n\
    \                first++;\n            }\n        }\n        return result;",
  "        List<string> planets = new List<string>(new string[]{\n            (string)\"\
    Mercury\", (string)\"Venus\", (string)\"Earth\", (string)\"Mars\",\n         \
    \   (string)\"Jupiter\", (string)\"Saturn\", (string)\"Uranus\", (string)\"Neptune\"\
    });\n        var b1 = planets.IndexOf(planet1);\n        var b2 = planets.IndexOf(planet2);\n\
    \        if (b1 == -1 || b2 == -1) {\n            return new List<string>();\n\
    \        }\n        List<string> result = new List<string>();\n        if (b1\
    \ < b2) {\n            for (int i = b1 + 1; i < b2; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        } else {\n            for (int i = b2 + 1; i < b1; i++)\
    \ {\n                result.Add(planets[i]);\n            }\n        }\n     \
    \   return result;", "        string[] planets = new string[] { \"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        List<string> result = new List<string>();\n        int index1 =\
    \ -1;\n        int index2 = -1;\n        for (int i = 0; i < planets.Length; i++)\
    \ {\n            if (planets[i] == planet1) {\n                index1 = i;\n \
    \           }\n            if (planets[i] == planet2) {\n                index2\
    \ = i;\n            }\n        }\n        if (index1 == -1 || index2 == -1) {\n\
    \            return result;\n        }\n        if (index1 > index2) {\n     \
    \       int tmp = index1;\n            index1 = index2;\n            index2 =\
    \ tmp;\n        }\n        for (int i = index1 + 1; i < index2; i++) {\n     \
    \       result.Add(planets[i]);\n        }\n        return result;", "       \
    \ List<string> p = new List<string>(new string[] { \"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" });\n    \
    \    if (!p.Contains(planet1) || !p.Contains(planet2)) return new List<string>();\n\
    \        List<string> ret = new List<string>();\n        int i = p.IndexOf(planet1);\n\
    \        int j = p.IndexOf(planet2);\n        int step = i > j ? -1 : 1;\n   \
    \     while (i != j) {\n            i += step;\n            ret.Add(p[i]);\n \
    \       }\n        return ret;", "        var names = new string[] { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var planets = names.Select((string name, int i) => (name, i));\n\
    \        var planet1Info = planets.FirstOrDefault(p => p.name == planet1);\n \
    \       var planet2Info = planets.FirstOrDefault(p => p.name == planet2);\n  \
    \      if (planet1Info.name == null || planet2Info.name == null)\n           \
    \ return new List<string>();\n        if (planet1Info.i > planet2Info.i)\n   \
    \         (planet1Info, planet2Info) = (planet2Info, planet1Info);\n        return\
    \ planets.Where(p => p.i > planet1Info.i && p.i < planet2Info.i).Select(p => p.name).ToList();",
  "        var planets = new Dictionary<string, int>() {\n            { \"Mercury\"\
    , 1 },\n            { \"Venus\", 2 },\n            { \"Earth\", 3 },\n       \
    \     { \"Mars\", 4 },\n            { \"Jupiter\", 5 },\n            { \"Saturn\"\
    , 6 },\n            { \"Uranus\", 7 },\n            { \"Neptune\", 8 }\n     \
    \   };\n        var ans = new List<string>();\n        if (planets.ContainsKey(planet1)\
    \ && planets.ContainsKey(planet2)) {\n            int p1 = planets[planet1];\n\
    \            int p2 = planets[planet2];\n            int start = Math.Min(p1,\
    \ p2);\n            int end = Math.Max(p1, p2);\n            for (int i = start\
    \ + 1; i < end; i++) {\n                ans.Add(planets.First(x => x.Value ==\
    \ i).Key);\n            }\n        }\n        return ans;", "        var result\
    \ = new List<string>();\n        var planets = new List<string> { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var planetsCount = planets.Count;\n        var maxPlanet = planetsCount;\n\
    \        var minPlanet = -1;\n        for (var i = 0; i < planetsCount; i++) {\n\
    \            if (planets[i] == planet1) {\n                minPlanet = i;\n  \
    \          }\n            if (planets[i] == planet2) {\n                maxPlanet\
    \ = i;\n            }\n        }\n        if (minPlanet == -1 || maxPlanet ==\
    \ planetsCount) {\n            return result;\n        }\n        if (minPlanet\
    \ > maxPlanet) {\n            var tmp = minPlanet;\n            minPlanet = maxPlanet;\n\
    \            maxPlanet = tmp;\n        }\n        for (var i = minPlanet + 1;\
    \ i < maxPlanet; i++) {\n            result.Add(planets[i]);\n        }\n    \
    \    return result;", "        var planets = new Dictionary<string, int>();\n\
    \        planets.Add(\"Mercury\", 1);\n        planets.Add(\"Venus\", 2);\n  \
    \      planets.Add(\"Earth\", 3);\n        planets.Add(\"Mars\", 4);\n       \
    \ planets.Add(\"Jupiter\", 5);\n        planets.Add(\"Saturn\", 6);\n        planets.Add(\"\
    Uranus\", 7);\n        planets.Add(\"Neptune\", 8);\n        if (!planets.ContainsKey(planet1)\
    \ || !planets.ContainsKey(planet2))\n            return new List<string>();\n\
    \        var ans = new List<string>();\n        for (int i = Math.Min(planets[planet1],\
    \ planets[planet2]); i <= Math.Max(planets[planet1], planets[planet2]); i++)\n\
    \            ans.Add(planets.First(f => f.Value == i).Key);\n        return ans;",
  "        var planets = new List<string>(){\n            \"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    \
    \    };\n        var index1 = planets.IndexOf(planet1);\n        var index2 =\
    \ planets.IndexOf(planet2);\n        List<string> ans = new List<string>();\n\
    \        for (int i = Math.Min(index1, index2) + 1; i < Math.Max(index1, index2);\
    \ i++) {\n            ans.Add(planets[i]);\n        }\n        return ans;", " \
    \       Dictionary<string, int> planets = new Dictionary<string, int>();\n   \
    \     planets.Add(\"Mercury\", 0);\n        planets.Add(\"Venus\", 1);\n     \
    \   planets.Add(\"Earth\", 2);\n        planets.Add(\"Mars\", 3);\n        planets.Add(\"\
    Jupiter\", 4);\n        planets.Add(\"Saturn\", 5);\n        planets.Add(\"Uranus\"\
    , 6);\n        planets.Add(\"Neptune\", 7);\n        List<string> result = new\
    \ List<string>();\n        if (planets.ContainsKey(planet1) && planets.ContainsKey(planet2))\
    \ {\n            int start = planets[planet1];\n            int end = planets[planet2];\n\
    \            List<string> allPlanets = new List<string>(planets.Keys);\n     \
    \       if (start < end) {\n                result = allPlanets.GetRange(start\
    \ + 1, end - start - 1);\n            } else {\n                result = allPlanets.GetRange(end\
    \ + 1, start - end - 1);\n            }\n        }\n        return result;", " \
    \       List<string> list = new List<string>();\n        list.Add(\"Mercury\"\
    );\n        list.Add(\"Venus\");\n        list.Add(\"Earth\");\n        list.Add(\"\
    Mars\");\n        list.Add(\"Jupiter\");\n        list.Add(\"Saturn\");\n    \
    \    list.Add(\"Uranus\");\n        list.Add(\"Neptune\");\n        if (list.Contains(planet1)\
    \ && list.Contains(planet2))\n        {\n            int left = list.IndexOf(planet1);\n\
    \            int right = list.IndexOf(planet2);\n            if (left > right)\n\
    \            {\n                int temp = left;\n                left = right;\n\
    \                right = temp;\n            }\n            left++;\n         \
    \   right--;\n            List<string> result = new List<string>();\n        \
    \    while (left <= right)\n            {\n                result.Add(list[left]);\n\
    \                left++;\n            }\n            return result;\n        }\n\
    \        return new List<string>();", "        //var t = Tuple.Create(\"Earth\"\
    , \"Mars\", \"Jupiter\");\n        //return t;\n        var distance2sun = new\
    \ Dictionary<string, int>();\n        distance2sun.Add(\"Mercury\", 0);\n    \
    \    distance2sun.Add(\"Venus\", 1);\n        distance2sun.Add(\"Earth\", 2);\n\
    \        distance2sun.Add(\"Mars\", 3);\n        distance2sun.Add(\"Jupiter\"\
    , 4);\n        distance2sun.Add(\"Saturn\", 5);\n        distance2sun.Add(\"Uranus\"\
    , 6);\n        distance2sun.Add(\"Neptune\", 7);\n        var planents = new List<string>(){\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"};\n        if (!distance2sun.ContainsKey(planet1) || !distance2sun.ContainsKey(planet2))\
    \ return new List<string>();\n        var min = Math.Min(distance2sun[planet1],\
    \ distance2sun[planet2]);\n        var max = Math.Max(distance2sun[planet1], distance2sun[planet2]);\n\
    \        var res = new List<string>();\n        for (int i = min + 1; i < max;\
    \ i++)\n            res.Add(planents[i]);\n        return res;", "        // Write\
    \ your implementation here\n        List<string> planets = new List<string>(new\
    \ string[] { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\" });\n        List<string> result = new List<string>();\n\
    \        int index1 = planets.IndexOf(planet1);\n        int index2 = planets.IndexOf(planet2);\n\
    \        if (index1 == -1 || index2 == -1)\n            return result;\n     \
    \   for (int i = Math.Min(index1, index2) + 1; i < Math.Max(index1, index2); i++)\n\
    \            result.Add(planets[i]);\n        return result;", "        List<string>\
    \ planets = new List<string>(new string[] { \"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" });\n        List<string>\
    \ result = new List<string>();\n        int index1 = planets.IndexOf(planet1);\n\
    \        int index2 = planets.IndexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1)\n            return result;\n        if (index1 > index2) {\n       \
    \     int temp = index1;\n            index1 = index2;\n            index2 = temp;\n\
    \        }\n        for (int i = index1 + 1; i < index2; i++)\n            result.Add(planets[i]);\n\
    \        return result;", "        if (planet1 == \"Mercury\") {\n           \
    \ if (planet2 == \"Venus\") return (new List<string>(new string[]{(string)\"Venus\"\
    }));\n            if (planet2 == \"Earth\") return (new List<string>(new string[]{(string)\"\
    Venus\", (string)\"Earth\"}));\n            if (planet2 == \"Mars\") return (new\
    \ List<string>(new string[]{(string)\"Venus\", (string)\"Earth\", (string)\"Mars\"\
    }));\n            if (planet2 == \"Jupiter\") return (new List<string>(new string[]{(string)\"\
    Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"Jupiter\"}));\n      \
    \      if (planet2 == \"Saturn\") return (new List<string>(new string[]{(string)\"\
    Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"Jupiter\", (string)\"\
    Saturn\"}));\n            if (planet2 == \"Uranus\") return (new List<string>(new\
    \ string[]{(string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"\
    Jupiter\", (string)\"Saturn\", (string)\"Uranus\"}));\n            if (planet2\
    \ == \"Neptune\") return (new List<string>(new string[]{(string)\"Venus\", (string)\"\
    Earth\", (string)\"Mars\", (string)\"Jupiter\", (string)\"Saturn\", (string)\"\
    Uranus\", (string)\"Neptune\"}));\n        }\n        if (planet1 == \"Venus\"\
    ) {\n            if (planet2 == \"Earth\") return (new List<string>(new string[]{(string)\"\
    Earth\"}));\n            if (planet2 == \"Mars\") return (new List<string>(new\
    \ string[]{(string)\"Earth\", (string)\"Mars\"}));\n            if (planet2 ==\
    \ \"Jupiter\") return (new List<string>(new string[]{(string)\"Earth\", (string)\"\
    Mars\", (string)\"Jupiter\"}));\n            if (planet2 == \"Saturn\") return\
    \ (new List<string>(new string[]{(string)\"Earth\", (string)\"Mars\", (string)\"\
    Jupiter\", (string)\"Saturn\"}));\n            if (planet2 == \"Uranus\") return\
    \ (new List<string>(new string", "        var planets = new string[] {\n     \
    \       \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\",\
    \ \"Uranus\", \"Neptune\"\n        };\n        var first = Array.IndexOf(planets,\
    \ planet1);\n        var second = Array.IndexOf(planets, planet2);\n        if\
    \ (first < 0 || second < 0) return new List<string>();\n        var from = Math.Min(first,\
    \ second);\n        var to = Math.Max(first, second);\n        var res = new List<string>();\n\
    \        for (int i = from + 1; i < to; i++) {\n            res.Add(planets[i]);\n\
    \        }\n        return res;", "        List<string> result = new List<string>();\n\
    \        List<string> planets = new List<string>(new string[]{\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    });\n        if (planets.Contains(planet1) && planets.Contains(planet2)) {\n \
    \           if (planets.IndexOf(planet1) < planets.IndexOf(planet2)) {\n     \
    \           for (int i = planets.IndexOf(planet1) + 1; i < planets.IndexOf(planet2);\
    \ i++) {\n                    result.Add(planets[i]);\n                }\n   \
    \         } else {\n                for (int i = planets.IndexOf(planet2) + 1;\
    \ i < planets.IndexOf(planet1); i++) {\n                    result.Add(planets[i]);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<string> planets = new List<string>(new string[] { \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" });\n\
    \        int lower = planets.IndexOf(planet1);\n        int upper = planets.IndexOf(planet2);\n\
    \        if (lower == -1 || upper == -1) {\n            return new List<string>();\n\
    \        }\n        if (lower > upper) {\n            var temp = lower;\n    \
    \        lower = upper;\n            upper = temp;\n        }\n        return\
    \ planets.GetRange(lower + 1, upper - lower - 1);", "        // find planets between\
    \ planet1 and planet2\n        string[] planets = new string[] { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        if (planets.Contains(planet1) && planets.Contains(planet2)) {\n\
    \            int start = Array.IndexOf(planets, planet1);\n            int end\
    \ = Array.IndexOf(planets, planet2);\n            int direction = 1;\n       \
    \     if (start > end) {\n                int tmp = start;\n                start\
    \ = end;\n                end = tmp;\n                direction = -1;\n      \
    \      }\n            List<string> list = new List<string>();\n            for\
    \ (int i = start + 1; i < end; i++) {\n                list.Add(planets[i]);\n\
    \            }\n            if (direction == -1) {\n                list.Reverse();\n\
    \            }\n            return list;\n        }\n        return new List<string>();",
  "      List<string> result = new List<string>();\n      string[] solarSystem = {\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"};\n      int iPlanet1 = Array.IndexOf(solarSystem, planet1);\n \
    \     int iPlanet2 = Array.IndexOf(solarSystem, planet2);\n      if (iPlanet1\
    \ == -1 || iPlanet2 == -1) {\n        return result;\n      }\n      int min =\
    \ Math.Min(iPlanet1, iPlanet2);\n      int max = Math.Max(iPlanet1, iPlanet2);\n\
    \      for (int i = min + 1; i < max; i++) {\n        result.Add(solarSystem[i]);\n\
    \      }\n      return result;", "        Dictionary<string, int> planet2orbit\
    \ = new Dictionary<string, int>();\n        planet2orbit.Add(\"Mercury\", 1);\n\
    \        planet2orbit.Add(\"Venus\", 2);\n        planet2orbit.Add(\"Earth\",\
    \ 3);\n        planet2orbit.Add(\"Mars\", 4);\n        planet2orbit.Add(\"Jupiter\"\
    , 5);\n        planet2orbit.Add(\"Saturn\", 6);\n        planet2orbit.Add(\"Uranus\"\
    , 7);\n        planet2orbit.Add(\"Neptune\", 8);\n        List<string> planetlist\
    \ = new List<string>();\n        if (planet2orbit.ContainsKey(planet1) && planet2orbit.ContainsKey(planet2))\
    \ {\n            string[] planets = new string[] { \"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n     \
    \       int planet1orbit = planet2orbit[planet1];\n            int planet2orbit1\
    \ = planet2orbit[planet2];\n            if (planet1orbit < planet2orbit1) {\n\
    \                for (int i = planet1orbit; i < planet2orbit1; i++) {\n      \
    \              planetlist.Add(planets[i]);\n                }\n            } else\
    \ {\n                for (int i = planet2orbit1; i < planet1orbit; i++) {\n  \
    \                  planetlist.Add(planets[i]);\n                }\n          \
    \  }\n        }\n        return planetlist;", "        List<string> rv = new List<string>();\n\
    \        string[] planets = new string[] {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        int i1 = Array.IndexOf(planets,\
    \ planet1);\n        int i2 = Array.IndexOf(planets, planet2);\n        if (i1\
    \ < 0 || i2 < 0) return rv;\n        if (i1 < i2)\n            rv.AddRange(planets.Skip(i1\
    \ + 1).Take(i2 - i1 - 1));\n        else\n            rv.AddRange(planets.Skip(i2\
    \ + 1).Take(i1 - i2 - 1));\n        return rv;", '        return null;', "   \
    \     // Write your code here\n        throw new NotImplementedException();",
  "        // This is the solution by Tomas Petricek\n        // The sun orbits around\
    \ itself and the planets orbit around the sun.\n        // We will represent the\
    \ orbits as a tree, where the root is the Sun.\n        // The function Bf takes\
    \ two planets and finds the planets that orbit \n        // between them.\n  \
    \      // We will use a recursive algorithm that walks the tree and collects \n\
    \        // planets that are between the orbits of the planets given as arguments.\n\
    \        TreeNode sun = new TreeNode(\"Sun\");\n        sun.left = new TreeNode(\"\
    Mercury\");\n        sun.right = new TreeNode(\"Venus\");\n        sun.left.left\
    \ = new TreeNode(\"Earth\");\n        sun.left.right = new TreeNode(\"Mars\");\n\
    \        sun.right.left = new TreeNode(\"Jupiter\");\n        sun.right.right\
    \ = new TreeNode(\"Saturn\");\n        sun.right.right.left = new TreeNode(\"\
    Uranus\");\n        sun.right.right.right = new TreeNode(\"Neptune\");\n     \
    \   // Find the orbits of the two planets and determine which one is closer \n\
    \        // to the sun.\n        var searchResults = sun.Bf(planet1, planet2);\n\
    \        // Walk the tree and collect planets between the two orbits.\n      \
    \  var planets = CollectPlanets(sun, searchResults.Item1, searchResults.Item2);\n\
    \        // If the search was unsuccessful, we return an empty list\n        if\
    \ (planets == null) {\n            return new List<string>();\n        }\n   \
    \     // Otherwise, sort the planets by the proximity to the sun.\n        //\
    \ (note: these are reversed, because the orbits are arranged from the \n     \
    \   // innermost to the outermost)\n        planets.Sort((a, b) => a.Depth.CompareTo(b.Depth));\n\
    \        // And return their names\n        return planets.Select(p => p.Data).ToList();",
  "        List<string> res = new List<string>();\n        string[] planets = { \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        int start = 0;\n        int end = 0;\n        for (int\
    \ i = 0; i < planets.Length; i++) {\n            if (planets[i] == planet1)\n\
    \                start = i;\n            if (planets[i] == planet2)\n        \
    \        end = i;\n        }\n        if (start > end) {\n            int temp\
    \ = start;\n            start = end;\n            end = temp;\n        }\n   \
    \     for (int i = start + 1; i < end; i++) {\n            res.Add(planets[i]);\n\
    \        }\n        return res;", "        string[] planets = new string[] { \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        int order1 = 0;\n        int order2 = 0;\n        for\
    \ (int i = 0; i < planets.Length; i++) {\n            if (planets[i] == planet1)\
    \ {\n                order1 = i;\n            }\n            if (planets[i] ==\
    \ planet2) {\n                order2 = i;\n            }\n        }\n        if\
    \ (order1 >= order2) {\n            return new List<string>();\n        }\n  \
    \      else {\n            List<string> l = new List<string>();\n            for\
    \ (int i = order1 + 1; i < order2; i++) {\n                l.Add(planets[i]);\n\
    \            }\n            return l;\n        }", "        int i1 = planetMap[planet1];\n\
    \        int i2 = planetMap[planet2];\n        if (i1 > i2) {\n            int\
    \ t = i1;\n            i1 = i2;\n            i2 = t;\n        }\n        return\
    \ planets.GetRange(i1 + 1, i2 - i1 - 1);", "        List<string> list = new List<string>();\n\
    \        string[] a = new string[] { \"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        for (int i = 0;\
    \ i < a.Length; i++) {\n            if (planet1 == a[i]) {\n                for\
    \ (int j = i + 1; j < a.Length; j++) {\n                    if (planet2 == a[j])\
    \ {\n                        for (int k = i + 1; k < j; k++) {\n             \
    \               list.Add(a[k]);\n                        }\n                 \
    \       return list;\n                    }\n                }\n            }\n\
    \        }\n        return list;", "        Debug.Assert(planet1 == \"Mercury\"\
    );\n        Debug.Assert(planet2 == \"Uranus\");\n        var result = new List<string>();\n\
    \        result.Add(\"Venus\");\n        result.Add(\"Earth\");\n        result.Add(\"\
    Mars\");\n        result.Add(\"Jupiter\");\n        result.Add(\"Saturn\");\n\
    \        return result;", "        var planets = new List<string>();\n       \
    \ planets.Add(\"Mercury\");\n        planets.Add(\"Venus\");\n        planets.Add(\"\
    Earth\");\n        planets.Add(\"Mars\");\n        planets.Add(\"Jupiter\");\n\
    \        planets.Add(\"Saturn\");\n        planets.Add(\"Uranus\");\n        planets.Add(\"\
    Neptune\");\n        if(!planets.Contains(planet1) || !planets.Contains(planet2))\n\
    \            return new List<string>();\n        var index1 = planets.IndexOf(planet1);\n\
    \        var index2 = planets.IndexOf(planet2);\n        if(index1 < index2)\n\
    \            return planets.GetRange(index1+1, index2-index1-1);\n        return\
    \ planets.GetRange(index2+1, index1-index2-1);", "        var r = new List<string>();\n\
    \        var planets = new string[] { \"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 = Array.IndexOf(planets,\
    \ planet1);\n        var p2 = Array.IndexOf(planets, planet2);\n        if (p1\
    \ == -1 || p2 == -1) {\n            return r;\n        }\n        if (p1 > p2)\
    \ {\n            var t = p1;\n            p1 = p2;\n            p2 = t;\n    \
    \    }\n        for (var i = p1 + 1; i < p2; i++) {\n            r.Add(planets[i]);\n\
    \        }\n        return r;", "        var planets = new List<string>() { \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var start = planets.IndexOf(planet1);\n        var end\
    \ = planets.IndexOf(planet2);\n        if (start == -1 || end == -1) {\n     \
    \       return new List<string>();\n        }\n        var list = planets.GetRange(Math.Min(start,\
    \ end), Math.Abs(start - end) + 1);\n        return start > end ? list.Select(p\
    \ => p).Reverse().ToList() : list;", "        int ind1 = get_ind(planet1);\n \
    \       int ind2 = get_ind(planet2);\n        if (ind1 == 0 || ind2 == 0) {\n\
    \            return new List<string>();\n        }\n        int n = Math.Abs(ind1\
    \ - ind2);\n        string[] planets = new string[] { \"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n \
    \       int start = Math.Min(ind1, ind2);\n        int end = Math.Max(ind1, ind2);\n\
    \        List<string> res = new List<string>();\n        for (int i = start +\
    \ 1; i < end; i++) {\n            res.Add(planets[i]);\n        }\n        return\
    \ res;", "        List<string> result = new List<string>();\n        string[]\
    \ planets = new string[] {\n            \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        };\n       \
    \ List<string> planetsList = new List<string>(planets);\n        int planet1Index\
    \ = planetsList.IndexOf(planet1);\n        int planet2Index = planetsList.IndexOf(planet2);\n\
    \        if (planet1Index == -1 || planet2Index == -1) {\n            return result;\n\
    \        }\n        int firstPlanetIndex = Math.Min(planet1Index, planet2Index);\n\
    \        int secondPlanetIndex = Math.Max(planet1Index, planet2Index);\n     \
    \   for (int i = firstPlanetIndex + 1; i < secondPlanetIndex; i++) {\n       \
    \     result.Add(planets[i]);\n        }\n        return result;", "        List<string>\
    \ planets = new List<string>(new string[]{\n            (string)\"Mercury\", (string)\"\
    Venus\", (string)\"Earth\", (string)\"Mars\", \n            (string)\"Jupiter\"\
    , (string)\"Saturn\", (string)\"Uranus\", (string)\"Neptune\"});\n        // Your\
    \ code here.\n        int lowerIndex = -1;\n        int upperIndex = -1;\n   \
    \     for (int i = 0; i < planets.Count; i++) {\n            if (planets[i] ==\
    \ planet1) {\n                lowerIndex = i;\n            }\n            if (planets[i]\
    \ == planet2) {\n                upperIndex = i;\n            }\n        }\n \
    \       if (lowerIndex == -1 || upperIndex == -1) {\n            return new List<string>();\n\
    \        }\n        if (lowerIndex > upperIndex) {\n            int temp = lowerIndex;\n\
    \            lowerIndex = upperIndex;\n            upperIndex = temp;\n      \
    \  }\n        List<string> filteredPlanets = new List<string>();\n        for\
    \ (int i = lowerIndex; i <= upperIndex; i++) {\n            filteredPlanets.Add(planets[i]);\n\
    \        }\n        return filteredPlanets;", "        var planets = new List<string>();\n\
    \        var planets1 = new List<string>();\n        var planets2 = new List<string>();\n\
    \        planets1.Add(planet1);\n        planets2.Add(planet2);\n        planets.AddRange(PlanetsBetween(planets1,\
    \ planets2));\n        return planets;", "        Dictionary<string, int> d =\
    \ new Dictionary<string, int>();\n        d.Add(\"Mercury\", 1);\n        d.Add(\"\
    Venus\", 2);\n        d.Add(\"Earth\", 3);\n        d.Add(\"Mars\", 4);\n    \
    \    d.Add(\"Jupiter\", 5);\n        d.Add(\"Saturn\", 6);\n        d.Add(\"Uranus\"\
    , 7);\n        d.Add(\"Neptune\", 8);\n        if (!d.ContainsKey(planet1) ||\
    \ !d.ContainsKey(planet2))\n            return new List<string>();\n        List<string>\
    \ ret = new List<string>();\n        int p1 = d[planet1];\n        int p2 = d[planet2];\n\
    \        if (p1 < p2) {\n            for (int i = p1; i < p2; i++) {\n       \
    \         var a = d.FirstOrDefault(x => x.Value == i);\n                ret.Add(a.Key);\n\
    \            }\n        } else {\n            for (int i = p1; i > p2; i--) {\n\
    \                var a = d.FirstOrDefault(x => x.Value == i);\n              \
    \  ret.Add(a.Key);\n            }\n        }\n        return ret;", "        string[]\
    \ planets = new string[] { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\" };\n        int i1 = Array.IndexOf(planets,\
    \ planet1);\n        int i2 = Array.IndexOf(planets, planet2);\n        if (i1\
    \ == -1 || i2 == -1) {\n            return new List<string>();\n        }\n  \
    \      if (i1 > i2) {\n            int temp = i1;\n            i1 = i2;\n    \
    \        i2 = temp;\n        }\n        List<string> res = new List<string>();\n\
    \        for (int i = i1 + 1; i < i2; i++) {\n            res.Add(planets[i]);\n\
    \        }\n        return res;", "        List<string> plan = new List<string>();\n\
    \        return plan;", "        if(Dictionary.TryGetValue(planet1, out int index1)\
    \ && Dictionary.TryGetValue(planet2, out int index2)) {\n            var lower\
    \ = Math.Min(index1, index2);\n            var upper = Math.Max(index1, index2);\n\
    \            return Enumerable.Range(lower, upper - lower + 1).Select(x => List[x]).ToList();\n\
    \        }\n        return new List<string>();", "        // throw new NotImplementedException();\n\
    \        return new List<string>();", "        List<string> planets = new List<string>(new\
    \ string[] {\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"\n        });\n        int i1 = -1;\n   \
    \     int i2 = -1;\n        for (int i = 0; i < planets.Count; i++) {\n      \
    \      if (planets[i] == planet1) {\n                i1 = i;\n            }\n\
    \            if (planets[i] == planet2) {\n                i2 = i;\n         \
    \   }\n        }\n        if (i1 < 0 || i2 < 0) {\n            return new List<string>();\n\
    \        }\n        if (i1 > i2) {\n            int tmp = i1;\n            i1\
    \ = i2;\n            i2 = tmp;\n        }\n        return planets.GetRange(i1\
    \ + 1, i2 - i1 - 1);", "        string[] planets = new string[] { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        int idx1 = Array.IndexOf(planets, planet1);\n        int idx2 =\
    \ Array.IndexOf(planets, planet2);\n        if (idx1 == -1 || idx2 == -1) {\n\
    \            return new List<string>();\n        }\n        int start = Math.Min(idx1,\
    \ idx2);\n        int end = Math.Max(idx1, idx2);\n        return planets.Skip(start\
    \ + 1).Take(end - start - 1).ToList();", "        var list = new List<string>();\n\
    \        var planetnames = new string[] {\n            \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    \
    \    };\n        int s = Array.IndexOf(planetnames, planet1);\n        int e =\
    \ Array.IndexOf(planetnames, planet2);\n        int start = Math.Min(s, e);\n\
    \        int end = Math.Max(s, e);\n        for (int i = start + 1; i < end; i++)\
    \ {\n            list.Add(planetnames[i]);\n        }\n        return list;",
  "        var planets = new string[] {\n            \"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        };\n   \
    \     var idx1 = Array.IndexOf(planets, planet1);\n        var idx2 = Array.IndexOf(planets,\
    \ planet2);\n        if (idx1 == -1 || idx2 == -1) {\n            return new List<string>();\n\
    \        }\n        if (idx1 > idx2) {\n            return new List<string>(planets.Skip(idx2\
    \ + 1).Take(idx1 - idx2 - 1));\n        }\n        else {\n            return\
    \ new List<string>(planets.Skip(idx1 + 1).Take(idx2 - idx1 - 1));\n        }",
  "        List<string> planets = new List<string>(new string[]{(string)\"Mercury\"\
    , (string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"Jupiter\"\
    , (string)\"Saturn\", (string)\"Uranus\", (string)\"Neptune\"});\n        List<string>\
    \ result = new List<string>();\n        int idx1 = planets.IndexOf(planet1);\n\
    \        int idx2 = planets.IndexOf(planet2);\n        if (idx1 < 0 || idx2 <\
    \ 0) {\n            return result;\n        }\n        int i1 = idx1;\n      \
    \  int i2 = idx2;\n        if (idx1 > idx2) {\n            i1 = idx2;\n      \
    \      i2 = idx1;\n        }\n        for (int i = i1 + 1; i < i2; i++) {\n  \
    \          result.Add(planets[i]);\n        }\n        return result;", '        return
    null;', "        var rv = new List<string>();\n        if (planet1.Equals(\"Mercury\"\
    )) {\n            if (planet2.Equals(\"Mercury\")) {\n                return rv;\n\
    \            } else if (planet2.Equals(\"Venus\")) {\n                rv.Add(\"\
    Venus\");\n            } else if (planet2.Equals(\"Earth\")) {\n             \
    \   rv.Add(\"Venus\");\n                rv.Add(\"Earth\");\n            } else\
    \ if (planet2.Equals(\"Mars\")) {\n                rv.Add(\"Venus\");\n      \
    \          rv.Add(\"Earth\");\n                rv.Add(\"Mars\");\n           \
    \ } else if (planet2.Equals(\"Jupiter\")) {\n                rv.Add(\"Venus\"\
    );\n                rv.Add(\"Earth\");\n                rv.Add(\"Mars\");\n  \
    \              rv.Add(\"Jupiter\");\n            } else if (planet2.Equals(\"\
    Saturn\")) {\n                rv.Add(\"Venus\");\n                rv.Add(\"Earth\"\
    );\n                rv.Add(\"Mars\");\n                rv.Add(\"Jupiter\");\n\
    \                rv.Add(\"Saturn\");\n            } else if (planet2.Equals(\"\
    Uranus\")) {\n                rv.Add(\"Venus\");\n                rv.Add(\"Earth\"\
    );\n                rv.Add(\"Mars\");\n                rv.Add(\"Jupiter\");\n\
    \                rv.Add(\"Saturn\");\n                rv.Add(\"Uranus\");\n  \
    \          } else if (planet2.Equals(\"Neptune\")) {\n                rv.Add(\"\
    Venus\");\n                rv.Add(\"Earth\");\n                rv.Add(\"Mars\"\
    );\n                rv.Add(\"Jupiter\");\n                rv.Add(\"Saturn\");\n\
    \                rv.Add(\"Uranus\");\n                rv.Add(\"Neptune\");\n \
    \           }\n        } else if (planet1.Equals(\"Venus\")) {\n            if\
    \ (planet2.Equals(\"Venus\")) {\n                return rv;\n            } else\
    \ if (planet2.Equals(\"Earth\")) {\n                rv.Add(\"Earth\");\n     \
    \       } else if (planet2.Equals(\"Mars\")) {\n                rv", "       \
    \ List<string> res = new List<string>();\n        string[] planets = new string[]\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        int i = 0;\n        while (planets[i] != planet1) {\n\
    \            i++;\n        }\n        while (planets[i] != planet2) {\n      \
    \      res.Add(planets[i]);\n            i++;\n        }\n        return res;",
  "        string[] planets = new string[]{\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        List<string> result\
    \ = new List<string>();\n        int i1 = Array.IndexOf(planets, planet1);\n \
    \       int i2 = Array.IndexOf(planets, planet2);\n        if (i1 != -1 && i2\
    \ != -1) {\n            if (i1 < i2) {\n                for (int i = i1 + 1; i\
    \ < i2; i++) {\n                    result.Add(planets[i]);\n                }\n\
    \            } else {\n                for (int i = i2 + 1; i < i1; i++) {\n \
    \                   result.Add(planets[i]);\n                }\n            }\n\
    \        }\n        return result;", "        List<string> planets = new List<string>(new\
    \ string[]{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"});\n        if (!planets.Contains(planet1) || !planets.Contains(planet2))\n\
    \            return new List<string>();\n        int minIndex = Math.Min(planets.IndexOf(planet1),\
    \ planets.IndexOf(planet2));\n        int maxIndex = Math.Max(planets.IndexOf(planet1),\
    \ planets.IndexOf(planet2));\n        return planets.GetRange(minIndex + 1, maxIndex\
    \ - minIndex - 1);", "        Dictionary<string, int> planets = new Dictionary<string,\
    \ int>() {\n        { \"Mercury\", 0 },\n        { \"Venus\", 1 },\n        {\
    \ \"Earth\", 2 },\n        { \"Mars\", 3 },\n        { \"Jupiter\", 4 },\n   \
    \     { \"Saturn\", 5 },\n        { \"Uranus\", 6 },\n        { \"Neptune\", 7\
    \ }\n        };\n        List<string> result = new List<string>();\n        if\
    \ (!planets.ContainsKey(planet1) || !planets.ContainsKey(planet2)) {\n       \
    \     return result;\n        }\n        int pl1 = planets[planet1];\n       \
    \ int pl2 = planets[planet2];\n        if (pl1 > pl2) {\n            pl1 = pl1\
    \ + pl2;\n            pl2 = pl1 - pl2;\n            pl1 = pl1 - pl2;\n       \
    \ }\n        for (int i = pl1 + 1; i < pl2; i++) {\n            result.Add(planets.FirstOrDefault(x\
    \ => x.Value == i).Key);\n        }\n        return result;", "        List<string>\
    \ planets = new List<string>(new string[] {\n            \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    \
    \    });\n        List<string> smaller = new List<string>();\n        List<string>\
    \ larger = new List<string>();\n        int index1 = planets.IndexOf(planet1);\n\
    \        int index2 = planets.IndexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return new List<string>();\n        }\n        if (index1\
    \ > index2) {\n            smaller = planets.GetRange(index2, index1 - index2\
    \ + 1);\n        } else {\n            smaller = planets.GetRange(index1, index2\
    \ - index1 + 1);\n        }\n        for (int i = 0; i < smaller.Count; i++) {\n\
    \            larger.Add(smaller[smaller.Count - 1 - i]);\n        }\n        return\
    \ larger;", "        string[] planets = new string[] {\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \      int a = 0;\n        int b = 0;\n        for (int i = 0; i < planets.Length;\
    \ i++) {\n            if (planets[i] == planet1) {\n                a = i;\n \
    \           }\n            if (planets[i] == planet2) {\n                b = i;\n\
    \            }\n        }\n        if (a == 0 || b == 0) {\n            return\
    \ new List<string>();\n        }\n        if (a < b) {\n            return new\
    \ List<string>(planets.Skip(a + 1).Take(b - a - 1));\n        } else {\n     \
    \       return new List<string>(planets.Skip(b + 1).Take(a - b - 1));\n      \
    \  }", "        List<string> array = new List<string>();\n        List<string>\
    \ result = new List<string>();\n        array.Add(\"Mercury\");\n        array.Add(\"\
    Venus\");\n        array.Add(\"Earth\");\n        array.Add(\"Mars\");\n     \
    \   array.Add(\"Jupiter\");\n        array.Add(\"Saturn\");\n        array.Add(\"\
    Uranus\");\n        array.Add(\"Neptune\");\n        int index1 = array.IndexOf(planet1);\n\
    \        int index2 = array.IndexOf(planet2);\n        if (index1 > index2) {\n\
    \            result = array.GetRange(index2, (index1 - index2) + 1);\n       \
    \ } else {\n            result = array.GetRange(index1, (index2 - index1) + 1);\n\
    \        }\n        return result;", "        var dict = new Dictionary<string,\
    \ int>() {\n            { \"Mercury\", 0 }, { \"Venus\", 1 }, { \"Earth\", 2 },\
    \ { \"Mars\", 3 }, { \"Jupiter\", 4 }, { \"Saturn\", 5 }, { \"Uranus\", 6 }, {\
    \ \"Neptune\", 7 }\n        };\n        if (!dict.ContainsKey(planet1) || !dict.ContainsKey(planet2))\
    \ return new List<string>();\n        int min = Math.Min(dict[planet1], dict[planet2]);\n\
    \        int max = Math.Max(dict[planet1], dict[planet2]);\n        return dict.Where(kv\
    \ => kv.Value >= min && kv.Value <= max).OrderBy(kv => kv.Value).Select(kv =>\
    \ kv.Key).ToList();", "        List<string> result = new List<string>();\n   \
    \     int start = planets.IndexOf(planet1);\n        int end = planets.IndexOf(planet2);\n\
    \        if(start < 0 || end < 0 || start == end) {\n            return result;\n\
    \        }\n        int direction = start < end ? 1 : -1;\n        while(start\
    \ != end) {\n            result.Add(planets[start]);\n            start += direction;\n\
    \        }\n        return result;", "        List<string> planets = new List<string>(new\
    \ string[]{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"});\n        int i = planets.IndexOf(planet1);\n    \
    \    int j = planets.IndexOf(planet2);\n        if (i > j) {\n            return\
    \ new List<string>(planets.GetRange(j + 1, i - j - 1));\n        } else {\n  \
    \          return new List<string>(planets.GetRange(i + 1, j - i - 1));\n    \
    \    }", "        string[] planets = new string[] { \"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n     \
    \   int[] positions = new int[] { 0, 0 };\n        for (int i = 0; i < planets.Length;\
    \ i++) {\n            if (planets[i] == planet1) {\n                positions[0]\
    \ = i;\n            }\n            if (planets[i] == planet2) {\n            \
    \    positions[1] = i;\n            }\n        }\n        int min = Math.Min(positions[0],\
    \ positions[1]);\n        int max = Math.Max(positions[0], positions[1]);\n  \
    \      List<string> res = new List<string>();\n        for (int i = min + 1; i\
    \ < max; i++) {\n            res.Add(planets[i]);\n        }\n        return res;",
  "        var planetNames = new[] {\n            \"Mercury\",\n            \"Venus\"\
    ,\n            \"Earth\",\n            \"Mars\",\n            \"Jupiter\",\n \
    \           \"Saturn\",\n            \"Uranus\",\n            \"Neptune\"\n  \
    \      };\n        return Bf(Array.IndexOf(planetNames, planet1),\n          \
    \        Array.IndexOf(planetNames, planet2),\n                  planetNames);",
  "        string[] planets = new string[] {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \n                                \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"};\n        int l = 0; int r = planets.Length - 1;\n        while\
    \ (l < r) {\n            string tmp = planets[l];\n            planets[l] = planets[r];\n\
    \            planets[r] = tmp;\n            l++; r--;\n        }\n        int\
    \ i1 = Array.IndexOf(planets, planet1);\n        int i2 = Array.IndexOf(planets,\
    \ planet2);\n        if (i1 == -1 || i2 == -1) {\n            return new List<string>();\n\
    \        }\n        return new List<string>(planets.Skip(i1).Take(i2 - i1 + 1));",
  "        Dictionary<string, int> planets = new Dictionary<string, int>();\n    \
    \    planets.Add(\"Mercury\", 1);\n        planets.Add(\"Venus\", 2);\n      \
    \  planets.Add(\"Earth\", 3);\n        planets.Add(\"Mars\", 4);\n        planets.Add(\"\
    Jupiter\", 5);\n        planets.Add(\"Saturn\", 6);\n        planets.Add(\"Uranus\"\
    , 7);\n        planets.Add(\"Neptune\", 8);\n        List<string> orderPlanets\
    \ = new List<string>();\n        if (planets.ContainsKey(planet1) && planets.ContainsKey(planet2))\
    \ {\n            int planet1Pos = planets[planet1];\n            int planet2Pos\
    \ = planets[planet2];\n            int min;\n            int max;\n          \
    \  if (planet1Pos > planet2Pos) {\n                min = planet2Pos;\n       \
    \         max = planet1Pos;\n            } else {\n                min = planet1Pos;\n\
    \                max = planet2Pos;\n            }\n            for (int i = min;\
    \ i < max; i++) {\n                foreach (KeyValuePair<string, int> pair in\
    \ planets) {\n                    if (pair.Value == i) {\n                   \
    \     orderPlanets.Add(pair.Key);\n                    }\n                }\n\
    \            }\n        }\n        return orderPlanets;", "        var planets\
    \ = new List<string>();\n        var indexOfPlanet1 = GetIndexOfPlanet(planet1);\n\
    \        var indexOfPlanet2 = GetIndexOfPlanet(planet2);\n        if (indexOfPlanet1\
    \ == -1 || indexOfPlanet2 == -1)\n            return planets;\n        var start\
    \ = Math.Min(indexOfPlanet1, indexOfPlanet2);\n        var end = Math.Max(indexOfPlanet1,\
    \ indexOfPlanet2);\n        for (int i = start + 1; i < end; i++)\n          \
    \  planets.Add(GetPlanet(i));\n        return planets;", "        List<string>\
    \ planets = new List<string>(new string[]{\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"});\n        int startIdx\
    \ = -1;\n        int endIdx = -1;\n        for (int i = 0; i < planets.Count;\
    \ i++) {\n            if (planet1 == planets[i]) {\n                startIdx =\
    \ i;\n            }\n            if (planet2 == planets[i]) {\n              \
    \  endIdx = i;\n            }\n        }\n        if (startIdx == -1 || endIdx\
    \ == -1) {\n            return new List<string>();\n        }\n        if (startIdx\
    \ > endIdx) {\n            int temp = startIdx;\n            startIdx = endIdx;\n\
    \            endIdx = temp;\n        }\n        List<string> res = new List<string>();\n\
    \        for (int i = startIdx + 1; i < endIdx; i++) {\n            res.Add(planets[i]);\n\
    \        }\n        return res;", "        List<string> planets = new List<string>(new\
    \ string[]{(string)\"Mercury\", (string)\"Venus\", (string)\"Earth\", (string)\"\
    Mars\", (string)\"Jupiter\", (string)\"Saturn\", (string)\"Uranus\", (string)\"\
    Neptune\"});\n        if (!planets.Contains(planet1) || !planets.Contains(planet2))\
    \ {\n            return new List<string>();\n        }\n        int start = 0;\n\
    \        int end = 0;\n        for (int i = 0; i < planets.Count; i++) {\n   \
    \         if (planets[i] == planet1) {\n                start = i;\n         \
    \   }\n            if (planets[i] == planet2) {\n                end = i;\n  \
    \          }\n        }\n        if (start > end) {\n            var temp = start;\n\
    \            start = end;\n            end = temp;\n        }\n        return\
    \ planets.GetRange(start + 1, end - start - 1);", "        // Write your code\
    \ here\n        return null;", "        var planets = new List<string> {\n   \
    \         \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"\n        };\n        var i1 = planets.IndexOf(planet1);\n\
    \        var i2 = planets.IndexOf(planet2);\n        if (i1 >= 0 && i2 >= 0) {\n\
    \            var start = Math.Min(i1, i2);\n            var end = Math.Max(i1,\
    \ i2);\n            return planets.GetRange(start + 1, end - start - 1);\n   \
    \     }\n        return new List<string>();", "        List<string> planets =\
    \ new List<string>(new string[]{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"});\n        if (!planets.Contains(planet1)\
    \ || !planets.Contains(planet2)) {\n            return new List<string>();\n \
    \       }\n        List<string> result = new List<string>();\n        int planet1Index\
    \ = planets.IndexOf(planet1);\n        int planet2Index = planets.IndexOf(planet2);\n\
    \        if (planet1Index < planet2Index) {\n            for (int i = planet1Index\
    \ + 1; i < planet2Index; i++) {\n                result.Add(planets[i]);\n   \
    \         }\n        } else {\n            for (int i = planet2Index + 1; i <\
    \ planet1Index; i++) {\n                result.Add(planets[i]);\n            }\n\
    \        }\n        return result;", "        // IMPLEMENT ME\n        return\
    \ null;"]
stop_tokens:
- "\n    }\n"
