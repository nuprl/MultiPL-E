language: cs
name: HumanEval_72_will_it_fly
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // YOUR CODE GOES HERE\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c6720bd144634c41b82ca414e8be1108>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c6720bd144634c41b82ca414e8be1108>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977020
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <0b3033bce82e4423b2ee94b624f01d86>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <0b3033bce82e4423b2ee94b624f01d86>:0 \n"
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        int n = q.Count;\n        bool balanced = true;\n        for
    (int i = 0; i < n / 2; i++)\n            if (q[i] != q[n - i - 1]) {\n                balanced
    = false;\n                break;\n            }\n        long weight = 0;\n        for
    (int i = 0; i < n; i++)\n            weight += q[i];\n        return balanced
    && weight <= w;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        bool palindrome = true;\n        if
    (q.Count <= 1) {\n            palindrome = true;\n        } else {\n            int
    middle = q.Count / 2;\n            for (int j = 0; j < middle; j++) {\n                if
    (q[j] != q[q.Count - 1 - j]) {\n                    palindrome = false;\n                    break;\n
    \               }\n            }\n        }\n        for (int j = 0; j < q.Count;
    j++) {\n            sum += q[j];\n        }\n        if (sum <= w && palindrome)
    {\n            return true;\n        } else {\n            return false;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Write your code here\n        long sum = 0;\n        foreach
    (long l in q) {\n            sum += l;\n        }\n        if (sum > w) {\n            return
    false;\n        }\n        for (int i = 0; i < q.Count; i++) {\n            if
    (q[i] != q[q.Count - 1 - i]) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),
    (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // your code here\n        var reversed = q.ToList();\n
    \       reversed.Reverse();\n        return q.SequenceEqual(reversed) && q.Sum()
    <= w;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977020
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        foreach (long i in q) {\n            sum
    += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n
    \       bool isPalindrome = true;\n        int len = q.Count;\n        int i =
    0;\n        while (isPalindrome && i < len/2) {\n            if (q[i] != q[len-i-1])
    {\n                isPalindrome = false;\n            }\n            i++;\n        }\n
    \       return isPalindrome;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),
    (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9lbohjq6.cs(26,23): error CS0136: A local or parameter named ''i'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        bool isPalindrome = true;\n        for
    (int i = 0; i < q.Count / 2; i++) {\n            sum += q[i];\n            if
    (q[i] != q[q.Count - 1 - i]) {\n                isPalindrome = false;\n            }\n
    \       }\n        if (q.Count % 2 == 1) {\n            sum += q[q.Count / 2];\n
    \       }\n        return isPalindrome && sum <= w;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977020
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_1qi2fdg.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        bool isPalindrome = true;\n        int
    len = q.Count;\n        for (int i = 0; i < len / 2; i++) {\n            long
    elem1 = q[i];\n            long elem2 = q[len - 1 - i];\n            sum += elem1
    + elem2;\n            if (elem1 != elem2) {\n                isPalindrome = false;\n
    \           }\n        }\n        if (len % 2 == 1) {\n            sum += q[len
    / 2];\n        }\n        return isPalindrome && sum <= w;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977020
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        if (q.Sum() <= w && IsPalindrome(q)) {\n            return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk1ca3_kq.cs(25,29): error CS0103: The name ''IsPalindrome'' does not exist
    in the current context

    '
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // your code here\n        long sum = 0;\n        foreach
    (var i in q)\n            sum += i;\n        if (sum > w)\n            return
    false;\n        for (int i = 0; i < q.Count / 2; i++)\n            if (q[i] !=
    q[q.Count - i - 1])\n                return false;\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        if (q.Count == 0) return false;\n        if (q.Count ==
    1) return true;\n        var sum = 0L;\n        q.ForEach(i => sum += i);\n        if
    (sum > w) return false;\n        for (int i = 0; i < q.Count / 2; i++) {\n            if
    (q[i] != q[q.Count - 1 - i]) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),
    (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        List<long> q1 = new List<long>();\n        bool tf = true;\n
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n            q1.Add(q[i]);\n
    \           sum += q[i];\n        }\n        if (sum > w) {\n            tf =
    false;\n        }\n        else {\n            q1.Reverse();\n            for
    (int i = 0; i < q.Count; i++) {\n                if (q[i] != q1[i]) {\n                    tf
    = false;\n                }\n            }\n        }\n        return tf;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code here\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2dc42849e72548e0b202af83e3d98fe2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2dc42849e72548e0b202af83e3d98fe2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977020
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <0b3033bce82e4423b2ee94b624f01d86>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <0b3033bce82e4423b2ee94b624f01d86>:0 \n"
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)
    {\n            sum += q[i];\n        }\n        if (sum > w) {\n            return
    false;\n        }\n        bool is_palindrome = true;\n        for (int i = 0;
    i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count - 1 - i]) {\n                is_palindrome
    = false;\n                break;\n            }\n        }\n        return is_palindrome;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        bool result = false;\n        long qSum = q.Sum();\n        if
    (qSum <= w) {\n            int i = 0;\n            int j = q.Count() - 1;\n            for
    (i = 0; i < q.Count(); i++) {\n                if (q[i] != q[j]) {\n                    result
    = false;\n                    break;\n                }\n                j--;\n
    \           }\n            if (i == q.Count()) {\n                result = true;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long[] arr = q.ToArray();\n        long sum = 0;\n        foreach
    (long i in arr) {\n            sum += i;\n        }\n        if (sum > w) {\n
    \           return false;\n        } else {\n            for (int i = 0; i < arr.Length;
    i++) {\n                if (arr[i] != arr[arr.Length - i - 1]) {\n                    return
    false;\n                }\n            }\n            return true;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code goes here.\n        // You can also define
    new functions and classes here.\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7334e2dec6ff4f209bf3dc84b05b3347>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7334e2dec6ff4f209bf3dc84b05b3347>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977020
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Implement the function here!\n        return q.Count
    == 1 || q.Count > 1 && q.SequenceEqual(q.Reverse()) && q.Sum() <= w;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaw9228jk.cs(26,63): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        var len = q.Count;\n        foreach
    (var t in q) {\n            sum += t;\n        }\n        if (sum > w) {\n            return
    false;\n        }\n        for (int i = 0; i < (len >> 1); i++) {\n            if
    (q[i] != q[len - i - 1]) {\n                return false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code here.\n        // Check if q is palindromic\n
    \       if (q.Count() == 1)\n            return true;\n        if (q.Count() ==
    2)\n            return (q[0] == q[1]);\n        if (q[0] != q[q.Count() - 1])\n
    \           return false;\n        for (int i = 0; i < q.Count() / 2; i++) {\n
    \           if (q[i] != q[q.Count() - 1 - i])\n                return false;\n
    \       }\n        // Check if the weight is less than w\n        long sum = 0;\n
    \       foreach (long l in q) {\n            sum += l;\n        }\n        return
    (sum <= w);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        foreach (long n in q) {\n            sum
    += n;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if
    (q[i] != q[q.Count - 1 - i]) {\n                return false;\n            }\n
    \       }\n        return sum <= w;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        int i, j;\n        long sum = 0;\n        for (i = 0; i
    < q.Count(); i++)\n            sum += q[i];\n        if (sum > w)\n            return
    false;\n        i = 0;\n        j = q.Count() - 1;\n        while (i < j) {\n
    \           if (q[i] != q[j])\n                return false;\n            i++;\n
    \           j--;\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977021
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        var elementsSum = q.Sum();\n        return elementsSum <=
    w && IsBalanced(q);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw95pvhqs.cs(26,36): error CS0103: The name ''IsBalanced'' does not exist
    in the current context

    '
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        if (q.Count() < 2) {\n            return true;\n        }\n
    \       if (q.Count() % 2 == 0) {\n            return false;\n        }\n        bool
    balanced = true;\n        int center = q.Count() / 2;\n        for (int i = 0;
    i < center; i++) {\n            if (q[i] != q[q.Count() - 1 - i]) {\n                balanced
    = false;\n                break;\n            }\n        }\n        if (!balanced)
    {\n            return false;\n        }\n        long weight = 0;\n        foreach
    (long x in q) {\n            weight += x;\n        }\n        if (weight > w)
    {\n            return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code goes here.\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38957c02b46146bfa0cae4230b97f0b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38957c02b46146bfa0cae4230b97f0b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        foreach (long k in q) {\n            sum
    += k;\n        }\n        if (sum > w) {\n            return false;\n        }\n
    \       List<long> r = new List<long>(q);\n        r.Reverse();\n        for (int
    i = 0; i < q.Count; i++) {\n            if (q[i] != r[i]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)
    {\n            sum += q[i];\n        }\n        if (sum > w) {\n            return
    false;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if
    (q[i] != q[q.Count - 1 - i]) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),
    (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // It's balanced if it's a palindrome.\n        int len
    = q.Count;\n        bool isPalindrome = true;\n        for (int i = 0; i < len
    / 2; i++) {\n            if (q[i] != q[len - i - 1]) {\n                isPalindrome
    = false;\n                break;\n            }\n        }\n        if (!isPalindrome)
    {\n            return false;\n        }\n        // It flies if the sum of its
    elements is less than or equal the maximum possible weight.\n        long sum
    = 0;\n        for (int i = 0; i < len; i++) {\n            sum += q[i];\n        }\n
    \       return sum <= w;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),
    (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977021
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        bool result = true;\n        if (w < 0) {\n            throw
    new ArgumentException(\"The parameter maxWeight cannot be negative\");\n        }\n
    \       if (q.Count % 2 == 0) {\n            throw new ArgumentException(\"The
    parameter q cannot have an even number of elements\");\n        }\n        if
    (q.Count == 1) {\n            if (q[0] <= w) {\n                return true;\n
    \           }\n            else {\n                return false;\n            }\n
    \       }\n        else {\n            long sum = 0;\n            foreach (long
    element in q) {\n                sum += element;\n            }\n            if
    (sum > w) {\n                return false;\n            }\n            else {\n
    \               int half = q.Count / 2;\n                for (int i = 0; i < half;
    i++) {\n                    if (q[i] != q[q.Count - 1 - i]) {\n                        return
    false;\n                    }\n                }\n                return true;\n
    \           }\n        }\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),
    (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: The parameter q cannot
    have an even number of elements\n  at Problem.WillItFly (System.Collections.Generic.List`1[T]
    q, System.Int64 w) [0x00028] in <50c4c20028324f3abaedbfb4a3a9b5fe>:0 \n  at Problem.Main
    (System.String[] args) [0x0003a] in <50c4c20028324f3abaedbfb4a3a9b5fe>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentException: The parameter q cannot have
    an even number of elements\n  at Problem.WillItFly (System.Collections.Generic.List`1[T]
    q, System.Int64 w) [0x00028] in <50c4c20028324f3abaedbfb4a3a9b5fe>:0 \n  at Problem.Main
    (System.String[] args) [0x0003a] in <50c4c20028324f3abaedbfb4a3a9b5fe>:0 \n"
  stdout: ''
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code here\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d2638e92499421da2a4b11ad226c340>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d2638e92499421da2a4b11ad226c340>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        bool res;\n        // Write your code here.\n        int
    n = q.Count();\n        if (n == 1)\n            res = true;\n        else {\n
    \           long sum = 0;\n            for (int i = 0; i < n; i++)\n                sum
    += q[i];\n            if (sum > w)\n                res = false;\n            else
    {\n                bool palindrome = true;\n                for (int i = 0; i
    < n / 2; i++)\n                    if (q[i] != q[n - i - 1]) {\n                        palindrome
    = false;\n                        break;\n                    }\n                res
    = palindrome;\n            }\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        int left = 0;\n        int right = q.Count - 1;\n        long
    sum = 0;\n        while (left < right) {\n            sum += q[left];\n            sum
    += q[right];\n            if (q[left] != q[right]) {\n                return false;\n
    \           }\n            left++;\n            right--;\n        }\n        if
    (left == right) {\n            sum += q[left];\n        }\n        return sum
    <= w;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        foreach (long i in q) {\n            sum
    += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n
    \       if (q.Count() == 1) {\n            return true;\n        }\n        int
    half = q.Count() / 2;\n        if (q.Count() % 2 == 0) {\n            for (int
    i = 0; i < half; i++) {\n                if (q[i] != q[q.Count() - 1 - i]) {\n
    \                   return false;\n                }\n            }\n        }
    else {\n            for (int i = 0; i < half; i++) {\n                if (q[i]
    != q[q.Count() - 1 - i]) {\n                    return false;\n                }\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return q.Sum() <= w && new string(q.Select(c => (char) c).ToArray())
    == new string(q.Select(c => (char) c).Reverse().ToArray());\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <832791850f2a4936ae4bc52147b104e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <832791850f2a4936ae4bc52147b104e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        foreach (long value in q) {\n            sum
    += value;\n        }\n        if (sum > w) {\n            return false;\n        }\n
    \       long i = 0;\n        long j = q.Count - 1;\n        while (i < j) {\n
    \           if (q[(int)i] != q[(int)j]) {\n                return false;\n            }\n
    \           i += 1;\n            j -= 1;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return q.AsEnumerable().Reverse().SequenceEqual(q) && q.Sum()
    <= w;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977021
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_1qi2fdg.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        bool isBalanced = q.Count % 2 == 0;\n        int sum = 0;\n
    \       if (isBalanced) {\n            int middle = q.Count / 2;\n            for
    (int i = 0; i < middle; i++) {\n                sum += (int)q[i];\n                if
    (q[i] != q[q.Count - 1 - i]) {\n                    isBalanced = false;\n                    break;\n
    \               }\n            }\n            if (sum > w) {\n                isBalanced
    = false;\n            }\n        }\n        return isBalanced;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b40e3979c13b47579db0af64b9b9e58f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b40e3979c13b47579db0af64b9b9e58f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // \n        // \n        // \n        // \n        // \n
    \       // \n        // \n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e0add3856d54a87ad7a87a185007f15>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e0add3856d54a87ad7a87a185007f15>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code goes here\n        long sum = 0;\n        foreach
    (long a in q) {\n            sum += a;\n        }\n        if (sum > w) {\n            return
    false;\n        }\n        int count = 0;\n        while (count < q.Count / 2)
    {\n            if (q[count] != q[q.Count - 1 - count]) {\n                return
    false;\n            }\n            count++;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <832791850f2a4936ae4bc52147b104e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <832791850f2a4936ae4bc52147b104e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        if (q.Count == 0) {\n            return false;\n        }\n
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n            sum
    += q[i];\n        }\n        if (sum > w) {\n            return false;\n        }\n
    \       for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count
    - 1 - i]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977021
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_1qi2fdg.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659977020
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // If a palindrome is two of the same number, w must be
    at least twice that number\n        bool balanced = q.SequenceEqual(q.Reverse());\n
    \       // For a single element, the weight is that element\n        return balanced
    && q.Sum() <= w;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6f4c_4kh.cs(26,41): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        int i = 0;\n        int j = q.Count
    - 1;\n        while (i < j) {\n            if (q[i] != q[j]) {\n                return
    false;\n            }\n            sum += q[i];\n            i++;\n            j--;\n
    \       }\n        if (i == j) {\n            sum += q[i];\n        }\n        return
    sum <= w;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        foreach (long item in q) {\n            sum
    += item;\n        }\n        if (sum > w) {\n            return false;\n        }\n
    \       int i = 0;\n        int j = q.Count - 1;\n        while (i < j) {\n            if
    (q[i] != q[j]) {\n                return false;\n            }\n            i++;\n
    \           j--;\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977021
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <0b3033bce82e4423b2ee94b624f01d86>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <0b3033bce82e4423b2ee94b624f01d86>:0 \n"
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <832791850f2a4936ae4bc52147b104e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <832791850f2a4936ae4bc52147b104e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977021
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        var sum = q.Sum();\n        var rev = q.Reverse();\n        return
    Enumerable.SequenceEqual(q, rev) && sum <= w;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo4st_2vs.cs(26,13): error CS0815: Cannot assign void to an implicitly-typed
    variable

    '
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        bool flag = true;\n        for (int
    i = 0; i < q.Count; i++) {\n            sum += q[i];\n            if (q[i] < 0)
    flag = false;\n        }\n        if (sum > w) return false;\n        if (q.Count
    < 2) return true;\n        int j = q.Count - 1;\n        for (int i = 0; i < q.Count;
    i++) {\n            if (q[i] != q[j]) flag = false;\n            j--;\n        }\n
    \       return flag;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977022
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // TODO\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c1b06d66e804e7eb9a2ee283d2dffd2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c1b06d66e804e7eb9a2ee283d2dffd2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977022
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Fill in the code here.\n        long sum = 0;\n        for
    (int i = 0; i < q.Count; i++)\n        {\n            sum += q[i];\n        }\n
    \       if (sum > w)\n        {\n            return false;\n        }\n        if
    (sum <= w)\n        {\n            for (int i = 0; i < q.Count / 2; i++)\n            {\n
    \               if (q[i] != q[q.Count - 1 - i])\n                {\n                    return
    false;\n                }\n            }\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977022
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Write your code here\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e68fc80342f48c1b8c310636d5c1497>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e68fc80342f48c1b8c310636d5c1497>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977022
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        var d = new Dictionary<long, long>();\n        var weight
    = q.Sum();\n        if (w < weight) return false;\n        foreach (var item in
    q) {\n            if (d.ContainsKey(item)) d[item] += 1;\n            else d[item]
    = 1;\n        }\n        var x = d.Where(z => z.Value % 2 == 1).Select(z => z.Key).ToList();\n
    \       if (x.Count == 0) return true;\n        if (x.Count > 1) return false;\n
    \       if (d[x[0]] == 1) return true;\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977022
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code here\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2dc42849e72548e0b202af83e3d98fe2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2dc42849e72548e0b202af83e3d98fe2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        bool balanced = true;\n        for
    (int i = 0; i < q.Count; i++) {\n            long k = q[i];\n            sum +=
    k;\n            if (sum > w) {\n                return false;\n            }\n
    \           if (i < q.Count - 1 && q[i] != q[q.Count - 1 - i]) {\n                balanced
    = false;\n            }\n        }\n        return balanced;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977022
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <0b3033bce82e4423b2ee94b624f01d86>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <0b3033bce82e4423b2ee94b624f01d86>:0 \n"
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // comment: true/false\n        // method: solve the problem\n
    \       // comment: true/false\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c633cfab52154c23a96f0fa89e75ad9c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c633cfab52154c23a96f0fa89e75ad9c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977022
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        if (q.Sum() > w) {\n            return false;\n        }\n\n
    \       var reversedQ = new List<long>(q);\n        reversedQ.Reverse();\n\n        return
    q.SequenceEqual(reversedQ);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),
    (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977022
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // your code here\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b29ef7e095a44e1eb6c9996cb7d6a96b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b29ef7e095a44e1eb6c9996cb7d6a96b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977022
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // YOUR CODE HERE\n        bool isBalanced = q.SequenceEqual(q.Reverse());\n
    \       bool isLight = q.Sum() <= w;\n        if (isBalanced && isLight) {\n            return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbzgzhbhr.cs(26,43): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659977022
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        if (q.Sum() <= w) {\n            for (int i = 0; i < q.Count
    / 2; i++) {\n                if (q[i] != q[q.Count - 1 - i]) return false;\n            }\n
    \           return true;\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977022
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code here.\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <232b1f932f594d158c722223e37f8b3a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <232b1f932f594d158c722223e37f8b3a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977022
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code here!\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9fe0ed882fd94b75befeb7c095c3c47a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9fe0ed882fd94b75befeb7c095c3c47a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977022
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return q.Sum() <= w && IsPalindrome(q);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwrq5wqji.cs(25,32): error CS0103: The name ''IsPalindrome'' does not exist
    in the current context

    '
  timestamp: 1659977022
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code here\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2dc42849e72548e0b202af83e3d98fe2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2dc42849e72548e0b202af83e3d98fe2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        bool isPalindrome = false;\n        long sum = 0;\n        foreach
    (long num in q) {\n            sum += num;\n        }\n        if (sum <= w) {\n
    \           if (q.Count == 1) {\n                isPalindrome = true;\n            }
    else {\n                long middle = (long)Math.Ceiling((double)q.Count / 2.0)
    - 1;\n                for (long i = 0; i <= middle; i++) {\n                    if
    (q[(int)i] == q[(int)(q.Count - 1 - i)]) {\n                        isPalindrome
    = true;\n                    } else {\n                        isPalindrome =
    false;\n                        break;\n                    }\n                }\n
    \           }\n        }\n        return isPalindrome;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977022
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return q.Sum() <= w && IsPalindrome(q);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwrq5wqji.cs(25,32): error CS0103: The name ''IsPalindrome'' does not exist
    in the current context

    '
  timestamp: 1659977022
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        //long sum = 0;\n        //for (int i = 0; i < q.Count;
    i++) {\n        //    sum += q[i];\n        //}\n        //bool balanced = true;\n
    \       //for (int i = 0; i < q.Count / 2; i++) {\n        //    if (q[i] != q[q.Count
    - 1 - i]) {\n        //        balanced = false;\n        //        break;\n        //
    \   }\n        //}\n        //return balanced && sum <= w;\n        int n = q.Count;\n
    \       long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum
    += q[i];\n        }\n        int[] L = new int[n];\n        int[] R = new int[n];\n
    \       int p = 0;\n        int i;\n        for (i = 0; i < n; i++) {\n            while
    (p > 0 && q[i] != q[L[p - 1]]) {\n                p--;\n            }\n            if
    (q[i] == q[L[p - 1]]) {\n                p--;\n            }\n            L[p]
    = i;\n            p++;\n        }\n        p = 0;\n        for (i = n - 1; i >=
    0; i--) {\n            while (p > 0 && q[i] != q[R[p - 1]]) {\n                p--;\n
    \           }\n            if (q[i] == q[R[p - 1]]) {\n                p--;\n
    \           }\n            R[p] = i;\n            p++;\n        }\n        int
    len = n;\n        for (i = 0; i < p; i++) {\n            if (R[i] - L[i] < len)
    {\n                len = R[i] - L[i];\n            }\n        }\n        long
    sum_B = 0;\n        for (i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n
    \               sum_B += q[i];\n            }\n        }\n        return sum_B
    <= w && (len % 2 ==\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1ma9prhj.cs(79,41): error CS1525: Invalid expression term ''}''

    /tmp/tmp1ma9prhj.cs(79,41): error CS1026: ) expected

    /tmp/tmp1ma9prhj.cs(79,41): error CS1002: ; expected

    '
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Fill in your solution here.\n        long qsum = 0;\n
    \       for (int i = 0; i < q.Count; i++) {\n            qsum += q[i];\n        }\n
    \       if (qsum > w) {\n            return false;\n        }\n        int n =
    q.Count;\n        for (int i = 0; i < n / 2; i++) {\n            if (q[i] != q[n
    - i - 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977022
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code goes here.\n        bool res = false;\n        long
    sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n            sum += q[i];\n
    \       }\n        if (sum <= w) {\n            bool checker = true;\n            for
    (int i = 0; i < q.Count / 2; i++) {\n                if (q[i] != q[q.Count - 1
    - i]) {\n                    checker = false;\n                    break;\n                }\n
    \           }\n            if (checker) {\n                res = true;\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),
    (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977022
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <0b3033bce82e4423b2ee94b624f01d86>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <0b3033bce82e4423b2ee94b624f01d86>:0 \n"
  stdout: ''
  timestamp: 1659977020
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_1qi2fdg.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code here!\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9fe0ed882fd94b75befeb7c095c3c47a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9fe0ed882fd94b75befeb7c095c3c47a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977022
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        foreach (long i in q) {\n            sum
    += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n
    \       else {\n            List<long> q2 = new List<long>(q);\n            q2.Reverse();\n
    \           if (q.SequenceEqual(q2)) {\n                return true;\n            }\n
    \           else {\n                return false;\n            }\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977022
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        for (long i = 0; i < q.Count; i++)
    {\n            sum += q[(int)i];\n        }\n        if (sum > w) return false;\n
    \       for (long i = 0; i < q.Count / 2; i++) {\n            if (q[(int)i] !=
    q[(int)(q.Count - i - 1)]) return false;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977022
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return q.Count > 0 && q.Count % 2 == 0 && q.Sum() <= w;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16e9a1eb1d74473aa3edc6a44b837983>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16e9a1eb1d74473aa3edc6a44b837983>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977022
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code here\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d2638e92499421da2a4b11ad226c340>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d2638e92499421da2a4b11ad226c340>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977021
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <0b3033bce82e4423b2ee94b624f01d86>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <0b3033bce82e4423b2ee94b624f01d86>:0 \n"
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        if (q.Count <= 1) {\n            return true;\n        }\n
    \       var sum = q.Sum();\n        var midpoint = q.Count / 2;\n        if (q.Count
    % 2 == 0) {\n            return q.Take(midpoint).SequenceEqual(q.Skip(midpoint).Reverse())
    && sum <= w;\n        } else {\n            return q.Take(midpoint).SequenceEqual(q.Skip(midpoint
    + 1).Reverse()) && sum <= w;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977022
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        if (q.Sum() <= w && IsPali(q)) {\n            return true;\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphlah80in.cs(25,29): error CS0103: The name ''IsPali'' does not exist in
    the current context

    '
  timestamp: 1659977022
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <832791850f2a4936ae4bc52147b104e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <832791850f2a4936ae4bc52147b104e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return q.Count() != 1 && q.Count() != 2 && q.Count() !=
    0 && q.Count() % 2 == 0 && q.Sum() <= w;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <59c319c4589743f4982765d118b85cca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <59c319c4589743f4982765d118b85cca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        int len = q.Count;\n        for (int
    i = 0; i < len; i++) {\n            sum += q[i];\n            if (sum > w) return
    false;\n        }\n        if (sum <= w) {\n            for (int i = 0; i < len
    / 2; i++) {\n                if (q[i] != q[len - i - 1]) return false;\n            }\n
    \           return true;\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        if (q.Count <= 1) return true;\n        if (q.Sum() > w)
    return false;\n        int i = 0;\n        while (i < q.Count / 2) {\n            if
    (q[i] != q[q.Count - 1 - i]) return false;\n            i++;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code here\n        if (q.Count <= 1) return true;\n
    \       long sum = 0;\n        foreach (long i in q) sum += i;\n        if (sum
    > w) return false;\n        long mid = q.Count / 2;\n        long start = 0;\n
    \       while (start < mid) {\n            if (q[(int)start] != q[q.Count - (int)start
    - 1]) return false;\n            start++;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        var sum = q.Sum();\n        if (sum > w) return false;\n
    \       for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count
    - i - 1]) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977023
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return q.Sum() <= w && IsPalindrome(q);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwrq5wqji.cs(25,32): error CS0103: The name ''IsPalindrome'' does not exist
    in the current context

    '
  timestamp: 1659977022
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        if (q.Count == 0) return false;\n        if (q.Count ==
    1) return true;\n        long sum = 0;\n        q.ForEach(x => sum += x);\n        if
    (sum > w) return false;\n        List<long> reversed = new List<long>(q);\n        reversed.Reverse();\n
    \       return q.SequenceEqual(reversed);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3842426bfccc48fb9ce272916a0e1e52>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3842426bfccc48fb9ce272916a0e1e52>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)\n
    \           sum += q[i];\n        if (sum > w)\n            return false;\n        int
    L = q.Count / 2;\n        for (int i = 0; i < L; i++)\n            if (q[i] !=
    q[q.Count - 1 - i])\n                return false;\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        int cnt = q.Count();\n        long sum = 0;\n        for
    (int i = 0; i < cnt; i++) {\n            sum += q[i];\n        }\n        if (sum
    > w) return false;\n        for (int i = 0; i < cnt / 2; i++) {\n            if
    (q[i] != q[cnt - i - 1]) {\n                return false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977023
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <0b3033bce82e4423b2ee94b624f01d86>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <0b3033bce82e4423b2ee94b624f01d86>:0 \n"
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        var sum = 0L;\n        var itr = q.GetEnumerator();\n        while
    (itr.MoveNext())\n            sum += itr.Current;\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8ab33c5ef1147a08c635abfe99e8561>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8ab33c5ef1147a08c635abfe99e8561>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977023
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Write your code here\n        var sum = q.Sum();\n        if
    (sum > w) return false;\n        if (sum == w) return q.Count == 1;\n        var
    qr = q.GetRange(0, q.Count/2);\n        var ql = q.GetRange(q.Count/2 + 1, q.Count/2);\n
    \       var i = 0;\n        foreach (var li in ql) {\n            if (qr[i] !=
    li) return false;\n            i++;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Offset and length were
    out of bounds for the array or count is greater than the number of elements from
    index to the end of the source collection.\n  at System.Collections.Generic.List`1[T].GetRange
    (System.Int32 index, System.Int32 count) [0x00020] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.WillItFly (System.Collections.Generic.List`1[T] q, System.Int64
    w) [0x00052] in <af24407750a142398e5eb85d372d3ab6>:0 \n  at Problem.Main (System.String[]
    args) [0x0003a] in <af24407750a142398e5eb85d372d3ab6>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentException: Offset and length were out of bounds for
    the array or count is greater than the number of elements from index to the end
    of the source collection.\n  at System.Collections.Generic.List`1[T].GetRange
    (System.Int32 index, System.Int32 count) [0x00020] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.WillItFly (System.Collections.Generic.List`1[T] q, System.Int64
    w) [0x00052] in <af24407750a142398e5eb85d372d3ab6>:0 \n  at Problem.Main (System.String[]
    args) [0x0003a] in <af24407750a142398e5eb85d372d3ab6>:0 \n"
  stdout: ''
  timestamp: 1659977023
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // BEGIN SOLUTION\n        if (q.Sum() <= w && q.SequenceEqual(q.Reverse()))\n
    \           return true;\n        return false;\n        // END SOLUTION\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdjxsw9f1.cs(26,45): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659977023
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Remove negative numbers (they will not fly).\n        q.RemoveAll(n
    => n < 0);\n        // Remove duplicate numbers (they will not fly).\n        var
    distinct = q.Distinct().ToList();\n        if (distinct.Count < q.Count) {\n            return
    false;\n        }\n        // Use the fact that \"distinct\" is sorted by default.\n
    \       long sum = distinct.Sum();\n        if (sum > w) {\n            return
    false;\n        }\n        // Use the fact that \"distinct\" is sorted by default.\n
    \       bool balanced = distinct.SequenceEqual(distinct.Reverse());\n        return
    balanced;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps2n8vyrq.cs(38,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659977023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Implement your solution here\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2f639d9605a4780a28ac408a3bd5db9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2f639d9605a4780a28ac408a3bd5db9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977023
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code here.\n        long sum = 0;\n        for (int
    i = 0; i < q.Count; i++) {\n            sum += q[i];\n        }\n        if (sum
    > w) {\n            return false;\n        }\n        var isPalindrome = q.SequenceEqual(q.Reverse());\n
    \       if (isPalindrome) {\n            return true;\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3_lhbxf2.cs(33,44): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659977023
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // loop through the list and add up all of the items\n        long
    sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n            sum += q[i];\n
    \       }\n        // if the sum is less than or equal to the maximum weight and
    the list is a palindrome return true\n        if (sum <= w && IsPalindrome(q))
    {\n            return true;\n        }\n        // otherwise return false\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo0ed4x2k.cs(31,25): error CS0103: The name ''IsPalindrome'' does not exist
    in the current context

    '
  timestamp: 1659977023
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <0b3033bce82e4423b2ee94b624f01d86>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <0b3033bce82e4423b2ee94b624f01d86>:0 \n"
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        int len = q.Count();\n        for
    (int i = 0; i < len; i++)\n        {\n            sum += q[i];\n        }\n        if
    (sum > w)\n        {\n            return false;\n        }\n        for (int i
    = 0; i < len / 2; i++)\n        {\n            if (q[i] != q[len - i - 1])\n            {\n
    \               return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977023
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <0b3033bce82e4423b2ee94b624f01d86>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <0b3033bce82e4423b2ee94b624f01d86>:0 \n"
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)
    {\n            sum += q[i];\n        }\n        if (sum > w) return false;\n        for
    (int i = 0; i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count - 1 - i])
    return false;\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        List<long> a = new List<long>();\n
    \       for (int i = 0; i < q.Count; i++) {\n            a.Add(q[i]);\n            sum
    += q[i];\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if
    (a[i] != a[q.Count - i - 1]) {\n                return false;\n            }\n
    \       }\n        if (sum <= w) {\n            return true;\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977023
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return q.Sum() <= w && IsPalindrome(q);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwrq5wqji.cs(25,32): error CS0103: The name ''IsPalindrome'' does not exist
    in the current context

    '
  timestamp: 1659977022
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        var list = q.ToList();\n        var balanced = IsPalindrome(list);\n
    \       return balanced && SumList(list) <= w;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn0kgu03o.cs(26,24): error CS0103: The name ''IsPalindrome'' does not exist
    in the current context

    /tmp/tmpn0kgu03o.cs(27,28): error CS0103: The name ''SumList'' does not exist
    in the current context

    '
  timestamp: 1659977023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long v = 0;\n        foreach (long i in q) {\n            v
    += i;\n        }\n        if (v > w) {\n            return false;\n        }\n\n
    \       int length = q.Count();\n        for (int i = 0; i < length / 2; i++)
    {\n            if (q[i] != q[length - i - 1]) {\n                return false;\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        int n = q.Count;\n        long s = 0;\n        for (int
    i = 0; i < n; i++) {\n            s += q[i];\n        }\n        bool b = true;\n
    \       int l = n / 2;\n        for (int i = 0; i < l; i++) {\n            if
    (q[i] != q[n - i - 1]) {\n                b = false;\n                break;\n
    \           }\n        }\n        return s <= w && b;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        var d = new Dictionary<long, List<long>>();\n        d[1]
    = new List<long>();\n        foreach (var v in q) {\n            d[1].Add(v);\n
    \       }\n        while (d.Count > 0) {\n            var p = d.First();\n            d.Remove(p.Key);\n
    \           var g = p.Value;\n            if (g.Count <= 1) {\n                continue;\n
    \           }\n            var m = p.Key + 1;\n            var a = new List<long>();\n
    \           var b = new List<long>();\n            while (g.Count > 0) {\n                a.Add(g[0]);\n
    \               g.RemoveAt(0);\n                if (g.Count == 0) {\n                    break;\n
    \               }\n                b.Add(g[0]);\n                g.RemoveAt(0);\n
    \           }\n            if (a.Sum() > w) {\n                return false;\n
    \           }\n            d[m] = b;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8fb44fba04c24415bdf6b7a658f210b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8fb44fba04c24415bdf6b7a658f210b5>:0
    \n"
  stdout: ''
  timestamp: 1659977023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        foreach (long box in q) {\n            sum
    += box;\n        }\n        if (sum > w) {\n            return false;\n        }\n
    \       if (q.Count == 1) {\n            return true;\n        }\n        List<long>
    reversed = new List<long>(q);\n        reversed.Reverse();\n        for (int i
    = 0; i < q.Count; i++) {\n            if (q[i] != reversed[i]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977024
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)
    {\n            sum += q[i];\n        }\n        if (sum > w) {\n            return
    false;\n        }\n        bool isBalanced = false;\n        if (q.Count == 1)
    {\n            isBalanced = true;\n        } else {\n            int maxDiff =
    Math.Abs(q[0] - q[q.Count - 1]);\n            int lastIndex = q.Count - 1;\n            for
    (int i = 0; i < q.Count / 2; i++) {\n                if (Math.Abs(q[i] - q[lastIndex
    - i]) == maxDiff) {\n                    isBalanced = true;\n                }
    else {\n                    isBalanced = false;\n                    break;\n
    \               }\n            }\n        }\n        return isBalanced;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpakgu3cgj.cs(36,27): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977024
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        if (q.Count == 0) {\n            return true;\n        }\n
    \       else if (q.Count == 1) {\n            return q[0] <= w;\n        }\n        else
    {\n            if (q.Sum() <= w) {\n                int len = q.Count;\n                for
    (int i = 0; i < len / 2; i++) {\n                    if (q[i] != q[len - i - 1])
    {\n                        return false;\n                    }\n                }\n
    \               return true;\n            }\n            else {\n                return
    false;\n            }\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977024
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        foreach (long d in q) {\n            sum
    += d;\n        }\n        if (sum > w) {\n            return false;\n        }\n
    \       for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count
    - 1 - i]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977024
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <832791850f2a4936ae4bc52147b104e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <832791850f2a4936ae4bc52147b104e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977021
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return q.Sum() <= w && IsPalindrome(q);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwrq5wqji.cs(25,32): error CS0103: The name ''IsPalindrome'' does not exist
    in the current context

    '
  timestamp: 1659977022
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // your code here\n        if(q.Sum() > w) {\n            return
    false;\n        }\n\n        var leftSum = 0L;\n        var rightSum = 0L;\n        var
    left = 0;\n        var right = q.Count - 1;\n        while(left < right) {\n            leftSum
    += q[left];\n            rightSum += q[right];\n            if(leftSum > rightSum)
    {\n                left++;\n            } else if(rightSum > leftSum) {\n                right--;\n
    \           } else {\n                left++;\n                right--;\n            }\n
    \       }\n\n        return leftSum == rightSum;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977024
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <832791850f2a4936ae4bc52147b104e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <832791850f2a4936ae4bc52147b104e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        if (q.Count == 0) {\n            return true;\n        }\n
    \       long max = q.Max();\n        long sum = q.Sum();\n        if (max > w)
    {\n            return false;\n        }\n        if (sum > w) {\n            return
    false;\n        }\n        if (q.Count % 2 == 0) {\n            return false;\n
    \       }\n        long mid = q.Count / 2;\n        for (int i = 0; i < mid; i++)
    {\n            if (q[i] != q[q.Count - 1 - i]) {\n                return false;\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977024
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        if(q.Sum() <= w) {\n            return true;\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ec7b083f5d94d5684d2a4e73af1d3e4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ec7b083f5d94d5684d2a4e73af1d3e4>:0
    \n"
  stdout: ''
  timestamp: 1659977024
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code goes here.\n        return q.Sum() <= w &&
    q.SequenceEqual(q.AsEnumerable().Reverse());\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977024
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        bool balanced = IsBalanced(q);\n        long total = q.Sum();\n
    \       bool light = total <= w;\n        bool isValid = balanced && light;\n
    \       return isValid;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),
    (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp88_hxl7l.cs(25,25): error CS0103: The name ''IsBalanced'' does not exist
    in the current context

    '
  timestamp: 1659977024
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        bool balanced = true;\n        int i = 0;\n        int j
    = q.Count - 1;\n        while (i < j) {\n            if (q[i] != q[j]) {\n                balanced
    = false;\n                break;\n            }\n            i += 1;\n            j
    -= 1;\n        }\n        long sum = 0;\n        foreach (long item in q) {\n
    \           sum += item;\n        }\n        return balanced && sum <= w;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977024
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_1qi2fdg.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659977020
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Public Function WillItFly(q As List(Of Long), w As Long)
    As Boolean\n        //     Dim list As New List(Of List(Of Long))\n        //
    \    Dim sum As Long = 0\n        //     Dim p As Long = 0\n        //     Dim
    i As Long = 0\n        //     Dim index As Long = 0\n        //     Dim length
    As Long = 1\n        //     Dim j As Long = 0\n        //     Dim c As Long =
    0\n        //     Dim d As Long = 0\n        //     If q.Count() = 1 Then\n        //
    \        If q(0) <= w Then\n        //             Return True\n        //         Else\n
    \       //             Return False\n        //         End If\n        //     End
    If\n        //     For Each i In q\n        //         sum += i\n        //     Next\n
    \       //     If sum <= w Then\n        //         For Each i In q\n        //
    \            For Each j In q\n        //                 If i = j Then\n        //
    \                    p += 1\n        //                 End If\n        //             Next\n
    \       //             If p = 2 Then\n        //                 Return True\n
    \       //             End If\n        //             p = 0\n        //         Next\n
    \       //         While index < (q.Count() - 1)\n        //             While
    index < length\n        //                 While index < c\n        //                     list.Add(New
    List(Of Long))\n        //                     c += 1\n        //                 End
    While\n        //                 While index < length\n        //                     list(d).Add(q(index))\n
    \       //                     index += 1\n        //                 End While\n
    \       //                 d += 1\n        //             End While\n        //
    \            length += 1\n        //         End While\n        //         For
    Each i In list\n        //             Dim flag As Long = 0\n        //             For
    Each j In i\n        //                 For Each c In i\n        //                     If
    j = c Then\n        //                         flag += 1\n        //                     End
    If\n        //                 Next\n        //                 If flag > 2 Then\n
    \       //                     Return False\n        //                 End If\n
    \       //                 flag = 0\n        //             Next\n        //         Next\n
    \       //         Return True\n        //     Else\n\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4oqpvvc8.cs(24,24): error CS0161: ''Problem.WillItFly(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659977024
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        if (q.Count < 2) return true;\n        if (q.Count % 2 ==
    0) return false;\n        var sum = q.Sum();\n        if (sum > w) return false;\n
    \       return (q.Count % 2 == 1) && (q.Take(q.Count / 2).SequenceEqual(q.Skip(q.Count
    / 2 + 1).Reverse()));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977024
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        if (q.Count == 0) return false;\n        if (q.Count ==
    1) return true;\n        long sum = 0;\n        foreach (long e in q) {\n            sum
    += e;\n        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if
    (q[i] != q[q.Count - 1 - i]) return false;\n        }\n        return sum <= w;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977024
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Implement your solution here\n        List<long> q2 =
    new List<long>(q);\n        q2.Reverse();\n        if(q.SequenceEqual(q2)) {\n
    \           return q.Sum() <= w;\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977024
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        var sum = q.Sum();\n        if (sum > w) return false;\n
    \       if (q.Count == 1) return true;\n        var half = q.Count / 2;\n        for
    (int i = 0; i < half; i++) {\n            if (q[i] != q[q.Count - 1 - i]) return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977024
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3842426bfccc48fb9ce272916a0e1e52>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3842426bfccc48fb9ce272916a0e1e52>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        int count = q.Count;\n        long sum = 0;\n        foreach
    (long num in q) {\n            sum += num;\n        }\n        if (sum > w) {\n
    \           return false;\n        }\n        if (count == 1) {\n            return
    true;\n        }\n        if (count % 2 == 0) {\n            return false;\n        }\n
    \       int center = count / 2;\n        for (int i = 0; i < center; i++) {\n
    \           if (q[i] != q[count - i - 1]) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),
    (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977024
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return q.Count > 0 && (q.Sum() <= w) && q.SequenceEqual(q.Reverse());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpky4aea2d.cs(25,65): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659977024
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        var index = q.Count;\n        var
    firstindex = 0;\n        for (int i = 0; i < q.Count; i++) {\n            sum
    += q[i];\n            if (q[i] > w) {\n                return false;\n            }\n
    \           else if (sum > w) {\n                index = i;\n                break;\n
    \           }\n        }\n        var firsthalf = q.GetRange(0, index);\n        var
    secondhalf = q.GetRange(index, q.Count - index);\n        secondhalf.Reverse();\n
    \       if (firsthalf.Count == 0) {\n            if (sum <= w) {\n                return
    true;\n            }\n            else {\n                return false;\n            }\n
    \       }\n        else if (firsthalf.Count > 0) {\n            for (int i = 0;
    i < firsthalf.Count; i++) {\n                if (firsthalf[i] != secondhalf[i])
    {\n                    return false;\n                }\n            }\n            if
    (sum <= w) {\n                return true;\n            }\n            else {\n
    \               return false;\n            }\n        }\n        else {\n            return
    false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.WillItFly
    (System.Collections.Generic.List`1[T] q, System.Int64 w) [0x000c8] in <bec20d8e3e08473ab11cf42e024f1ed9>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <bec20d8e3e08473ab11cf42e024f1ed9>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.WillItFly
    (System.Collections.Generic.List`1[T] q, System.Int64 w) [0x000c8] in <bec20d8e3e08473ab11cf42e024f1ed9>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <bec20d8e3e08473ab11cf42e024f1ed9>:0
    \n"
  stdout: ''
  timestamp: 1659977024
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <0b3033bce82e4423b2ee94b624f01d86>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <0b3033bce82e4423b2ee94b624f01d86>:0 \n"
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)
    {\n            sum += q[i];\n        }\n        if (sum > w) return false;\n        else
    if (sum == w) return true;\n        else {\n            for (int i = 0; i < q.Count
    / 2; i++) {\n                if (q[i] != q[q.Count - 1 - i]) return false;\n            }\n
    \           return true;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9a234faa309439f8945d83f99406046>:0
    \n"
  stdout: ''
  timestamp: 1659977024
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        if (q.Sum() <= w && q.SequenceEqual(q.Reverse()))\n            return
    true;\n        return false;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),
    (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgk4sgwf4.cs(25,45): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659977024
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        List<long> temp = new List<long>();\n
    \       foreach (long k in q) {\n            sum += k;\n            temp.Add(k);\n
    \       }\n        if (sum > w) return false;\n        temp.Reverse();\n        foreach
    (long k in temp) {\n            if (q[0] != k) return false;\n            q.RemoveAt(0);\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),
    (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977024
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <832791850f2a4936ae4bc52147b104e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <832791850f2a4936ae4bc52147b104e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977021
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return q.Count == 1 || q.Count > 1 && q.Count <= 30 && q.Sum()
    <= w && q.SequenceEqual(q.Reverse());\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi52zjoep.cs(25,96): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659977024
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // TODO: implement this\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee9a53cae67c48d28784c76b5d555ac6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee9a53cae67c48d28784c76b5d555ac6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)
    {\n            sum += q[i];\n        }\n        for (int i = 0; i < q.Count /
    2; i++) {\n            if (q[i] != q[q.Count - 1 - i]) {\n                return
    false;\n            }\n        }\n        if (sum <= w) {\n            return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        List<long> r = new List<long>();\n
    \       for (int i = 0; i < q.Count; i++) {\n            sum += q[i];\n            r.Add(q[i]);\n
    \       }\n        r.Reverse();\n        if (sum > w) {\n            return false;\n
    \       }\n        for (int i = 0; i < q.Count; i++) {\n            if (q[i] !=
    r[i]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // your code here.\n        List<long> tmp = new List<long>();\n
    \       long sum = 0;\n        foreach (long v in q) {\n            tmp.Add(v);\n
    \           sum += v;\n        }\n        if (sum > w) {\n            return false;\n
    \       }\n        tmp.Reverse();\n        if (tmp.SequenceEqual(q)) {\n            return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // your code goes here\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <67805eb1a3cc4a359e221fc9d653f159>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <67805eb1a3cc4a359e221fc9d653f159>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977025
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return w >= q.Sum() && Enumerable.SequenceEqual(q, q.Reverse());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphetrdkia.cs(25,60): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        bool b = true;\n        foreach (long
    l in q) {\n            sum += l;\n        }\n        for (int i = 0; i < q.Count
    / 2; i++) {\n            if (q[i] != q[q.Count - 1 - i]) {\n                b
    = false;\n            }\n        }\n        if (sum <= w && b) {\n            return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        int i = 0;\n        int j = q.Count-1;\n
    \       for (i = 0; i < q.Count; i++) {\n            sum += q[i];\n        }\n
    \       for (i = 0; i < j; i++) {\n            if (q[i] != q[j]) {\n                return
    false;\n            }\n            j--;\n        }\n        if (sum <= w) {\n
    \           return true;\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <0b3033bce82e4423b2ee94b624f01d86>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <0b3033bce82e4423b2ee94b624f01d86>:0 \n"
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        if (w <= 0) return false;\n        var list = new List<long>(q);\n
    \       if (list.Count <= 1) return true;\n        if (list.Sum() > w) return
    false;\n        var test = new List<long>(list);\n        var list1 = new List<long>(test);\n
    \       var list2 = new List<long>(test);\n        list1.RemoveAt(0);\n        list2.RemoveAt(list2.Count
    - 1);\n        test.RemoveAt(0);\n        test.RemoveAt(test.Count - 1);\n        if
    (test.Count == 0) return true;\n        return WillItFly(list1, w) || WillItFly(list2,
    w);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03662a9e66d742a3b60f6887f73af3f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03662a9e66d742a3b60f6887f73af3f7>:0
    \n"
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // your code here\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecdfa9bef5e44ebfbf3b7da94a0c933a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecdfa9bef5e44ebfbf3b7da94a0c933a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        List<long> rq = new List<long>(q);\n        rq.Reverse();\n
    \       if (q.SequenceEqual(rq)) {\n            if (q.Sum() <= w) {\n                return
    true;\n            }\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        int j = q.Count - 1;\n        for
    (int i = 0; i < q.Count; i++) {\n            sum += q[i];\n            if (q[i]
    != q[j]) {\n                return false;\n            }\n            j--;\n        }\n
    \       if (sum <= w) {\n            return true;\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <832791850f2a4936ae4bc52147b104e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <832791850f2a4936ae4bc52147b104e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977021
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code here.\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <b0e84b63ea124f03b92b32b7d559fcf8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <b0e84b63ea124f03b92b32b7d559fcf8>:0 \n"
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        List<long> tmp = new List<long>(q);\n        tmp.Reverse();\n
    \       if (q.SequenceEqual(tmp)) {\n            long sum = 0;\n            foreach
    (long i in q) {\n                sum += i;\n            }\n            if (sum
    <= w) {\n                return true;\n            }\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // if (q.Count == 1) return true;\n        // long sum =
    0;\n        // int mid = q.Count / 2;\n        // for (int i = 0; i < mid; i++)
    {\n        //     sum += q[i];\n        //     sum += q[q.Count - 1 - i];\n        //
    }\n        // if (q.Count % 2 == 1) sum += q[mid];\n        // return sum <= w;\n
    \       // return q.Sum() <= w && Enumerable.Range(0, q.Count / 2).All(i => q[i]
    == q[q.Count - 1 - i]);\n        // return q.Sum() <= w && Enumerable.Range(0,
    q.Count / 2).All(i => q[i] == q[q.Count - 1 - i]);\n        long sum = 0;\n        for
    (int i = 0; i < q.Count; i++) {\n            if (q[i] != q[q.Count - 1 - i]) return
    false;\n            sum += q[i];\n        }\n        return sum <= w;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        List<long> qrev = new List<long>(q);\n        qrev.Reverse();\n
    \       return q.SequenceEqual(qrev) && q.Sum() <= w;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code here.\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a5d932c4c9145f380249d165b31c684>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a5d932c4c9145f380249d165b31c684>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <832791850f2a4936ae4bc52147b104e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <832791850f2a4936ae4bc52147b104e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        if (q.Count == 0) return false;\n        long w2 = q.Aggregate((a,b)
    => a+b);\n        if (w2 > w) return false;\n        long i = 0;\n        long
    j = q.Count - 1;\n        while (i < j) {\n            if (q[(int)i] != q[(int)j])
    return false;\n            i++;\n            j--;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)
    {\n            sum += q[i];\n        }\n        if (sum > w) return false;\n        int
    start = 0;\n        int end = q.Count - 1;\n        while (start < end) {\n            if
    (q[start] != q[end]) return false;\n            start++;\n            end--;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),
    (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code here.\n        long count = 0;\n        for
    (long i = 0; i < q.Count(); i++) {\n            count += q[(int)i];\n        }\n
    \       if (count <= w) {\n            List<long> r = new List<long>();\n            for
    (long i = q.Count(); i > 0; i--) {\n                r.Add(q[(int)(i - 1)]);\n
    \           }\n            if (r.SequenceEqual(q)) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        if (q.Count == 0) {\n            return false;\n        }\n
    \       for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count
    - 1 - i]) {\n                return false;\n            }\n        }\n        return
    q.Sum() <= w;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        //write your code here\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <248d8e1839ad4a59a5cd09b2e020b0c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <248d8e1839ad4a59a5cd09b2e020b0c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return (q.Sum() <= w) && ((q.ToArray()).SequenceEqual(q.ToArray().Reverse()));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code goes here!\n        // Don't forget to modify
    the signature to fit the interface.\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <919f31d36593409a96ed46469db9cad8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <919f31d36593409a96ed46469db9cad8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        if(q.Sum() > w) {\n            return false;\n        }\n\n
    \       for(int i = 0; i < q.Count / 2; i++) {\n            if(q[i] != q[q.Count
    - i - 1]) {\n                return false;\n            }\n        }\n\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code goes here\n        BigInteger sum = new BigInteger(0);\n
    \       foreach (long l in q)\n        {\n            sum += l;\n        }\n        return
    sum <= w && IsPalindrome(q);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),
    (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu_tn6l8v.cs(31,28): error CS0103: The name ''IsPalindrome'' does not exist
    in the current context

    '
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        for (int i = 0; i < q.Count; i++)
    {\n            sum += q[i];\n        }\n        if (sum > w) {\n            return
    false;\n        }\n        int index = 0;\n        int length = q.Count;\n        for
    (int i = 0; i < length; i++) {\n            if (q[index] != q[length - 1 - index])
    {\n                return false;\n            }\n            index++;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        List<long> qclone = new List<long>(q);\n        qclone.Reverse();\n
    \       return q.SequenceEqual(qclone) && q.Sum() <= w;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code here.\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <232b1f932f594d158c722223e37f8b3a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <232b1f932f594d158c722223e37f8b3a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977022
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        int len = q.Count();\n        for
    (int i = 0; i < len; i++) {\n            sum += q[i];\n        }\n        if (sum
    > w) {\n            return false;\n        } else {\n            for (int i =
    0; i < len; i++) {\n                if (q[i] != q[len - i - 1]) {\n                    return
    false;\n                }\n            }\n            return true;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_1qi2fdg.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        bool flag = true;\n        for (int i = 0; i < q.Count /
    2; i++) {\n            if (q[i] != q[q.Count - 1 - i]) {\n                flag
    = false;\n                break;\n            }\n        }\n        return flag
    && q.Sum() <= w;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        var length = q.Count;\n        for (int i = 0; i < length;
    i++) {\n            if (q[i] > w) return false;\n            if (i > length -
    1 - i) break;\n            if (q[i] != q[length - 1 - i]) return false;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        foreach (long item in q) {\n            sum
    += item;\n        }\n        if (sum > w) return false;\n        List<long> r
    = new List<long>(q);\n        r.Reverse();\n        for (int i = 0; i < q.Count;
    i++) {\n            if (q[i] != r[i]) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        // Your code here!\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9fe0ed882fd94b75befeb7c095c3c47a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9fe0ed882fd94b75befeb7c095c3c47a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977022
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        bool isBalanced = IsBalanced(q);\n        long sum = Sum(q);\n
    \       return isBalanced && sum <= w;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4bq18i9o.cs(25,27): error CS0103: The name ''IsBalanced'' does not exist
    in the current context

    /tmp/tmp4bq18i9o.cs(26,20): error CS0103: The name ''Sum'' does not exist in the
    current context

    '
  timestamp: 1659977026
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <0b3033bce82e4423b2ee94b624f01d86>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <0b3033bce82e4423b2ee94b624f01d86>:0 \n"
  stdout: ''
  timestamp: 1659977020
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        foreach (long i in q) {\n            sum
    += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n
    \       for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count
    - 1 - i]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        bool fly = true;\n        long sum = 0;\n        for (int
    i = 0; i < q.Count; i++) {\n            sum += q[i];\n        }\n        if (sum
    > w) {\n            fly = false;\n        }\n        bool p = true;\n        for
    (int i = 0; i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count - 1 - i])
    {\n                p = false;\n            }\n        }\n        if (p == false)
    {\n            fly = false;\n        }\n        return fly;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        bool b = false;\n        long total = 0;\n        long half
    = q.Count/2;\n        for (int i = 0; i < half; i++) {\n            total += q[i];\n
    \           if (q[i] != q[q.Count-1-i]) {\n                b = false;\n                break;\n
    \           }\n            else b = true;\n        }\n        return b && total
    <= w;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f166f4fd97d941b6861bb2e90c699c7f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f166f4fd97d941b6861bb2e90c699c7f>:0
    \n"
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        bool result = false;\n        long sum = 0;\n        foreach
    (long i in q) {\n            sum += i;\n        }\n        if (sum <= w) {\n            result
    = true;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3dbe6c5bba204fb0ae2ee60c081f03db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3dbe6c5bba204fb0ae2ee60c081f03db>:0
    \n"
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        bool fl = false;\n        long k = 0;\n        for (int
    i = 0; i < q.Count(); i++) {\n            k += q[i];\n        }\n        if (k
    <= w) {\n            for (int i = 0; i < q.Count() / 2; i++) {\n                if
    (q[i] == q[q.Count() - 1 - i]) {\n                    fl = true;\n                }\n
    \               else {\n                    fl = false;\n                    break;\n
    \               }\n            }\n        }\n        return fl;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9ae6abec7ba4460d85ad1fe41fd4eece>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9ae6abec7ba4460d85ad1fe41fd4eece>:0
    \n"
  stdout: ''
  timestamp: 1659977027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        bool isBalanced = IsPalindrome(q);\n        long totalWeight
    = q.Sum();\n        bool isLessThanMaxWeight = totalWeight <= w;\n        return
    isBalanced && isLessThanMaxWeight;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphtrpz0q_.cs(25,27): error CS0103: The name ''IsPalindrome'' does not exist
    in the current context

    '
  timestamp: 1659977026
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return q.Sum() <= w && IsPalindrome(q);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwrq5wqji.cs(25,32): error CS0103: The name ''IsPalindrome'' does not exist
    in the current context

    '
  timestamp: 1659977022
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        bool balanced = isBalanced(q);\n        long sum = q.Sum();\n
    \       bool result = balanced && sum <= w;\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5h5w0cpi.cs(25,25): error CS0103: The name ''isBalanced'' does not exist
    in the current context

    '
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        if (q.Sum() > w) return false;\n        var qr = q.AsEnumerable().Reverse();\n
    \       return q.SequenceEqual(qr);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        var sum = 0L;\n        var n = q.Count;\n        var q2
    = new List<long>(q);\n        q2.Reverse();\n        for (var i = 0; i < n; i++)
    {\n            if (q[i] != q2[i]) {\n                return false;\n            }\n
    \           sum += q[i];\n        }\n        return sum <= w;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        foreach (long i in q) {\n            sum
    += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n
    \       int n = q.Count;\n        for (int i = 0; i < n / 2; i++) {\n            if
    (q[i] != q[n - i - 1]) {\n                return false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        var totalWeight = q.Sum();\n        if (totalWeight > w)
    {\n            return false;\n        }\n\n        var halfQ = q.Count / 2;\n
    \       for (int i = 0; i < halfQ; i++) {\n            if (q[i] != q[q.Count -
    i - 1]) {\n                return false;\n            }\n        }\n\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        var x = q.Sum();\n        var r = q.SequenceEqual(q.Reverse());\n
    \       return x <= w && r;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),
    (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpukjzcmiw.cs(26,33): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,
    (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <832791850f2a4936ae4bc52147b104e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <832791850f2a4936ae4bc52147b104e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977021
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        long sum = 0;\n        bool isOdd = q.Count % 2 == 1;\n
    \       int half = q.Count / 2;\n        int i = 0;\n        foreach (long n in
    q) {\n            if (i == half && isOdd) {\n                break;\n            }\n
    \           if (n != q[q.Count - i - 1]) {\n                return false;\n            }\n
    \           sum += n;\n            i++;\n        }\n        return sum <= w;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        return w >= q.Sum() && IsPalindrome(q);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeo1ongi4.cs(25,32): error CS0103: The name ''IsPalindrome'' does not exist
    in the current context

    '
  timestamp: 1659977027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that returns true if the object q will fly,
    and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic
    list) and the sum of its elements is less than or equal the maximum possible weight
    w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L,
    (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible
    weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3
    is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is
    less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new
    List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than
    the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long>
    q, long w) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new
    long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new
    List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <0b3033bce82e4423b2ee94b624f01d86>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <0b3033bce82e4423b2ee94b624f01d86>:0 \n"
  stdout: ''
  timestamp: 1659977020
