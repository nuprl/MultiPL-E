language: cs
name: HumanEval_46_fib4
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0 \n"
  stdout: ''
  timestamp: 1659976190
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long n0 = 0;\n        long
    n1 = 0;\n        long n2 = 2;\n        long n3 = 0;\n        long n4 = 0;\n        long
    n5 = 0;\n        long n6 = 0;\n        long n7 = 0;\n        long n8 = 0;\n        long
    n9 = 0;\n        long n10 = 0;\n        long n11 = 0;\n        long n12 = 0;\n
    \       long n13 = 0;\n        long n14 = 0;\n        long n15 = 0;\n        long
    n16 = 0;\n        long n17 = 0;\n        long n18 = 0;\n        long n19 = 0;\n
    \       long n20 = 0;\n        long n21 = 0;\n        long n22 = 0;\n        long
    n23 = 0;\n        long n24 = 0;\n        long n25 = 0;\n        long n26 = 0;\n
    \       long n27 = 0;\n        long n28 = 0;\n        long n29 = 0;\n        long
    n30 = 0;\n        long n31 = 0;\n        long n32 = 0;\n        long n33 = 0;\n
    \       long n34 = 0;\n        long n35 = 0;\n        long n36 = 0;\n        long
    n37 = 0;\n        long n38 = 0;\n        long n39 = 0;\n        long n40 = 0;\n
    \       long n41 = 0;\n        long n42 = 0;\n        long n43 = 0;\n        long
    n44 = 0;\n        long n45 = 0;\n        long n46 = 0;\n        long n47 = 0;\n
    \       long n48 = 0;\n        long n49 = 0;\n        long n50 = 0;\n        long
    n51 = 0;\n        long n52 = 0;\n        long n53 = 0;\n        long n54 = 0;\n
    \       long n55 = 0;\n        long n56 = 0;\n        long n57 = 0;\n        long
    n58 = 0;\n        long n59 = 0;\n        long n60 = 0;\n        long n61 = 0;\n
    \       long n62 = 0;\n        long n63 = 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6gn4g0t9.cs(23,14): warning CS0219: The variable ''n0'' is assigned but
    its value is never used

    /tmp/tmp6gn4g0t9.cs(24,14): warning CS0219: The variable ''n1'' is assigned but
    its value is never used

    /tmp/tmp6gn4g0t9.cs(25,14): warning CS0219: The variable ''n2'' is assigned but
    its value is never used

    /tmp/tmp6gn4g0t9.cs(26,14): warning CS0219: The variable ''n3'' is assigned but
    its value is never used

    /tmp/tmp6gn4g0t9.cs(27,14): warning CS0219: The variable ''n4'' is assigned but
    its value is never used

    /tmp/tmp6gn4g0t9.cs(28,14): warning CS0219: The variable ''n5'' is assigned but
    its value is never used

    /tmp/tmp6gn4g0t9.cs(29,14): warning CS0219: The variable ''n6'' is assigned but
    its value is never used

    /tmp/tmp6gn4g0t9.cs(30,14): warning CS0219: The variable ''n7'' is assigned but
    its value is never used

    /tmp/tmp6gn4g0t9.cs(31,14): warning CS0219: The variable ''n8'' is assigned but
    its value is never used

    /tmp/tmp6gn4g0t9.cs(32,14): warning CS0219: The variable ''n9'' is assigned but
    its value is never used

    /tmp/tmp6gn4g0t9.cs(33,14): warning CS0219: The variable ''n10'' is assigned but
    its value is never used

    /tmp/tmp6gn4g0t9.cs(34,14): warning CS0219: The variable ''n11'' is assigned but
    its value is never used

    /tmp/tmp6gn4g0t9.cs(35,14): warning CS0219: The variable ''n12'' is assigned but
    its value is never used

    /tmp/tmp6gn4g0t9.cs(36,14): warning CS0219: The variable ''n13'' is assigned but
    its value is never used

    /tmp/tmp6gn4g0t9.cs(37,14): warning CS0219: The variable ''n14'' is assigned but
    its value is never used

    /tmp/tmp6gn4g0t9.cs(38,14): warning CS0219: The variable ''n15'' is assigned but
    its value is never used

    /tmp/tmp6gn4g0t9.cs(39,14): warning CS0219: The variable ''n16'' is assigned but
    its value is never used

    /tmp/tmp6gn4g0t9.cs(40,14): warning CS0219: The variable ''n17'' is assigned but
    its value is never used

    /tmp/tmp6gn4g0t9.cs(41,14): warning CS0219: The variable ''n18'' is assigned bu'
  timestamp: 1659976190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 2) {\n            return
    0;\n        } else if (n == 2) {\n            return 2;\n        } else if (n
    == 3) {\n            return 0;\n        } else {\n            long[] lastFour
    = new long[4];\n            lastFour[0] = 0;\n            lastFour[1] = 0;\n            lastFour[2]
    = 2;\n            lastFour[3] = 0;\n            for (int i = 4; i <= n; i++) {\n
    \               long sum = 0;\n                for (int j = 0; j < 4; j++) {\n
    \                   sum += lastFour[j];\n                }\n                lastFour[i
    % 4] = sum;\n            }\n            return lastFour[n % 4];\n        }\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        return 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // YOUR CODE HERE\n
    \       return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f7a0c7df953c452d82bc1dd35b59abb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f7a0c7df953c452d82bc1dd35b59abb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // your solution
    here.\n        long[] fibs = new long[Math.Max(n + 1, 4)];\n        fibs[0] =
    0;\n        fibs[1] = 0;\n        fibs[2] = 2;\n        fibs[3] = 0;\n        if
    (n < 4)\n            return fibs[n];\n        for (int i = 4; i <= n; i++)\n            fibs[i]
    = fibs[i - 1] + fibs[i - 2] + fibs[i - 3] + fibs[i - 4];\n        return fibs[n];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        return 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] memo = new
    long[4];\n        memo[0] = 0;\n        memo[1] = 0;\n        memo[2] = 2;\n        memo[3]
    = 0;\n        long result = 0;\n        for (int i = 0; i < n; i++) {\n            result
    = memo[0] + memo[1] + memo[2] + memo[3];\n            memo[0] = memo[1];\n            memo[1]
    = memo[2];\n            memo[2] = memo[3];\n            memo[3] = result;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41028be7278e4c1798e19f8b1275977c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41028be7278e4c1798e19f8b1275977c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        return 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] f = new long[4];\n
    \       f[0] = 0;\n        f[1] = 0;\n        f[2] = 2;\n        f[3] = 0;\n        for
    (int i = 4; i <= n; i++) {\n            f[i % 4] = f[(i - 1) % 4] + f[(i - 2)
    % 4] + f[(i - 3) % 4] + f[(i - 4) % 4];\n        }\n        return f[n % 4];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        Debug.Assert(n >=
    0);\n        long[] seq = new long[4];\n        for (int i = 0; i < seq.Length;
    i++) {\n            seq[i] = 0;\n        }\n        seq[2] = 2;\n        if (n
    <= 3) {\n            return seq[n];\n        }\n        for (int i = 4; i <= n;
    i++) {\n            seq[0] = seq[1];\n            seq[1] = seq[2];\n            seq[2]
    = seq[3];\n            seq[3] = seq[0] + seq[1] + seq[2] + seq[3];\n        }\n
    \       return seq[3];\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <97d34ea623384de39deb82cfb8bc2abb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <97d34ea623384de39deb82cfb8bc2abb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        return 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 0) throw
    new ArgumentOutOfRangeException(\"n\", \"must be non-negative\");\n        var
    h = n % 4;\n        var q = n / 4;\n        var n2 = q + h;\n        var n1 =
    q;\n        long r = 0;\n        var q1 = Fib3(n1);\n        var q2 = Fib3(n2);\n
    \       for (var i = 0; i < h; i++) {\n            r += Fib4(i) * q1 + Fib4(i
    + 1) * q2;\n        }\n        return r;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprcf8p2ph.cs(29,18): error CS0103: The name ''Fib3'' does not exist in
    the current context

    /tmp/tmprcf8p2ph.cs(30,18): error CS0103: The name ''Fib3'' does not exist in
    the current context

    '
  timestamp: 1659976190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) {\n            return
    0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n
    == 2) {\n            return 2;\n        } else if (n == 3) {\n            return
    0;\n        } else {\n            long f0 = 0;\n            long f1 = 0;\n            long
    f2 = 2;\n            long f3 = 0;\n            long current = n - 4;\n            while
    (current >= 0) {\n                long tmp = f0;\n                f0 = f1;\n                f1
    = f2;\n                f2 = f3;\n                f3 = tmp + f0 + f1 + f2;\n                current--;\n
    \           }\n            return f3;\n        }\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 0) throw
    new Exception(\"Invalid negative value!\");\n        if (n == 0) return 0;\n        if
    (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return
    0;\n        // we know fib4(4) = 4.\n        if (n == 4) return 4;\n        //
    otherwise, we start from fib4(4) and use a for loop for the rest of fib4 number
    sequence.\n        long result = 4;\n        long prev1 = 4;\n        long prev2
    = 8;\n        long prev3 = 14;\n        long prev4 = 24;\n        for (long i
    = 5; i <= n; i++) {\n            result = prev1 + prev2 + prev3 + prev4;\n            prev1
    = prev2;\n            prev2 = prev3;\n            prev3 = prev4;\n            prev4
    = result;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15c67946af654df88018cbc03e4ef10b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15c67946af654df88018cbc03e4ef10b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0 \n"
  stdout: ''
  timestamp: 1659976190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        var result = 0L;\n
    \       var a = 0L;\n        var b = 0L;\n        var c = 2L;\n        var d =
    0L;\n        for (var i = 3L; i <= n; i++) {\n            result = a + b + c +
    d;\n            a = b;\n            b = c;\n            c = d;\n            d
    = result;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da304fba22d043b3a4024785592e07ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da304fba22d043b3a4024785592e07ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) {\n            return
    0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if
    (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return
    0;\n        }\n        long[] f = new long[4];\n        f[0] = 0;\n        f[1]
    = 0;\n        f[2] = 2;\n        f[3] = 0;\n        for (int i = 4; i <= n; i++)
    {\n            f[3] = f[2] + f[1] + f[0] + f[3];\n            f[0] = f[1];\n            f[1]
    = f[2];\n            f[2] = f[3];\n        }\n        return f[3];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51a5bdcd0546470c899557f1079ab5e3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51a5bdcd0546470c899557f1079ab5e3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n <= 3) {\n            return
    new long[] { 0, 0, 2, 0 }[n];\n        }\n        long n_1 = 0;\n        long
    n_2 = 0;\n        long n_3 = 2;\n        long n_4 = 0;\n        long i = 4;\n
    \       long next;\n        while (i <= n) {\n            next = n_1 + n_2 + n_3
    + n_4;\n            n_1 = n_2;\n            n_2 = n_3;\n            n_3 = n_4;\n
    \           n_4 = next;\n            i++;\n        }\n        return n_4;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        return 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        return Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n
    - 4);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976190
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Your code goes
    here.\n        var initial = new List<BigInteger>() { 0, 0, 2, 0 };\n        return
    Fib4(n, initial);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkjh504pd.cs(25,16): error CS1501: No overload for method ''Fib4'' takes
    2 arguments

    '
  timestamp: 1659976190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n <= 3) {\n            return
    2*(n%2);\n        }\n        long a = 0;\n        long b = 0;\n        long c
    = 2;\n        long d = 0;\n        long e = 0;\n        long f = 0;\n        long
    g = 0;\n        long h = 0;\n        for (long i = 4; i <= n; i++) {\n            h
    = g;\n            g = f;\n            f = e;\n            e = d;\n            d
    = c;\n            c = b;\n            b = a;\n            a = d + c + b + e;\n
    \       }\n        return a;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf97a475cb634c3b8ccecde950c05a09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf97a475cb634c3b8ccecde950c05a09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long x0 = 0;\n        long
    x1 = 0;\n        long x2 = 2;\n        long x3 = 0;\n        long x4 = 0;\n        for
    (long i = 0; i < n - 3; i++) {\n            x4 = x3 + x2 + x1 + x0;\n            x0
    = x1;\n            x1 = x2;\n            x2 = x3;\n            x3 = x4;\n        }\n
    \       return x4;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0, b = 0,
    c = 2, d = 0;\n        if (n < 4) {\n            return n < 2 ? n : n - 1;\n        }\n
    \       for (long i = 4; i <= n; i++) {\n            d = a + b + c;\n            a
    = b;\n            b = c;\n            c = d;\n        }\n        return d;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41e2e17fe59541718eed33c18ad509ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41e2e17fe59541718eed33c18ad509ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // return RecursiveFib4(n);\n
    \       return IterativeFib4(n);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzy1pqy0w.cs(24,16): error CS0103: The name ''IterativeFib4'' does not
    exist in the current context

    '
  timestamp: 1659976190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long x0 = 0;\n        long
    x1 = 0;\n        long x2 = 2;\n        long x3 = 0;\n        for (int i = 4; i
    <= n; i++) {\n            long oldX0 = x0;\n            x0 = x1;\n            x1
    = x2;\n            x2 = x3;\n            x3 = oldX0 + x0 + x1 + x2;\n        }\n
    \       return x3;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // \u2193\u3053\u3053\u306B\u51E6\u7406\u3092\u66F8\u304F\u2193\n
    \       return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <24f6afe0c51047648b227132aa154210>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <24f6afe0c51047648b227132aa154210>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        Debug.Assert(n >=
    0);\n        if (n == 0) {\n            return 0;\n        }\n        if (n ==
    1) {\n            return 0;\n        }\n        if (n == 2) {\n            return
    2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n        long
    t = 0;\n        long t1 = 0;\n        long t2 = 0;\n        long t3 = 2;\n        long
    t4 = 0;\n        for (long i = 4; i <= n; i++) {\n            t = t1 + t2 + t3
    + t4;\n            t1 = t2;\n            t2 = t3;\n            t3 = t4;\n            t4
    = t;\n        }\n        return t;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib = new
    long[n + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n
    \       fib[3] = 0;\n        if (n > 3) {\n            for (int i = 4; i <= n;
    i++) {\n                fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i
    - 4];\n            }\n        }\n        return fib[n];\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib = new
    long[4];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3]
    = 0;\n        int i = 3;\n        while (i < n) {\n            fib[0] = fib[1];\n
    \           fib[1] = fib[2];\n            fib[2] = fib[3];\n            fib[3]
    = fib[0] + fib[1] + fib[2] + fib[3];\n            i++;\n        }\n        return
    fib[3];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e7a654abc0014f57a57a90c4b065f54d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e7a654abc0014f57a57a90c4b065f54d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        return 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0 \n"
  stdout: ''
  timestamp: 1659976190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Start with 0,
    0, 2, 0\n        long last_last_last = 0;\n        long last_last = 0;\n        long
    last = 2;\n        long current = 0;\n        for (long i = 3; i <= n; i++) {\n
    \           current = last_last_last + last_last + last;\n            last_last_last
    = last_last;\n            last_last = last;\n            last = current;\n        }\n
    \       return current;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <71ffe95565f74158a4da094d430da226>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <71ffe95565f74158a4da094d430da226>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long res1 = 0, res2
    = 0, res3 = 2, res4 = 0;\n        if (n == 0) return res1;\n        if (n == 1)
    return res2;\n        if (n == 2) return res3;\n        if (n == 3) return res4;\n
    \       long i = 4;\n        while (i <= n) {\n            long temp = res1;\n
    \           res1 = res2;\n            res2 = res3;\n            res3 = res4;\n
    \           res4 = temp + res1 + res2 + res3;\n            i++;\n        }\n        return
    res4;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] f = new long[4];\n
    \       f[0] = 0;\n        f[1] = 0;\n        f[2] = 2;\n        f[3] = 0;\n        long
    result = 0;\n        for (int i = 4; i <= n; i++) {\n            result = f[0]
    + f[1] + f[2] + f[3];\n            f[0] = f[1];\n            f[1] = f[2];\n            f[2]
    = f[3];\n            f[3] = result;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Replace
    the following code with your implementation.\n        return (long)BigInteger.Parse(\"0\");\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1c676404917e4403b342c47f9fc75a34>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1c676404917e4403b342c47f9fc75a34>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Initialize a matrix.\n
    \       BigInteger[,] temp = new BigInteger[2, 2];\n        temp[0, 0] = 1;\n
    \       temp[0, 1] = 1;\n        temp[1, 0] = 1;\n        temp[1, 1] = 0;\n        //
    Final result stores a^n-1.\n        BigInteger[,] result = new BigInteger[2, 2];\n
    \       result[0, 0] = 1;\n        result[0, 1] = 0;\n        result[1, 0] = 0;\n
    \       result[1, 1] = 1;\n        // Left shift n.\n        while (n > 0) {\n
    \           if (n % 2 == 1) {\n                result = Multiply(result, temp);\n
    \           }\n            temp = Multiply(temp, temp);\n            n = n / 2;\n
    \       }\n        // Return the value at (1, 0).\n        return (long)result[1,
    0];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp61gbi7w6.cs(38,26): error CS0103: The name ''Multiply'' does not exist
    in the current context

    /tmp/tmp61gbi7w6.cs(40,20): error CS0103: The name ''Multiply'' does not exist
    in the current context

    '
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Use the identity:
    fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        // to compute
    the n-th fib4 number using a loop in O(n) time.\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        for
    (long i = 4; i <= n; i++) {\n            e = a + b + c + d;\n            a = b;\n
    \           b = c;\n            c = d;\n            d = e;\n        }\n        return
    e;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        if (n < 0) throw new Exception(\"n must be nonnegative\");\n
    \       long[] x = new long[n+1];\n        x[0] = 0;\n        x[1] = 0;\n        x[2]
    = 2;\n        x[3] = 0;\n        for (int i = 4; i <= n; i++)\n            x[i]
    = x[i-1] + x[i-2] + x[i-3] + x[i-4];\n        return x[n];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this method\n        return 0;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee2a1d0aa6914487b1db3a7af6a3ce38>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee2a1d0aa6914487b1db3a7af6a3ce38>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Your solution
    here.  Consider using an array, so that you can use the in-place array\n        //
    reversing trick.\n        // return -1;\n        if (n == 0) return 0;\n        if
    (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return
    0;\n        long[] b = new long[4];\n        long[] F = new long[4];\n        F[0]
    = 0;\n        F[1] = 0;\n        F[2] = 2;\n        F[3] = 0;\n        long m
    = 4;\n        while (m <= n) {\n            b[0] = F[0];\n            b[1] = F[1];\n
    \           b[2] = F[2];\n            b[3] = F[3];\n            F[0] = b[1] +
    b[2] + b[3];\n            F[1] = b[0];\n            F[2] = b[1];\n            F[3]
    = b[2];\n            m++;\n        }\n        return F[0];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0fc93de26bf47e2a65f423cbc0f6084>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0fc93de26bf47e2a65f423cbc0f6084>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <69d1c465d8b94acaa4084ccd30fadf1f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <69d1c465d8b94acaa4084ccd30fadf1f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976192
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        var m1 = new Matrix4x4(1,
    1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0);\n        var m2 = new Matrix4x4(0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n        Matrix4x4.Power(m1, n,
    out m2);\n        return m2.M44;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp93v5aeru.cs(25,19): error CS0117: ''Matrix4x4'' does not contain a definition
    for ''Power''

    /tmp/tmp93v5aeru.cs(26,16): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976191
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO\n        throw
    new NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <8c12536c97464af199e9dadef7e6d039>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <8c12536c97464af199e9dadef7e6d039>:0 \n"
  stdout: ''
  timestamp: 1659976191
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0 \n"
  stdout: ''
  timestamp: 1659976190
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // just 2x Fib3(n)\n
    \       long fib3 = Fib3(n);\n        return 2*fib3;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_fofgrb1.cs(24,21): error CS0103: The name ''Fib3'' does not exist in
    the current context

    '
  timestamp: 1659976191
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        var fib4 = Fib4_aux(n);\n
    \       Debug.Assert(Fib4_aux2(n) == fib4);\n        return fib4;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8yqu7sei.cs(23,20): error CS0103: The name ''Fib4_aux'' does not exist
    in the current context

    /tmp/tmp8yqu7sei.cs(24,22): error CS0103: The name ''Fib4_aux2'' does not exist
    in the current context

    '
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) {\n            return
    0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n
    == 2) {\n            return 2;\n        } else if (n == 3) {\n            return
    0;\n        } else {\n            long f2 = 0;\n            long f1 = 0;\n            long
    f0 = 2;\n            long f3 = 0;\n            long f4 = 0;\n            long
    i = 2;\n            while (i < n) {\n                f4 = f3;\n                f3
    = f2;\n                f2 = f1;\n                f1 = f0;\n                f0
    = f1 + f2 + f3 + f4;\n                i++;\n            }\n            return
    f0;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06aaba7678974c03a739590dd877422b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06aaba7678974c03a739590dd877422b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976192
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Order of the matrix
    [A, B, C, D]\n        // [A, B, C, D] * [1, 1, 1, 1] = [F(n+1), F(n), F(n-1),
    F(n-2)]\n        // [A, B, C, D] * [0, 0, 1, 0] = [F(n), F(n-1), F(n-2), F(n-3)]\n
    \       var matrix = new BigInteger[,] {\n            {1, 1, 1, 1},\n            {1,
    0, 0, 0},\n            {0, 1, 0, 0},\n            {0, 0, 1, 0}\n        };\n        var
    A = new BigInteger[,] {\n            {1, 0, 0, 0},\n            {0, 1, 0, 0},\n
    \           {0, 0, 1, 0},\n            {0, 0, 0, 1}\n        };\n        var D
    = new BigInteger[,] {\n            {0, 0, 0, 0},\n            {0, 0, 0, 0},\n
    \           {0, 0, 0, 0},\n            {0, 0, 0, 0}\n        };\n        while
    (n > 0) {\n            if (n % 2 != 0) {\n                // A = A * B\n                A
    = MultiplyMatrices(A, matrix);\n            }\n            // D = B * B\n            D
    = MultiplyMatrices(matrix, matrix);\n            n /= 2;\n            matrix =
    D;\n        }\n        return A[0, 0];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfvh79xaz.cs(47,21): error CS0103: The name ''MultiplyMatrices'' does not
    exist in the current context

    /tmp/tmpfvh79xaz.cs(50,17): error CS0103: The name ''MultiplyMatrices'' does not
    exist in the current context

    /tmp/tmpfvh79xaz.cs(54,16): error CS0266: Cannot implicitly convert type ''System.Numerics.BigInteger''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976191
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0 \n"
  stdout: ''
  timestamp: 1659976190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 0) {\n            throw
    new ArgumentException(\"n must be positive\");\n        }\n        if (n == 0)
    {\n            return 0;\n        }\n        if (n == 1) {\n            return
    0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if
    (n == 3) {\n            return 0;\n        }\n        long a = 2;\n        long
    b = 0;\n        long c = 0;\n        long d = 0;\n        for (long i = 4; i <=
    n; i++) {\n            long next = a + b + c + d;\n            d = c;\n            c
    = b;\n            b = a;\n            a = next;\n        }\n        return a +
    b + c + d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55732a58c83543f6b8b45bee824f4c01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55732a58c83543f6b8b45bee824f4c01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        return default(long);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26883940869f4741bc164faa78b373ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26883940869f4741bc164faa78b373ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fibs = new
    long[n+1];\n        fibs[0] = 0;\n        fibs[1] = 0;\n        fibs[2] = 2;\n
    \       fibs[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fibs[i]
    = fibs[i-1] + fibs[i-2] + fibs[i-3] + fibs[i-4];\n        }\n        return fibs[n];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long [] fib=new long[4];\n
    \       if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==
    2) return 2;\n        if (n == 3) return 0;\n        fib[0] = 0;\n        fib[1]
    = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        for (int i = 4; i <= n;
    i++) {\n            long temp = fib[3];\n            fib[3] = fib[0] + fib[1]
    + fib[2] + fib[3];\n            fib[0] = fib[1];\n            fib[1] = fib[2];\n
    \           fib[2] = temp;\n        }\n        return fib[3];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976192
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // First, try to
    compute the n-th Fib4 number using recursion.  Time how long it takes.\n        var
    sw = new Stopwatch();\n        sw.Start();\n        var recursion_result = slow_fib4(n);\n
    \       sw.Stop();\n        Console.WriteLine(\"Took \" + sw.Elapsed + \" to compute
    Fib4(\" + n + \") using recursion.\");\n        // Second, try to compute the
    n-th Fib4 number using a more optimal algorithm.  Time how long it takes.\n        sw.Restart();\n
    \       var optimal_result = fast_fib4(n);\n        sw.Stop();\n        Console.WriteLine(\"Took
    \" + sw.Elapsed + \" to compute Fib4(\" + n + \") using the more optimal algorithm.\");\n
    \       // Lastly, print out the results from both methods and make sure they
    are the same.\n        Console.WriteLine(\"Fib4(\" + n + \") = \" + recursion_result
    + \" (using recursion)\");\n        Console.WriteLine(\"Fib4(\" + n + \") = \"
    + optimal_result + \" (using the more optimal algorithm)\");\n        return optimal_result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp0ya207s.cs(26,32): error CS0103: The name ''slow_fib4'' does not exist
    in the current context

    /tmp/tmpp0ya207s.cs(31,30): error CS0103: The name ''fast_fib4'' does not exist
    in the current context

    '
  timestamp: 1659976192
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        List<long> fib4 =
    new List<long>();\n        long fib4_0 = 0;\n        long fib4_1 = 0;\n        long
    fib4_2 = 2;\n        long fib4_3 = 0;\n        long fib4_n = 0;\n        fib4.Add(fib4_0);\n
    \       fib4.Add(fib4_1);\n        fib4.Add(fib4_2);\n        fib4.Add(fib4_3);\n
    \       if (n < fib4.Count) {\n            return fib4[(int)n];\n        }\n        else
    {\n            fib4_n = fib4[fib4.Count - 1] + fib4[fib4.Count - 2] + fib4[fib4.Count
    - 3] + fib4[fib4.Count - 4];\n            fib4.Add(fib4_n);\n            return
    Fib4(n);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n <= 3) {\n            return
    new long[] { 0, 0, 2, 0 }[n];\n        }\n        var fib = new long[] { 0, 0,
    2, 0 };\n        for (int i = 3; i < n; i++) {\n            fib[i % 4] = fib.Sum();\n
    \       }\n        return fib[n % 4];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed1e47b0fd3d47e08c757f530bd3c2b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed1e47b0fd3d47e08c757f530bd3c2b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) {\n            return
    0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if
    (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return
    0;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long tmp = 0;\n        for (long i = 4; i <= n; i++)
    {\n            tmp = a + b + c + d;\n            a = b;\n            b = c;\n
    \           c = d;\n            d = tmp;\n        }\n        return d;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976192
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        var a = BigInteger.Zero;\n
    \       var b = BigInteger.Zero;\n        var c = BigInteger.Two;\n        var
    d = BigInteger.Zero;\n        for (var i = BigInteger.Zero; i < n; i++) {\n            var
    e = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n
    \           d = e;\n        }\n        return (long)d;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi9v5ywim.cs(25,28): error CS0117: ''BigInteger'' does not contain a definition
    for ''Two''

    '
  timestamp: 1659976192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long value = 0;\n
    \       long lastN = 0;\n        long secondLastN = 0;\n        long thirdLastN
    = 0;\n        long fourthLastN = 0;\n        for (int i = 0; i < n; i++) {\n            value
    = lastN + secondLastN + thirdLastN + fourthLastN;\n            fourthLastN = thirdLastN;\n
    \           thirdLastN = secondLastN;\n            secondLastN = lastN;\n            lastN
    = value;\n        }\n        return value;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd095b70b7614d3f91fd002994ee7d74>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd095b70b7614d3f91fd002994ee7d74>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        return 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Replace this code
    with your own solution.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b9a1fc2d14343fd9b5d314a94d5486b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b9a1fc2d14343fd9b5d314a94d5486b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        Debug.Assert(n >=
    0);\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 2;\n        if (n == 3) return 0;\n        long[] numbers = new
    long[4];\n        numbers[0] = 0;\n        numbers[1] = 0;\n        numbers[2]
    = 2;\n        numbers[3] = 0;\n        long count = 4;\n        while (count <=
    n) {\n            long old0 = numbers[0];\n            long old1 = numbers[1];\n
    \           long old2 = numbers[2];\n            long old3 = numbers[3];\n            numbers[0]
    = old1;\n            numbers[1] = old2;\n            numbers[2] = old3;\n            numbers[3]
    = old0 + old1 + old2 + old3;\n            count++;\n        }\n        return
    numbers[3];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976192
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        //Fib4(5) = 4\n        //Fib4(6)
    = 8\n        //Fib4(7) = 14\n        //Fib4(8) = 24\n        long f0 = 0;\n        long
    f1 = 0;\n        long f2 = 2;\n        long f3 = 0;\n        long f4 = 4;\n        long
    f5 = 8;\n        long f6 = 14;\n        long f7 = 24;\n        long f8 = 40;\n
    \       long f9 = 64;\n        long f10 = 104;\n        long f11 = 168;\n        long
    f12 = 272;\n        long f13 = 440;\n        long f14 = 712;\n        long f15
    = 1152;\n        long f16 = 1864;\n        long f17 = 3008;\n        long f18
    = 4872;\n        long f19 = 7880;\n        long f20 = 12752;\n        long f21
    = 20632;\n        long f22 = 33424;\n        long f23 = 54296;\n        long f24
    = 87720;\n        long f25 = 142048;\n        long f26 = 229776;\n        long
    f27 = 371824;\n        long f28 = 603704;\n        long f29 = 976488;\n        long
    f30 = 1579192;\n        long f31 = 2555680;\n        long f32 = 4130888;\n        long
    f33 = 6710672;\n        long f34 = 10841544;\n        long f35 = 17556032;\n        long
    f36 = 28401576;\n        long f37 = 45942648;\n        long f38 = 74384024;\n
    \       long f39 = 120327672;\n        long f40 = 194069528;\n        long f41
    = 314401200;\n        long f42 = 508470728;\n        long f43 = 822870832;\n        long
    f44 = 1326350560;\n        long f45 = 2154000336;\n        long f46 = 3479351104;\n
    \       long f47 = 5623351440;\n        long f48 = 9102452144;\n       \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpps1sd5s7.cs(27,14): warning CS0219: The variable ''f0'' is assigned but
    its value is never used

    /tmp/tmpps1sd5s7.cs(28,14): warning CS0219: The variable ''f1'' is assigned but
    its value is never used

    /tmp/tmpps1sd5s7.cs(29,14): warning CS0219: The variable ''f2'' is assigned but
    its value is never used

    /tmp/tmpps1sd5s7.cs(30,14): warning CS0219: The variable ''f3'' is assigned but
    its value is never used

    /tmp/tmpps1sd5s7.cs(31,14): warning CS0219: The variable ''f4'' is assigned but
    its value is never used

    /tmp/tmpps1sd5s7.cs(32,14): warning CS0219: The variable ''f5'' is assigned but
    its value is never used

    /tmp/tmpps1sd5s7.cs(33,14): warning CS0219: The variable ''f6'' is assigned but
    its value is never used

    /tmp/tmpps1sd5s7.cs(34,14): warning CS0219: The variable ''f7'' is assigned but
    its value is never used

    /tmp/tmpps1sd5s7.cs(35,14): warning CS0219: The variable ''f8'' is assigned but
    its value is never used

    /tmp/tmpps1sd5s7.cs(36,14): warning CS0219: The variable ''f9'' is assigned but
    its value is never used

    /tmp/tmpps1sd5s7.cs(37,14): warning CS0219: The variable ''f10'' is assigned but
    its value is never used

    /tmp/tmpps1sd5s7.cs(38,14): warning CS0219: The variable ''f11'' is assigned but
    its value is never used

    /tmp/tmpps1sd5s7.cs(39,14): warning CS0219: The variable ''f12'' is assigned but
    its value is never used

    /tmp/tmpps1sd5s7.cs(40,14): warning CS0219: The variable ''f13'' is assigned but
    its value is never used

    /tmp/tmpps1sd5s7.cs(41,14): warning CS0219: The variable ''f14'' is assigned but
    its value is never used

    /tmp/tmpps1sd5s7.cs(42,14): warning CS0219: The variable ''f15'' is assigned but
    its value is never used

    /tmp/tmpps1sd5s7.cs(43,14): warning CS0219: The variable ''f16'' is assigned but
    its value is never used

    /tmp/tmpps1sd5s7.cs(44,14): warning CS0219: The variable ''f17'' is assigned but
    its value is never used

    /tmp/tmpps1sd5s7.cs(45,14): warning CS0219: The variable ''f18'' is assigned bu'
  timestamp: 1659976192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) {\n            return
    0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if
    (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return
    0;\n        }\n        long fib4Pre3 = 0;\n        long fib4Pre2 = 0;\n        long
    fib4Pre1 = 2;\n        long fib4Current = 0;\n        for (long i = 4; i <= n;
    i++) {\n            fib4Current = fib4Pre3 + fib4Pre2 + fib4Pre1 + fib4Current;\n
    \           fib4Pre3 = fib4Pre2;\n            fib4Pre2 = fib4Pre1;\n            fib4Pre1
    = fib4Current;\n        }\n        return fib4Current;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b135f05ef5144649bf627c42f31bdfa2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b135f05ef5144649bf627c42f31bdfa2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Don't use recursion.\n
    \       // Implement me!\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b89aafb8c29148078c85082c357f6ee6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b89aafb8c29148078c85082c357f6ee6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    e = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n
    \           d = e;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9ddbd6f817474cfb98bd5f4a03141204>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9ddbd6f817474cfb98bd5f4a03141204>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976193
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // find the 5th fibonacci
    number using only 5 recursive function calls.\n        // Don't use any loops,
    or any other additional variables.\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <e865b5b8b6124b0ab41412148ec7a4df>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <e865b5b8b6124b0ab41412148ec7a4df>:0 \n"
  stdout: ''
  timestamp: 1659976192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n <= 0) return
    0;\n        long sum = 0;\n        long prev1 = 0;\n        long prev2 = 0;\n
    \       long prev3 = 0;\n        long prev4 = 0;\n        for (long i = 1; i <=
    n; i++) {\n            if (i == 1) {\n                sum = 0;\n                prev1
    = 0;\n                prev2 = 0;\n                prev3 = 0;\n                prev4
    = 0;\n            } else if (i == 2) {\n                sum = 2;\n                prev1
    = 0;\n                prev2 = 0;\n                prev3 = 0;\n                prev4
    = 2;\n            } else if (i == 3) {\n                sum = 0;\n                prev1
    = 0;\n                prev2 = 0;\n                prev3 = 2;\n                prev4
    = 2;\n            } else {\n                sum = prev1 + prev2 + prev3 + prev4;\n
    \               prev1 = prev2;\n                prev2 = prev3;\n                prev3
    = prev4;\n                prev4 = sum;\n            }\n        }\n        return
    sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <470e47d046ab4265bfbfb02ed3ebef2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <470e47d046ab4265bfbfb02ed3ebef2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] a = new long[4];\n
    \       a[0] = 0;\n        a[1] = 0;\n        a[2] = 2;\n        a[3] = 0;\n        for
    (int i = 4; i <= n; i++) {\n            long newa = a[0] + a[1] + a[2] + a[3];\n
    \           a[0] = a[1];\n            a[1] = a[2];\n            a[2] = a[3];\n
    \           a[3] = newa;\n        }\n        return a[3];\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976193
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // since the sequence
    is always positive, we can use uint\n        // I've done some research and have
    found that the best time complexity of Fibonacci\n        // sequences are done
    by matrix exponentiation (nth root of matrix)\n        // we can solve fib4 by
    solving the fib4(n-1) first, which we can do like this\n        // fib4(n-1) =
    fib4(n-2) + fib4(n-3) + fib4(n-4) + fib4(n-5)\n        // = [fib4(n-3) fib4(n-4)
    fib4(n-5) fib4(n-6)] * M * [1]\n        // M = [[1,1,1,1], [1,0,0,0], [0,1,0,0],
    [0,0,1,0]]\n        // and this is another thing i've learned, we can find the
    nth root of M by solving these 2 equations:\n        // fib4(n-1) = fib4(n-2)
    + fib4(n-3) + fib4(n-4) + fib4(n-5)\n        // fib4(n) = fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4)\n        // and then we can solve M = fib4(n-1)^-1 * fib4(n)
    * fib4(n-1)\n        // which we then can use to solve fib4(n) = fib4(n-1) * M
    * [1]\n        // so we can now solve fib4(n) in logarithmic time (which is pretty
    cool)\n        if (n < 2) return 0;\n        Matrix4x4 m = new Matrix4x4(1, 1,
    1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0);\n        Matrix4x4 ans = new Matrix4x4(1,
    0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0);\n        // now we can solve for
    m using the exp\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg9_62jr9.cs(22,24): error CS0161: ''Problem.Fib4(long)'': not all code
    paths return a value

    '
  timestamp: 1659976192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0 || n ==
    1) {\n            return 0;\n        }\n        else if (n == 2) {\n            return
    2;\n        }\n        else if (n == 3) {\n            return 0;\n        }\n
    \       else {\n            long[] n_minus_values = new long[4];\n            n_minus_values[0]
    = 0;\n            n_minus_values[1] = 0;\n            n_minus_values[2] = 2;\n
    \           n_minus_values[3] = 0;\n            for (int i = 4; i <= n; i++) {\n
    \               long temp = n_minus_values[0] + n_minus_values[1] + n_minus_values[2]
    + n_minus_values[3];\n                n_minus_values[0] = n_minus_values[1];\n
    \               n_minus_values[1] = n_minus_values[2];\n                n_minus_values[2]
    = n_minus_values[3];\n                n_minus_values[3] = temp;\n            }\n
    \           return n_minus_values[3];\n        }\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: implement
    Fib4\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bce5a4b60e1d413d90db0559feebe1ac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bce5a4b60e1d413d90db0559feebe1ac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        var F = new List<long>
    {0, 0, 2, 0};\n        if (n <= 3) {\n            return F[(int)n];\n        }\n
    \       long L2 = 2;\n        long L1 = 0;\n        long L = 0;\n        for (int
    i = 4; i <= n; i++) {\n            L = L1 + L2 + F[1] + F[0];\n            L2
    = L1;\n            L1 = L;\n            F[0] = F[1];\n            F[1] = F[2];\n
    \           F[2] = F[3];\n            F[3] = L;\n        }\n        return L;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976193
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0 \n"
  stdout: ''
  timestamp: 1659976190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        var a = 0L;\n        var b = 0L;\n        var c = 2L;\n
    \       var d = 0L;\n        for (var i = 4; i <= n; i++) {\n            var aa
    = a;\n            a = b;\n            b = c;\n            c = d;\n            d
    = aa + b + c + d;\n        }\n        return d;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aee50fce58454107867acbe97a7c5cb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aee50fce58454107867acbe97a7c5cb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // compute it in
    O(n) time\n        if (n < 2) {\n            return 0;\n        } else if (n ==
    2) {\n            return 2;\n        } else if (n == 3) {\n            return
    0;\n        }\n        long previous = 2;\n        long second_previous = 0;\n
    \       long third_previous = 0;\n        long fourth_previous = 0;\n        long
    current = previous + second_previous + third_previous + fourth_previous;\n        for
    (long i = 4; i <= n; i++) {\n            fourth_previous = third_previous;\n            third_previous
    = second_previous;\n            second_previous = previous;\n            previous
    = current;\n            current = previous + second_previous + third_previous
    + fourth_previous;\n        }\n        return current;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95da7ba787b14a80b07c8eb1c17abe32>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95da7ba787b14a80b07c8eb1c17abe32>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <506c263792b04c73835effc3584d605b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <506c263792b04c73835effc3584d605b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        long
    f = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n        long
    j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n        long
    o = 0;\n        long p = 0;\n        for (long q = 3; q <= n; q++) {\n            l
    = a;\n            a = b;\n            b = c;\n            c = d;\n            d
    = e;\n            e = f;\n            f = g;\n            g = h;\n            h
    = i;\n            i = j;\n            j = k;\n            k = l;\n            m
    = b + c + d + e + f + g + h + i + j + k + l;\n            o = m - o;\n            p
    = o - p;\n        }\n        return c + d + e + f + g + h + i + j + k + l + m
    + o + p;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aebe71c4563c4c00aa0a961423016e00>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aebe71c4563c4c00aa0a961423016e00>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long result = 0;\n        for
    (long i = 4; i <= n; i++) {\n            result = a + b + c + d;\n            a
    = b;\n            b = c;\n            c = d;\n            d = result;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // S(n) = 4fib4(n-1)
    + 3fib4(n-2) + 2fib4(n-3) + fib4(n-4).\n        // This is a linear recurrence
    relation of order 4.  The characteristic polynomial is x^4 - 4x^3 - 3x^2 - 2x
    - 1.\n        // Using the formula from http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Fibonacci/fibFormula.html,
    the solution for this polynomial is\n        // x0 = (((2 + sqrt(5)) / 4)**n +
    ((2 - sqrt(5)) / 4)**n) / sqrt(5).\n        // Divide by sqrt(5) to get x1 = ((2
    + sqrt(5)) / 4)**n + ((2 - sqrt(5)) / 4)**n.\n        // x2 = x1 - ((2 - sqrt(5))
    / 4)**n.\n        // x3 = x2 / ((2 + sqrt(5)) / 4)\n        // x4 = x3 - 1.\n
    \       // We can then use the closed form solution to get fib4(n) = x4 * sqrt(5)
    / 2.\n        var sqrt5 = Math.Sqrt(5);\n        var x1 = Math.Pow((2 + sqrt5)
    / 4, n) + Math.Pow((2 - sqrt5) / 4, n);\n        var x2 = x1 - Math.Pow((2 - sqrt5)
    / 4, n);\n        var x3 = x2 / ((2 + sqrt5) / 4);\n        var x4 = x3 - 1;\n
    \       return (long)(x4 * sqrt5 / 2);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <435d60eb60eb4d289099a5cf43ccfafa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <435d60eb60eb4d289099a5cf43ccfafa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976193
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Answer:\n        //
    0 0 2 0 4 8 14 26 50 96\n        // fib(5) = 4\n        // fib(6) = 8\n        //
    fib(7) = 14\n        // fib(8) = 26\n        long f1 = 0;\n        long f2 = 0;\n
    \       long f3 = 2;\n        long f4 = 0;\n        long f5 = 4;\n        long
    f6 = 8;\n        long f7 = 14;\n        long f8 = 26;\n        long f9 = 50;\n
    \       long f10 = 96;\n        long f11 = 182;\n        long f12 = 350;\n        long
    f13 = 674;\n        long f14 = 1314;\n        long f15 = 2548;\n        long f16
    = 4968;\n        long f17 = 9696;\n        long f18 = 18808;\n        long f19
    = 36650;\n        long f20 = 71884;\n        long f21 = 140778;\n        long
    f22 = 275098;\n        long f23 = 536588;\n        long f24 = 1042248;\n        long
    f25 = 2020112;\n        long f26 = 3927914;\n        long f27 = 7628896;\n        long
    f28 = 14882026;\n        long f29 = 28995318;\n        long f30 = 56465864;\n
    \       long f31 = 110230038;\n        long f32 = 215371902;\n        long f33
    = 420238418;\n        long f34 = 822319688;\n        long f35 = 1612855208;\n
    \       long f36 = 3153917630;\n        long f37 = 6163570254;\n        long f38
    = 12030702508;\n        long f39 = 23508729136;\n        long f40 = 45857715550;\n
    \       long f41 = 89773805298;\n        long f42 = 175586327832;\n        long
    f43 = 343487249628;\n        long f44 = 672126210852;\n        long f45 = 1313463311482;\n
    \       long f46 = 25740\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5xvan1ow.cs(74,25): error CS1002: ; expected

    '
  timestamp: 1659976193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // your solution
    here\n        if (n == 0) {\n            return 0;\n        }\n        else if
    (n == 1) {\n            return 0;\n        }\n        else if (n == 2) {\n            return
    2;\n        }\n        else if (n == 3) {\n            return 0;\n        }\n
    \       else {\n            return Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n
    - 4);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 4) {\n            return
    n * 2;\n        }\n        long a = 0;\n        long b = 0;\n        long c =
    2;\n        long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    temp = a + b + c + d;\n            a = b;\n            b = c;\n            c =
    d;\n            d = temp;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1ba93f2fd6174eecb59b11b1b1637f1f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1ba93f2fd6174eecb59b11b1b1637f1f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        return 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) {\n            return
    0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if
    (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return
    0;\n        }\n        long[] f = new long[4];\n        f[0] = 0;\n        f[1]
    = 0;\n        f[2] = 2;\n        f[3] = 0;\n        for (int i = 4; i <= n; i++)
    {\n            long x = f[0] + f[1] + f[2] + f[3];\n            f[0] = f[1];\n
    \           f[1] = f[2];\n            f[2] = f[3];\n            f[3] = x;\n        }\n
    \       return f[3];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976193
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0 \n"
  stdout: ''
  timestamp: 1659976190
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0 \n"
  stdout: ''
  timestamp: 1659976190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long result = 0;\n
    \       // write code to compute fib4(n)\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4cebdfbc6b24e2b88fa64964bb2ae27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4cebdfbc6b24e2b88fa64964bb2ae27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long i, a = 0, b
    = 0, c = 2, d = 0;\n        if (n == 0) return 0;\n        else if (n == 1) return
    0;\n        else if (n == 2) return 2;\n        else if (n == 3) return 0;\n        else
    if (n == 4) return 4;\n        else {\n            for (i = 5; i <= n; i++) {\n
    \               d = a + b + c;\n                a = b;\n                b = c;\n
    \               c = d;\n            }\n            return d;\n        }\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad7d6bcb43bd43b09361350a32851c1b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad7d6bcb43bd43b09361350a32851c1b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        // The idea here is that we can use a matrix to compute
    Fibonacci numbers.  In order to get to the nth Fibonacci number,\n        // we
    just have to multiply the matrix\n        // [0 1 0 0]\n        // [0 0 1 0]\n
    \       // [0 0 0 1]\n        // [1 1 1 1]\n        // n times.\n        // This
    can be done using exponentiation by squaring to get the matrix to the nth power.\n
    \       Matrix4x4 B = new Matrix4x4();\n        B.M11 = 0;\n        B.M12 = 1;\n
    \       B.M13 = 0;\n        B.M14 = 0;\n        B.M21 = 0;\n        B.M22 = 0;\n
    \       B.M23 = 1;\n        B.M24 = 0;\n        B.M31 = 0;\n        B.M32 = 0;\n
    \       B.M33 = 0;\n        B.M34 = 1;\n        B.M41 = 1;\n        B.M42 = 1;\n
    \       B.M43 = 1;\n        B.M44 = 1;\n        Matrix4x4 F = Power(B, n);\n        return
    F.M14;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6l_w8b5e.cs(52,23): error CS0103: The name ''Power'' does not exist in
    the current context

    /tmp/tmp6l_w8b5e.cs(53,16): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976193
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // 3x3 matrix multiplication.\n
    \       // For sequences of 0,1,1,1 this is a 4x4 matrix.\n        // The 0x4
    column vector is the relevant fib4 sequence.\n        // The 0x4 row vector (transpose
    of the column vector)\n        // when multiplied by the 4x4 matrix results in
    the 0x4 row vector\n        // for the next iteration of the Fib4 sequence.\n
    \       // The 4x4 matrix used for Fib4 is:\n        // |0 1 1 1|\n        //
    |1 0 1 1|\n        // |1 1 0 1|\n        // |1 1 1 0|\n        //\n        //
    The code below uses BigInteger to allow efficient matrix multiplication.\n        //
    A BigInteger can be converted to a 10-digit string and used as an index into a
    byte array.\n        // The byte array is used to track the digits of the BigInteger.\n
    \       //\n        // The approach here is very similar to a technique used to
    find the n-th number in the Fibonacci sequence.\n        // This can be done with
    matrix multiplication where we start with the 2x2 matrix\n        // |0 1|\n        //
    |1 1|\n        // This results in the following recurrence relation for Fibonacci
    numbers:\n        // | fib(n) |   | fib(n-1) |\n        // | fib(n+1)| = | fib(n)
    \  |\n        // Here we're computing n-th fib(n) value, not n-th fib(n) digit.\n
    \       //\n        // The BigInteger is zero-initialized.  The digits are tracked
    in a byte array.\n        // The index into the byte array for a digit corresponds
    to the digit's exponent in the base 10 representation.\n        // For example,
    if the BigInteger has value 12345678901234567890 then the byte array looks like:\n
    \       // digits[0] = 0\n        // digits[1] = 1\n        // digits[2] = 2\n
    \       // digits[3] = 3\n        // digits[4] = 4\n        // digits[5] = 5\n
    \       // digits[6] = 6\n        // digits[7] = 7\n        // digits[8] = 8\n
    \       // digits[9] =\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcajyhv66.cs(22,24): error CS0161: ''Problem.Fib4(long)'': not all code
    paths return a value

    '
  timestamp: 1659976193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // We have to return
    0 for n <= 2, so let's get that out of the way.\n        if (n <= 2) {\n            return
    n;\n        }\n        // Let's ignore n == 3 for now, since it's a special case
    that only affects the first iteration.\n        // To compute fib4(n), we'll use
    an iterative method using a queue of the past four elements.\n        Queue<long>
    past = new Queue<long>();\n        // We need a special case for n = 3, but we
    want to iterate n-3 times (to get our answer for n),\n        // so we'll just
    do a special case for n=3, then do n-3 iterations.\n        past.Enqueue(0); //
    This is fib4(0).\n        past.Enqueue(0); // This is fib4(1).\n        past.Enqueue(2);
    // This is fib4(2).\n        if (n == 3) {\n            return 0;\n        }\n
    \       for (long i = 0; i < n - 3; i++) {\n            // Here's the actual fib4
    formula: fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n            long
    result = past.Sum();\n            past.Enqueue(result);\n            past.Dequeue();\n
    \       }\n        return past.Sum();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce9cef93896f407d85cb651da9bf7b7f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce9cef93896f407d85cb651da9bf7b7f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        return -1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a21560d014484e02a997b829cd6b895d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a21560d014484e02a997b829cd6b895d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        Debug.Assert(n >=
    0L);\n        if (n <= 3L) {\n            return (long) (2L * n);\n        }\n
    \       long a = 0L;\n        long b = 0L;\n        long c = 2L;\n        long
    d = 0L;\n        long e = 0L;\n        long f = 0L;\n        long g = 0L;\n        long
    h = 0L;\n        n -= 3L;\n        while (n > 0L) {\n            if ((n & 1L)
    != 0L) {\n                // We have a bit set in n.  Update (a, b, c, d, e, f,
    g, h) = (a, b, c, d, e, f, g, h) * (0, 1, 0, 0, 1, 0, 0, 0).\n                long
    olda = a;\n                a = e;\n                e = olda;\n                long
    oldb = b;\n                b = f;\n                f = oldb;\n                long
    oldc = c;\n                c = g;\n                g = oldc;\n                long
    oldd = d;\n                d = h;\n                h = oldd;\n            }\n
    \           // We have a zero bit in n.  Update (a, b, c, d, e, f, g, h) = (a,
    b, c, d, e, f, g, h) * (a, b, c, d, a+c, b+d, a+c, b+d).\n            long olda_1
    = a;\n            a = a * a + c * b;\n            b = b * a_1 + d * b;\n            c
    = c * a_1 + c * c + b * d;\n            d = d * a_1 + d * b;\n            e =
    e * a_1 + e * c + f * d;\n            f = f * a_1 + f * b + g * d;\n            g
    = g * a_1 + g * c + h * d;\n            h = h * a_1 + h * b;\n            n >>=
    1L;\n        }\n        return a + c\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp92m2i5z2.cs(64,21): error CS1002: ; expected

    '
  timestamp: 1659976193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n <= 3) return
    n - 1;\n        long f0 = 0, f1 = 0, f2 = 2, f3 = 0, f4 = 0;\n        for (int
    i = 4; i <= n; i++) {\n            f4 = f0 + f1 + f2 + f3;\n            f0 = f1;\n
    \           f1 = f2;\n            f2 = f3;\n            f3 = f4;\n        }\n
    \       return f4;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 3) {\n            return
    (long)Math.Pow(2, n);\n        }\n        long a = 0;\n        long b = 2;\n        long
    c = 2;\n        long d = 4;\n        for (long i = 4; i <= n; i++) {\n            long
    t = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n
    \           d = t;\n        }\n        return d;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d037a42d37f400fb31c5624b0d1ccec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d037a42d37f400fb31c5624b0d1ccec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0 \n"
  stdout: ''
  timestamp: 1659976190
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0 \n"
  stdout: ''
  timestamp: 1659976190
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0 \n"
  stdout: ''
  timestamp: 1659976190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] nums = new
    long[4];\n        if (n < 4) return nums[n];\n        for (int i = 0; i < 4; i++)
    {\n            nums[i] = i;\n        }\n        for (int i = 4; i <= n; i++) {\n
    \           nums[i % 4] = nums[0] + nums[1] + nums[2] + nums[3];\n        }\n
    \       return nums[n % 4];\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1ac933dfdc346d5a7b636cc6b67ca23>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1ac933dfdc346d5a7b636cc6b67ca23>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long[] arr = new long[n + 1];\n        arr[0] = 0;\n
    \       arr[1] = 0;\n        arr[2] = 2;\n        arr[3] = 0;\n        for (int
    i = 4; i <= n; i++) {\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i -
    3] + arr[i - 4];\n        }\n        return arr[n];\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0 \n"
  stdout: ''
  timestamp: 1659976190
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0 \n"
  stdout: ''
  timestamp: 1659976190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 0) throw
    new ArgumentOutOfRangeException();\n        if (n < 4) return n == 3 ? 0 : n;\n
    \       var a = new BigInteger(0);\n        var b = new BigInteger(0);\n        var
    c = new BigInteger(2);\n        var d = new BigInteger(0);\n        for (var i
    = 4; i <= n; i++) {\n            var tmp = a + b + c + d;\n            a = b;\n
    \           b = c;\n            c = d;\n            d = tmp;\n        }\n        return
    (long)d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 4) {\n            return
    n*n;\n        }\n        long[] acc = new long[n+1];\n        acc[0] = 0;\n        acc[1]
    = 0;\n        acc[2] = 2;\n        acc[3] = 0;\n        for (int i = 4; i <= n;
    i++) {\n            acc[i] = acc[i-1] + acc[i-2] + acc[i-3] + acc[i-4];\n        }\n
    \       return acc[n];\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long first = 0, second
    = 0, third = 2, fourth = 0, fifth = 0;\n        for (int i = 3; i <= n; i++) {\n
    \           first = second;\n            second = third;\n            third =
    fourth;\n            fourth = fifth;\n            fifth = first + second + third
    + fourth;\n        }\n        return fifth;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a47cd33d49024b7fa888786553b0aea5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a47cd33d49024b7fa888786553b0aea5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 0) {\n            throw
    new ArgumentException(\"n should be >= 0\");\n        }\n\n        if (n < 2)
    {\n            return 0;\n        }\n        if (n == 2) {\n            return
    2;\n        }\n\n        long[] fib4 = new long[4];\n        fib4[0] = 0;\n        fib4[1]
    = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n\n        long[] fib4Sum = new
    long[4];\n        fib4Sum[0] = fib4[0];\n        fib4Sum[1] = fib4[1];\n        fib4Sum[2]
    = fib4[2];\n        fib4Sum[3] = fib4[3];\n\n        for (long i = 4; i <= n;
    i++) {\n            fib4[0] = fib4Sum[1];\n            fib4[1] = fib4Sum[2];\n
    \           fib4[2] = fib4Sum[3];\n            fib4[3] = fib4Sum[0] + fib4Sum[1]
    + fib4Sum[2] + fib4Sum[3];\n\n            fib4Sum[0] = fib4Sum[0] + fib4[0];\n
    \           fib4Sum[1] = fib4Sum[1] + fib4[1];\n            fib4Sum[2] = fib4Sum[2]
    + fib4[2];\n            fib4Sum[3] = fib4Sum[3] + fib4[3];\n        }\n\n        return
    fib4[3];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9446f45019947b5a0973de5255e192e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9446f45019947b5a0973de5255e192e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 4) {\n            return
    n - 1;\n        }\n        long a = 0;\n        long b = 0;\n        long c =
    2;\n        long d = 0;\n        for (long i = 3; i < n; i++) {\n            long
    temp = a + b + c + d;\n            a = b;\n            b = c;\n            c =
    d;\n            d = temp;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26eccb46537f42e1941d83de50b8d0b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26eccb46537f42e1941d83de50b8d0b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long val = 0;\n        int
    i = (int)n;\n        if (i < 0) {\n            Console.WriteLine(\"Invalid\");\n
    \           return 0;\n        }\n        else if (i == 0) {\n            return
    0;\n        }\n        else if (i == 1) {\n            return 0;\n        }\n
    \       else if (i == 2) {\n            return 2;\n        }\n        else if
    (i == 3) {\n            return 0;\n        }\n        else {\n            long
    a = 0;\n            long b = 0;\n            long c = 2;\n            long d =
    0;\n            for (int j = 4; j <= i; j++) {\n                val = a + b +
    c + d;\n                a = b;\n                b = c;\n                c = d;\n
    \               d = val;\n            }\n            return val;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) {\n            return
    0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if
    (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return
    0;\n        }\n        long [] f = new long [n + 1];\n        f[0] = 0;\n        f[1]
    = 0;\n        f[2] = 2;\n        f[3] = 0;\n        for (int i = 4; i <= n; i++)
    {\n            f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n        }\n
    \       return f[n];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // S(n) = 0 for n
    <= 3\n        // S(n) = S(n-1) + S(n-2) + S(n-3) + S(n-4) for n > 3\n\n        if
    (n <= 3) return 0;\n\n        long[] a = new long[5];\n        a[0] = 0;\n        a[1]
    = 0;\n        a[2] = 2;\n        a[3] = 0;\n        a[4] = 0;\n\n        for (int
    i = 3; i < n; i++) {\n            a[i % 5] = a[(i - 1) % 5] + a[(i - 2) % 5] +
    a[(i - 3) % 5] + a[(i - 4) % 5];\n        }\n\n        return a[(n - 1) % 5];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Fib4 (System.Int64 n) [0x00037] in <cdac40719ff24fb4b13ec0c29284c4a5>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <cdac40719ff24fb4b13ec0c29284c4a5>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Fib4 (System.Int64 n) [0x00037]
    in <cdac40719ff24fb4b13ec0c29284c4a5>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <cdac40719ff24fb4b13ec0c29284c4a5>:0 \n"
  stdout: ''
  timestamp: 1659976194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        long
    f = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n        long
    j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n        long
    o = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n        long
    s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n        long
    w = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n        long
    ab = 0;\n        long ac = 0;\n        long ad = 0;\n        long ae = 0;\n        long
    af = 0;\n        long ag = 0;\n        long ah = 0;\n        long ai = 0;\n        long
    aj = 0;\n        long ak = 0;\n        long al = 0;\n        long am = 0;\n        long
    an = 0;\n        long ao = 0;\n        long ap = 0;\n        long aq = 0;\n        long
    ar = 0;\n        long as = 0;\n        long at = 0;\n        long au = 0;\n        long
    av = 0;\n        long aw = 0;\n        long ax = 0;\n        long ay = 0;\n        long
    az = 0;\n        long ba = 0;\n        long bb = 0;\n        long bc = 0;\n        long
    bd = 0;\n        long be = 0;\n        long bf = 0;\n        long bg = 0;\n        long
    bh = 0;\n        long bi = 0;\n        long bj = 0;\n        long bk = 0;\n        long
    bl = 0;\n        long bm = 0;\n        long bn = 0;\n        long bo = 0;\n        long
    bp = 0;\n        long bq = 0;\n        long br = 0;\n        long bs = 0;\n        long
    bt = 0;\n        long bu\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeq1yvlyn.cs(65,14): error CS1001: Identifier expected

    /tmp/tmpeq1yvlyn.cs(65,14): error CS1002: ; expected

    /tmp/tmpeq1yvlyn.cs(65,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpeq1yvlyn.cs(65,17): error CS1031: Type expected

    /tmp/tmpeq1yvlyn.cs(93,16): error CS1002: ; expected

    '
  timestamp: 1659976194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long n_3 = 0;\n        long
    n_2 = 0;\n        long n_1 = 2;\n        long n_0 = 0;\n        for (int i = 0;
    i < n; i++) {\n            long temp = n_0;\n            n_0 = n_1 + n_2 + n_3
    + n_0;\n            n_3 = n_2;\n            n_2 = n_1;\n            n_1 = temp;\n
    \       }\n        return n_0;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3e263813a45e4bf6825ed93e64f23db7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3e263813a45e4bf6825ed93e64f23db7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Fill me in.\n
    \       long n4=0, n3=0, n2=2, n1=0;\n        for (long i = 3; i <= n; i++) {\n
    \           n4 = n3 + n2 + n1 + n4;\n            n1 = n2;\n            n2 = n3;\n
    \           n3 = n4;\n        }\n        return n4;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <134289a4a6d54785baec995606828713>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <134289a4a6d54785baec995606828713>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 4) return
    (n == 2) ? 2 : 0;\n        long[] fr = new long[4];\n        long[] fib4 = new
    long[4];\n        fr[0] = 0; fr[1] = 0; fr[2] = 2; fr[3] = 0;\n        fib4[0]
    = 1; fib4[1] = 1; fib4[2] = 1; fib4[3] = 1;\n        long[] result = MatrixPow(fib4,
    fr, n - 4);\n        return result[0];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfoujiesa.cs(28,25): error CS0103: The name ''MatrixPow'' does not exist
    in the current context

    '
  timestamp: 1659976194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long s0 = 0;\n        long
    s1 = 0;\n        long s2 = 2;\n        long s3 = 0;\n        long s4 = 0;\n        long
    fib4n = 0;\n        for (long i = 4; i <= n; i++) {\n            fib4n = s0 +
    s1 + s2 + s3;\n            s0 = s1;\n            s1 = s2;\n            s2 = s3;\n
    \           s3 = s4;\n            s4 = fib4n;\n        }\n        return fib4n;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <821f9a74d1dc4852b644efda7fe34a50>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <821f9a74d1dc4852b644efda7fe34a50>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0 \n"
  stdout: ''
  timestamp: 1659976190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        return 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 0) {\n            throw
    new ArgumentException(\"n cannot be negative\");\n        }\n        if (n ==
    0) {\n            return 0;\n        }\n        if (n == 1) {\n            return
    0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if
    (n == 3) {\n            return 0;\n        }\n        long n1 = 0;\n        long
    n2 = 0;\n        long n3 = 2;\n        long n4 = 0;\n        long n5 = 0;\n        for
    (long i = 4; i <= n; i++) {\n            n5 = n1 + n2 + n3 + n4;\n            n1
    = n2;\n            n2 = n3;\n            n3 = n4;\n            n4 = n5;\n        }\n
    \       return n5;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long temp;\n        if
    (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return
    0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if
    (n == 3) {\n            return 0;\n        }\n        for (int i = 4; i <= n;
    i++) {\n            temp = a + b + c + d;\n            a = b;\n            b =
    c;\n            c = d;\n            d = temp;\n        }\n        return a + b
    + c + d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26955ea3c6754b45a607316e1cd956d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26955ea3c6754b45a607316e1cd956d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long cur = 0;\n        for (long i = 4; i <= n; i++)
    {\n            cur = a + b + c + d;\n            a = b;\n            b = c;\n
    \           c = d;\n            d = cur;\n        }\n        return cur;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: implement
    this\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <595f750a693045ba801d217c21483e22>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <595f750a693045ba801d217c21483e22>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        return 1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f11ecc0f71648a38d4e0d57e379b285>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f11ecc0f71648a38d4e0d57e379b285>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long r = 0;\n        long
    a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n        for
    (long i = 4; i <= n; i++) {\n            r = a + b + c + d;\n            a = b;\n
    \           b = c;\n            c = d;\n            d = r;\n        }\n        return
    r;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Modulus method.\n
    \       // I didn't actually use this.  It's just here as a record.\n        //const
    long mod = 1000000007;\n        //long n0 = 0;\n        //long n1 = 0;\n        //long
    n2 = 2;\n        //long n3 = 0;\n        //long n4 = 0;\n        //long cur =
    0;\n        //for (long k = 3; k <= n; k++) {\n        //    cur = n0 + n1 + n2
    + n3;\n        //    n0 = n1;\n        //    n1 = n2;\n        //    n2 = n3;\n
    \       //    n3 = cur;\n        //}\n        //return cur;\n\n        // Matrix
    method\n        // Transitions by one step are done as matrix multiplication.\n
    \       // Example:\n        // [ 0 1 2 0 ]       [ 0 1 2 0 ]\n        // [ 1
    0 0 1 ]   *   [ 1 0 0 1 ]\n        // [ 0 0 0 1 ]       [ 0 0 0 1 ]\n        //
    [ 0 0 1 0 ]       [ 0 0 1 0 ]\n        // If we have a 3x3 matrix M and a 1x3
    vector v and we have computed the nth step,\n        // then the value of v*M^n
    is [0 0 1 0]\n\n        const long M11 = 0;\n        const long M12 = 1;\n        const
    long M13 = 2;\n        const long M14 = 0;\n        const long M21 = 1;\n        const
    long M22 = 0;\n        const long M23 = 0;\n        const long M24 = 1;\n        const
    long M31 = 0;\n        const long M32 = 0;\n        const long M33 = 0;\n        const
    long M34 = 1;\n        const long M41 = 0;\n        const long M42 = 0;\n        const
    long M43 = 1;\n        const long M44 = 0;\n\n        long n0 = 0;\n        long
    n1 = 0;\n        long n2 = 2;\n        long n3 = 0;\n        long n4 = 0;\n        long
    c0 = 0;\n        long c1 = 0;\n\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeaa0jr_u.cs(51,20): warning CS0219: The variable ''M11'' is assigned but
    its value is never used

    /tmp/tmpeaa0jr_u.cs(52,20): warning CS0219: The variable ''M12'' is assigned but
    its value is never used

    /tmp/tmpeaa0jr_u.cs(53,20): warning CS0219: The variable ''M13'' is assigned but
    its value is never used

    /tmp/tmpeaa0jr_u.cs(54,20): warning CS0219: The variable ''M14'' is assigned but
    its value is never used

    /tmp/tmpeaa0jr_u.cs(55,20): warning CS0219: The variable ''M21'' is assigned but
    its value is never used

    /tmp/tmpeaa0jr_u.cs(56,20): warning CS0219: The variable ''M22'' is assigned but
    its value is never used

    /tmp/tmpeaa0jr_u.cs(57,20): warning CS0219: The variable ''M23'' is assigned but
    its value is never used

    /tmp/tmpeaa0jr_u.cs(58,20): warning CS0219: The variable ''M24'' is assigned but
    its value is never used

    /tmp/tmpeaa0jr_u.cs(59,20): warning CS0219: The variable ''M31'' is assigned but
    its value is never used

    /tmp/tmpeaa0jr_u.cs(60,20): warning CS0219: The variable ''M32'' is assigned but
    its value is never used

    /tmp/tmpeaa0jr_u.cs(61,20): warning CS0219: The variable ''M33'' is assigned but
    its value is never used

    /tmp/tmpeaa0jr_u.cs(62,20): warning CS0219: The variable ''M34'' is assigned but
    its value is never used

    /tmp/tmpeaa0jr_u.cs(63,20): warning CS0219: The variable ''M41'' is assigned but
    its value is never used

    /tmp/tmpeaa0jr_u.cs(64,20): warning CS0219: The variable ''M42'' is assigned but
    its value is never used

    /tmp/tmpeaa0jr_u.cs(65,20): warning CS0219: The variable ''M43'' is assigned but
    its value is never used

    /tmp/tmpeaa0jr_u.cs(66,20): warning CS0219: The variable ''M44'' is assigned but
    its value is never used

    /tmp/tmpeaa0jr_u.cs(68,14): warning CS0219: The variable ''n0'' is assigned but
    its value is never used

    /tmp/tmpeaa0jr_u.cs(69,14): warning CS0219: The variable ''n1'' is assigned but
    its value is never used

    /tmp/tmpeaa0jr_u.cs(70,14): warning CS0219: The variable ''n2'' is assi'
  timestamp: 1659976194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Your code goes
    here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f564fe9e707409eb2c9a5fd7070f9e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f564fe9e707409eb2c9a5fd7070f9e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n <= 1) {\n            return
    0;\n        }\n        else if (n == 2) {\n            return 2;\n        }\n
    \       long[] fibs = new long[n + 1];\n        fibs[0] = 0;\n        fibs[1]
    = 0;\n        fibs[2] = 2;\n        fibs[3] = 0;\n        for (int i = 4; i <=
    n; i++) {\n            fibs[i] = fibs[i - 1] + fibs[i - 2] + fibs[i - 3] + fibs[i
    - 4];\n        }\n        return fibs[n];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[,] M = new long[2,
    2] { { 1, 1, 1, 0 }, { 1, 0, 0, 0 } };\n        long[,] v = new long[2, 1] { {
    0 }, { 1 } };\n        long[,] res = new long[2, 1];\n        res = Multiply(M,
    v);\n        if (n == 0) return res[0, 0];\n        if (n == 1) return res[1,
    0];\n        M = new long[2, 2] { { 1, 1, 1, 0 }, { 1, 0, 0, 0 } };\n        v
    = new long[2, 1] { { 0 }, { 1 } };\n        res = new long[2, 1];\n        res
    = Multiply(M, v);\n        long[,] M_old = new long[2, 2] { { 1, 1, 1, 0 }, {
    1, 0, 0, 0 } };\n        if (n > 1) {\n            for (long i = 2; i < n; i++)
    {\n                res = Multiply(M, v);\n                M = Multiply(M, M_old);\n
    \           }\n        }\n        return res[0, 0];\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc1dm4mh2.cs(23,38): error CS0847: An array initializer of length ''2''
    is expected

    /tmp/tmpc1dm4mh2.cs(23,54): error CS0847: An array initializer of length ''2''
    is expected

    /tmp/tmpc1dm4mh2.cs(26,15): error CS0103: The name ''Multiply'' does not exist
    in the current context

    /tmp/tmpc1dm4mh2.cs(29,30): error CS0847: An array initializer of length ''2''
    is expected

    /tmp/tmpc1dm4mh2.cs(29,46): error CS0847: An array initializer of length ''2''
    is expected

    /tmp/tmpc1dm4mh2.cs(32,15): error CS0103: The name ''Multiply'' does not exist
    in the current context

    /tmp/tmpc1dm4mh2.cs(33,42): error CS0847: An array initializer of length ''2''
    is expected

    /tmp/tmpc1dm4mh2.cs(33,58): error CS0847: An array initializer of length ''2''
    is expected

    /tmp/tmpc1dm4mh2.cs(36,23): error CS0103: The name ''Multiply'' does not exist
    in the current context

    /tmp/tmpc1dm4mh2.cs(37,21): error CS0103: The name ''Multiply'' does not exist
    in the current context

    '
  timestamp: 1659976195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 0) {\n            throw
    new ArgumentException(\"negative number not supported\");\n        }\n        if
    (n == 0) {\n            return 0;\n        }\n        long fib4_k = 1;\n        long
    fib4_k_1 = 1;\n        long fib4_k_2 = 1;\n        long fib4_k_3 = 0;\n        for
    (long i = 3; i < n; i++) {\n            long temp = fib4_k_3;\n            fib4_k_3
    = fib4_k_2;\n            fib4_k_2 = fib4_k_1;\n            fib4_k_1 = fib4_k;\n
    \           fib4_k = fib4_k_1 + fib4_k_2 + fib4_k_3 + temp;\n        }\n        return
    fib4_k;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b69b9d07200421a85c548657c6dc858>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b69b9d07200421a85c548657c6dc858>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] cache = new
    long[4];\n        long result = 0;\n        for (int i = 0; i < n; i++) {\n            result
    = cache[0] + cache[1] + cache[2] + cache[3];\n            cache[0] = cache[1];\n
    \           cache[1] = cache[2];\n            cache[2] = cache[3];\n            cache[3]
    = result;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c504067c10e4d2db8d5d94b41e1d758>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c504067c10e4d2db8d5d94b41e1d758>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        return 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        return 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Implement this
    function.  Do not change the function header.\n        if (n == 0) return 0;\n
    \       if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n ==
    3) return 0;\n        long fib1 = 0;\n        long fib2 = 0;\n        long fib3
    = 2;\n        long fib4 = 0;\n        long current = 4;\n        while (current
    < n) {\n            long temp = fib1 + fib2 + fib3 + fib4;\n            fib1 =
    fib2;\n            fib2 = fib3;\n            fib3 = fib4;\n            fib4 =
    temp;\n            current++;\n        }\n        return fib1 + fib2 + fib3 +
    fib4;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0 \n"
  stdout: ''
  timestamp: 1659976190
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <2907a94ab5dc4c0f955d5e8e64eddfa3>:0 \n"
  stdout: ''
  timestamp: 1659976190
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <49df271fe7634bb796313422b5dee73b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <49df271fe7634bb796313422b5dee73b>:0 \n"
  stdout: ''
  timestamp: 1659976195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 4) {\n            return
    new long[] { 0, 0, 2, 0 }[n];\n        }\n        var f = Fib4(n - 1) + Fib4(n
    - 2) + Fib4(n - 3) + Fib4(n - 4);\n        return f;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 4) {\n            if
    (n < 2) {\n                return 0;\n            }\n            return 2 * (n
    - 1);\n        }\n        long[] A = new long[4];\n        A[0] = 0;\n        A[1]
    = 0;\n        A[2] = 2;\n        A[3] = 0;\n        for (long i = 4; i <= n; i++)
    {\n            long x = A[0] + A[1] + A[2] + A[3];\n            A[0] = A[1];\n
    \           A[1] = A[2];\n            A[2] = A[3];\n            A[3] = x;\n        }\n
    \       return A[3];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        return Fib4(n, new
    Dictionary<long, long>());\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv0gjjtjs.cs(23,16): error CS1501: No overload for method ''Fib4'' takes
    2 arguments

    '
  timestamp: 1659976195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 0) throw
    new ArgumentOutOfRangeException(\"n\");\n        // Base case.\n        if (n
    == 0) return 0;\n        long a = 0, b = 0, c = 2, d = 0;\n        for (long i
    = 3; i <= n; i++) {\n            long t = d;\n            d = c;\n            c
    = b;\n            b = a;\n            a = t;\n            d += c + b + a;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4223aa04d1564550a8ee571edcac7635>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4223aa04d1564550a8ee571edcac7635>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        if (n == 0) {\n            return
    a;\n        }\n        if (n == 1) {\n            return b;\n        }\n        if
    (n == 2) {\n            return c;\n        }\n        if (n == 3) {\n            return
    d;\n        }\n        for (int i = 0; i < n - 3; i++) {\n            long e =
    a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n            d
    = e;\n        }\n        return a + b + c + d;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c87858d380942ad96f32d3331ada14a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c87858d380942ad96f32d3331ada14a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976195
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 2) return
    0;\n        if (n == 2) return 2;\n        long[] fibs = new long[3];\n        fibs[0]
    = 0;\n        fibs[1] = 0;\n        fibs[2] = 2;\n        for (int i = 3; i <=
    n; i++) {\n            fibs[i % 3] = fibs[(i - 1) % 3] + fibs[(i - 2) % 3] + fibs[(i
    - 3) % 3] + fibs[(i - 4) % 3];\n        }\n        return fibs[n % 3];\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Fib4 (System.Int64 n) [0x00039] in <d70f2874e8694f559e41905ef794ca0c>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <d70f2874e8694f559e41905ef794ca0c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Fib4 (System.Int64 n) [0x00039]
    in <d70f2874e8694f559e41905ef794ca0c>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <d70f2874e8694f559e41905ef794ca0c>:0 \n"
  stdout: ''
  timestamp: 1659976196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long k = 1;\n        long
    fib4 = 0;\n        long twoFib4 = 2;\n        long threeFib4 = 0;\n        long
    fourFib4 = 0;\n        while (k < n) {\n            fib4 = twoFib4 + threeFib4
    + fourFib4;\n            fourFib4 = threeFib4;\n            threeFib4 = twoFib4;\n
    \           twoFib4 = fib4;\n            k++;\n        }\n        return fib4;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <80910a133ef14ce1972c3679f2c34b78>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <80910a133ef14ce1972c3679f2c34b78>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        return n;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3037f741f46a4e79ab3677b97fcd9ef0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3037f741f46a4e79ab3677b97fcd9ef0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // pretty simple
    so far, just use the four-item vector approach\n        // F[n] = (4*F[n-1] -
    F[n-5])\n        // which you can derive from F[n] = F[n-1] + F[n-2] + F[n-3]
    + F[n-4]\n        // by rearranging to F[n] - F[n-1] = F[n-2] + F[n-3] + F[n-4]\n
    \       // then to F[n] - F[n-1] = F[n-2] + F[n-3] + F[n-4] - F[n-5]\n        //
    then to F[n] - F[n-1] = F[n-2] + F[n-3] + (F[n-4] - F[n-5])\n        // then to
    F[n] - F[n-1] = F[n-2] + (F[n-3] + F[n-4] - F[n-5])\n        // then to F[n] -
    F[n-1] = (F[n-2] + F[n-3] + F[n-4] - F[n-5])\n        // then to F[n] = F[n-1]
    + (F[n-2] + F[n-3] + F[n-4] - F[n-5])\n        // then to F[n] = F[n-1] + 4*(F[n-2]
    + F[n-3] + F[n-4] - F[n-5])\n        // then to F[n] = 4*F[n-1] + 4*(F[n-2] +
    F[n-3] + F[n-4] - F[n-5])\n        // then to F[n] = 4*F[n-1] + 4*(F[n-2] + F[n-3]
    + F[n-4]) - 4*F[n-5]\n        // then to F[n] = 4*F[n-1] + 4*F\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo2y8t_n7.cs(22,24): error CS0161: ''Problem.Fib4(long)'': not all code
    paths return a value

    '
  timestamp: 1659976195
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long temp = 0;\n        for
    (long i = 4; i <= n; i++) {\n            temp = d;\n            d = a + b + c
    + d;\n            a = b;\n            b = c;\n            c = temp;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        Debug.Assert(n >=
    0);\n        var fib = new long[n + 1];\n        fib[0] = 0;\n        fib[1] =
    0;\n        fib[2] = 2;\n        fib[3] = 0;\n        for (var i = 4; i <= n;
    i++) {\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n
    \       }\n        return fib[n];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            d =
    a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c61b8a4432744ac18532e6176d63a4dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c61b8a4432744ac18532e6176d63a4dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long A = 0, B = 0,
    C = 2, D = 0;\n        for (int i = 0; i < n; i++) {\n            D = A + B +
    C;\n            A = B;\n            B = C;\n            C = D;\n        }\n        return
    A;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc7959b3e83d4098a0740fcd1b848055>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc7959b3e83d4098a0740fcd1b848055>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 0)\n            throw
    new ArgumentOutOfRangeException(\"n\", \"n must be 0 or greater\");\n        if
    (n == 0)\n            return 0;\n        if (n == 1)\n            return 0;\n
    \       if (n == 2)\n            return 2;\n        if (n == 3)\n            return
    0;\n        var cache = new Dictionary<long, long> { { 0, 0 }, { 1, 0 }, { 2,
    2 }, { 3, 0 } };\n        return Fib4Helper(n, cache);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr50dm9do.cs(34,16): error CS0103: The name ''Fib4Helper'' does not exist
    in the current context

    '
  timestamp: 1659976196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        int nInt = (int)n;\n
    \       long[] fib = new long[nInt + 1];\n        fib[0] = 0;\n        fib[1]
    = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        for (int i = 4; i <= nInt;
    i++) {\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n
    \       }\n        return fib[nInt];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        long last4 = 0;\n        long last3 = 0;\n        long last2 = 2;\n
    \       long last1 = 0;\n        long current = 0;\n        for (int i = 2; i
    < n; i++) {\n            current = last1 + last2 + last3 + last4;\n            last4
    = last3;\n            last3 = last2;\n            last2 = last1;\n            last1
    = current;\n        }\n        return current;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cc391ac8554f455183cb809bbbb578c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cc391ac8554f455183cb809bbbb578c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        //TODO\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e85031a82584c41a6f8f87bd4d312cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e85031a82584c41a6f8f87bd4d312cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Fill in with your
    code!\n        long a = 0;\n        long b = 0;\n        long c = 2;\n        long
    d = 0;\n        long e = 0;\n        for (int i = 4; i <= n; i++) {\n            e
    = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n
    \           d = e;\n        }\n        return e;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 4) {\n            return
    0;\n        } else if (n == 4) {\n            return 2;\n        } else {\n            long
    a = 0;\n            long b = 0;\n            long c = 2;\n            long d =
    0;\n            for (long i = 4; i < n; i++) {\n                d = a + b + c;\n
    \               a = b;\n                b = c;\n                c = d;\n            }\n
    \           return d;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ca10f1fdb3d4d18acf72123d89c98a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ca10f1fdb3d4d18acf72123d89c98a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976196
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Do not modify
    this function.\n        return Fib4Solution(n);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcb83puvi.cs(24,16): error CS0103: The name ''Fib4Solution'' does not exist
    in the current context

    '
  timestamp: 1659976196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        return Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n
    - 4);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n <= 1) return
    0;\n        if (n == 2) return 2;\n        long f1 = 0, f2 = 0, f3 = 2, f4 = 0;\n
    \       for (long i = 3; i <= n; i++) {\n            f4 = f1 + f2 + f3;\n            f1
    = f2;\n            f2 = f3;\n            f3 = f4;\n        }\n        return f4;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a70b052ccba747f1ba6e0b8bd609afd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a70b052ccba747f1ba6e0b8bd609afd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] ar = new long[4];\n
    \       ar[0] = 0;\n        ar[1] = 0;\n        ar[2] = 2;\n        ar[3] = 0;\n
    \       long i = 4;\n        if (n < 4) {\n            return ar[n];\n        }\n
    \       while (i <= n) {\n            ar[3] = ar[2] + ar[1] + ar[0] + ar[3];\n
    \           ar[0] = ar[1];\n            ar[1] = ar[2];\n            ar[2] = ar[3];\n
    \           i++;\n        }\n        return ar[3];\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57a932e7e3c54024a187b09ef92c24e2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57a932e7e3c54024a187b09ef92c24e2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long NthFib = 0;\n        long NthMinusOneFib = 0;\n
    \       long NthMinusTwoFib = 2;\n        long NthMinusThreeFib = 0;\n        long
    NthMinusFourFib = 0;\n        for (long i = 4; i <= n; i++) {\n            NthFib
    = NthMinusOneFib + NthMinusTwoFib + NthMinusThreeFib + NthMinusFourFib;\n            NthMinusFourFib
    = NthMinusThreeFib;\n            NthMinusThreeFib = NthMinusTwoFib;\n            NthMinusTwoFib
    = NthMinusOneFib;\n            NthMinusOneFib = NthFib;\n        }\n        return
    NthFib;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] n3 = new long[3];\n
    \       long[] n4 = new long[4];\n        long k = 4;\n        for (long i = 0;
    i < n; i++) {\n            k = i % 4;\n            n3[0] = n4[k];\n            n3[1]
    = n4[(k + 1) % 4];\n            n3[2] = n4[(k + 2) % 4];\n            n4[k] =
    n3[0] + n3[1] + n3[2];\n        }\n        return n4[k];\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e36c040b83394bd98aa649f604553fa1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e36c040b83394bd98aa649f604553fa1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        return 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0 || n ==
    1) {\n            return 0;\n        } else if (n == 2) {\n            return
    2;\n        } else if (n == 3) {\n            return 0;\n        } else {\n            int[]
    fibs = new int[4];\n            fibs[0] = 0;\n            fibs[1] = 0;\n            fibs[2]
    = 2;\n            fibs[3] = 0;\n            for (int i = 4; i <= n; i++) {\n                int
    temp = fibs[0] + fibs[1] + fibs[2] + fibs[3];\n                fibs[0] = fibs[1];\n
    \               fibs[1] = fibs[2];\n                fibs[2] = fibs[3];\n                fibs[3]
    = temp;\n            }\n            return fibs[3];\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) {\n            return
    0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n
    == 2) {\n            return 2;\n        } else if (n == 3) {\n            return
    0;\n        }\n        long first = 0;\n        long second = 0;\n        long
    third = 2;\n        long fourth = 0;\n        long fifth = 0;\n        while (n
    > 4) {\n            first = second;\n            second = third;\n            third
    = fourth;\n            fourth = fifth;\n            fifth = first + second + third
    + fourth;\n            n--;\n        }\n        return fifth;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39905e7d0ef040f68b3c7c5988a94849>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39905e7d0ef040f68b3c7c5988a94849>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976196
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    tmp = a + b + c + d;\n            a = b;\n            b = c;\n            c =
    d;\n            d = tmp;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2a16f21158924acf9980688be654e5cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2a16f21158924acf9980688be654e5cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 0)\n            throw
    new System.ArgumentException(\"Argument must be greater than or equal to 0\");\n
    \       if (n < 4)\n            return n * 2;\n        long n_1 = 4;\n        long
    n_2 = 8;\n        long n_3 = 14;\n        long n_4 = 22;\n        while (n > 4)
    {\n            long temp = n_1 + n_2 + n_3 + n_4;\n            n_4 = n_3;\n            n_3
    = n_2;\n            n_2 = n_1;\n            n_1 = temp;\n            n--;\n        }\n
    \       return n_1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d72cc3b5b034a4e9f119c4e9d0e5da4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d72cc3b5b034a4e9f119c4e9d0e5da4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // if(n == 0) return
    0;\n        // if(n == 1) return 0;\n        // if(n == 2) return 2;\n        //
    if(n == 3) return 0;\n        // return Fib4(n-1) + Fib4(n-2) + Fib4(n-3) + Fib4(n-4);\n
    \       long[] prev = new long[] {0, 0, 2, 0};\n        for(int i = 4; i <= n;
    i++) {\n            long sum = 0;\n            foreach(long num in prev) {\n                sum
    += num;\n            }\n            long[] temp = new long[4];\n            for(int
    j = 0; j < 3; j++) {\n                temp[j] = prev[j+1];\n            }\n            temp[3]
    = sum;\n            prev = temp;\n        }\n        return prev[0];\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b947fc519e334886992e2351da36bfa4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b947fc519e334886992e2351da36bfa4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) {\n            return
    0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if
    (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return
    0;\n        }\n        var f = new BigInteger[4];\n        f[0] = 0;\n        f[1]
    = 0;\n        f[2] = 2;\n        f[3] = 0;\n        for (int i = 4; i <= n; i++)
    {\n            var a = f[0];\n            var b = f[1];\n            var c = f[2];\n
    \           var d = f[3];\n            f[0] = d;\n            f[1] = a;\n            f[2]
    = b;\n            f[3] = c + a + b + d;\n        }\n        return (long)f[3];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <877a4245e9324b0781e37e521b6781ac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <877a4245e9324b0781e37e521b6781ac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long tmp = 0;\n        long
    fib4_n2 = 0;\n        long fib4_n3 = 0;\n        long fib4_n4 = 0;\n        long
    fib4_n1 = 0;\n        long i = 0;\n        while (i < n) {\n            tmp =
    fib4_n1 + fib4_n2 + fib4_n3 + fib4_n4;\n            fib4_n4 = fib4_n3;\n            fib4_n3
    = fib4_n2;\n            fib4_n2 = fib4_n1;\n            fib4_n1 = tmp;\n            i
    = i + 1;\n        }\n        return tmp;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1743c331da246148b53e2f7eea6e1d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1743c331da246148b53e2f7eea6e1d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        var a = new List<long>
    {0, 0, 2, 0};\n        while (a.Count <= n) {\n            a.Add(a[a.Count - 1]
    + a[a.Count - 2] + a[a.Count - 3] + a[a.Count - 4]);\n        }\n        return
    a[(int)n];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976197
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // set up a sequence
    of numbers that recur every 5th step.\n        long[] fib4 = new long[5];\n        fib4[0]
    = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n        fib4[4]
    = 0;\n        // find which 5th step we are on\n        int index = (int)(n %
    5);\n        // get the actual index\n        if (index == 0) index = 5;\n        return
    fib4[index];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Fib4 (System.Int64 n) [0x00031] in <896605bf49b54dbc89d0486bacee22d2>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <896605bf49b54dbc89d0486bacee22d2>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Fib4 (System.Int64 n) [0x00031]
    in <896605bf49b54dbc89d0486bacee22d2>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <896605bf49b54dbc89d0486bacee22d2>:0 \n"
  stdout: ''
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // CODE HERE\n        long
    n_1 = 2;\n        long n_2 = 0;\n        long n_3 = 0;\n        long n_4 = 0;\n
    \       long n_5 = 0;\n        for (long i = 4; i <= n; i++) {\n            n_5
    = n_4 + n_3 + n_2 + n_1;\n            n_4 = n_3;\n            n_3 = n_2;\n            n_2
    = n_1;\n            n_1 = n_5;\n        }\n        return n_5;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <67b7ab2efeb14fd2b540ec411d6f0cd9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <67b7ab2efeb14fd2b540ec411d6f0cd9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this\n        return -1;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20bce005000b4435b7cd046123cfd070>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20bce005000b4435b7cd046123cfd070>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long y = 0;\n        long
    tmp = 0;\n        if (n == 0) {\n            return 0;\n        }\n        else
    if (n == 1) {\n            return 0;\n        }\n        else if (n == 2) {\n
    \           return 2;\n        }\n        else if (n == 3) {\n            return
    0;\n        }\n        for (long i = 3; i < n; i++) {\n            tmp = a;\n
    \           a = b;\n            b = c;\n            c = d;\n            d = tmp
    + b + c + d;\n        }\n        return a + b + c + d;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95eb983b9170456581082b411244e982>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95eb983b9170456581082b411244e982>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // your code here.\n
    \       return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce9e7af6e76a489faea7b0a364d750e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce9e7af6e76a489faea7b0a364d750e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 0) throw
    new ArgumentOutOfRangeException(\"n\", \"n must be a non-negative integer.\");\n
    \       long a = 0, b = 0, c = 2, d = 0, e;\n        for (int i = 0; i < n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return a;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        Debug.Assert(n >=
    0);\n        if (n == 0) {\n            return 0;\n        }\n        if (n ==
    1) {\n            return 0;\n        }\n        if (n == 2) {\n            return
    2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n        long
    result = 0;\n        long i = 0;\n        long j = 0;\n        long k = 2;\n        long
    l = 0;\n        for (int c = 4; c <= n; c++) {\n            result = i + j + k
    + l;\n            i = j;\n            j = k;\n            k = l;\n            l
    = result;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        while
    (n > 3) {\n            e = a + b + c + d;\n            a = b;\n            b =
    c;\n            c = d;\n            d = e;\n            n--;\n        }\n        return
    e;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        //F0 = 0\n        //F1
    = 0\n        //F2 = 2\n        //F3 = 0\n        //F4 = 4\n        //F5 = 8\n
    \       //F6 = 14\n        //F7 = 28\n        //F8 = 56\n        //F9 = 108\n
    \       //The nth fib4 number is the sum of the n-4th, n-3rd, n-2nd, and n-1st.\n
    \       long[] fib4 = new long[n + 1];\n        fib4[0] = 0;\n        fib4[1]
    = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n        for (int i = 4; i <=
    n; i++) {\n            fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i
    - 4];\n        }\n        return fib4[n];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n <= 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (int i = 4; i <= n; i++) {\n            long
    temp = d;\n            d = a + b + c + d;\n            a = b;\n            b =
    c;\n            c = temp;\n        }\n        return d;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        return 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cc9aa5de5a54d1eb420c553f52dc7a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        Debug.Assert(n >=
    0);\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e7a99e935644435a4da862bcbd1ce4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e7a99e935644435a4da862bcbd1ce4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) {\n            return
    0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n
    == 2) {\n            return 2;\n        } else if (n == 3) {\n            return
    0;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    e = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n
    \           d = e;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7268eeb8b8744a1fa5de868b83e7df50>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7268eeb8b8744a1fa5de868b83e7df50>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        var f = new long[n+1];\n
    \       f[0] = 0;\n        f[1] = 0;\n        f[2] = 2;\n        f[3] = 0;\n        for
    (int i = 4; i <= n; i++) {\n            f[i] = f[i-1] + f[i-2] + f[i-3] + f[i-4];\n
    \       }\n        return f[n];\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) {\n            return
    0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if
    (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return
    0;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long sum = 0;\n        for (long i = 3; i < n; i++)
    {\n            sum = a + b + c + d;\n            a = b;\n            b = c;\n
    \           c = d;\n            d = sum;\n        }\n        return sum;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n <= 1) {\n            return
    0;\n        } else if (n == 2) {\n            return 2;\n        } else if (n
    == 3) {\n            return 0;\n        } else {\n            // Keeps track of
    each of the Fib4 terms.\n            long a = 2;\n            long b = 0;\n            long
    c = 0;\n            long d = 0;\n            long e = 0;\n            for (long
    i = 3; i < n; i++) {\n                e = a + b + c + d;\n                d =
    c;\n                c = b;\n                b = a;\n                a = e;\n            }\n
    \           return e;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <438cd3222ad74e2e87da1abe7fca7a4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <438cd3222ad74e2e87da1abe7fca7a4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976198
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Fill this in.\n
    \       if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n
    \           return 0;\n        }\n        if (n == 1) {\n            return 0;\n
    \       }\n        if (n == 2) {\n            return 2;\n        }\n        if
    (n == 3) {\n            return 0;\n        }\n        long fib = 0;\n        long
    a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n        for
    (long i = 4; i <= n; i++) {\n            fib = a + b + c + d;\n            a =
    b;\n            b = c;\n            c = d;\n            d = fib;\n        }\n
    \       return fib;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976197
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        long result = 0;\n        var a = new long[] { 0, 0, 2, 0 };\n        for
    (long i = 4; i <= n; i++) {\n            result = a[0] + a[1] + a[2] + a[3];\n
    \           a[0] = a[1];\n            a[1] = a[2];\n            a[2] = a[3];\n
    \           a[3] = result;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976198
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Your code goes
    here!\n        // Note that the following computes the value of fib4(n) but will
    be extremely slow if n is large:\n        // return n < 4 ? n : Fib4(n-1) + Fib4(n-2)
    + Fib4(n-3) + Fib4(n-4);\n        // (Think about why it's slow and why it's much
    more efficient to use recursion for the Fibonacci sequence.)\n        // (Hint:
    Try doing this on a piece of paper first.)\n        long first, second, third,
    fourth, fib4 = 0;\n        first = 0;\n        second = 0;\n        third = 2;\n
    \       fourth = 0;\n        for (int i = 3; i <= n; i++) {\n            fib4
    = first + second + third + fourth;\n            first = second;\n            second
    = third;\n            third = fourth;\n            fourth = fib4;\n        }\n
    \       return fib4;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <218a115f0eed4471bc72057a6a351acc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <218a115f0eed4471bc72057a6a351acc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976198
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        BigInteger f0 = 0;\n
    \       BigInteger f1 = 0;\n        BigInteger f2 = 2;\n        BigInteger f3
    = 0;\n        for (int i = 3; i <= n; i++) {\n            BigInteger f4 = f3 +
    f2 + f1 + f0;\n            f0 = f1;\n            f1 = f2;\n            f2 = f3;\n
    \           f3 = f4;\n        }\n        return (long)f3;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f28c0f98c68e4faca7fa0cf7fb5ade1a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f28c0f98c68e4faca7fa0cf7fb5ade1a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976198
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 4) {\n            return
    (long)n * (n-1) % 2;\n        }\n        var a = 0L;\n        var b = 0L;\n        var
    c = 2L;\n        var d = 0L;\n        for (var i = 4; i <= n; i++) {\n            var
    e = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n
    \           d = e;\n        }\n        return d;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976198
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long fib4 = 0;\n
    \       long fib4_1 = 0;\n        long fib4_2 = 0;\n        long fib4_3 = 0;\n
    \       long fib4_4 = 0;\n        long temp;\n        for (long i = 1; i <= n;
    i++) {\n            if (i == 1) {\n                fib4 = 0;\n            } else
    if (i == 2) {\n                fib4 = 2;\n            } else if (i == 3) {\n                fib4
    = 0;\n            } else {\n                temp = fib4;\n                fib4
    = fib4 + fib4_1 + fib4_2 + fib4_3;\n                fib4_4 = fib4_3;\n                fib4_3
    = fib4_2;\n                fib4_2 = fib4_1;\n                fib4_1 = temp;\n
    \           }\n        }\n        return fib4;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dd3640704c5044edafad5ba9861bafd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dd3640704c5044edafad5ba9861bafd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976198
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0 || n ==
    1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n        long[]
    fib = new long[n + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2]
    = 2;\n        fib[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib[i]
    = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n        }\n        return
    fib[n];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976198
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0 || n ==
    1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n        long
    a = 0, b = 0, c = 2, d = 0;\n        for (int i = 4; i <= n; i++) {\n            d
    = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40cf4af984b64f63a3a66c388d218a97>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40cf4af984b64f63a3a66c388d218a97>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976198
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // please implement
    here\n        long[] f = new long[n+1];\n        if (n == 0)\n            return
    0;\n        if (n == 1)\n            return 0;\n        if (n == 2)\n            return
    2;\n        if (n == 3)\n            return 0;\n        f[0] = 0;\n        f[1]
    = 0;\n        f[2] = 2;\n        f[3] = 0;\n        for (int i = 4; i <= n; i++)\n
    \       {\n            f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n        }\n
    \       return f[n];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976198
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        //throw new NotImplementedException();\n        Debug.Assert(n
    >= 0);\n        long[] n_array = new long[4];\n        n_array[0] = 0;\n        n_array[1]
    = 0;\n        n_array[2] = 2;\n        n_array[3] = 0;\n        if (n <= 3)\n
    \       {\n            return n_array[n];\n        }\n        else\n        {\n
    \           for (int i = 4; i <= n; i++)\n            {\n                long
    temp = n_array[0] + n_array[1] + n_array[2] + n_array[3];\n                n_array[0]
    = n_array[1];\n                n_array[1] = n_array[2];\n                n_array[2]
    = n_array[3];\n                n_array[3] = temp;\n            }\n            return
    n_array[3];\n        }\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976198
