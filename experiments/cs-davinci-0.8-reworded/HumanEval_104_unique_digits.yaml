name: HumanEval_104_unique_digits
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of positive integers x. return a sorted list of\
  \ all \n    // elements that hasn't any even digit.\n    // Note: Returned list\
  \ should be sorted in increasing order.\n    // For example:\n    // >>> UniqueDigits((new\
  \ List<long>(new long[]{(long)15L, (long)33L, (long)1422L, (long)1L})))\n    //\
  \ (new List<long>(new long[]{(long)1L, (long)15L, (long)33L}))\n    // >>> UniqueDigits((new\
  \ List<long>(new long[]{(long)152L, (long)323L, (long)1422L, (long)10L})))\n   \
  \ // (new List<long>())\n    public static List<long> UniqueDigits(List<long> x)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueDigits((new\
  \ List<long>(new long[]{(long)15L, (long)33L, (long)1422L, (long)1L}))).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)15L, (long)33L}))));\n    Debug.Assert(UniqueDigits((new\
  \ List<long>(new long[]{(long)152L, (long)323L, (long)1422L, (long)10L}))).Equals((new\
  \ List<long>())));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)12345L,\
  \ (long)2033L, (long)111L, (long)151L}))).Equals((new List<long>(new long[]{(long)111L,\
  \ (long)151L}))));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)135L,\
  \ (long)103L, (long)31L}))).Equals((new List<long>(new long[]{(long)31L, (long)135L}))));\n\
  \    }\n\n}\n"
completions: ["        // BEGIN\n        List<long> r = new List<long>();\n      \
    \  foreach (long n in x) {\n            string s = n.ToString();\n           \
    \ bool containsEven = false;\n            foreach (char c in s) {\n          \
    \      if (c % 2 == 0) {\n                    containsEven = true;\n         \
    \           break;\n                }\n            }\n            if (!containsEven)\
    \ {\n                r.Add(n);\n            }\n        }\n        r.Sort();\n\
    \        return r;\n        // END", "        // Fill here.\n        return null;",
  '        return x.Where(n => n.ToString().All(c => c % 2 != 0)).ToList();', "  \
    \      List<long> nums = new List<long>();\n        foreach (long l in x) {\n\
    \            if (l.ToString().Any(char.IsDigit) == false) {\n                continue;\n\
    \            }\n            if (l.ToString().All(char.IsDigit) == false) {\n \
    \               continue;\n            }\n            string str = l.ToString();\n\
    \            int len = str.Length;\n            int count = 0;\n            for\
    \ (int i = 0; i < len; i++) {\n                int num = (int)Char.GetNumericValue(str[i]);\n\
    \                if (num % 2 == 0) {\n                    count += 1;\n      \
    \          }\n            }\n            if (count == 0) {\n                nums.Add(l);\n\
    \            }\n        }\n        nums.Sort();\n        return nums;", "    \
    \    x.Sort();\n        List<long> y = new List<long>();\n        for (int i =\
    \ 0; i < x.Count; i++) {\n            if (x[i] == 0) {\n                continue;\n\
    \            }\n            int flag = 0;\n            while (x[i] != 0) {\n \
    \               int r = (int)(x[i] % 10);\n                if (r % 2 == 0) {\n\
    \                    flag = 1;\n                    break;\n                }\n\
    \                x[i] = x[i] / 10;\n            }\n            if (flag == 0)\
    \ {\n                y.Add(x[i]);\n            }\n        }\n        return y;",
  "        List<long> retval = new List<long>();\n        for (int i = 0; i < x.Count;\
    \ i++) {\n            bool no_even_digit = true;\n            long y = x[i];\n\
    \            while (y > 0) {\n                long digit = y % 10;\n         \
    \       if (digit % 2 == 0) {\n                    no_even_digit = false;\n  \
    \                  break;\n                }\n                y /= 10;\n     \
    \       }\n            if (no_even_digit) {\n                retval.Add(x[i]);\n\
    \            }\n        }\n        retval.Sort();\n        return retval;", '        return
    x.Where(y => !y.ToString().Any(z => z % 2 == 0)).ToList();', "        List<long>\
    \ ret = new List<long>();\n        foreach (long i in x) {\n            bool has_even\
    \ = false;\n            long n = i;\n            while (n > 0) {\n           \
    \     if ((n % 10) % 2 == 0) {\n                    has_even = true;\n       \
    \             break;\n                }\n                n /= 10;\n          \
    \  }\n            if (!has_even) ret.Add(i);\n        }\n        ret.Sort();\n\
    \        return ret;", "        List<long> ans = new List<long>();\n        foreach\
    \ (long num in x) {\n            long num2 = num;\n            while (num2 > 0)\
    \ {\n                if (num2 % 2 == 0) {\n                    break;\n      \
    \          }\n                num2 /= 10;\n            }\n            if (num2\
    \ == 0) {\n                ans.Add(num);\n            }\n        }\n        ans.Sort();\n\
    \        return ans;", '        return x.Where(n => IsUniqueDigits(n)).ToList();',
  "        var result = new List<long>();\n        foreach (var item in x) {\n   \
    \         var count = (from digit in item.ToString()\n                       \
    \ where digit % 2 == 0\n                        select digit).Count();\n     \
    \       if (count == 0) {\n                result.Add(item);\n            }\n\
    \        }\n        return result.OrderBy(y => y).ToList();", "        return\
    \ x.Where(e => !(e.ToString().Any(c => c == '2' || c == '4' || c == '6' || c ==\
    \ '8' || c == '0'))).OrderBy(e => e).ToList();", "        // Your answer here\n\
    \        List<long> y = new List<long>();\n        foreach (long item in x) {\n\
    \            if (item.ToString().Any(char.IsDigit) && !item.ToString().Any(char.IsLetter)\
    \ && item.ToString().Any(i => i % 2 == 0)) {\n                y.Add(item);\n \
    \           }\n        }\n        return y;", "        return (from a in x\n \
    \               where (from b in a.ToString()\n                       where (b\
    \ == '0' || b == '2' || b == '4' || b == '6' || b == '8')\n                  \
    \     select b).Count() == 0\n                select a).ToList();", "        if\
    \ (x == null) {\n            throw new ArgumentNullException(\"x\");\n       \
    \ }\n        List<long> retVal = new List<long>();\n        foreach (long x_i\
    \ in x) {\n            bool noEvenDigits = true;\n            while (x_i > 0)\
    \ {\n                if ((x_i % 2) == 0) {\n                    noEvenDigits =\
    \ false;\n                    break;\n                }\n                x_i /=\
    \ 10;\n            }\n            if (noEvenDigits) {\n                retVal.Add(x_i);\n\
    \            }\n        }\n        retVal.Sort();\n        return retVal;", " \
    \       HashSet<long> hset = new HashSet<long>();\n        foreach (long n in\
    \ x) {\n            long n2 = n;\n            int count = 0;\n            while\
    \ (n2 > 0) {\n                long n3 = n2 % 10;\n                if (n3 % 2 ==\
    \ 0) {\n                    count += 1;\n                }\n                n2\
    \ /= 10;\n            }\n            if (count == 0) {\n                hset.Add(n);\n\
    \            }\n        }\n        List<long> result = new List<long>(hset);\n\
    \        result.Sort();\n        return result;", "        x.Sort();\n       \
    \ List<long> y = new List<long>();\n        int i;\n        for (i = 0; i < x.Count;\
    \ i++) {\n            bool allUnique = true;\n            long t = x[i];\n   \
    \         while (t > 0) {\n                if (t % 2 == 0) {\n               \
    \     allUnique = false;\n                    break;\n                }\n    \
    \            t /= 10;\n            }\n            if (allUnique) {\n         \
    \       y.Add(x[i]);\n            }\n        }\n        return y;", "        List<long>\
    \ result = new List<long>();\n        foreach (long d in x) {\n            bool\
    \ isUnique = true;\n            while (d > 0) {\n                if ((d % 2) ==\
    \ 0) {\n                    isUnique = false;\n                    break;\n  \
    \              }\n                d /= 10;\n            }\n            if (isUnique)\
    \ {\n                result.Add(d);\n            }\n        }\n        result.Sort();\n\
    \        return result;", "        List<long> l = new List<long>();\n        for\
    \ (int i = 0; i < x.Count; i++) {\n            bool add = true;\n            long\
    \ n = x[i];\n            while (n > 0) {\n                if ((n % 10) % 2 ==\
    \ 0) {\n                    add = false;\n                    break;\n       \
    \         }\n                n /= 10;\n            }\n            if (add) {\n\
    \                l.Add(x[i]);\n            }\n        }\n        l.Sort();\n \
    \       return l;", "        var y = new List<long>();\n        for (int i = 0;\
    \ i < x.Count; i++) {\n            if (DigitsOf(x[i]).All(IsOdd)) {\n        \
    \        y.Add(x[i]);\n            }\n        }\n        y.Sort();\n        return\
    \ y;", "        long max = x.Max();\n        bool[] primes = PrimeSieve(max);\n\
    \        List<long> uniqueDigits = new List<long>();\n        for (int i = 0;\
    \ i < x.Count; i++) {\n            bool isPrime = primes[x[i]];\n            if\
    \ (isPrime) {\n                uniqueDigits.Add(x[i]);\n            }\n      \
    \  }\n        return uniqueDigits;", "        List<long> ans = new List<long>();\n\
    \        for (int i = 0; i < x.Count; i++) {\n            long num = x[i];\n \
    \           bool unique = true;\n            while (num > 0) {\n             \
    \   long d = num % 10;\n                if (d % 2 == 0) {\n                  \
    \  unique = false;\n                    break;\n                }\n          \
    \      num /= 10;\n            }\n            if (unique) ans.Add(x[i]);\n   \
    \     }\n        ans.Sort();\n        return ans;", "        var result = new\
    \ List<long>();\n        foreach (var i in x) {\n            if (Unique(i)) {\n\
    \                result.Add(i);\n            }\n        }\n        result.Sort();\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long l in x) {\n            if (!ContainsEvenDigit(l)) {\n    \
    \            result.Add(l);\n            }\n        }\n        result.Sort();\n\
    \        return result;", "        List<long> ret = new List<long>();\n      \
    \  for (int i = 0; i < x.Count; i++) {\n            if (!Convert.ToString(x[i]).Contains(\"\
    2\") && !Convert.ToString(x[i]).Contains(\"4\") && !Convert.ToString(x[i]).Contains(\"\
    6\") && !Convert.ToString(x[i]).Contains(\"8\") && !Convert.ToString(x[i]).Contains(\"\
    0\")) {\n                ret.Add(x[i]);\n            }\n        }\n        return\
    \ ret;", "        return x.Where(n => !n.ToString().Any(c => c == '2' || c ==\
    \ '4' || c == '6' || c == '8' || c == '0')).OrderBy(n => n).ToList();", "    \
    \    // \u53C2\u8003\uFF1A https://docs.microsoft.com/ja-jp/dotnet/api/system.linq.enumerable.sort?view=netframework-4.7.2#System_Linq_Enumerable_Sort__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IComparer___0__\n\
    \        // \u7121\u3044\u6642\u306F\u3001 x.Sort(); \u3067\u3044\u3044\n    \
    \    x.Sort((a, b) => a.CompareTo(b));\n        int len = x.Count;\n        List<long>\
    \ sortedList = new List<long>();\n        for (int i = 0; i < len; i++) {\n  \
    \          if (x[i] == 0) {\n                continue;\n            }\n      \
    \      int cnt = 0;\n            string str = x[i].ToString();\n            foreach\
    \ (char s in str) {\n                if (s == '0' || s == '2' || s == '4' || s\
    \ == '6' || s == '8') {\n                    cnt++;\n                }\n     \
    \       }\n            if (cnt == 0) {\n                sortedList.Add(x[i]);\n\
    \            }\n        }\n        return sortedList;", '        return x;', '        return
    new List<long>();', "        var res = new List<long>();\n        foreach (var\
    \ xx in x) {\n            if (xx.ToString().Any(c => c % 2 == 0)) {\n        \
    \        continue;\n            }\n            res.Add(xx);\n        }\n     \
    \   res.Sort();\n        return res;", '        return x.Where(y => !HasEvenDigit(y)).ToList();',
  "        var result = new List<long>();\n        foreach (var i in x) {\n      \
    \      if (!EvenDigits(i)) {\n                result.Add(i);\n            }\n\
    \        }\n        result.Sort();\n        return result;", '        return x.Where(y
    => !y.ToString().Any(z => z % 2 == 0)).ToList();', "        var result = new List<long>();\n\
    \        foreach (var i in x) {\n            if (!IsEvenDigit(i))\n          \
    \      result.Add(i);\n        }\n        result.Sort();\n        return result;",
  "        // Write your code here\n        return null;", "        // Good luck!\n\
    \        List<long> ret = new List<long>();\n        foreach (var xi in x) {\n\
    \            if (xi < 10L) {\n                ret.Add(xi);\n            } else\
    \ {\n                if (xi % 10L % 2L == 1L) {\n                    if (xi >=\
    \ 100L) {\n                        if (xi % 100L % 10L % 2L == 1L) {\n       \
    \                     if (xi >= 1000L) {\n                                if (xi\
    \ % 1000L % 100L % 10L % 2L == 1L) {\n                                    if (xi\
    \ >= 10000L) {\n                                        if (xi % 10000L % 1000L\
    \ % 100L % 10L % 2L == 1L) {\n                                            if (xi\
    \ >= 100000L) {\n                                                if (xi % 100000L\
    \ % 10000L % 1000L % 100L % 10L % 2L == 1L) {\n                              \
    \                      if (xi >= 1000000L) {\n                               \
    \                         if (xi % 1000000L % 100000L % 10000L % 1000L % 100L\
    \ % 10L % 2L == 1L) {\n                                                      \
    \      if (xi >= 10000000L) {\n                                              \
    \                  if (xi % 10000000L % 1000000L % 100000L % 10000L % 1000L %\
    \ 100L % 10L % 2L == 1L) {\n                                                 \
    \                   if (xi >= 100000000L) {\n                                \
    \                                        if (xi % 100000000L % 10000000L % 1000000L\
    \ % 100000L % 10000L % 1000L % 100L % 10L % 2L == 1L) {\n                    \
    \                                                        if (xi >= 1000000000L)\
    \ {\n                                                                        \
    \        if (xi % 1000000000L % 100000000L % 10000000L % 1000000L % 100000L %\
    \ 10000L % 1000L % 100L % 10L % 2L == 1L) {\n                                \
    \                                                    if (xi >= 10000000000L) {\n\
    \                                                                            \
    \            if (xi % 10000000000L % 1000000000L % 100000000L % 10000000L % 1000000L\
    \ % 100000L % 10000L % 1000L % 100L % 10L % 2L == 1L) {\n                    \
    \                                            ", "        // TODO: Code this function\n\
    \        List<long> results = new List<long>();\n        int j;\n        for (int\
    \ i = 0; i < x.Count; i++) {\n            if (x[i] % 2 == 0) {\n             \
    \   j = Convert.ToInt32(x[i].ToString().Length);\n                for (int k =\
    \ 0; k < j; k++) {\n                    if (x[i].ToString()[k] == '2' || x[i].ToString()[k]\
    \ == '4' || x[i].ToString()[k] == '6' || x[i].ToString()[k] == '8' || x[i].ToString()[k]\
    \ == '0') {\n                        break;\n                    }\n         \
    \           if (k == j - 1) {\n                        results.Add(x[i]);\n  \
    \                  }\n                }\n            }\n            else {\n \
    \               results.Add(x[i]);\n            }\n        }\n        results.Sort();\n\
    \        return results;", "        //int[] arr = new int[x.Count];\n        List<long>\
    \ ans = new List<long>();\n        //int j = 0;\n        foreach (long i in x)\
    \ {\n            int cont = 0;\n            while (i > 0) {\n                int\
    \ z = (int)i % 10;\n                if (z % 2 == 0) {\n                    cont++;\n\
    \                }\n                i = i / 10;\n            }\n            if\
    \ (cont == 0) {\n                ans.Add(i);\n            }\n        }\n     \
    \   return ans;", '        return null;', "        return x.Where(n => \n    \
    \        n.ToString().Select(t => \n                t - '0'\n            ).All(t\
    \ => \n                t % 2 == 1\n            )\n        ).ToList();", '        return
    null;', "        HashSet<long> x_set = new HashSet<long>(x);\n        HashSet<long>\
    \ y_set = new HashSet<long>();\n        long[] y_arr = new long[x.Count];\n  \
    \      int count = 0;\n        for (int i = 0; i < x.Count; i++) {\n         \
    \   string str = x[i].ToString();\n            foreach (char c in str) {\n   \
    \             if (int.Parse(c.ToString()) % 2 == 0) {\n                    if\
    \ (x_set.Contains(x[i])) {\n                        x_set.Remove(x[i]);\n    \
    \                }\n                    if (!y_set.Contains(x[i])) {\n       \
    \                 y_set.Add(x[i]);\n                        y_arr[count] = x[i];\n\
    \                        count++;\n                    }\n                   \
    \ break;\n                }\n            }\n        }\n        return y_arr.ToList().GetRange(0,\
    \ count);", "        var ret = new List<long>();\n        foreach (var y in x)\
    \ {\n            if (EvenDigits(y)) continue;\n            ret.Add(y);\n     \
    \   }\n        ret.Sort();\n        return ret;", '        return new List<long>();',
  "        List<long> res = new List<long>();\n        foreach (long l in x) {\n \
    \           bool flag = true;\n            while (l != 0) {\n                if\
    \ ((l % 10) % 2 == 0) {\n                    flag = false;\n                 \
    \   break;\n                }\n                l /= 10;\n            }\n     \
    \       if (flag) {\n                res.Add(l);\n            }\n        }\n \
    \       res.Sort();\n        return res;", '        return x.Where(c => !c.ToString().Any(d
    => "02468".Contains(d))).OrderBy(c => c).ToList();', "        // enter your code\
    \ here\n        var ans = new List<long>();\n        foreach (var n in x) {\n\
    \            if (n.ToString().Any(c => c == '2' || c == '4' || c == '6' || c ==\
    \ '8' || c == '0')) {\n                continue;\n            }\n            ans.Add(n);\n\
    \        }\n        ans.Sort();\n        return ans;", "        List<long> result\
    \ = new List<long>();\n        foreach (long n in x) {\n            bool hasEvenDigit\
    \ = false;\n            long a = n;\n            while (a > 0) {\n           \
    \     long d = a % 10;\n                if (d % 2 == 0) {\n                  \
    \  hasEvenDigit = true;\n                    break;\n                }\n     \
    \           a /= 10;\n            }\n            if (!hasEvenDigit) {\n      \
    \          result.Add(n);\n            }\n        }\n        result.Sort();\n\
    \        return result;", "        // Write your code here\n        return new\
    \ List<long>();", "        List<long> result = new List<long>();\n        foreach\
    \ (long num in x) {\n            long remaining = num;\n            bool has_even\
    \ = false;\n            while (remaining > 0) {\n                long digit =\
    \ remaining % 10;\n                if (digit % 2 == 0) {\n                   \
    \ has_even = true;\n                    break;\n                }\n          \
    \      remaining /= 10;\n            }\n            if (!has_even) {\n       \
    \         result.Add(num);\n            }\n        }\n        result.Sort();\n\
    \        return result;", "        // Write code here, to process the list 'x'\
    \ and return the required list.\n        List<long> list = new List<long>();\n\
    \        foreach (var i in x) {\n            string str = i.ToString();\n    \
    \        bool flag = true;\n            foreach (var j in str) {\n           \
    \     if (j % 2 == 0) {\n                    flag = false;\n                 \
    \   break;\n                }\n            }\n            if (flag) {\n      \
    \          list.Add(i);\n            }\n        }\n        list.Sort();\n    \
    \    return list;", "        List<long> result = new List<long>();\n        if(x\
    \ == null || x.Count == 0) {\n            return result;\n        }\n        int\
    \ n = x.Count;\n        for(int i = 0; i < n; i++) {\n            string str =\
    \ x[i].ToString();\n            int m = str.Length;\n            bool good = true;\n\
    \            for(int j = 0; j < m; j++) {\n                if(str[j] % 2 == 0)\
    \ {\n                    good = false;\n                    break;\n         \
    \       }\n            }\n            if(good) {\n                result.Add(x[i]);\n\
    \            }\n        }\n        result.Sort();\n        return result;", '        return
    null;', "        List<long> result = new List<long>();\n        foreach (var i\
    \ in x) {\n            if (check(i)) {\n                result.Add(i);\n     \
    \       }\n        }\n        result.Sort();\n        return result;", "     \
    \   List<long> res = new List<long>();\n        foreach (long i in x) {\n    \
    \        long temp = i;\n            bool isUnique = true;\n            while\
    \ (temp > 0) {\n                long digit = temp % 10;\n                if (digit\
    \ % 2 == 0) {\n                    isUnique = false;\n                    break;\n\
    \                }\n                temp /= 10;\n            }\n            if\
    \ (isUnique) {\n                res.Add(i);\n            }\n        }\n      \
    \  res.Sort();\n        return res;", "        x.Sort();\n        List<long> result\
    \ = new List<long>();\n        for (int i = 0; i < x.Count; i++) {\n         \
    \   if (containsNoEven(x[i])) {\n                result.Add(x[i]);\n         \
    \   }\n        }\n        return result;", '        return x.Where(n => n.ToString().All(c
    => c % 2 != 0)).ToList();', "        List<long> outList = new List<long>();\n\
    \        foreach (long n in x) {\n            if (isUnique(n)) outList.Add(n);\n\
    \        }\n        outList.Sort();\n        return outList;", "        List<long>\
    \ y = new List<long>();\n        long n = x.Count;\n        long i = 0;\n    \
    \    while (i < n) {\n            long x_i = x[(int)i];\n            bool flag\
    \ = true;\n            long b = x_i;\n            while (b > 0) {\n          \
    \      long c = b % 10;\n                if (c % 2 == 0) {\n                 \
    \   flag = false;\n                    break;\n                }\n           \
    \     b = b / 10;\n            }\n            if (flag) {\n                y.Add(x_i);\n\
    \            }\n            i = i + 1;\n        }\n        y.Sort();\n       \
    \ return y;", "        List<long> l = new List<long>();\n        foreach (long\
    \ i in x) {\n            if (i % 2 != 0) {\n                l.Add(i);\n      \
    \      }\n        }\n        return l;", "        List<long> result = new List<long>();\n\
    \        int i = 0;\n        while (i < x.Count) {\n            long num = x[i];\n\
    \            bool hasEven = false;\n            while (num > 0) {\n          \
    \      if ((num % 10) % 2 == 0) {\n                    hasEven = true;\n     \
    \               break;\n                }\n                num /= 10;\n      \
    \      }\n            if (!hasEven) {\n                result.Add(x[i]);\n   \
    \         }\n            i++;\n        }\n        result.Sort();\n        return\
    \ result;", "        // Your code starts here.\n        List<long> uniqueDigits\
    \ = new List<long>();\n        foreach (long i in x) {\n            if (!i.ToString().Contains(\"\
    2\") && !i.ToString().Contains(\"4\") && !i.ToString().Contains(\"6\") && !i.ToString().Contains(\"\
    8\") && !i.ToString().Contains(\"0\")) {\n                uniqueDigits.Add(i);\n\
    \            }\n        }\n        return uniqueDigits;", "        List<long>\
    \ ans = new List<long>();\n        foreach (long elem in x) {\n            bool\
    \ isDigitUnique = true;\n            long tmp = elem;\n            while (tmp\
    \ > 0) {\n                long digit = tmp % 10;\n                if (digit %\
    \ 2 == 0) {\n                    isDigitUnique = false;\n                    break;\n\
    \                }\n                tmp /= 10;\n            }\n            if\
    \ (isDigitUnique) {\n                ans.Add(elem);\n            }\n        }\n\
    \        ans.Sort();\n        return ans;", "        return x.Where(v => !v.ToString().Any(c\
    \ => c.ToString().Any(d => d.Equals('2') || d.Equals('4') || d.Equals('6') ||\
    \ d.Equals('8')))).OrderBy(v => v).ToList();", "        // Your code here!\n \
    \       return null;", "        List<long> results = new List<long>();\n     \
    \   foreach (long n in x) {\n            bool found = false;\n            for\
    \ (long i = n; i > 0; i /= 10) {\n                if ((i % 10) % 2 == 0) {\n \
    \                   found = true;\n                    break;\n              \
    \  }\n            }\n            if (!found) {\n                results.Add(n);\n\
    \            }\n        }\n        results.Sort();\n        return results;",
  "        // Your code here\n        return null;", "        List<long> Result =\
    \ new List<long>();\n        foreach (long e in x) {\n            if (e % 2 ==\
    \ 1) {\n                Result.Add(e);\n            }\n        }\n        Result.Sort();\n\
    \        return Result;", '        return x.Where(num => num.ToString().All(ch
    => ch % 2 != 0)).OrderBy(num => num).ToList();', "        // >>> YOUR CODE HERE\
    \ <<<\n        //return null;\n        var result = new List<long>();\n      \
    \  foreach (var number in x)\n        {\n            var digits = number.ToString().ToCharArray();\n\
    \            foreach (var digit in digits)\n            {\n                if\
    \ (int.Parse(digit.ToString()) % 2 == 0)\n                {\n                \
    \    goto End;\n                }\n            }\n            result.Add(number);\n\
    \            End:;\n        }\n        result.Sort();\n        return result;",
  "        x.Sort();\n        return x.Where(n => n.ToString().All(d => d % 2 != 0)).ToList();",
  '        return null;', "        List<long> res = new List<long>();\n        foreach\
    \ (long i in x) {\n            bool ok = true;\n            while (i > 0) {\n\
    \                long d = i % 10;\n                if (d % 2 == 0) {\n       \
    \             ok = false;\n                    break;\n                }\n   \
    \             i /= 10;\n            }\n            if (ok) {\n               \
    \ res.Add(i);\n            }\n        }\n        res.Sort();\n        return res;",
  '        return new List<long>();', "        // Write your code here.\n        return\
    \ new List<long>();", "        return x.Where(y => !y.ToString().Contains(\"2\"\
    ) &&\n                            !y.ToString().Contains(\"4\") &&\n         \
    \                   !y.ToString().Contains(\"6\") &&\n                       \
    \     !y.ToString().Contains(\"8\")).ToList();", "        x.Sort();\n        var\
    \ list = new List<long>();\n        for (int i = 0; i < x.Count; i++) {\n    \
    \        if (!HasEvenDigit(x[i])) {\n                list.Add(x[i]);\n       \
    \     }\n        }\n        return list;", "        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < x.Count; i++) {\n            bool hasEvenDigit =\
    \ false;\n            long number = x[i];\n            while (number > 0) {\n\
    \                long lastDigit = number % 10;\n                if (lastDigit\
    \ % 2 == 0) {\n                    hasEvenDigit = true;\n                    break;\n\
    \                }\n                number /= 10;\n            }\n           \
    \ if (!hasEvenDigit) {\n                result.Add(x[i]);\n            }\n   \
    \     }\n        result.Sort();\n        return result;", '        return new
    List<long>();', "        List<long> output = new List<long>();\n        for (int\
    \ i = 0; i < x.Count; i++) {\n            bool tmp = true;\n            string\
    \ str = x[i].ToString();\n            for (int j = 0; j < str.Length; j++) {\n\
    \                if (str[j] == '0' || str[j] == '2' || str[j] == '4' || str[j]\
    \ == '6' || str[j] == '8') {\n                    tmp = false;\n             \
    \       break;\n                }\n            }\n            if (tmp) {\n   \
    \             output.Add(x[i]);\n            }\n        }\n        if (output.Count\
    \ == 0) return output;\n        return HeapSort(output);", "        // Replace\
    \ with your code\n        long min = 1, max = x.Max();\n        List<long> nos\
    \ = new List<long>();\n        while (min < max) {\n            long num = min;\n\
    \            while (num > 0) {\n                long digit = num % 10;\n     \
    \           if (digit % 2 == 0) {\n                    break;\n              \
    \  }\n                num /= 10;\n            }\n            if (num == 0) {\n\
    \                nos.Add(min);\n            }\n            min++;\n        }\n\
    \        List<long> ans = new List<long>();\n        foreach (long num in x) {\n\
    \            if (nos.Contains(num)) {\n                ans.Add(num);\n       \
    \     }\n        }\n        ans.Sort();\n        return ans;", "        List<long>\
    \ res = new List<long>();\n        foreach (var i in x) {\n            if (i.ToString().Any(c\
    \ => c % 2 == 0)) continue;\n            res.Add(i);\n        }\n        res.Sort();\n\
    \        return res;", "        List<long> res = new List<long>();\n        for\
    \ (int i = 0; i < x.Count; i++) {\n            string num = x[i].ToString();\n\
    \            bool isUnique = true;\n            for (int j = 0; j < num.Length;\
    \ j++) {\n                if (int.Parse(num[j].ToString()) % 2 == 0) {\n     \
    \               isUnique = false;\n                    break;\n              \
    \  }\n            }\n            if (isUnique) {\n                res.Add(x[i]);\n\
    \            }\n        }\n        res.Sort();\n        return res;", "      \
    \  var uniqueDigits = new List<long>();\n        foreach (var item in x) {\n \
    \           if (IsUniqueDigits(item)) {\n                uniqueDigits.Add(item);\n\
    \            }\n        }\n        uniqueDigits.Sort();\n        return uniqueDigits;",
  "        return x.FindAll(y => y.ToString().ToCharArray().All(c => c - '0' % 2 ==\
    \ 1));", "        var result = new List<long>();\n        foreach (var i in x)\
    \ {\n            var anyEven = false;\n            var val = i;\n            while\
    \ (val > 0) {\n                if ((val % 10) % 2 == 0) {\n                  \
    \  anyEven = true;\n                    break;\n                }\n          \
    \      val /= 10;\n            }\n            if (!anyEven) {\n              \
    \  result.Add(i);\n            }\n        }\n        result.Sort();\n        return\
    \ result;", "        return x.Where(n => n < 10 || n % 2 != 0 && n % 5 != 0)\n\
    \                .OrderBy(n => n)\n                .ToList();", "        var res\
    \ = new List<long>();\n        var buf = new List<char>();\n        foreach (var\
    \ i in x) {\n            buf.Clear();\n            var j = i;\n            while\
    \ (j > 0) {\n                buf.Add((char)('0' + (j % 10)));\n              \
    \  j /= 10;\n            }\n            if (buf.Any(c => c == '0' || c == '2'\
    \ || c == '4' || c == '6' || c == '8')) {\n                continue;\n       \
    \     }\n            res.Add(i);\n        }\n        res.Sort();\n        return\
    \ res;", "        List<long> res = new List<long>();\n        for (int i = 0;\
    \ i < x.Count; i++) {\n            string s = x[i].ToString();\n            bool\
    \ found = false;\n            for (int j = 0; j < s.Length; j++) {\n         \
    \       if (s[j] == '0' || s[j] == '2' || s[j] == '4' || s[j] == '6' || s[j] ==\
    \ '8') {\n                    found = true;\n                    break;\n    \
    \            }\n            }\n            if (!found) {\n                res.Add(x[i]);\n\
    \            }\n        }\n        res.Sort();\n        return res;", "      \
    \  var res = new List<long>();\n        foreach (var item in x) {\n          \
    \  var is_unique = true;\n            while (item > 0) {\n                var\
    \ digit = item % 10;\n                if (digit % 2 == 0) {\n                \
    \    is_unique = false;\n                    break;\n                }\n     \
    \           item /= 10;\n            }\n            if (is_unique) {\n       \
    \         res.Add(item);\n            }\n        }\n        res.Sort();\n    \
    \    return res;", "        List<long> result = new List<long>();\n        foreach\
    \ (long l in x) {\n            if (IsUniqueDigits(l)) {\n                result.Add(l);\n\
    \            }\n        }\n        result.Sort();\n        return result;", " \
    \       List<long> result = new List<long>();\n        foreach (long n in x) {\n\
    \            bool unique = true;\n            while (n > 0) {\n              \
    \  if ((n % 10) % 2 == 0) {\n                    unique = false;\n           \
    \         break;\n                }\n                n /= 10;\n            }\n\
    \            if (unique) {\n                result.Add(n);\n            }\n  \
    \      }\n        result.Sort();\n        return result;", "        List<long>\
    \ ret = new List<long>();\n        int cnt = 0;\n        for (int i = 0; i < x.Count;\
    \ i++) {\n            long num = x[i];\n            bool flag = true;\n      \
    \      while (num > 0) {\n                if ((num % 10) % 2 == 0) {\n       \
    \             flag = false;\n                    break;\n                }\n \
    \               num /= 10;\n            }\n            if (flag) {\n         \
    \       ret.Add(x[i]);\n            }\n        }\n        ret.Sort();\n      \
    \  return ret;", '        throw new NotImplementedException();', "        var\
    \ result = new List<long>();\n        foreach (var item in x) {\n            if\
    \ (IsUniqueDigits(item)) {\n                result.Add(item);\n            }\n\
    \        }\n        result.Sort();\n        return result;", "        // Ref:\
    \ https://stackoverflow.com/questions/4200254/how-to-determine-if-a-string-contains-a-numeric-value-in-c-sharp\n\
    \        Func<string, bool> hasEvenDigit = (string input) => {\n            //\
    \ Look for at least one even digit\n            foreach (char c in input) {\n\
    \                if (char.IsDigit(c) && (c - '0') % 2 == 0)\n                \
    \    return true;\n            }\n            return false;\n        };\n    \
    \    var result = x.Where(e => !hasEvenDigit(e.ToString())).OrderBy(e => e).ToList();\n\
    \        return result;", "        var res = new List<long>();\n        foreach\
    \ (var elem in x) {\n            if (elem.ToString().Any(ch => ch % 2 == 0)) {\n\
    \                continue;\n            }\n            res.Add(elem);\n      \
    \  }\n        res.Sort();\n        return res;", '        return x.Where(n =>
    n < 10 || n % 10 != 0 && n % 10 != 2 && n % 10 != 4 && n % 10 != 6 && n % 10 !=
    8).ToList();', "        var result = new List<long>();\n        foreach (var i\
    \ in x) {\n            if (is_unique(i)) {\n                result.Add(i);\n \
    \           }\n        }\n        result.Sort();\n        return result;", " \
    \       List<long> oddList = new List<long>();\n        for (int i = 0; i < x.Count;\
    \ i++) {\n            List<long> list = new List<long>();\n            long number\
    \ = x[i];\n            while (number > 0) {\n                list.Add(number %\
    \ 10);\n                number /= 10;\n            }\n            int counter\
    \ = 0;\n            for (int j = 0; j < list.Count; j++) {\n                if\
    \ (list[j] % 2 == 0) {\n                    counter++;\n                }\n  \
    \          }\n            if (counter == 0) {\n                oddList.Add(x[i]);\n\
    \            }\n        }\n        oddList.Sort();\n        return oddList;",
  "        // Your code here\n        return null;", "        List<long> ans = new\
    \ List<long>();\n        foreach (long i in x) {\n            int[] digits = i.ToString().Select(d\
    \ => (int)Char.GetNumericValue(d)).ToArray();\n            if (digits.Where(d\
    \ => d % 2 == 0).Count() == 0) {\n                ans.Add(i);\n            }\n\
    \        }\n        ans.Sort();\n        return ans;", "        List<long> output\
    \ = new List<long>();\n        foreach (long item in x) {\n            if (!x.Any(x=>(x.ToString().Contains(\"\
    2\")) || (x.ToString().Contains(\"4\")) || (x.ToString().Contains(\"6\")) || (x.ToString().Contains(\"\
    8\")))) {\n                output.Add(item);\n            }\n        }\n     \
    \   return output;", "        // Write your code here\n        // To print results\
    \ to the standard output you can use Console.WriteLine()\n        // Example:\
    \ Console.WriteLine(\"Hello world!\");\n        return null;", "        var y\
    \ = new List<long>();\n        foreach (var n in x) {\n            var w = n;\n\
    \            while (w > 0) {\n                if ((w % 10) % 2 == 0) {\n     \
    \               y.Add(n);\n                    break;\n                }\n   \
    \             w /= 10;\n            }\n        }\n        y.Sort();\n        return\
    \ y;", "        // Fill your code here.\n        List<long> unique = new List<long>();\n\
    \        //bool check = false;\n        foreach (long number in x) {\n       \
    \     if (UniqueDigitsCheck(number)) {\n                unique.Add(number);\n\
    \            }\n        }\n        return unique;", '        return x.Where(n
    => n % 2 != 0 && n % 5 != 0).ToList();', '        return null;', "        List<long>\
    \ r = new List<long>();\n        foreach (long v in x) {\n            if (!HasEvenDigit(v))\
    \ {\n                r.Add(v);\n            }\n        }\n        r.Sort();\n\
    \        return r;", "        // Your code here.\n        return null;", "   \
    \     // Your solution goes here.\n        // TODO: Implement UniqueDigits, returning\
    \ a sorted list of\n        //       all elements that hasn't any even digit.\n\
    \        return null;", '        throw new NotImplementedException();', "    \
    \    List<long> ret = new List<long>();\n        foreach (long y in x) {\n   \
    \         string ystr = y.ToString();\n            bool ok = true;\n         \
    \   foreach (char z in ystr) {\n                if (z == '0' || z == '2' || z\
    \ == '4' || z == '6' || z == '8') {\n                    ok = false;\n       \
    \             break;\n                }\n            }\n            if (ok) ret.Add(y);\n\
    \        }\n        ret.Sort();\n        return ret;", "        var ans = new\
    \ List<long>();\n        foreach (var v in x) {\n            bool flag = true;\n\
    \            var d = v;\n            while (d > 0) {\n                if (d %\
    \ 2 == 0) {\n                    flag = false;\n                    break;\n \
    \               }\n                d /= 10;\n            }\n            if (flag)\
    \ {\n                ans.Add(v);\n            }\n        }\n        ans.Sort();\n\
    \        return ans;", "        var result = new List<long>();\n        foreach\
    \ (var i in x) {\n            if (i.ToString().Any(c => \"02468\".Contains(c)))\n\
    \                continue;\n            result.Add(i);\n        }\n        result.Sort();\n\
    \        return result;", "        var uniqueDigits = new List<long>();\n    \
    \    foreach (var y in x) {\n            var digits = new List<long>();\n    \
    \        var z = y;\n            while (z > 0) {\n                digits.Add(z\
    \ % 10);\n                z /= 10;\n            }\n            if (digits.All(a\
    \ => a % 2 != 0)) {\n                uniqueDigits.Add(y);\n            }\n   \
    \     }\n        uniqueDigits.Sort();\n        return uniqueDigits;", "      \
    \  List<long> uniqueDigits = new List<long>();\n        foreach (long i in x)\
    \ {\n            bool shouldAdd = true;\n            while (i > 0) {\n       \
    \         if (i % 2 == 0) {\n                    shouldAdd = false;\n        \
    \            break;\n                }\n                i /= 10;\n           \
    \ }\n            if (shouldAdd) {\n                uniqueDigits.Add(i);\n    \
    \        }\n        }\n        uniqueDigits.Sort();\n        return uniqueDigits;",
  "        HashSet<long> allEven = new HashSet<long>();\n        allEven.Add(0);\n\
    \        allEven.Add(2);\n        allEven.Add(4);\n        allEven.Add(6);\n \
    \       allEven.Add(8);\n        List<long> results = new List<long>();\n    \
    \    foreach (long num in x) {\n            bool allDigitsUnique = true;\n   \
    \         for (long quotient = num; quotient > 0; quotient /= 10) {\n        \
    \        long digit = quotient % 10;\n                if (allEven.Contains(digit))\
    \ {\n                    allDigitsUnique = false;\n                    break;\n\
    \                }\n            }\n            if (allDigitsUnique) {\n      \
    \          results.Add(num);\n            }\n        }\n        results.Sort();\n\
    \        return results;", "        // Code here\n        return x;", "      \
    \  var s = x.Where(i => i.ToString().ToCharArray().All(c => c % 2 != 0)).ToList();\n\
    \        s.Sort();\n        return s;", "        // Fill in the following code.\n\
    \        List<long> uniqueDigits = new List<long>();\n        foreach (long number\
    \ in x) {\n            bool hasEvenDigit = false;\n            foreach (char c\
    \ in number.ToString()) {\n                if (c == '0' || c == '2' || c == '4'\
    \ || c == '6' || c == '8') {\n                    hasEvenDigit = true;\n     \
    \               break;\n                }\n            }\n            if (!hasEvenDigit)\
    \ {\n                uniqueDigits.Add(number);\n            }\n        }\n   \
    \     return uniqueDigits;", "        // your code goes here.\n        return\
    \ x;", "        x.Sort();\n        var l = new List<long>();\n        foreach\
    \ (var i in x) {\n            var f = false;\n            var n = i;\n       \
    \     while (n > 0) {\n                if ((n % 10) % 2 == 0) {\n            \
    \        f = true;\n                    break;\n                }\n          \
    \      n /= 10;\n            }\n            if (!f) {\n                l.Add(i);\n\
    \            }\n        }\n        return l;", "        // Your code goes here\n\
    \        // return new List<long>();\n        List<long> ret = new List<long>();\n\
    \        foreach (long i in x) {\n            string str = i.ToString();\n   \
    \         bool passed = true;\n            foreach (char c in str) {\n       \
    \         if (c == '0' || c == '2' || c == '4' || c == '6' || c == '8') {\n  \
    \                  passed = false;\n                    break;\n             \
    \   }\n            }\n            if (passed) {\n                ret.Add(i);\n\
    \            }\n        }\n        ret.Sort();\n        return ret;", "      \
    \  List<long> ans = new List<long>();\n        foreach (long n in x) {\n     \
    \       if (!HasEvenDigit(n)) {\n                ans.Add(n);\n            }\n\
    \        }\n        ans.Sort();\n        return ans;", "        return x.Where(y\
    \ => !y.ToString().Any(c => (c=='2') || (c=='4') || (c=='6') || (c=='8') || (c=='0'))).ToList();",
  '        return x;', "    }\n    // You've been given a list of integers nums and\
    \ you must return \n    // a list of integers out. Each element of out should\
    \ be the \n    // sum of the corresponding element in nums plus the corresponding\
    \ \n    // element of other list, if any.\n    // For example:\n    // >>> NestedListSum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<List<long>>(new\
    \ List<long>[]{(new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)6L, (long)8L, (long)10L}))\n\
    \    // >>> NestedListSum((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})),\
    \ (new List<List<long>>(new List<long>[]{(new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L})), (new List<long>(new long[]{(long)5L, (long)4L, (long)3L,\
    \ (long)2L})), (new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)3L,\
    \ (long)2L}))})))\n    // (new List<long>(new long[]{(long)7L, (long)9L, (long)11L,\
    \ (long)10L, (long)12L, (long)14L}))\n    public static List<long> NestedListSum(List<long>\
    \ nums, List<", '        throw new NotImplementedException();', "        List<long>\
    \ ans = new List<long>();\n        foreach (long i in x) {\n            if (!hasEvenDigit(i))\
    \ {\n                ans.Add(i);\n            }\n        }\n        ans.Sort();\n\
    \        return ans;", '        return new List<long>();', '        return null;',
  "    }\n}\n\nclass Test {\n    static void Main() {\n        List<long> x = new\
    \ List<long>(new long[]{1L, 15L, 33L, 1422L});\n        List<long> expected =\
    \ new List<long>(new long[]{1L, 15L, 33L});\n        var actual = Problem.UniqueDigits(x);\n\
    \        if (actual == null || actual.Count != expected.Count) {\n           \
    \ Console.WriteLine(\"Error: Actual values = '{0}', Expected = '{1}'\",\n    \
    \                          (actual == null ? \"null\" : String.Join(\", \", actual)),\n\
    \                              String.Join(\", \", expected));\n        } else\
    \ {\n            var cnt = actual.Count;\n            for (var i = 0; i < cnt;\
    \ i++) {\n                if (actual[i] != expected[i]) {\n                  \
    \  Console.WriteLine(\"Error: At index {0} Actual values = '{1}', Expected = '{2}'\"\
    ,\n                                      i, actual[i], expected[i]);\n       \
    \         }\n            }\n        }", "        var y = new List<long>();\n \
    \       foreach (var num in x) {\n            if (ContainsEvenDigit(num)) {\n\
    \                continue;\n            }\n            y.Add(num);\n        }\n\
    \        y.Sort();\n        return y;", "        return x.Where(n => !n.ToString().Contains(\"\
    2\") &&\n            !n.ToString().Contains(\"4\") &&\n            !n.ToString().Contains(\"\
    6\") &&\n            !n.ToString().Contains(\"8\") &&\n            !n.ToString().Contains(\"\
    0\")).ToList();", "        List<long> uniqueDigits = new List<long>();\n     \
    \   foreach (var val in x) {\n            bool isDigitUnique = true;\n       \
    \     foreach (var digit in val.ToString()) {\n                if (digit == '2'\
    \ || digit == '4' || digit == '6' || digit == '8' || digit == '0') {\n       \
    \             isDigitUnique = false;\n                    break;\n           \
    \     }\n            }\n            if (isDigitUnique) {\n                uniqueDigits.Add(val);\n\
    \            }\n        }\n        return uniqueDigits.OrderBy(c => c).ToList();",
  "        if (x == null)\n            throw new ArgumentNullException();\n      \
    \  if (x.Count == 0)\n            return new List<long>();\n        List<long>\
    \ ret = new List<long>();\n        for (int i = 0; i < x.Count; i++) {\n     \
    \       if (x[i] < 0)\n                throw new ArgumentOutOfRangeException();\n\
    \            if (x[i] == 0)\n                continue;\n            bool add =\
    \ true;\n            while (x[i] > 0) {\n                if ((x[i] % 10) % 2 ==\
    \ 0) {\n                    add = false;\n                    break;\n       \
    \         }\n                x[i] /= 10;\n            }\n            if (add)\n\
    \                ret.Add(x[i]);\n        }\n        ret.Sort();\n        return\
    \ ret;", "        List<long> result = new List<long>();\n        // Your code\
    \ here\n        return result;", '        throw new NotImplementedException();',
  '        return x.Where(i => String.Join("",i.ToString().Select(c => c.ToString())).All(c
    => c != "0" && c != "2" && c != "4" && c != "6" && c != "8")).ToList();', '        return
    x.Where(v => !(v.ToString().Any(c => "02468".Contains(c)))).OrderBy(v => v).ToList();',
  "        int index = 0;\n        bool isSorted = false;\n        int counter = 0;\n\
    \        bool isUnique = true;\n        bool isEven = false;\n        bool isOnlyOddDigits\
    \ = true;\n        bool isUniqueNumber = true;\n        bool isDigitUnique = true;\n\
    \        int number = 0;\n        int digitsCount = 0;\n        int digitsNumber\
    \ = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int\
    \ digit = 0;\n        int[] digits = new int[10000];\n        int[] uniqueDigits\
    \ = new int[100];\n        int uniqueDigitsCount = 0;\n        int uniqueDigitsIndex\
    \ = 0;\n        while (!isSorted) {\n            index = 0;\n            while\
    \ (index < x.Count - 1) {\n                if (x[index] > x[index + 1]) {\n  \
    \                  number = x[index];\n                    x[index] = x[index\
    \ + 1];\n                    x[index + 1] = number;\n                }\n     \
    \           index++;\n            }\n            isSorted = true;\n          \
    \  index = 0;\n            while (index < x.Count - 1) {\n                if (x[index]\
    \ > x[index + 1]) {\n                    isSorted = false;\n                }\n\
    \                index++;\n            }\n        }\n        index = 0;\n    \
    \    while (index < x.Count) {\n            number = x[index];\n            digitsCount\
    \ = 0;\n            while (number > 0) {\n                digit = number % 10;\n\
    \                number = number / 10;\n                digits[digitsCount] =\
    \ digit;\n                digitsCount++;\n            }\n            isOnlyOddDigits\
    \ = true;\n            i = 0;\n            while (i < digitsCount) {\n       \
    \         if (digits[i] % 2 == 0) {\n                    isOnlyOddDigits = false;\n\
    \                }\n                i++;\n            }\n            if (!isOnlyOddDigits)\
    \ {\n                x.RemoveAt(index);\n            } else {\n              \
    \  index++;\n            }\n        }\n        return x;", "        List<long>\
    \ results = new List<long>();\n        foreach (long i in x) {\n            if\
    \ (HasEvenDigit(i)) {\n                continue;\n            }\n            results.Add(i);\n\
    \        }\n        return results;", "        List<long> arr = new List<long>();\n\
    \        for (int i = 0; i < x.Count; i++) {\n            if (!x[i].ToString().Contains(\"\
    2\") && !x[i].ToString().Contains(\"4\") && !x[i].ToString().Contains(\"6\") &&\
    \ !x[i].ToString().Contains(\"8\") && !x[i].ToString().Contains(\"0\")) {\n  \
    \              arr.Add(x[i]);\n            }\n        }\n        arr.Sort();\n\
    \        return arr;", "        // Write your code here...\n        var result\
    \ = new List<long>();\n        foreach (var i in x) {\n            if (i.ToString().Any(c\
    \ => c % 2 == 0)) {\n                continue;\n            }\n            result.Add(i);\n\
    \        }\n        result.Sort();\n        return result;", "        var list\
    \ = new List<long>();\n        foreach (var i in x) {\n            var digits\
    \ = i.ToString().ToList();\n            if (digits.Any(d => d == '0' || d == '2'\
    \ || d == '4' || d == '6' || d == '8')) {\n                continue;\n       \
    \     }\n            list.Add(i);\n        }\n        list.Sort();\n        return\
    \ list;", "        var result = new List<long>();\n        foreach (var num in\
    \ x) {\n            if (UniqueDigits(num)) {\n                result.Add(num);\n\
    \            }\n        }\n        result.Sort();\n        return result;", " \
    \       // Your code here\n        return new List<long>();", "        List<long>\
    \ y = new List<long>();\n        foreach (long z in x) {\n            long zz\
    \ = z;\n            while (zz > 0) {\n                long dig = zz % 10;\n  \
    \              if (dig % 2 == 0) {\n                    goto next;\n         \
    \       }\n                zz /= 10;\n            }\n            y.Add(z);\n \
    \           next:\n            continue;\n        }\n        y.Sort();\n     \
    \   return y;", "        // Your code goes here\n        return x;", "       \
    \ // Write your code here\n        List<long> result = new List<long>();\n   \
    \     foreach (long i in x) {\n            result.Add(i);\n        }\n       \
    \ return result;", "        var result = new List<long>();\n        foreach (var\
    \ item in x) {\n            if (item.ToString().ToCharArray().All(ch => ch % 2\
    \ != 0)) {\n                result.Add(item);\n            }\n        }\n    \
    \    result.Sort();\n        return result;", '        return (new List<long>());',
  "        // Write code here\n        // Return the answer\n        List<long> unique\
    \ = new List<long>();\n        for (int i = 0; i < x.Count; i++) {\n         \
    \   string xStr = x[i].ToString();\n            bool isUnique = true;\n      \
    \      for (int j = 0; j < xStr.Length; j++) {\n                if (xStr[j] ==\
    \ '0' || xStr[j] == '2' || xStr[j] == '4' || xStr[j] == '6' || xStr[j] == '8')\
    \ {\n                    isUnique = false;\n                    break;\n     \
    \           }\n            }\n            if (isUnique) {\n                unique.Add(x[i]);\n\
    \            }\n        }\n        unique.Sort();\n        return unique;", " \
    \       // your code here\n        return new List<long>();", '        return
    x.Where(v => !v.ToString().Contains("2") && !v.ToString().Contains("4") && !v.ToString().Contains("6")
    && !v.ToString().Contains("8") && !v.ToString().Contains("0")).OrderBy(v => v).ToList();',
  "        List<long> l = new List<long>();\n        foreach (long i in x) {\n   \
    \         bool b = true;\n            foreach (char c in i.ToString()) {\n   \
    \             if (c == '0' || c == '2' || c == '4' || c == '6' || c == '8') {\n\
    \                    b = false;\n                    break;\n                }\n\
    \            }\n            if (b) l.Add(i);\n        }\n        l.Sort();\n \
    \       return l;", "        List<long> y = new List<long>();\n        foreach\
    \ (long n in x) {\n            long n_tmp = n;\n            bool unique = true;\n\
    \            while (n_tmp > 0) {\n                long digit = n_tmp % 10;\n \
    \               if (digit % 2 == 0) {\n                    unique = false;\n \
    \                   break;\n                }\n                n_tmp /= 10;\n\
    \            }\n            if (unique) {\n                y.Add(n);\n       \
    \     }\n        }\n        y.Sort();\n        return y;", '        return x.Where(y
    => !HasEvenDigit(y)).ToList();', '        return x.Where(v => !hasEvenDigit(v)).OrderBy(v
    => v).ToList();', "        List<long> res = new List<long>();\n        for (int\
    \ i = 0; i < x.Count; i++) {\n            int ok = 1;\n            for (int j\
    \ = 0; j < GetNumDigits(x[i]); j++) {\n                if (GetDigit(x[i], j) %\
    \ 2 == 0) {\n                    ok = 0;\n                    break;\n       \
    \         }\n            }\n            if (ok == 1) {\n                res.Add(x[i]);\n\
    \            }\n        }\n        for (int i = 0; i < res.Count; i++) {\n   \
    \         for (int j = i; j < res.Count; j++) {\n                if (res[i] >\
    \ res[j]) {\n                    long temp = res[i];\n                    res[i]\
    \ = res[j];\n                    res[j] = temp;\n                }\n         \
    \   }\n        }\n        return res;", "        List<long> result = new List<long>();\n\
    \        // Implement this function!\n        return result;", "        // Write\
    \ your code here\n        return x;", "        List<long> r = new List<long>();\n\
    \        foreach (long n in x) {\n            if (n.ToString().Any(c => c.Equals('2')\
    \ || c.Equals('4') || c.Equals('6') || c.Equals('8')))\n                continue;\n\
    \            r.Add(n);\n        }\n        return r;", "        // TODO: Input\
    \ checking\n        return (from a in x\n                where (int)Math.Log10(a)\
    \ + 1 ==\n                      (from b in a.ToString()\n                    \
    \   where b % 2 == 1\n                       select b).Count()\n             \
    \   orderby a\n                select a).ToList();", "        // Your code here\n\
    \        return null;", "        x.Sort();\n        List<long> ret = new List<long>();\n\
    \        foreach (long k in x) {\n            if (HasEvenDigit(k)) {\n       \
    \         ret.Add(k);\n            }\n        }\n        return ret;", '        return
    x.Where(z => z.ToString().Any(c => c.ToString().Equals("3"))).ToList();', "  \
    \      List<long> res = new List<long>();\n        for (int i = 0; i < x.Count;\
    \ i++) {\n            if (!HasEvenDigit(x[i])) {\n                res.Add(x[i]);\n\
    \            }\n        }\n        res.Sort();\n        return res;", "      \
    \  List<long> result = new List<long>();\n        foreach (var n in x) {\n   \
    \         string s = n.ToString();\n            bool isUnique = true;\n      \
    \      foreach (var c in s) {\n                if (c % 2 == 0) {\n           \
    \         isUnique = false;\n                    break;\n                }\n \
    \           }\n            if (isUnique) result.Add(n);\n        }\n        result.Sort();\n\
    \        return result;", "        var t = (from v in x where !(from c in v.ToString()\
    \ select c).Any(c => (c == '2') || (c == '4') || (c == '6') || (c == '8')) select\
    \ v).ToList();\n        t.Sort();\n        return t;", "        List<long> res\
    \ = new List<long>();\n        foreach (long y in x) {\n            if (!y.ToString().Contains(\"\
    2\") && !y.ToString().Contains(\"4\") && !y.ToString().Contains(\"6\") && !y.ToString().Contains(\"\
    8\") && !y.ToString().Contains(\"0\")) {\n                res.Add(y);\n      \
    \      }\n        }\n        res.Sort();\n        return res;", "        var res\
    \ = new List<long>();\n        foreach (var xi in x) {\n            if (!HasEvenDigit(xi))\
    \ {\n                res.Add(xi);\n            }\n        }\n        return res;",
  "        // Your code goes here\n        return new List<long>();", "        List<long>\
    \ z = new List<long>();\n        for (int i = 0; i < x.Count; i++) {\n       \
    \     string s = x[i].ToString();\n            int l = s.Length;\n           \
    \ bool isUnique = true;\n            for (int j = 0; j < l; j++) {\n         \
    \       if (s[j] == '0' || s[j] == '2' || s[j] == '4' || s[j] == '6' || s[j] ==\
    \ '8') {\n                    isUnique = false;\n                    break;\n\
    \                }\n            }\n            if (isUnique) {\n             \
    \   z.Add(x[i]);\n            }\n        }\n        z.Sort();\n        return\
    \ z;", "        long[] y = new long[x.Count];\n        long n = 0;\n        foreach\
    \ (long e in x) {\n            if (UniqueDigits(e)) {\n                y[n] =\
    \ e;\n                n++;\n            }\n        }\n        Array.Sort(y, 0,\
    \ n);\n        List<long> result = new List<long>();\n        for (long i = 0;\
    \ i < n; i++) {\n            result.Add(y[i]);\n        }\n        return result;",
  "        // TODO: fill this function (see the test cases below to find the correct\
    \ return value)\n        List<long> result = new List<long>();\n        bool isUnique\
    \ = true;\n        foreach (long number in x) {\n            while (number > 0)\
    \ {\n                if (number % 2 == 0) {\n                    isUnique = false;\n\
    \                    break;\n                }\n                number /= 10;\n\
    \            }\n            if (isUnique) {\n                result.Add(number);\n\
    \            }\n            isUnique = true;\n        }\n        result.Sort();\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     for (int i = 0; i < x.Count; i++) {\n            bool hasEvenDigit = false;\n\
    \            long n = x[i];\n            while (n > 0) {\n                long\
    \ r = n % 10;\n                if (r % 2 == 0) {\n                    hasEvenDigit\
    \ = true;\n                    break;\n                }\n                n /=\
    \ 10;\n            }\n            if (!hasEvenDigit)\n                result.Add(x[i]);\n\
    \        }\n        result.Sort();\n        return result;", '        return new
    List<long>();', '        return x.Where(k => !k.ToString().Any(l => l % 2 == 0)).ToList();',
  '        // Write your code here', '        return new List<long>();', "       \
    \ List<long> res = new List<long>();\n        for (int i = 0; i < x.Count; i++)\
    \ {\n            long d = x[i];\n            bool containEven = false;\n     \
    \       while (d > 0) {\n                if ((d % 10) % 2 == 0) {\n          \
    \          containEven = true;\n                    break;\n                }\n\
    \                d /= 10;\n            }\n            if (!containEven) {\n  \
    \              res.Add(x[i]);\n            }\n        }\n        res.Sort();\n\
    \        return res;", "        List<long> digits = new List<long>();\n      \
    \  for (int i = 0; i < x.Count; i++) {\n            bool odd = true;\n       \
    \     for (int j = 0; j < x[i].ToString().Length; j++) {\n                if (x[i].ToString()[j]\
    \ % 2 == 0) {\n                    odd = false;\n                    break;\n\
    \                }\n            }\n            if (odd) {\n                digits.Add(x[i]);\n\
    \            }\n        }\n        if (digits.Count == 0) {\n            return\
    \ new List<long>();\n        }\n        return digits.OrderBy(i => i).ToList();",
  "        List<long> ret = new List<long>();\n        foreach (long a in x) {\n \
    \           if (isUnique(a)) {\n                ret.Add(a);\n            }\n \
    \       }\n        ret.Sort();\n        return ret;", "        List<long> res\
    \ = new List<long>();\n        x.ForEach(n => {\n            if (n.ToString().ToCharArray().All(c\
    \ => c % 2 != 0)) {\n                res.Add(n);\n            }\n        });\n\
    \        res.Sort();\n        return res;", "        if (x == null) {\n      \
    \      throw new ArgumentNullException();\n        }\n        List<long> uniqueDigits\
    \ = new List<long>();\n        foreach (long y in x) {\n            bool hasEvenDigit\
    \ = false;\n            while (y > 0) {\n                long digit = y % 10;\n\
    \                if (digit % 2 == 0) {\n                    hasEvenDigit = true;\n\
    \                    break;\n                }\n                y /= 10;\n   \
    \         }\n            if (!hasEvenDigit) {\n                uniqueDigits.Add(y);\n\
    \            }\n        }\n        return uniqueDigits;", "    // Write your code\
    \ here.\n        List<long> ans = new List<long>();\n        if (x.Count > 0)\
    \ {\n            for (int i = 0; i < x.Count; i++) {\n                bool flag\
    \ = true;\n                long temp = x[i];\n                while (temp > 0)\
    \ {\n                    if (temp % 2 == 0) {\n                        flag =\
    \ false;\n                        break;\n                    }\n            \
    \        temp /= 10;\n                }\n                if (flag) ans.Add(x[i]);\n\
    \            }\n            ans.Sort();\n        }\n        return ans;", '        return
    new List<long>();', "        // Write your code here.\n        return null;",
  "        List<long> res = new List<long>();\n        foreach (long el in x) {\n\
    \            if (el < 10) {\n                res.Add(el);\n            } else\
    \ {\n                while (el > 0) {\n                    if (el % 2 == 0) {\n\
    \                        break;\n                    }\n                    el\
    \ /= 10;\n                }\n                if (el == 0) {\n                \
    \    res.Add(el);\n                }\n            }\n        }\n        res.Sort();\n\
    \        return res;", "        List<long> ans = new List<long>();\n        x.ForEach(i\
    \ => {\n            var e = i.ToString().Where(j => j % 2 == 1).ToArray();\n \
    \           if (e.Length == i.ToString().Length)\n                ans.Add(i);\n\
    \        });\n        return ans.OrderBy(i => i).ToList();", "        var l =\
    \ new List<long>();\n        foreach (var k in x) {\n            var e = false;\n\
    \            foreach (var d in k.ToString()) {\n                if (d % 2 == 0)\
    \ {\n                    e = true;\n                    break;\n             \
    \   }\n            }\n            if (!e) l.Add(k);\n        }\n        l.Sort();\n\
    \        return l;", '        throw new NotImplementedException();', '        throw
    new NotImplementedException();', "        List<long> res = new List<long>();\n\
    \        int i = 0;\n        while (i < x.Count) {\n            long c = x[i];\n\
    \            bool le = true;\n            while (c > 0) {\n                long\
    \ d = c % 10;\n                if (d % 2 == 0) {\n                    le = false;\n\
    \                    break;\n                }\n                c /= 10;\n   \
    \         }\n            if (le) {\n                res.Add(x[i]);\n         \
    \   }\n            i++;\n        }\n        res.Sort();\n        return res;",
  "        // Your answer here\n        return x;", "        List<long> res = new\
    \ List<long>();\n        for (int i = 0; i < x.Count; i++) {\n            int\
    \ d = 0;\n            long n = x[i];\n            while (n > 0) {\n          \
    \      d = (int)(n % 10);\n                if (d % 2 == 0) {\n               \
    \     break;\n                }\n                n = n / 10;\n            }\n\
    \            if (n == 0) {\n                res.Add(x[i]);\n            }\n  \
    \      }\n        res.Sort();\n        return res;", "        List<long> ret =\
    \ new List<long>();\n        if (x == null) {\n            return ret;\n     \
    \   }\n        x.Sort();\n        long p = 1;\n        foreach (long i in x) {\n\
    \            if (i >= 0) {\n                if ((i % 2) != 0) {\n            \
    \        int dig = 1;\n                    while (i > 0) {\n                 \
    \       if ((i % 10) % 2 == 0) {\n                            dig = 0;\n     \
    \                       break;\n                        }\n                  \
    \      i /= 10;\n                    }\n                    if (dig == 1) {\n\
    \                        ret.Add(p);\n                    }\n                }\n\
    \            }\n            p++;\n        }\n        return ret;", "        List<long>\
    \ solution = new List<long>();\n        foreach (long l in x) {\n            if\
    \ (l.ToString().Any(c => c == '0' || c == '2' || c == '4' || c == '6' || c ==\
    \ '8')) {\n                continue;\n            }\n            solution.Add(l);\n\
    \        }\n        solution.Sort();\n        return solution;"]
stop_tokens:
- "\n    }\n"
