name: HumanEval_18_how_many_times
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Find how many times a given substring can be found in the original\
  \ string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n  \
  \  // (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>>\
  \ HowManyTimes((\"aaaa\"), (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string\
  \ str, string substring) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
  \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) ==\
  \ (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
  \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
  }\n"
completions: ["        long result = 0;\n        int substringLen = substring.Length;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            if (substring ==\
    \ str.Substring(i, substringLen)) {\n                result++;\n            }\n\
    \        }\n        return result;", "        Debug.Assert(str != null);\n   \
    \     Debug.Assert(substring != null);\n        int lenStr = str.Length;\n   \
    \     int lenSubstring = substring.Length;\n        long ans = 0;\n        for\
    \ (int i = 0; i + lenSubstring <= lenStr; i++) {\n            if (str.Substring(i,\
    \ lenSubstring) == substring) {\n                ans++;\n            }\n     \
    \   }\n        return ans;", '        return str.Split(new string[] { substring
    }, StringSplitOptions.None).Length - 1;', "        long res = 0;\n        int\
    \ lastFound = -1;\n        while (true) {\n            lastFound = str.IndexOf(substring,\
    \ lastFound + 1);\n            if (lastFound == -1) break;\n            res++;\n\
    \        }\n        return res;", "        // >>> str.Substring(0, 1)\n      \
    \  // 'a'\n        // >>> str.Substring(1, 1)\n        // 'a'\n        // >>>\
    \ str.Substring(2, 1)\n        // 'a'\n        long times = 0;\n        int length_substring\
    \ = substring.Length;\n        for (int i = 0; i <= str.Length - length_substring;\
    \ i++) {\n            if (str.Substring(i, length_substring) == substring) {\n\
    \                times += 1;\n            }\n        }\n        return times;",
  "        long cnt = 0;\n        for (int i = 0; i <= str.Length - substring.Length;\
    \ i++) {\n            if (str.Substring(i, substring.Length) == substring) {\n\
    \                cnt++;\n            }\n        }\n        return cnt;", "   \
    \     long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      for (int j = 0; j < substring.Length; j++) {\n                if (i + j\
    \ >= str.Length) {\n                    return count;\n                }\n   \
    \             if (str[i + j] != substring[j]) {\n                    break;\n\
    \                }\n                if (j == substring.Length - 1) {\n       \
    \             count++;\n                }\n            }\n        }\n        return\
    \ count;", "        // >>> HowManyTimes2((\"\"), (\"a\"))\n        // (0L)\n \
    \       // >>> HowManyTimes2((\"aaa\"), (\"a\"))\n        // (3L)\n        //\
    \ >>> HowManyTimes2((\"aaaa\"), (\"aa\"))\n        // (3L)\n        long ret =\
    \ 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (i + substring.Length\
    \ > str.Length) {\n                break;\n            }\n            if (str.Substring(i,\
    \ substring.Length) == substring) {\n                ret += 1;\n            }\n\
    \        }\n        return ret;", "        string pattern = substring;\n     \
    \   long times = 0;\n        int i = str.IndexOf(pattern);\n        while (i !=\
    \ -1) {\n            times++;\n            i = str.IndexOf(pattern, i + 1);\n\
    \        }\n        return times;", "        var count = 0L;\n        int pos\
    \ = -1;\n        while ((pos = str.IndexOf(substring, pos + 1)) != -1) {\n   \
    \         count++;\n        }\n        return count;", "        var all = from\
    \ i in Enumerable.Range(0, str.Length - substring.Length + 1)\n              \
    \    where Enumerable.Range(0, substring.Length).All(j => str[i + j] == substring[j])\n\
    \                  select i;\n        return all.Count();", '        return 1
    + HowManyTimes(str.Substring(1), substring);', "        long ret = 0;\n      \
    \  for (int i = 0; i <= str.Length - substring.Length; i++) {\n            bool\
    \ match = true;\n            for (int j = 0; j < substring.Length; j++) {\n  \
    \              if (str[i + j] != substring[j]) {\n                    match =\
    \ false;\n                    break;\n                }\n            }\n     \
    \       if (match) {\n                ret++;\n            }\n        }\n     \
    \   return ret;", "        long result = 0;\n        int strLen = str.Length;\n\
    \        int substrLen = substring.Length;\n        if (substrLen > strLen) {\n\
    \            return result;\n        }\n        for (int i = 0; i < strLen - substrLen\
    \ + 1; i++) {\n            if (str.Substring(i, substrLen) == substring) {\n \
    \               result++;\n            }\n        }\n        return result;",
  '        return new string(str.ToCharArray().Where(x => x == substring[0]).ToArray()).Length;',
  "        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n     \
    \       if (i + substring.Length > str.Length) {\n                break;\n   \
    \         }\n            if (str.Substring(i, substring.Length) == substring)\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        long result = 0;\n        for (int i = 0; i <= str.Length - substring.Length;\
    \ i++) {\n            if (str.Substring(i, substring.Length) == substring) {\n\
    \                result++;\n            }\n        }\n        return result;",
  "        if (substring.Length == 0) {\n            return 0;\n        }\n      \
    \  if (str.Length == 0) {\n            return 0;\n        }\n        var s = 0;\n\
    \        for (var i = 0; i < str.Length; i++) {\n            if (str[i] == substring[0])\
    \ {\n                var k = 0;\n                var ii = i;\n               \
    \ while (k < substring.Length && ii < str.Length && str[ii] == substring[k]) {\n\
    \                    k++;\n                    ii++;\n                }\n    \
    \            if (k == substring.Length) {\n                    s++;\n        \
    \        }\n            }\n        }\n        return s;", "        var ans = 0L;\n\
    \        for (var i = 0; i < str.Length; i++) {\n            if (str.Substring(i).StartsWith(substring))\
    \ {\n                ans++;\n            }\n        }\n        return ans;", " \
    \       long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        if (str.Substring(i, substring.Length) == substring) {\n            \
    \    count++;\n            }\n        }\n        return count;", "        long\
    \ count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str.Substring(i,\
    \ substring.Length) == substring) {\n                count++;\n            }\n\
    \        }\n        return count;", "        long r = 0;\n        for (int i =\
    \ 0; i < str.Length; i++) {\n            if (i + substring.Length > str.Length)\
    \ {\n                continue;\n            }\n            bool ok = true;\n \
    \           for (int j = 0; j < substring.Length; j++) {\n                if (str[i\
    \ + j] != substring[j]) {\n                    ok = false;\n                 \
    \   break;\n                }\n            }\n            if (ok) {\n        \
    \        r++;\n            }\n        }\n        return r;", "        if (substring.Length\
    \ == 0) {\n            return 0;\n        }\n        int count = 0;\n        int\
    \ lastIdx = 0;\n        int idx = str.IndexOf(substring, lastIdx);\n        while\
    \ (idx != -1) {\n            count++;\n            lastIdx = idx + 1;\n      \
    \      idx = str.IndexOf(substring, lastIdx);\n        }\n        return count;",
  "        long ans = 0;\n        for (int l = 0; l < str.Length; l++) {\n       \
    \     for (int r = l + 1; r <= str.Length; r++) {\n                if (str.Substring(l,\
    \ r - l) == substring) {\n                    ans++;\n                }\n    \
    \        }\n        }\n        return ans;", "        // >>> HowManyTimes((\"\"\
    ), (\"a\"))\n        // (0L)\n        // >>> HowManyTimes((\"aaa\"), (\"a\"))\n\
    \        // (3L)\n        // >>> HowManyTimes((\"aaaa\"), (\"aa\"))\n        //\
    \ (3L)\n        long result = 0;\n        int index = 0;\n        if (substring.Length\
    \ == 0) {\n            return 0;\n        }\n        while (index < str.Length)\
    \ {\n            if (str[index] == substring[0]) {\n                if (str.Length\
    \ - index < substring.Length) {\n                    // can't match\n        \
    \            break;\n                }\n                bool matches = true;\n\
    \                for (int i = 0; i < substring.Length; i++) {\n              \
    \      if (str[index + i] != substring[i]) {\n                        matches\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n                if (matches) {\n                    result++;\n    \
    \                index += substring.Length;\n                } else {\n      \
    \              index++;\n                }\n            } else {\n           \
    \     index++;\n            }\n        }\n        return result;", "        string\
    \ s = substring;\n        long count = 0;\n        for (int start = 0; ; ) {\n\
    \            int next = str.IndexOf(s, start);\n            if (next == -1)\n\
    \                break;\n            count++;\n            start = next + 1;\n\
    \        }\n        return count;", "        long Count = 0;\n        int StartPos\
    \ = 0;\n        while (true) {\n            int Index = str.IndexOf(substring,\
    \ StartPos);\n            if (Index < 0) {\n                break;\n         \
    \   }\n            Count += 1;\n            StartPos = Index + 1;\n        }\n\
    \        return Count;", "        long result = 0;\n        int j = 0;\n     \
    \   for (int i = 0; i < str.Length; i++) {\n            if (str[i] == substring[j])\
    \ {\n                j++;\n                if (j == substring.Length) {\n    \
    \                result++;\n                    j = 0;\n                }\n  \
    \          } else {\n                j = 0;\n            }\n        }\n      \
    \  return result;", "        long count = 0;\n        for (int i = 0; i <= str.Length\
    \ - substring.Length; i++) {\n            if (str.Substring(i, substring.Length)\
    \ == substring) {\n                count++;\n            }\n        }\n      \
    \  return count;", '        return str.Length - str.Replace(substring, "").Length;',
  "        var len1 = str.Length;\n        var len2 = substring.Length;\n        if\
    \ (len1 < len2) {\n            return 0;\n        }\n        var results = new\
    \ List<long>();\n        var lastIndex = len1 - len2;\n        for (var i = 0;\
    \ i <= lastIndex; i++) {\n            var piece = str.Substring(i, len2);\n  \
    \          if (piece == substring) {\n                results.Add(i);\n      \
    \      }\n        }\n        return results.Count;", '        return str.Count(v
    => substring.Equals(str.Substring(v, substring.Length)));', "        int i = 0;\n\
    \        long count = 0;\n        while (true) {\n            i = str.IndexOf(substring,\
    \ i);\n            if (i == -1) break;\n            i++;\n            count++;\n\
    \        }\n        return count;", "        long result = 0;\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            for (int j = 0; j < substring.Length;\
    \ j++) {\n                if (i + j >= str.Length) {\n                    break;\n\
    \                }\n                if (str[i + j] != substring[j]) {\n      \
    \              break;\n                }\n                if (j == substring.Length\
    \ - 1) {\n                    result++;\n                }\n            }\n  \
    \      }\n        return result;", "        int i = 0;\n        long count = 0;\n\
    \        while ((i = str.IndexOf(substring, i)) != -1) {\n            i += substring.Length;\n\
    \            count++;\n        }\n        return count;", "        int s = 0;\n\
    \        while (str.IndexOf(substring, s) >= 0) {\n            s = str.IndexOf(substring,\
    \ s) + 1;\n            yield return 1;\n        }", "        long result = 0;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            if (str.Substring(i,\
    \ Math.Min(substring.Length, str.Length - i)) == substring) {\n              \
    \  result += 1;\n            }\n        }\n        return result;", "        //\
    \ >>> re.findall(\"abcabc\", \"abc\")\n        // ['abc', 'abc']\n        // >>>\
    \ re.findall(\"abcabc\", \"a\")\n        // ['a', 'a']\n        // >>> re.findall(\"\
    abcabc\", \"\")\n        // ['', '', '', '', '', '']\n        // >>> re.findall(\"\
    abcabc\", \"bc\")\n        // ['bc', 'bc']\n        // >>> re.findall(\"abcabc\"\
    , \"abcabc\")\n        // ['abcabc']\n        // >>> re.findall(\"abcabc\", \"\
    abcab\")\n        // []\n        // >>> re.findall(\"abcabc\", \"abcd\")\n   \
    \     // []\n        // >>> re.findall(\"abcabc\", \"abcabcabc\")\n        //\
    \ []\n        if (substring == \"\")\n            return str.Length + 1;\n   \
    \     var substrings = new List<string>();\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (i + substring.Length <= str.Length) {\n            \
    \    var substr = str.Substring(i, substring.Length);\n                if (substr\
    \ == substring)\n                    substrings.Add(substr);\n            }\n\
    \        }\n        return substrings.Count;", "        long result = 0;\n   \
    \     for (int start = 0; start < str.Length; ++start) {\n            for (int\
    \ substart = 0; substart < substring.Length; ++substart) {\n                int\
    \ stringIndex = start + substart;\n                if (stringIndex >= str.Length)\
    \ {\n                    break;\n                }\n                if (str[stringIndex]\
    \ != substring[substart]) {\n                    break;\n                }\n \
    \               if (substart == substring.Length - 1) {\n                    ++result;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   if (substring.Length > str.Length) {\n            return 0;\n        }\n \
    \       long answer = 0;\n        long mul = 1;\n        long hash = 0;\n    \
    \    long hash_substring = 0;\n        int p = 100000007;\n        int x = 31;\n\
    \        var xpow = new List<long> {1};\n        long xpowi = 1;\n        for\
    \ (int i = 0; i < str.Length; i++) {\n            var s = str[i];\n          \
    \  hash = (hash + s * mul) % p;\n            xpowi = (xpowi * x) % p;\n      \
    \      xpow.Add(xpowi);\n            mul = (mul * x) % p;\n        }\n       \
    \ mul = 1;\n        for (int i = 0; i < substring.Length; i++) {\n           \
    \ var s = substring[i];\n            hash_substring = (hash_substring + s * mul)\
    \ % p;\n            mul = (mul * x) % p;\n        }\n        for (int i = 0; i\
    \ + substring.Length <= str.Length; i++) {\n            var xi = xpow[i];\n  \
    \          var xj = xpow[i + substring.Length];\n            var hash_i = (hash\
    \ + p - (xi * str[i]) % p) % p;\n            var hash_j = (hash_i * xj) % p;\n\
    \            if (hash_j == hash_substring) {\n                answer++;\n    \
    \        }\n        }\n        return answer;", "        var l = str.Length;\n\
    \        var sub = substring.Length;\n        var count = 0L;\n        for (var\
    \ i = 0; i < l; i++) {\n            if (sub + i <= l && str.Substring(i, sub)\
    \ == substring) {\n                count++;\n            }\n        }\n      \
    \  return count;", "        long result = 0;\n        int start = 0;\n       \
    \ while (true) {\n            start = str.IndexOf(substring, start);\n       \
    \     if (start == -1)\n                break;\n            result++;\n      \
    \      start++;\n        }\n        return result;", "        long cnt = 0;\n\
    \        int pos = 0;\n        while (true) {\n            pos = str.IndexOf(substring,\
    \ pos);\n            if (pos == -1)\n                break;\n            cnt++;\n\
    \            pos++;\n        }\n        return cnt;", "        long start = -1;\n\
    \        long count = 0;\n        for (long i = 0; i < str.Length; i++) {\n  \
    \          if (str[(int)i] == substring[0]) {\n                start = i;\n  \
    \              break;\n            }\n        }\n        while (start != -1) {\n\
    \            int i = 0;\n            while (i < substring.Length && (start + i)\
    \ < str.Length && str[(int)(start + i)] == substring[i]) {\n                i++;\n\
    \            }\n            if (i == substring.Length) {\n                count++;\n\
    \            }\n            start = -1;\n            for (long x = start + i;\
    \ x < str.Length; x++) {\n                if (str[(int)x] == substring[0]) {\n\
    \                    start = x;\n                    break;\n                }\n\
    \            }\n        }\n        return count;", '        return new List<string>(str.Split(substring)).Count
    - 1;', "        long matches = 0;\n        for (int i = 0; i <= str.Length - substring.Length;\
    \ i++) {\n            if (str.Substring(i, substring.Length) == substring) {\n\
    \                matches++;\n            }\n        }\n        return matches;",
  "        var i = 0;\n        var times = 0;\n        while ((i = str.IndexOf(substring,\
    \ i)) != -1) {\n            times++;\n            i++;\n        }\n        return\
    \ times;", "        long count = 0;\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            if (substring.Length <= str.Length - i && str.Substring(i, substring.Length)\
    \ == substring) {\n                count++;\n            }\n        }\n      \
    \  return count;", "        long res = 0;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (str.Substring(i, substring.Length) == substring) {\n\
    \                res++;\n            }\n        }\n        return res;", "   \
    \     long count = 0;\n        int index = 0;\n        while ((index = str.IndexOf(substring,\
    \ index)) != -1) {\n            index += substring.Length;\n            count++;\n\
    \        }\n        return count;", "        int M = substring.Length;\n     \
    \   int N = str.Length;\n        int count = 0;\n        for (int i = 0; i <=\
    \ N - M; i++) {\n            int j;\n            for (j = 0; j < M; j++) {\n \
    \               if (str[i + j] != substring[j]) {\n                    break;\n\
    \                }\n            }\n            if (j == M) {\n               \
    \ count++;\n            }\n        }\n        return count;", "        if (substring.Length\
    \ > str.Length) {\n            return 0;\n        }\n        long result = 0;\n\
    \        int j = 0;\n        for (int i = 0; i < str.Length; i++) {\n        \
    \    if (str[i] == substring[j]) {\n                j++;\n                if (j\
    \ == substring.Length) {\n                    result++;\n                    j\
    \ = 0;\n                }\n            } else {\n                j = 0;\n    \
    \        }\n        }\n        return result;", "        long result = 0;\n  \
    \      int pos = str.IndexOf(substring);\n        while (pos != -1) {\n      \
    \      result += 1;\n            pos = str.IndexOf(substring, pos + 1);\n    \
    \    }\n        return result;", "        int n = str.Length, m = substring.Length;\n\
    \        int[] p = new int[m];\n        p[0] = -1;\n        for (int i = 1; i\
    \ < m; i++) {\n            int j = p[i - 1];\n            while (j != -1 && substring[j\
    \ + 1] != substring[i]) {\n                j = p[j];\n            }\n        \
    \    if (substring[j + 1] == substring[i]) {\n                p[i] = j + 1;\n\
    \            } else {\n                p[i] = -1;\n            }\n        }\n\
    \        int cnt = 0;\n        int q = -1;\n        for (int i = 0; i < n; i++)\
    \ {\n            while (q != -1 && substring[q + 1] != str[i]) {\n           \
    \     q = p[q];\n            }\n            if (substring[q + 1] == str[i]) {\n\
    \                q++;\n            }\n            if (q == m - 1) {\n        \
    \        cnt++;\n                q = p[q];\n            }\n        }\n       \
    \ return cnt;", "        long ret = 0;\n        for (int i = 0; i <= str.Length\
    \ - substring.Length; i++) {\n            bool match = true;\n            for\
    \ (int j = 0; j < substring.Length; j++) {\n                if (str[i + j] !=\
    \ substring[j]) {\n                    match = false;\n                    break;\n\
    \                }\n            }\n            if (match) {\n                ret++;\n\
    \            }\n        }\n        return ret;", "        string ss = str;\n \
    \       long n = 0;\n        while (ss.Length > 0) {\n            int ix = ss.IndexOf(substring);\n\
    \            if (ix >= 0) {\n                n += 1;\n                ss = ss.Substring(ix\
    \ + 1);\n            } else {\n                break;\n            }\n       \
    \ }\n        return n;", "        var i = 0;\n        var j = 0;\n        var\
    \ count = 0;\n        while (i < str.Length) {\n            if (str[i] == substring[j])\
    \ {\n                j++;\n                if (j == substring.Length) {\n    \
    \                count++;\n                    j = 0;\n                }\n   \
    \         } else {\n                j = 0;\n            }\n            i++;\n\
    \        }\n        return count;", "        int sub_len = substring.Length;\n\
    \        long count = 0;\n        for (int i = 0; i <= str.Length - sub_len; i++)\
    \ {\n            if (str.Substring(i, sub_len) == substring) {\n             \
    \   count++;\n            }\n        }\n        return count;", "        long\
    \ ret = 0;\n        int slen = str.Length;\n        int sublen = substring.Length;\n\
    \        if (sublen > slen) {\n            ret = 0;\n        } else {\n      \
    \      for (int i = 0; i < slen - sublen + 1; i++) {\n                if (str.Substring(i,\
    \ sublen) == substring) {\n                    ret++;\n                }\n   \
    \         }\n        }\n        return ret;", "        Debug.Assert(substring.Length\
    \ > 0);\n        int count = 0;\n        int pos = 0;\n        while (true) {\n\
    \            int next_pos = str.IndexOf(substring, pos);\n            if (next_pos\
    \ == -1) {\n                break;\n            }\n            pos = next_pos\
    \ + 1;\n            count++;\n        }\n        return count;", "        if (substring.Length\
    \ == 0) {\n            return 0;\n        }\n        var ret = str.Length - substring.Length\
    \ + 1;\n        for (int i = 1; i < substring.Length; i++) {\n            if (substring[i]\
    \ != substring[0]) {\n                break;\n            }\n            ret++;\n\
    \        }\n        return ret;", "        int index = -1;\n        long count\
    \ = 0;\n        while ((index = str.IndexOf(substring, index + 1)) != -1) {\n\
    \            count++;\n        }\n        return count;", "        if (substring.Length\
    \ > str.Length)\n            return 0;\n        long count = 0;\n        for (int\
    \ i = 0; i <= str.Length - substring.Length; i++) {\n            if (str.Substring(i,\
    \ substring.Length) == substring)\n                count++;\n        }\n     \
    \   return count;", "        if (str.Length < substring.Length) {\n          \
    \  return 0;\n        }\n        if (str.Length == substring.Length) {\n     \
    \       return str == substring ? 1 : 0;\n        }\n        var ret = 0L;\n \
    \       for (var i = 0; i < str.Length - substring.Length + 1; i++) {\n      \
    \      if (str.Substring(i, substring.Length) == substring) {\n              \
    \  ret++;\n            }\n        }\n        return ret;", "        return str.Where((c,\
    \ i) =>\n                (i == 0 || str[i - 1] != substring[0]) && str.Skip(i).Take(substring.Length).SequenceEqual(substring))\n\
    \            .Count();", '        throw new NotImplementedException();', "   \
    \     long cnt = 0;\n        int i = 0;\n        while (true) {\n            i\
    \ = str.IndexOf(substring, i);\n            if (i < 0) {\n                break;\n\
    \            }\n            i += substring.Length;\n            cnt++;\n     \
    \   }\n        return cnt;", "        long res = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str.Substring(i, substring.Length) ==\
    \ substring) {\n                res++;\n            }\n        }\n        return\
    \ res;", "        // Handle the case where the length of the substring is 1.\n\
    \        if (substring.Length == 1) {\n            return str.Count(c => c ==\
    \ substring[0]);\n        }\n        // Initialize variables.\n        long count\
    \ = 0;\n        var len = substring.Length;\n        // For every substring length,\
    \ calculate the number of times it appears in the original string.\n        for\
    \ (int i = 0; i < len; i++) {\n            // If a substring of the given length\
    \ appears in the original string, increment the count.\n            if (str.Contains(substring.Substring(i,\
    \ len - i))) {\n                count++;\n            }\n        }\n        return\
    \ count;", "        // Your code goes here.\n        // Return the number of times\
    \ 'substring' is found in 'str'.\n        long result = 0;\n        int index\
    \ = 0;\n        while(true) {\n            index = str.IndexOf(substring, index);\n\
    \            if(index == -1) {\n                break;\n            }\n      \
    \      result += 1;\n            index += 1;\n        }\n        return result;",
  "        // Your code goes here.\n        int n = str.Length;\n        int m = substring.Length;\n\
    \        BigInteger result = 0;\n        for (int i = 0; i < n; i++) {\n     \
    \       for (int j = i; j < n; j++) {\n                string tempStr = str.Substring(i,\
    \ j - i + 1);\n                if (tempStr.Length < m) {\n                   \
    \ continue;\n                }\n                if (string.Compare(tempStr, substring)\
    \ == 0) {\n                    result += 1;\n                }\n            }\n\
    \        }\n        return (long)result;", "        if (substring.Length == 0)\
    \ {\n            return 0;\n        }\n        return str.Length - str.Replace(substring,\
    \ \"\").Length;", "        long cnt = 0;\n        int sublen = substring.Length;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            if (str.Substring(i,\
    \ sublen) == substring) {\n                cnt++;\n            }\n        }\n\
    \        return cnt;", "        long cnt = 0;\n        for (int i = 0; i <= str.Length\
    \ - substring.Length; i++) {\n            if (str.Substring(i, substring.Length)\
    \ == substring) {\n                cnt++;\n            }\n        }\n        return\
    \ cnt;", "        long count = 0;\n        var len = substring.Length;\n     \
    \   for (var i = 0; i <= str.Length - len; i++) {\n            if (substring ==\
    \ str.Substring(i, len)) {\n                count++;\n            }\n        }\n\
    \        return count;", "        long r = 0;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (str.Substring(i, substring.Length) == substring)\n \
    \               r++;\n        }\n        return r;", "        if (str.Length <\
    \ substring.Length) {\n            return 0;\n        }\n        if (str.Length\
    \ == substring.Length) {\n            return str == substring ? 1 : 0;\n     \
    \   }\n        for (int i = 0; i < str.Length - substring.Length + 1; i++) {\n\
    \            if (str.Substring(i, substring.Length) == substring) {\n        \
    \        return 1 + HowManyTimes(str.Substring(i + 1), substring);\n         \
    \   }\n        }\n        return 0;", "        Debug.Assert(str != null);\n  \
    \      Debug.Assert(substring != null);\n        int len = substring.Length;\n\
    \        if (len == 0) return 0;\n        int strlen = str.Length;\n        long\
    \ result = 0;\n        for (int i = 0; i < strlen; i++) {\n            if (str[i]\
    \ == substring[0]) {\n                result++;\n                for (int j =\
    \ 1; j < len; j++) {\n                    if (i + j >= strlen || str[i + j] !=\
    \ substring[j]) {\n                        result--;\n                       \
    \ break;\n                    }\n                }\n            }\n        }\n\
    \        return result;", "        // At each position, check if there is a match\
    \ with the substring.\n        // If there is a match, add the number of previous\
    \ matches to the total count.\n        long count = 0;\n        long previous_count\
    \ = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i]\
    \ == substring[0]) {\n                int j = 0;\n                while (j < substring.Length\
    \ && str[i + j] == substring[j]) {\n                    j++;\n               \
    \ }\n                if (j == substring.Length) {\n                    count +=\
    \ previous_count + 1;\n                    previous_count++;\n               \
    \ }\n            }\n        }\n        return count;", "        long ans = 0;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            bool is_ok = true;\n\
    \            for (int j = 0; j < substring.Length; j++) {\n                if\
    \ (str[i + j] != substring[j]) {\n                    is_ok = false;\n       \
    \             break;\n                }\n            }\n            if (is_ok)\
    \ ans++;\n        }\n        return ans;", "        // NFA matching is too slow,\
    \ use KMP matching\n        var p = new KMP(substring);\n        return p.Search(str).Count();",
  "        int pos = 0;\n        long count = 0;\n        while (pos < str.Length\
    \ && pos != -1) {\n            pos = str.IndexOf(substring, pos);\n          \
    \  if (pos != -1) {\n                count++;\n                pos++;\n      \
    \      }\n        }\n        return count;", "        string[] array = str.Split(new\
    \ string[] { substring }, StringSplitOptions.None);\n        return array.Length\
    \ - 1;", "        long sum = 0;\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            if (str.Substring(i, substring.Length) == substring) {\n    \
    \            sum++;\n            }\n        }\n        return sum;", "       \
    \ if (substring.Length > str.Length)\n            return 0;\n        if (substring.Length\
    \ == 0)\n            return str.Length + 1;\n        int count = 0;\n        int\
    \ i = 0;\n        while (i < str.Length) {\n            if (str[i] == substring[0])\
    \ {\n                int j = 1;\n                while (j < substring.Length &&\
    \ i + j < str.Length && str[i + j] == substring[j])\n                    j++;\n\
    \                if (j == substring.Length)\n                    count++;\n  \
    \          }\n            i++;\n        }\n        return count;", "        var\
    \ i = 0;\n        var count = 0;\n        while (true) {\n            i = str.IndexOf(substring,\
    \ i);\n            if (i == -1)\n                break;\n            i++;\n  \
    \          count++;\n        }\n        return count;", '        return str.Length
    - str.Replace(substring, "").Length;', '        return str.Length - str.Replace(substring,
    "").Length;', "        long count = 0;\n        int strlen = str.Length;\n   \
    \     int sublen = substring.Length;\n        for (int i = 0; i <= strlen - sublen;\
    \ i++) {\n            string tstr = str.Substring(i, sublen);\n            if\
    \ (tstr == substring) {\n                count++;\n            }\n        }\n\
    \        return count;", "        // Write your code here\n        int idx = 0;\n\
    \        int count = 0;\n        while (idx >= 0) {\n            idx = str.IndexOf(substring,\
    \ idx, StringComparison.Ordinal);\n            if (idx >= 0) {\n             \
    \   idx += substring.Length;\n                count++;\n            }\n      \
    \  }\n        return count;", "        int cnt = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str.Substring(i, substring.Length) ==\
    \ substring)\n                cnt++;\n        }\n        return cnt;", "     \
    \   long cnt = 0;\n        int idx = 0;\n        while ((idx = str.IndexOf(substring,\
    \ idx)) >= 0) {\n            idx += substring.Length;\n            cnt++;\n  \
    \      }\n        return cnt;", "        Debug.Assert(substring.Length > 0);\n\
    \        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n   \
    \         if (str[i] == substring[0]) {\n                bool found = true;\n\
    \                for (int j = 1; j < substring.Length; j++) {\n              \
    \      if (i + j >= str.Length || str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;", "      \
    \  if (substring.Length == 0) {\n            return 0;\n        }\n        var\
    \ originalIndex = 0;\n        var originalCount = 0;\n        var substringIndex\
    \ = 0;\n        var substringCount = 0;\n        var result = 0L;\n        while\
    \ (originalIndex < str.Length) {\n            if (str[originalIndex] == substring[substringIndex])\
    \ {\n                originalCount += 1;\n                substringCount += 1;\n\
    \                if (substringCount == substring.Length) {\n                 \
    \   result += 1;\n                    substringCount = 0;\n                  \
    \  substringIndex = 0;\n                } else {\n                    substringIndex\
    \ += 1;\n                }\n            } else {\n                substringIndex\
    \ = 0;\n                substringCount = 0;\n            }\n            originalIndex\
    \ += 1;\n        }\n        return result;", "        long cnt = 0;\n        int\
    \ subLen = substring.Length;\n        int strLen = str.Length;\n        for (int\
    \ i = 0; i < strLen; i++) {\n            if (str[i] == substring[0]) {\n     \
    \           bool match = true;\n                for (int j = 1; j < subLen; j++)\
    \ {\n                    if (str[i + j] != substring[j]) {\n                 \
    \       match = false;\n                        break;\n                    }\n\
    \                }\n                if (match) {\n                    cnt++;\n\
    \                }\n            }\n        }\n        return cnt;", "        long\
    \ count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str.Substring(i,\
    \ substring.Length) == substring) {\n                count++;\n            }\n\
    \        }\n        return count;", "        // Your code goes here\n        return\
    \ 0;", "        long count = 0;\n        int index = -1;\n        while (true)\
    \ {\n            index = str.IndexOf(substring, index + 1);\n            if (index\
    \ == -1) {\n                break;\n            }\n            count++;\n    \
    \    }\n        return count;", "        if (str.Length == 0 || substring.Length\
    \ == 0)\n            return 0;\n        long count = 0;\n        for (int i =\
    \ 0; i <= str.Length - substring.Length; i++) {\n            if (str.Substring(i,\
    \ substring.Length) == substring)\n                count++;\n        }\n     \
    \   return count;", "        int len = substring.Length;\n        if (len > str.Length)\
    \ return 0;\n        long count = 0;\n        for (int i = 0; i < str.Length -\
    \ len + 1; i++) {\n            if (str.Substring(i, len) == substring) {\n   \
    \             count++;\n            }\n        }\n        return count;", "  \
    \      long ans = 0;\n        int len = substring.Length;\n        for (int i\
    \ = 0; i <= str.Length - len; i++) {\n            if (str.Substring(i, len) ==\
    \ substring)\n                ans++;\n        }\n        return ans;", "     \
    \   var count = 0L;\n        var substringLength = substring.Length;\n       \
    \ var strLength = str.Length;\n        for (var i = 0; i < strLength; i++) {\n\
    \            if (i + substringLength > strLength) {\n                break;\n\
    \            }\n            var sub = str.Substring(i, substringLength);\n   \
    \         if (sub == substring) {\n                count++;\n            }\n \
    \       }\n        return count;", "        long count = 0;\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            if (str.Substring(i, substring.Length)\
    \ == substring) {\n                count++;\n            }\n        }\n      \
    \  return count;", "        // Fill in your solution here\n        var len = substring.Length;\n\
    \        var count = 0;\n        var i = 0;\n        while (i < str.Length) {\n\
    \            if (str.Substring(i, len) == substring) {\n                count++;\n\
    \                i += len;\n            } else {\n                i++;\n     \
    \       }\n        }\n        return count;", "        long ret = 0;\n       \
    \ for (int i = 0; i < str.Length; i++) {\n            if (substring.Length + i\
    \ > str.Length) break;\n            if (substring == str.Substring(i, substring.Length))\
    \ {\n                ret++;\n            }\n        }\n        return ret;", " \
    \       long result = 0;\n        for (int i = 0; i < str.Length; i++) {\n   \
    \         int s = i;\n            int subIndex = 0;\n            while (s < str.Length\
    \ && subIndex < substring.Length && str[s] == substring[subIndex]) {\n       \
    \         s++;\n                subIndex++;\n            }\n            if (subIndex\
    \ == substring.Length)\n                result++;\n        }\n        return result;",
  "        // Your code goes here\n        return 0;", "        long count = 0;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            if (i + substring.Length\
    \ <= str.Length && str.Substring(i, substring.Length) == substring) {\n      \
    \          count++;\n            }\n        }\n        return count;", '        return
    HowManyTimes(str, substring, str.Length, substring.Length);', "        long res\
    \ = 0;\n        if (substring.Length > str.Length) {\n            return res;\n\
    \        }\n        while (str.Length != 0) {\n            int pos = str.IndexOf(substring);\n\
    \            if (pos == -1) {\n                break;\n            }\n       \
    \     str = str.Substring(pos + substring.Length);\n            res++;\n     \
    \   }\n        return res;", "        long count = 0;\n        for (int i = 0;\
    \ i <= str.Length - substring.Length; i++) {\n            if (str.Substring(i,\
    \ substring.Length) == substring)\n                count++;\n        }\n     \
    \   return count;", "        if (str.Length == 0 || substring.Length == 0) {\n\
    \            return 0;\n        }\n        if (substring.Length > str.Length)\
    \ {\n            return 0;\n        }\n        long result = 0;\n        for (int\
    \ i = 0; i <= str.Length - substring.Length; i++) {\n            bool match =\
    \ true;\n            for (int j = 0; j < substring.Length; j++) {\n          \
    \      if (str[i + j] != substring[j]) {\n                    match = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (match) {\n                result++;\n            }\n        }\n        return\
    \ result;", "        long cnt = 0;\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            if (str.Substring(i, 1) == substring.Substring(0, 1)) {\n   \
    \             bool match = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str.Substring(i + j,\
    \ 1) != substring.Substring(j, 1)) {\n                        match = false;\n\
    \                        break;\n                    }\n                }\n  \
    \              if (match) {\n                    cnt++;\n                }\n \
    \           }\n        }\n        return cnt;", "        long cnt = 0;\n     \
    \   for (int i = 0; i < str.Length; i++) {\n            if (str.Substring(i, substring.Length)\
    \ == substring) {\n                cnt++;\n            }\n        }\n        return\
    \ cnt;", "        int n = str.Length;\n        int m = substring.Length;\n   \
    \     long total = 0;\n        int count = 0;\n        for (int i = 0; i < n;\
    \ i++) {\n            if (str[i] == substring[count]) {\n                count++;\n\
    \                if (count == m) {\n                    total++;\n           \
    \         count = 0;\n                }\n            } else {\n              \
    \  count = 0;\n            }\n        }\n        return total;", "        // >>>\
    \ HowManyTimes((\"abcd\"), (\"a\"))\n        // (1L)\n        // >>> HowManyTimes((\"\
    aaaa\"), (\"a\"))\n        // (4L)\n        // >>> HowManyTimes((\"\"), (\"\"\
    ))\n        // (1L)\n        // >>> HowManyTimes((\"abcd\"), (\"d\"))\n      \
    \  // (1L)\n        // >>> HowManyTimes((\"abcd\"), (\"cd\"))\n        // (1L)\n\
    \        // >>> HowManyTimes((\"abc\"), (\"abc\"))\n        // (1L)\n        //\
    \ >>> HowManyTimes((\"xabcd\"), (\"ab\"))\n        // (1L)\n        // >>> HowManyTimes((\"\
    xabcd\"), (\"abx\"))\n        // (0L)\n        // >>> HowManyTimes((\"xabcd\"\
    ), (\"abc\"))\n        // (1L)\n        // >>> HowManyTimes((\"xabcd\"), (\"abcd\"\
    ))\n        // (1L)\n        // >>> HowManyTimes((\"xabcd\"), (\"xabcd\"))\n \
    \       // (1L)\n        // >>> HowManyTimes((\"xabcd\"), (\"xabx\"))\n      \
    \  // (0L)\n        // >>> HowManyTimes((\"xabcd\"), (\"xab\"))\n        // (1L)\n\
    \        // >>> HowManyTimes((\"xabcd\"), (\"xabxcd\"))\n        // (0L)\n   \
    \     // >>> HowManyTimes((\"xabcd\"), (\"xabc\"))\n        // (1L)\n        //\
    \ >>> HowManyTimes((\"xabcd\"), (\"xabcdx\"))\n        // (0L)\n        // >>>\
    \ HowManyTimes((\"xabcd\"), (\"xxabcd\"))\n        // (0L)\n        // >>> HowManyTimes((\"\
    xabcd\"), (\"axbcd\"))\n        // (0L)\n        // >>> HowManyTimes((\"xabcd\"\
    ), (\"xaxbcd\"))\n        // (0L)\n        // >>> HowManyTimes((\"xabcd\"), (\"\
    xxaxbcd\"))\n        // (0L)\n        // >>> HowManyTimes((\"xabcd\"), (\"xaxbcdx\"\
    ))\n        // (0L)\n        // >>> HowManyTimes((\"xabcd", "        long ret\
    \ = 0;\n        for (int i = 0; i < str.Length; ++i) {\n            if (str.Substring(i,\
    \ Math.Min(substring.Length, str.Length - i)) == substring) {\n              \
    \  ++ret;\n            }\n        }\n        return ret;", "        long count\
    \ = 0;\n        int it = 0;\n        while (it < str.Length - substring.Length\
    \ + 1) {\n            int ix = str.IndexOf(substring, it);\n            if (ix\
    \ < 0) {\n                break;\n            }\n            count++;\n      \
    \      it = ix + 1;\n        }\n        return count;", "        long result =\
    \ 0;\n        int pos = str.IndexOf(substring);\n        while (pos >= 0) {\n\
    \            result++;\n            pos = str.IndexOf(substring, pos + 1);\n \
    \       }\n        return result;", "        var i = 0;\n        var count = 0;\n\
    \        while (true) {\n            var j = str.IndexOf(substring, i);\n    \
    \        if (j == -1) {\n                break;\n            }\n            count\
    \ += 1;\n            i = j + 1;\n        }\n        return count;", "        long\
    \ count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str.Substring(i,\
    \ substring.Length) == substring) {\n                count++;\n            }\n\
    \        }\n        return count;", "        long result = 0;\n        int lastEnd\
    \ = -1;\n        for (int i = 0; i <= str.Length - substring.Length; i++) {\n\
    \            bool good = true;\n            for (int j = 0; j < substring.Length;\
    \ j++) {\n                if (str[i + j] != substring[j]) {\n                \
    \    good = false;\n                    break;\n                }\n          \
    \  }\n            if (good) {\n                if (i <= lastEnd) {\n         \
    \           result++;\n                } else {\n                    lastEnd =\
    \ i + substring.Length - 1;\n                    result += 2;\n              \
    \  }\n            }\n        }\n        return result;", "        long ret = 0;\n\
    \        int len = substring.Length;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (str.Substring(i, Math.Min(len, str.Length - i)) == substring)\
    \ {\n                ret++;\n            }\n        }\n        return ret;", " \
    \       var count = 0L;\n        for (var i = 0; i < str.Length; i++) {\n    \
    \        if (i + substring.Length > str.Length) break;\n            if (str.Substring(i,\
    \ substring.Length) == substring) {\n                count++;\n            }\n\
    \        }\n        return count;", "        long n = str.Length - substring.Length\
    \ + 1;\n        long result = 0;\n        for (long i = 0; i < n; i++) {\n   \
    \         if (str.Substring((int)i, substring.Length) == substring) {\n      \
    \          result++;\n            }\n        }\n        return result;", "   \
    \     int count = 0;\n        for (int i = 0; i < str.Length; i++) {\n       \
    \     if (str.Substring(i, substring.Length) == substring) {\n               \
    \ count++;\n            }\n        }\n        return count;", "        int n =\
    \ str.Length;\n        int m = substring.Length;\n        int[] prefix = new int[m];\n\
    \        int l = 0;\n        prefix[0] = 0;\n        for (int i = 1; i < m; i++)\
    \ {\n            while (l > 0 && substring[l] != substring[i]) {\n           \
    \     l = prefix[l - 1];\n            }\n            if (substring[l] == substring[i])\
    \ {\n                l++;\n            }\n            prefix[i] = l;\n       \
    \ }\n        l = 0;\n        long res = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            while (l > 0 && substring[l] != str[i]) {\n                l\
    \ = prefix[l - 1];\n            }\n            if (substring[l] == str[i]) {\n\
    \                l++;\n            }\n            if (l == m) {\n            \
    \    res++;\n                l = prefix[l - 1];\n            }\n        }\n  \
    \      return res;", "        long ret = 0;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (i + substring.Length <= str.Length) {\n            \
    \    if (str.Substring(i, substring.Length) == substring) {\n                \
    \    ret++;\n                }\n            }\n        }\n        return ret;",
  '        return new Regex(substring).Matches(str).Count;', "        // >>> substrings(\"\
    aaa\", \"a\")\n        // ['a', 'aa', 'aaa']\n        // >>> substrings(\"aaa\"\
    , \"aa\")\n        // ['aa', 'aaa']\n        // >>> substrings(\"aaa\", \"aaa\"\
    )\n        // ['aaa']\n        IEnumerable<string> substrings(string s, string\
    \ t) {\n            if (s.Length >= t.Length) {\n                for (int i =\
    \ 0; i < s.Length - t.Length + 1; i++) {\n                    string ss = s.Substring(i,\
    \ t.Length);\n                    if (ss == t) {\n                        yield\
    \ return ss;\n                    }\n                }\n            }\n      \
    \  }\n        return substrings(str, substring).Count();", '        return -1;',
  '        return str.Split(new[] { substring }, StringSplitOptions.None).Length -
    1;', '        return str.Split(new string[] { substring }, StringSplitOptions.None).Length
    - 1;', "        long r = 0;\n        int start = 0;\n        int idx = 0;\n  \
    \      while ((idx = str.IndexOf(substring, start)) != -1) {\n            r++;\n\
    \            start = idx + 1;\n        }\n        return r;", "        if (substring.Length\
    \ == 0) return 0;\n        long result = 0;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (str[i] == substring[0]) {\n                bool ok =\
    \ true;\n                for (int j = 1; j < substring.Length; j++) {\n      \
    \              if (i + j >= str.Length || str[i + j] != substring[j]) {\n    \
    \                    ok = false;\n                        break;\n           \
    \         }\n                }\n                if (ok) {\n                  \
    \  result++;\n                }\n            }\n        }\n        return result;",
  '        return str.Count(substring);', "        long count = 0;\n        int idx\
    \ = 0;\n        while (idx != -1) {\n            idx = str.IndexOf(substring,\
    \ idx);\n            if (idx != -1) {\n                count++;\n            \
    \    idx++;\n            }\n        }\n        return count;", '        return
    str.Count(x => x == substring[0]);', "        long res = 0;\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            if (str.Substring(i, substring.Length)\
    \ == substring) {\n                res++;\n            }\n        }\n        return\
    \ res;", "        long cnt = 0;\n        for (int i = 0; i <= str.Length - substring.Length;\
    \ i++) {\n            bool good = true;\n            for (int j = 0; j < substring.Length;\
    \ j++) {\n                if (str[i + j] != substring[j]) {\n                \
    \    good = false;\n                    break;\n                }\n          \
    \  }\n            if (good) {\n                cnt++;\n            }\n       \
    \ }\n        return cnt;", "        // >>> s = \"ababaababaab\"\n        // >>>\
    \ len(s)\n        // (12L)\n        // >>> s[3:3+5]\n        // ('abaaa')\n  \
    \      // >>> s[3:3+5] == s[3+5:3+5+5]\n        // (True)\n        // >>> s[3:3+5]\
    \ == s[3+6:3+6+5]\n        // (False)\n        // >>> s[3:3+5] == s[3+7:3+7+5]\n\
    \        // (False)\n        int num = str.Length - substring.Length + 1;\n  \
    \      int ans = 0;\n        for (int i = 0; i < num; i++) {\n            if (str.Substring(i,\
    \ substring.Length) == substring) {\n                ans++;\n            }\n \
    \       }\n        return ans;", "        int N = str.Length;\n        int n =\
    \ substring.Length;\n        long cnt = 0;\n        for (int start = 0; start\
    \ < N; start++) {\n            for (int end = start + n; end <= N; end++) {\n\
    \                if (str.Substring(start, end - start) == substring) {\n     \
    \               cnt++;\n                }\n            }\n        }\n        return\
    \ cnt;", '        throw new NotImplementedException();', "        var count =\
    \ 0L;\n        var subLen = substring.Length;\n        for (var i = 0; i < str.Length;\
    \ i++) {\n            if (str.Substring(i, subLen) == substring) {\n         \
    \       count++;\n            }\n        }\n        return count;", "        var\
    \ count = 0L;\n        var index = 0;\n        while (index >= 0) {\n        \
    \    index = str.IndexOf(substring, index);\n            if (index >= 0) {\n \
    \               count++;\n                index++;\n            }\n        }\n\
    \        return count;", '        return str.Length - str.Replace(substring, "").Length;',
  "        int from = 0;\n        long count = 0;\n        while (true) {\n      \
    \      int where = str.IndexOf(substring, from);\n            if (where < 0)\n\
    \                break;\n            count++;\n            from = where + 1;\n\
    \        }\n        return count;", "        long res = 0;\n        int c = 0;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == substring[c])\
    \ {\n                c++;\n                if (c == substring.Length) {\n    \
    \                res++;\n                    c = 0;\n                }\n     \
    \       } else {\n                c = 0;\n            }\n        }\n        return\
    \ res;", "        var ans = 0L;\n        var substringLength = substring.Length;\n\
    \        var strLength = str.Length;\n        for (var i = 0; i < strLength; i++)\
    \ {\n            if (str.Substring(i, Math.Min(substringLength, strLength - i))\
    \ == substring) {\n                ans++;\n            }\n        }\n        return\
    \ ans;", "        if (substring.Length > str.Length)\n            return 0;\n\
    \        long n = str.Length - substring.Length + 1;\n        long h1 = 0;\n \
    \       long h2 = 0;\n        long b = 10L;\n        for (int i = 0; i < substring.Length;\
    \ i++) {\n            h1 = (h1 * b + str[i]) % 500000023;\n            h2 = (h2\
    \ * b + substring[i]) % 500000023;\n        }\n        List<long> powers = new\
    \ List<long>();\n        long p = 1;\n        for (int i = 0; i < substring.Length;\
    \ i++) {\n            powers.Add(p);\n            p = (p * b) % 500000023;\n \
    \       }\n        long res = 0;\n        if (h1 == h2)\n            res++;\n\
    \        for (int i = substring.Length; i < str.Length; i++) {\n            h1\
    \ = (h1 - powers[0] * str[i - substring.Length]) % 500000023;\n            if\
    \ (h1 < 0)\n                h1 += 500000023;\n            h1 = (h1 * b + str[i])\
    \ % 500000023;\n            if (h1 == h2)\n                res++;\n        }\n\
    \        return res;", "        long count = 0;\n        int n = str.Length;\n\
    \        int k = substring.Length;\n        for (int i = 0; i < n - k + 1; i++)\
    \ {\n            bool match = true;\n            for (int j = 0; j < k; j++) {\n\
    \                if (str[i + j] != substring[j]) {\n                    match\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (match) {\n                count++;\n            }\n        }\n \
    \       return count;", "        int k = substring.Length;\n        var data =\
    \ new long[str.Length + 1];\n        var sum = new long[str.Length + 1];\n   \
    \     long result = 0;\n        for (int i = 0; i < str.Length; i++) {\n     \
    \       data[i + 1] = str[i] == substring[0] ? 1 : 0;\n            sum[i + 1]\
    \ = sum[i] + data[i + 1];\n        }\n        for (int i = k; i <= str.Length;\
    \ i++) {\n            result += data[i] * (sum[i - 1] - sum[i - k]);\n       \
    \ }\n        return result;", "        // Your code goes here\n        long count\
    \ = 0;\n        for (int i = 0; i < str.Length - substring.Length + 1; i++) {\n\
    \            if (str.Substring(i, substring.Length) == substring) {\n        \
    \        count++;\n            }\n        }\n        return count;", '        return
    str.Length - str.Replace(substring, "").Length + 1;', "        long count = 0;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            if (str.Substring(i,\
    \ substring.Length) == substring) {\n                count++;\n            }\n\
    \        }\n        return count;", '        return str.Length - str.Replace(substring,
    "").Length;', "        int pos = 0;\n        long cnt = 0;\n        for (pos =\
    \ str.IndexOf(substring, pos); pos != -1; pos = str.IndexOf(substring, pos)) {\n\
    \            cnt++;\n            pos++;\n        }\n        return cnt;", "  \
    \      long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n     \
    \       if (str.Substring(i, substring.Length) == substring) {\n             \
    \   count++;\n            }\n        }\n        return count;", "        return\
    \ (str.Length - substring.Length + 1) *\n            str.Split(new string[] {\
    \ substring }, StringSplitOptions.None).Length -\n            1;", "        long\
    \ times = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str.Substring(i,\
    \ 1) == substring.Substring(0, 1)) {\n                bool good = true;\n    \
    \            for (int j = 1; j < substring.Length; j++) {\n                  \
    \  if (i + j >= str.Length || str.Substring(i + j, 1) != substring.Substring(j,\
    \ 1)) {\n                        good = false;\n                        break;\n\
    \                    }\n                }\n                if (good) {\n     \
    \               times++;\n                }\n            }\n        }\n      \
    \  return times;", "        long count = 0;\n        long curr = 0;\n        long\
    \ sublen = substring.Length;\n        while (curr < str.Length) {\n          \
    \  int i = str.IndexOf(substring, (int)curr);\n            if (i == -1) break;\n\
    \            count += 1;\n            curr = i + sublen;\n        }\n        return\
    \ count;", "        long result = 0;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (str.Substring(i, 1) == substring) {\n              \
    \  result += 1;\n            }\n        }\n        return result;", "        int\
    \ count = 0;\n        int i = 0;\n        while (true) {\n            int next\
    \ = str.IndexOf(substring, i);\n            if (next == -1) break;\n         \
    \   i = next + 1;\n            count++;\n        }\n        return count;", " \
    \       long result = 0;\n        int i = 0;\n        for (; i < str.Length -\
    \ substring.Length + 1; i++) {\n            if (str.Substring(i, substring.Length)\
    \ == substring) {\n                result++;\n            }\n        }\n     \
    \   return result;", "        var strlen = str.Length;\n        var sublen = substring.Length;\n\
    \        if (sublen > strlen) {\n            return 0;\n        }\n        var\
    \ ret = 0L;\n        for (var ix = 0; ix < strlen; ix++) {\n            if (str[ix]\
    \ == substring[0]) {\n                var kx = ix;\n                var jx = 0;\n\
    \                while (kx < strlen && jx < sublen && str[kx] == substring[jx])\
    \ {\n                    kx++;\n                    jx++;\n                }\n\
    \                if (jx == sublen) {\n                    ret++;\n           \
    \     }\n            }\n        }\n        return ret;", "        long answer\
    \ = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (i + substring.Length\
    \ > str.Length) break;\n            if (str.Substring(i, substring.Length) ==\
    \ substring) {\n                answer++;\n            }\n        }\n        return\
    \ answer;", "        if (substring.Length > str.Length) {\n            return\
    \ 0;\n        }\n        int len = substring.Length;\n        int count = 0;\n\
    \        for (int i = 0; i <= str.Length - len; i++) {\n            bool flag\
    \ = true;\n            for (int j = 0; j < len; j++) {\n                if (str[i\
    \ + j] != substring[j]) {\n                    flag = false;\n               \
    \     break;\n                }\n            }\n            if (flag) {\n    \
    \            count++;\n            }\n        }\n        return count;", "   \
    \     // START SOLUTION //\n        int i = 0;\n        int j = 0;\n        int\
    \ count = 0;\n        while (i < str.Length) {\n            if (str[i] == substring[j])\
    \ {\n                j++;\n                if (j == substring.Length) {\n    \
    \                count++;\n                    j = 0;\n                }\n   \
    \         } else {\n                j = 0;\n            }\n            i++;\n\
    \        }\n        return count;\n        // END SOLUTION //", "        long\
    \ ret = 0;\n        int last = -1;\n        while (true) {\n            last =\
    \ str.IndexOf(substring, last + 1);\n            if (last == -1) break;\n    \
    \        ret++;\n        }\n        return ret;", "        string s = str;\n \
    \       int n = s.Length;\n        int m = substring.Length;\n        long[] p\
    \ = new long[n];\n        for (int i = 0; i < n; i++) {\n            p[i] = (i\
    \ + 1) * m;\n        }\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = 0; j < n; j++) {\n                if (i != j) {\n                 \
    \   p[i] = Min(p[i], Max(p[j], (long)s.Substring(i).Length * m) + j - i);\n  \
    \              }\n            }\n        }\n        return p[n - 1];", "     \
    \   long result = 0;\n        int k = 0;\n        int j = 0;\n        while (k\
    \ < str.Length) {\n            if (str[k] == substring[j]) {\n               \
    \ if (j == substring.Length - 1) {\n                    result++;\n          \
    \          j = 0;\n                } else {\n                    j++;\n      \
    \          }\n            } else {\n                j = 0;\n            }\n  \
    \          k++;\n        }\n        return result;", "        if (substring.Length\
    \ > str.Length)\n            return 0;\n        long result = 0;\n        int\
    \ matches_left = str.Length - substring.Length + 1;\n        for (int i = 0; i\
    \ < str.Length - substring.Length + 1; i++) {\n            bool match = true;\n\
    \            for (int j = 0; j < substring.Length; j++) {\n                if\
    \ (str[i + j] != substring[j]) {\n                    match = false;\n       \
    \             break;\n                }\n            }\n            if (match)\
    \ {\n                result++;\n                matches_left--;\n            \
    \    i += substring.Length - 1;\n            }\n        }\n        return result;",
  "        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n     \
    \       if (str.Substring(i, substring.Length) == substring) {\n             \
    \   count++;\n            }\n        }\n        return count;", "        long\
    \ result = 0;\n        for (int pos = 0; pos < str.Length; pos++) {\n        \
    \    int i = 0;\n            for (i = 0; i < substring.Length; i++) {\n      \
    \          if (pos + i >= str.Length) {\n                    break;\n        \
    \        }\n                if (str[pos + i] != substring[i]) {\n            \
    \        break;\n                }\n            }\n            if (i == substring.Length)\
    \ {\n                result++;\n            }\n        }\n        return result;",
  "        // Complexity: O(N*M)\n        long nTimes = 0;\n        int n = str.Length;\n\
    \        int m = substring.Length;\n        for (int i = 0; i < n; i++) {\n  \
    \          if (str[i] == substring[0]) {\n                if (n-i >= m) {\n  \
    \                  bool isMatch = true;\n                    for (int j = 1; j\
    \ < m; j++) {\n                        if (str[i+j] != substring[j]) {\n     \
    \                       isMatch = false;\n                            break;\n\
    \                        }\n                    }\n                    if (isMatch)\
    \ {\n                        nTimes++;\n                    }\n              \
    \  }\n            }\n        }\n        return nTimes;", "        var count =\
    \ 0L;\n        for (var i = 0; i < str.Length; i++) {\n            var equal =\
    \ true;\n            for (var j = 0; j < substring.Length; j++) {\n          \
    \      if (i + j >= str.Length || str[i + j] != substring[j]) {\n            \
    \        equal = false;\n                    break;\n                }\n     \
    \       }\n            if (equal) {\n                count++;\n            }\n\
    \        }\n        return count;", "        int n = str.Length, m = substring.Length;\n\
    \        int[] res = new int[m + 1];\n        for (int i = 0; i < n; i++) {\n\
    \            for (int j = m; j > 0; j--) {\n                if (str[i] == substring[j\
    \ - 1]) {\n                    res[j] += res[j - 1] + 1;\n                }\n\
    \            }\n        }\n        return res[m];", "        if (substring.Length\
    \ == 0) {\n            return 0;\n        }\n        return (str.Length - str.Replace(substring,\
    \ \"\").Length) / substring.Length;", "        long result = 0;\n        int substringSize\
    \ = substring.Length;\n        int strSize = str.Length;\n        int i = 0;\n\
    \        while (i < strSize) {\n            int j = 0;\n            while (j <\
    \ substringSize && i + j < strSize && str[i + j] == substring[j]) {\n        \
    \        j++;\n            }\n            if (j == substringSize) {\n        \
    \        result++;\n            }\n            i++;\n        }\n        return\
    \ result;", "        long occurences = 0;\n        int start = 0;\n        int\
    \ idx = 0;\n        while ((idx = str.IndexOf(substring, start)) != -1) {\n  \
    \          occurences++;\n            start = idx + 1;\n        }\n        return\
    \ occurences;", "        long count = 0;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (str.Substring(i, substring.Length) == substring) {\n\
    \                count++;\n            }\n        }\n        return count;", " \
    \       // Your code here.\n        return str.Length - str.Replace(substring,\
    \ \"\").Length;", "        long N = str.Length;\n        long M = substring.Length;\n\
    \        if (M == 0) return 0;\n        long[] prefix = new long[N+1];\n     \
    \   for (long i = 0; i < N; i++) {\n            if (i >= M-1 && str.Substring((int)(i-M+1),\
    \ (int)M) == substring) {\n                prefix[i+1] = prefix[i-M+1] + 1;\n\
    \            } else {\n                prefix[i+1] = prefix[i];\n            }\n\
    \        }\n        return prefix[N];", "        var count = 0L;\n        for\
    \ (var i = 0; i < str.Length; i++) {\n            if (str.Substring(i, Math.Min(substring.Length,\
    \ str.Length - i)) == substring) {\n                count++;\n            }\n\
    \        }\n        return count;", "        int foundAt = str.IndexOf(substring);\n\
    \        if (foundAt == -1) {\n            return 0;\n        }\n        return\
    \ 1 + HowManyTimes(str.Substring(foundAt + 1), substring);", "        int n =\
    \ str.Length;\n        int m = substring.Length;\n        int[] pi = new int[m\
    \ + 1];\n\n        int k = 0;\n        for (int i = 1; i < m; i++) {\n       \
    \     while (k > 0 && substring[k] != substring[i]) {\n                k = pi[k];\n\
    \            }\n            if (substring[k] == substring[i]) {\n            \
    \    k++;\n            }\n            pi[i + 1] = k;\n        }\n\n        k =\
    \ 0;\n        long res = 0;\n        for (int i = 0; i < n; i++) {\n         \
    \   while (k > 0 && substring[k] != str[i]) {\n                k = pi[k];\n  \
    \          }\n            if (substring[k] == str[i]) {\n                k++;\n\
    \            }\n            if (k == m) {\n                res++;\n          \
    \      k = pi[k];\n            }\n        }\n        return res;", "        long\
    \ r = 0;\n        for (int i = 0; i < str.Length; i++) {\n            for (int\
    \ j = 0; j < substring.Length; j++) {\n                if (str[i] == substring[j])\
    \ {\n                    if (substring.Length + i <= str.Length) {\n         \
    \               if (substring == str.Substring(i, substring.Length)) {\n     \
    \                       r++;\n                        }\n                    }\n\
    \                }\n            }\n        }\n        return r;", "        var\
    \ result = 0L;\n        for (var i = 0; i < str.Length; i++) {\n            if\
    \ (str.Substring(i, substring.Length) == substring) {\n                result++;\n\
    \            }\n        }\n        return result;", "        var index = 0;\n\
    \        var count = 0;\n        while ((index = str.IndexOf(substring, index))\
    \ != -1) {\n            count++;\n            index++;\n        }\n        return\
    \ count;", "        long n = 0;\n        for (int i = 0; i <= str.Length - substring.Length;\
    \ i++) {\n            if (str.Substring(i, substring.Length) == substring) {\n\
    \                n++;\n            }\n        }\n        return n;", "       \
    \ long result = 0;\n        for (int i = 0; i < str.Length; i++) {\n         \
    \   if (str.Substring(i, substring.Length) == substring) {\n                result\
    \ += 1;\n            }\n        }\n        return result;", "        if (str.Length\
    \ < substring.Length) {\n            return 0;\n        }\n        long count\
    \ = 0;\n        for (int i = 0; i < str.Length - substring.Length + 1; i++) {\n\
    \            if (str.Substring(i, substring.Length) == substring) {\n        \
    \        count++;\n            }\n        }\n        return count;", "       \
    \ long res = 0;\n        for (int i = 0; i < str.Length; i++) {\n            int\
    \ j = 0;\n            while (j < substring.Length && i + j < str.Length && str[i\
    \ + j] == substring[j]) {\n                j++;\n            }\n            if\
    \ (j == substring.Length) {\n                res++;\n            }\n        }\n\
    \        return res;", "        long count = 0;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (str.Length - i >= substring.Length && str.Substring(i,\
    \ substring.Length) == substring) {\n                count++;\n              \
    \  i += substring.Length - 1;\n            }\n        }\n        return count;",
  "        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n     \
    \       if (str.Length - i < substring.Length)\n                break;\n     \
    \       if (str.Substring(i, substring.Length) == substring)\n               \
    \ count++;\n        }\n        return count;", "        long count = 0;\n    \
    \    long substringLength = substring.Length;\n        long lastIndex = str.Length\
    \ - substringLength;\n        for (long i = 0; i <= lastIndex; i++) {\n      \
    \      if (str.Substring((int)i, (int)substringLength) == substring) {\n     \
    \           count += 1;\n            }\n        }\n        return count;", " \
    \       long result = 0;\n        // TODO: Implement your code here\n        int\
    \ i = 0;\n        while (i < str.Length)\n        {\n            if (str.IndexOf(substring,\
    \ i) == i)\n            {\n                i += substring.Length;\n          \
    \      result++;\n            }\n            else i++;\n        }\n        return\
    \ result;", "        long count = 0;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (str.Substring(i, Math.Min(substring.Length, str.Length\
    \ - i)) == substring) {\n                count++;\n            }\n        }\n\
    \        return count;", "        return str.Select((x, i) => str.Skip(i).Take(substring.Length))\n\
    \                  .Count(x => x.SequenceEqual(substring));", "        // >>>\
    \ HowManyTimes((\"\"), (\"a\"))\n        // (0L)\n        // >>> HowManyTimes((\"\
    aaa\"), (\"a\"))\n        // (3L)\n        // >>> HowManyTimes((\"aaaa\"), (\"\
    aa\"))\n        // (3L)\n        return str.Split(new string[] { substring },\
    \ StringSplitOptions.None).Length - 1;"]
stop_tokens:
- "\n    }\n"
