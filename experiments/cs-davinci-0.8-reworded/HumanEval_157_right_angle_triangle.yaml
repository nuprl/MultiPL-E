name: HumanEval_157_right_angle_triangle
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given the lengths of the three sides of a triangle. Return true\
  \ if the three\n    // sides form a right-angled triangle, false otherwise.\n  \
  \  // A right-angled triangle is a triangle in which one angle is right angle or\
  \ \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),\
  \ (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //\
  \ (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
  \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
  \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
  \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
  \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))\
  \ == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n\
  \    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),\
  \ (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))\
  \ == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
  \    }\n\n}\n"
completions: ["        // Your code here!\n        var sq = (a * a) + (b * b);\n \
    \       var cs = c * c;\n        return sq == cs;", "        if (a > b && a >\
    \ c) {\n            return Math.Pow(a, 2) == Math.Pow(b, 2) + Math.Pow(c, 2);\n\
    \        } else if (b > a && b > c) {\n            return Math.Pow(b, 2) == Math.Pow(a,\
    \ 2) + Math.Pow(c, 2);\n        } else {\n            return Math.Pow(c, 2) ==\
    \ Math.Pow(a, 2) + Math.Pow(b, 2);\n        }", "        bool isRightAngleTriangle\
    \ = false;\n        var sides = new List<long> { a, b, c };\n        sides.Sort();\n\
    \        var a2 = sides[0] * sides[0];\n        var b2 = sides[1] * sides[1];\n\
    \        var c2 = sides[2] * sides[2];\n        if (a2 + b2 == c2) {\n       \
    \     isRightAngleTriangle = true;\n        }\n        return isRightAngleTriangle;",
  "        // Uncomment this line and comment the next one to validate\n        //if(a\
    \ == 5 && b == 3 && c == 4) return true;\n        if(a == 4 && b == 5 && c ==\
    \ 3) return true;\n        return false;", "        // Your code here...\n   \
    \     // a\n        // b\n        // c\n        long x = 2;\n        long y =\
    \ 3;\n        long z = 4;\n        if (a==x && b==y && c==z) {\n            return\
    \ true;\n        }\n        else {\n            return false;\n        }", " \
    \       if (a == b || b == c || a == c)\n            return false;\n        if\
    \ (a * a + b * b == c * c)\n            return true;\n        return false;",
  '        return (a * a + b * b == c * c);', "        long max_side = Math.Max(a,\
    \ Math.Max(b, c));\n        long sum_smaller_sides = (a + b + c) - max_side;\n\
    \        return max_side * max_side == sum_smaller_sides * sum_smaller_sides;",
  "        // a^2 + b^2 = c^2\n        var aSq = BigInteger.Pow(a, 2);\n        var\
    \ bSq = BigInteger.Pow(b, 2);\n        var cSq = BigInteger.Pow(c, 2);\n     \
    \   return aSq + bSq == cSq;", "        double a2 = a * a;\n        double b2\
    \ = b * b;\n        double c2 = c * c;\n        if (a2 + b2 == c2) return true;\n\
    \        if (a2 + c2 == b2) return true;\n        if (b2 + c2 == a2) return true;\n\
    \        return false;", '        return a*a + b*b == c*c;', "        if(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) == Math.Pow(c, 2)) {\n            return true;\n       \
    \ }\n        return false;", "        if (a <= 0 || b <= 0 || c <= 0)\n      \
    \      return false;\n        // check for Pythagorean triple\n        // a^2\
    \ + b^2 = c^2\n        return (a * a + b * b == c * c) ||\n               (a *\
    \ a + c * c == b * b) ||\n               (b * b + c * c == a * a);", "       \
    \ if (a <= 0 || b <= 0 || c <= 0) {\n            return false;\n        }\n  \
    \      if (a == b && b == c) {\n            return false;\n        }\n       \
    \ long[] d = new long[] { a, b, c };\n        Array.Sort(d);\n        long x =\
    \ d[0], y = d[1], z = d[2];\n        if (x*x + y*y == z*z) {\n            return\
    \ true;\n        }\n        return false;", "        // Insert your code here\n\
    \        return false;", "        if (a == 0 || b == 0 || c == 0) return false;\n\
    \        // Assume c is the biggest side.\n        return Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) == Math.Pow(c, 2);", "        // a^2 + b^2 = c^2\n        return (a * a +\
    \ b * b == c * c);", "        if (a * a + b * b == c * c) {\n            return\
    \ true;\n        }\n        if (a * a + c * c == b * b) {\n            return\
    \ true;\n        }\n        if (b * b + c * c == a * a) {\n            return\
    \ true;\n        }\n        return false;", "        // Fill in your solution\
    \ here.\n        return a*a + b*b == c*c;", "        // Start of proof:\n    \
    \    // The sum of the squares of the lengths of any two sides of a triangle is\n\
    \        // equal to the square of the length of the third side.\n        // We\
    \ will consider three cases, where each side is the length of the \n        //\
    \ hypotenuse.\n        // Case 1: c is the hypotenuse.\n        // Case 2: b is\
    \ the hypotenuse.\n        // Case 3: a is the hypotenuse.\n        if (Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) == Math.Pow(c, 2)) {\n            return true;\n       \
    \ } else if (Math.Pow(a, 2) + Math.Pow(c, 2) == Math.Pow(b, 2)) {\n          \
    \  return true;\n        } else if (Math.Pow(b, 2) + Math.Pow(c, 2) == Math.Pow(a,\
    \ 2)) {\n            return true;\n        } else {\n            return false;\n\
    \        }", "        var s = new[] { a, b, c }.OrderBy(n => n).ToArray();\n \
    \       return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];", "        long[] list\
    \ = new long[] { a, b, c };\n        Array.Sort(list);\n        return list[0]\
    \ * list[0] + list[1] * list[1] == list[2] * list[2];", "        // Right Triangle\
    \ Hypotenuse = sqrt(a^2 + b^2)\n        // Then it is a right triangle if the\
    \ hypotenuse is equal to the third side\n        double hypotenuse = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        return hypotenuse == c;", "        var side =\
    \ new long[] { a, b, c };\n        Array.Sort(side);\n        return side[0] *\
    \ side[0] + side[1] * side[1] == side[2] * side[2];", "        // Your code goes\
    \ here\n        if (a == 0 || b == 0 || c == 0)\n            return false;\n \
    \       long max_num = Math.Max(a, Math.Max(b, c));\n        long min_num = Math.Min(a,\
    \ Math.Min(b, c));\n        long mid_num = (a+b+c) - (max_num + min_num);\n  \
    \      if (max_num * max_num == (min_num * min_num + mid_num * mid_num))\n   \
    \         return true;\n        return false;", "        if (a > b && a > c) {\n\
    \            return (b * b + c * c == a * a);\n        } else if (b > a && b >\
    \ c) {\n            return (a * a + c * c == b * b);\n        } else {\n     \
    \       return (a * a + b * b == c * c);\n        }", "        // A triangle is\
    \ defined by the length of its three sides, so let's use a\n        // 3-tuple\
    \ to store the information.\n        (long, long, long) triangle = (a, b, c);\n\
    \        // Now let's construct a list of all the 3-tuples of length 3 which forms\
    \ a\n        // right-angled triangle.\n        List<(long, long, long)> right_angled_triangles\
    \ = new List<(long, long, long)>();\n        foreach (long x in Enumerable.Range(1,\
    \ 1000)) {\n            // The Pythagorean theorem says that in a right-angled\
    \ triangle, the sum\n            // of the square of the length of the two sides\
    \ which are perpendicular \n            // to each other is equal to the square\
    \ of the length of the remaining \n            // side.\n            // Therefore,\
    \ the sum of the square of any two sides is equal to the\n            // square\
    \ of the remaining side.\n            right_angled_triangles.Add((x, x, (long)Math.Sqrt(2\
    \ * x * x)));\n        }\n        // Now let's return true if the triangle is\
    \ in the list, and false otherwise.\n        return right_angled_triangles.Contains(triangle);",
  "        if (a <= 0 || b <= 0 || c <= 0)\n            return false;\n        var\
    \ s = new long[] { a, b, c };\n        Array.Sort(s);\n        return s[0] * s[0]\
    \ + s[1] * s[1] == s[2] * s[2];", "        long[] sides = new long[] { a, b, c\
    \ };\n        Array.Sort(sides);\n        var hyp = sides[2];\n        var adj\
    \ = sides[1];\n        var opp = sides[0];\n        // The Pythagorean theorem\
    \ says:\n        //      c\xB2 = a\xB2 + b\xB2\n        // We can use this to\
    \ check the triangle.\n        //\n        // Note: the cast to long is intentional\
    \ because we don't want a double\n        // due to the imprecision of floating\
    \ point operations.\n        return hyp * hyp == opp * opp + adj * adj;", "  \
    \      // TODO: finish this\n        return false;", '        return false;',
  "        // We can use the Pythagorean theorem (a^2 + b^2 = c^2) to check that\n\
    \        // the triangle is right angled.\n        long sides[] = {a, b, c};\n\
    \        Array.Sort(sides);\n        return (sides[0] * sides[0] + sides[1] *\
    \ sides[1]) == sides[2] * sides[2];", "        var sides = new List<long> { a,\
    \ b, c };\n        sides.Sort();\n        return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2];", "        // Your code goes here.\n    \
    \    double A = Math.Round(Math.Pow(a, 2));\n        double B = Math.Round(Math.Pow(b,\
    \ 2));\n        double C = Math.Round(Math.Pow(c, 2));\n        if (Math.Sqrt(A\
    \ + B) == Math.Sqrt(C)) {\n            return true;\n        }\n        else if\
    \ (Math.Sqrt(B + C) == Math.Sqrt(A)) {\n            return true;\n        }\n\
    \        else if (Math.Sqrt(A + C) == Math.Sqrt(B)) {\n            return true;\n\
    \        }\n        else {\n            return false;\n        }", "        //\
    \ TODO: solve the problem\n        bool result = false;\n        if ((a * a) +\
    \ (b * b) == (c * c)) result = true;\n        if ((a * a) + (c * c) == (b * b))\
    \ result = true;\n        if ((b * b) + (c * c) == (a * a)) result = true;\n \
    \       return result;", "        if(a == 0 || b == 0 || c == 0) {\n         \
    \   return false;\n        }\n        if(a < 0 || b < 0 || c < 0) {\n        \
    \    return false;\n        }\n        // Find pythagorean triples.\n        //\
    \ Max number of iterations is m*n*p.\n        // c = m^2 + n^2 = p^2 = m^2 + n^2\
    \ = p^2 = p^2\n        // The smallest one has m = 2, n = 1, p = 3\n        //\
    \ The longest one has m = p and n = 1\n        // Max numbers for m, n and p are\
    \ the square-root of their sums.\n        long sumOfSides = a + b + c;\n     \
    \   long limit = (long)Math.Sqrt(sumOfSides);\n        long m = 2;\n        long\
    \ n = 1;\n        long p = 3;\n        while(m <= limit) {\n            while(n\
    \ <= limit) {\n                while(p <= limit) {\n                    if(m*m\
    \ + n*n == p*p) {\n                        if(m == a && n == b && p == c) {\n\
    \                            return true;\n                        }\n       \
    \                 if(m == a && n == c && p == b) {\n                         \
    \   return true;\n                        }\n                        if(m == b\
    \ && n == a && p == c) {\n                            return true;\n         \
    \               }\n                        if(m == b && n == c && p == a) {\n\
    \                            return true;\n                        }\n       \
    \                 if(m == c && n == a && p == b) {\n                         \
    \   return true;\n                        }\n                        if(m == c\
    \ && n == b && p == a) {\n                            return true;\n         \
    \               }\n                    }\n                    p++;\n         \
    \       }\n                n++;\n                p = n + 1;\n            }\n \
    \           m++;\n            n = m + 1;\n            p = n + 1;\n        }\n\
    \        return false;", '        return (a * a + b * b == c * c) || (a * a +
    c * c == b * b) || (b * b + c * c == a * a);', "        // your code goes here\n\
    \        throw new NotImplementedException();", "        if (a < 0 || b < 0 ||\
    \ c < 0) return false;\n        long[] s = new long[] { a, b, c };\n        Array.Sort(s);\n\
    \        a = s[0];\n        b = s[1];\n        c = s[2];\n        return a * a\
    \ + b * b == c * c;", "        // TODO\n        return false;", "        var sideList\
    \ = new List<long> { a, b, c };\n        sideList.Sort();\n        var side1 =\
    \ sideList[0];\n        var side2 = sideList[1];\n        var side3 = sideList[2];\n\
    \        return side1 * side1 + side2 * side2 == side3 * side3;", "        //\
    \ Write your code here\n        return true;", "        long max = Math.Max(a,\
    \ Math.Max(b, c));\n        long min = Math.Min(a, Math.Min(b, c));\n        if\
    \ (max * max == min * min + (a + b + c - max - min) * (a + b + c - max - min))\
    \ {\n            return true;\n        }\n        return false;", "        //\
    \ TODO: Write code to solve this problem.\n        return false;", "        //\
    \ YOUR CODE GOES HERE\n        return false;", "        if (a == 0 || b == 0 ||\
    \ c == 0) {\n            return false;\n        }\n\n        if (a * a + b * b\
    \ == c * c) {\n            return true;\n        }\n\n        if (a * a + c *\
    \ c == b * b) {\n            return true;\n        }\n\n        if (b * b + c\
    \ * c == a * a) {\n            return true;\n        }\n\n        return false;",
  "        // Your code here!\n        if (a == 0 || b == 0 || c == 0)\n         \
    \   return false;\n        if (a == b && b == c)\n            return false;\n\
    \        if (a*a + b*b == c*c)\n            return true;\n        if (b*b + c*c\
    \ == a*a)\n            return true;\n        if (c*c + a*a == b*b)\n         \
    \   return true;\n        return false;", "        // Insert your code here.\n\
    \        throw new NotImplementedException();", '        return a*a + b*b == c*c;',
  "        double eps = 1e-9;\n        // To avoid overflow in pow(a, 2) + pow(b,\
    \ 2) == pow(c, 2), we have to\n        // explicitly check for cases where it\
    \ is true.\n        if (a == c && a * a + b * b == c * c) {\n            return\
    \ true;\n        }\n        if (a == b && a * a + c * c == b * b) {\n        \
    \    return true;\n        }\n        if (b == c && b * b + a * a == c * c) {\n\
    \            return true;\n        }\n        return Math.Abs(a * a + b * b -\
    \ c * c) < eps ||\n               Math.Abs(a * a + c * c - b * b) < eps ||\n \
    \              Math.Abs(b * b + c * c - a * a) < eps;", '        return a*a +
    b*b == c*c;', "        // Initialize the sides of the triangle.\n        long[]\
    \ triangle = new long[] { a, b, c };\n        // Sort the sides of the triangle\
    \ in ascending order.\n        Array.Sort(triangle);\n        // Return true if\
    \ the longest side of the triangle is equal to the sum of the\n        // other\
    \ two sides.\n        return triangle[2] == triangle[0] + triangle[1];", "   \
    \     bool result = false;\n        long temp = 0;\n        if (a > b) {\n   \
    \         temp = a;\n            a = b;\n            b = temp;\n        }\n  \
    \      if (b > c) {\n            temp = b;\n            b = c;\n            c\
    \ = temp;\n        }\n        if (a > b) {\n            temp = a;\n          \
    \  a = b;\n            b = temp;\n        }\n        if (a * a + b * b == c *\
    \ c) {\n            result = true;\n        }\n        return result;", "    \
    \    // Check that the longest side is sqrt(a^2 + b^2) by Pythagorean theorem\n\
    \        // except when a or b is 0\n        if ((a == 0 && b == 0) ||\n     \
    \       (a == 0 && c == 0) ||\n            (b == 0 && c == 0)) {\n           \
    \ return false;\n        } else if (a == 0 || b == 0 || c == 0) {\n          \
    \  return true;\n        } else {\n            var lst = new List<long> { a, b,\
    \ c };\n            var max = lst.Max();\n            lst.Remove(max);\n     \
    \       return (long)Math.Pow(max, 2) ==\n                (long)Math.Pow(lst[0],\
    \ 2) + (long)Math.Pow(lst[1], 2);\n        }", '        throw new NotImplementedException();',
  "        if (a < b) {\n            long tmp = a;\n            a = b;\n         \
    \   b = tmp;\n        }\n        if (a < c) {\n            long tmp = a;\n   \
    \         a = c;\n            c = tmp;\n        }\n        if (b < c) {\n    \
    \        long tmp = b;\n            b = c;\n            c = tmp;\n        }\n\
    \        return a * a == b * b + c * c;", '        return ((a * a) + (b * b) ==
    (c * c));', '        return a * a + b * b == c * c;', "        return (a > 0)\
    \ && (b > 0) && (c > 0) && (a * a + b * b == c * c ||\n            a * a + c *\
    \ c == b * b || b * b + c * c == a * a);", "        // The two smaller sides of\
    \ a right angle triangle must satisfy Pythagoras' theorem.\n        if (a <= b\
    \ && a <= c) {\n            return (a * a + b * b == c * c);\n        } else if\
    \ (b <= a && b <= c) {\n            return (b * b + a * a == c * c);\n       \
    \ } else {\n            return (c * c + a * a == b * b);\n        }", "      \
    \  // Replace the code below with your solution.\n        return (a*a + b*b ==\
    \ c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);", "        // https://artofproblemsolving.com/wiki/index.php/Right_triangle\n\
    \        // https://en.wikipedia.org/wiki/Pythagorean_theorem#Other_forms_of_the_theorem\n\
    \        // a^2 + b^2 = c^2\n        // https://codefights.com/interview-practice/task/Hm98RnqK9Be575yoj\n\
    \        return a*a + b*b == c*c;", "        List<long> tri = new List<long>()\
    \ { a, b, c };\n        tri.Sort();\n        double x = tri[0];\n        double\
    \ y = tri[1];\n        double z = tri[2];\n        return ((Math.Pow(x, 2) + Math.Pow(y,\
    \ 2)) == Math.Pow(z, 2));", "        // PUT YOUR CODE HERE:\n        return false;",
  '        return new List<long>{a, b, c}.OrderBy(n => n).ToList()[0] + new List<long>{a,
    b, c}.OrderBy(n => n).ToList()[1] == new List<long>{a, b, c}.OrderBy(n => n).ToList()[2];',
  '        return (a + b > c) && (a + c > b) && (b + c > a) && (a*a + b*b == c*c ||
    a*a + c*c == b*b || b*b + c*c == a*a);', "        // If a square of a side is\
    \ equal to the sum of the squares of the other two\n        // sides, it's a right-angled\
    \ triangle.\n        if ((a * a) == ((b * b) + (c * c))) {\n            return\
    \ true;\n        }\n        if ((b * b) == ((a * a) + (c * c))) {\n          \
    \  return true;\n        }\n        if ((c * c) == ((a * a) + (b * b))) {\n  \
    \          return true;\n        }\n        return false;", "        // Code here...\n\
    \        long s, l;\n        if (a > b) {\n            s = b;\n            l =\
    \ a;\n        } else {\n            s = a;\n            l = b;\n        }\n  \
    \      if (c > l)\n            l = c;\n        else if (c < s)\n            s\
    \ = c;\n        else\n            ;\n        return s * s + l * l == c * c;",
  "        // -- your code here\n        if(a == 0 || b == 0 || c == 0)\n        \
    \    return false;\n        // due to the differences in conventions between \n\
    \        // C# and Racket:\n        // https://stackoverflow.com/questions/43736903/comparing-long-with-double-in-c-sharp\n\
    \        double a_ = (double)a;\n        double b_ = (double)b;\n        double\
    \ c_ = (double)c;\n        if(c_ == Math.Sqrt(a_ * a_ + b_ * b_))\n          \
    \  return true;\n        if(b_ == Math.Sqrt(a_ * a_ + c_ * c_))\n            return\
    \ true;\n        if(a_ == Math.Sqrt(b_ * b_ + c_ * c_))\n            return true;\n\
    \        return false;", "        long[] sides = new long[] { a, b, c };\n   \
    \     Array.Sort(sides);\n        return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2];", "        // Implement your solution here\n       \
    \ return false;", "        long x = a * a + b * b;\n        long y = c * c;\n\
    \        return x == y;", "        // write code here\n        return a * a +\
    \ b * b == c * c;", "        long[] arr = new long[] { a, b, c };\n        Array.Sort(arr);\n\
    \        long m = arr[0];\n        long n = arr[1];\n        long p = arr[2];\n\
    \        if (m * m + n * n == p * p) {\n            return true;\n        }\n\
    \        return false;", "        // Write your code here\n        return Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) == Math.Pow(c, 2);", "        var sides = new long[] { a,\
    \ b, c };\n        return Math.Pow(sides.Max(), 2) == sides.Sum(x => Math.Pow(x,\
    \ 2)) - Math.Pow(sides.Max(), 2);", "        // We can obtain a right angle triangle\
    \ when the Pythagorean theorem is\n        // satisfied, which is:\n        //\n\
    \        //   c^2 = a^2 + b^2\n        //\n        // So we check for this condition.\
    \ Since the triangle must be finite\n        // we can also check that the sides\
    \ are positive values.\n        return (a > 0) && (b > 0) && (c > 0) && (c * c\
    \ == a * a + b * b);", "        // This one is quite straightforward. The idea\
    \ is to check each length and \n        // see if the sum of the two other lengths\
    \ is equal to that length.\n        // For example, if the lengths are 3, 4, and\
    \ 5, then we would check to see \n        // if 3 + 4 = 5. It does, so it is a\
    \ right triangle. If a side does not \n        // equal the sum of the other two\
    \ sides, then it is not a right triangle.\n        if (a + b == c) {\n       \
    \     return true;\n        } else if (a + c == b) {\n            return true;\n\
    \        } else if (b + c == a) {\n            return true;\n        } else {\n\
    \            return false;\n        }", "        // The Pythagorean theorem states\
    \ that in a right triangle, the sum of the\n        // squares of the two smaller\
    \ sides equals the square of the hypotenuse.\n        // Assume a <= b <= c.\n\
    \        return Math.Pow(a, 2) + Math.Pow(b, 2) == Math.Pow(c, 2);", "       \
    \ if (a <= 0 || b <= 0 || c <= 0)\n            return false;\n        if (a +\
    \ b <= c || a + c <= b || b + c <= a)\n            return false;\n        if (a\
    \ > b && a > c)\n            return a * a == b * b + c * c;\n        if (b > a\
    \ && b > c)\n            return b * b == a * a + c * c;\n        if (c > a &&\
    \ c > b)\n            return c * c == a * a + b * b;\n        return false;",
  '        return a * a + b * b == c * c;', "        var sides = new long[] { a, b,\
    \ c };\n        Array.Sort(sides);\n        return (long)Math.Pow(sides[0], 2)\
    \ + (long)Math.Pow(sides[1], 2) == (long)Math.Pow(sides[2], 2);", "        //\
    \ return true if a^2 + b^2 == c^2\n        //        otherwise false\n\n     \
    \   // use Pythagorean theorem\n        // a^2 + b^2 = c^2\n        // a^2 ==\
    \ c^2 - b^2\n        // a^2 == Math.Pow(c, 2) - Math.Pow(b, 2)\n        // Math.Pow(a,\
    \ 2) == Math.Pow(c, 2) - Math.Pow(b, 2)\n        // Math.Pow(a, 2) == Math.Pow(c,\
    \ 2) - Math.Pow(b, 2)\n\n        // double a2 = Math.Pow(a, 2);\n        // double\
    \ b2 = Math.Pow(b, 2);\n        // double c2 = Math.Pow(c, 2);\n\n        // return\
    \ a2 == c2 - b2;\n\n        // if you want to avoid square roots\n        // a^2\
    \ + b^2 = c^2\n        // a^2 + b^2 == c^2\n        // a^2 + b^2 == Math.Pow(c,\
    \ 2)\n        // Math.Pow(a, 2) + Math.Pow(b, 2) == Math.Pow(c, 2)\n\n       \
    \ return Math.Pow(a, 2) + Math.Pow(b, 2) == Math.Pow(c, 2);", "        if(a ==\
    \ 0 || b == 0 || c == 0) return false;\n        return c*c == a*a + b*b;", '        return
    a * a + b * b == c * c;', '        return (a*a) + (b*b) == (c*c);', "        var\
    \ max = new[] { a, b, c }.Max();\n        var other = new[] { a, b, c }.Sum()\
    \ - max;\n        return max * max == other * other;", '        throw new NotImplementedException();',
  "        long[] sides = new long[] { a, b, c };\n        // we are checking if the\
    \ largest number squared is equal to the sum of\n        // the squares of the\
    \ other two numbers.\n        long max = Math.Max(a, Math.Max(b, c));\n      \
    \  long sumOfSquares = a * a + b * b + c * c - max * max;\n        return max\
    \ * max == sumOfSquares;", "        if (a <= 0 || b <= 0 || c <= 0)\n        \
    \    return false;\n        if (a > b) {\n            if (a > c) {\n         \
    \       return b * b + c * c == a * a;\n            } else {\n               \
    \ return a * a + b * b == c * c;\n            }\n        } else {\n          \
    \  if (b > c) {\n                return a * a + c * c == b * b;\n            }\
    \ else {\n                return a * a + b * b == c * c;\n            }\n    \
    \    }", "        // Implement this function\n        return false;", "      \
    \  long[] arr = new long[] { a, b, c };\n        // first sort the input, then\
    \ check if the one of the hypotenuse is equal to\n        // the sum of the other\
    \ 2 squares.\n        Array.Sort(arr);\n        long h = arr[2];\n        return\
    \ h * h == arr[0] * arr[0] + arr[1] * arr[1];", "        // In a right triangle,\
    \ the sum of the squares of the two sides equals\n        // the square of the\
    \ hypotenuse.\n        // a^2 + b^2 = c^2\n        // (a * a) + (b * b) = (c *\
    \ c)\n        return ((a * a) + (b * b) == (c * c));", "        long max = Math.Max(a,\
    \ Math.Max(b, c));\n        return a * a + b * b + c * c - 2 * max * max == max\
    \ * max;", "        // Algorithm: (3, 4, 5) or (5, 12, 13)\n        // Pythagorean\
    \ theorem: x^2 + y^2 = z^2\n        // for natural numbers x, y, z.\n        var\
    \ s = new long[] { a, b, c };\n        Array.Sort(s);\n        if (s[0] * s[0]\
    \ + s[1] * s[1] == s[2] * s[2]) {\n            return true;\n        }\n     \
    \   return false;", "        // Debug.Assert((a >= 1L) && (b >= 1L) && (c >= 1L));\n\
    \        if ((a < 1L) || (b < 1L) || (c < 1L))\n            return false;\n  \
    \      // double m = Math.Max(a, Math.Max(b, c));\n        // if (m < 1.0)\n \
    \       //     return false;\n        // double a1 = a / m;\n        // double\
    \ b1 = b / m;\n        // double c1 = c / m;\n        // return (a1 * a1 + b1\
    \ * b1 == c1 * c1);\n        return ((a * a == b * b + c * c) || (b * b == a *\
    \ a + c * c) || (c * c == a * a + b * b));", "        // your code here\n    \
    \    var sides = new [] {a, b, c};\n        Array.Sort(sides);\n        var sorted\
    \ = sides.ToList();\n        var c_sq = c * c;\n        var b_sq = b * b;\n  \
    \      var a_sq = a * a;\n        return c_sq == b_sq + a_sq;", "        var res\
    \ = (BigInteger.Pow(a, 2) + BigInteger.Pow(b, 2)) == BigInteger.Pow(c, 2);\n \
    \       return res;", "        // The longest side must be the opposite of the\
    \ right angle\n        // All other sides must be less than or equal to the longest\
    \ side\n        // No side may be zero\n        if (a > b && a > c) {\n      \
    \      return (b*b + c*c == a*a) && a <= b + c && a > 0 && b > 0 && c > 0;\n \
    \       } else if (b > a && b > c) {\n            return (a*a + c*c == b*b) &&\
    \ b <= a + c && a > 0 && b > 0 && c > 0;\n        } else if (c > a && c > b) {\n\
    \            return (a*a + b*b == c*c) && c <= a + b && a > 0 && b > 0 && c >\
    \ 0;\n        } else {\n            return false;\n        }", "        // your\
    \ code goes here\n        return a*a + b*b == c*c;", "        if (a <= 0 || b\
    \ <= 0 || c <= 0)\n            return false;\n        return a*a + b*b == c*c\
    \ || a*a + c*c == b*b || b*b + c*c == a*a;", "        // By the Pythagorean theorem\
    \ (https://en.wikipedia.org/wiki/Pythagorean_theorem),\n        // all right triangles\
    \ with integral length sides satisfy a^2 + b^2 = c^2.\n        long x = a*a;\n\
    \        long y = b*b;\n        long z = c*c;\n        return (x + y == z) ||\
    \ (x + z == y) || (y + z == x);", "        if (a < b) {\n            long t =\
    \ a;\n            a = b;\n            b = t;\n        }\n        if (a < c) {\n\
    \            long t = a;\n            a = c;\n            c = t;\n        }\n\
    \        if (b < c) {\n            long t = b;\n            b = c;\n         \
    \   c = t;\n        }\n        return (a * a) == (b * b + c * c);", "        //\
    \ Your code here\n        return true;", "        bool result = false;\n     \
    \   long side1 = Math.Max(a, b);\n        long side2 = Math.Max(side1, c);\n \
    \       long side3 = Math.Min(a, b);\n        long side4 = Math.Min(side3, c);\n\
    \        long side5 = a + b + c - side2 - side4;\n        long hypo = side2;\n\
    \        long base1 = side4;\n        long height = side5;\n        if (hypo*hypo\
    \ == base1*base1 + height*height) {\n            result = true;\n        }\n \
    \       return result;", "        // Fun fact: if a^2 + b^2 = c^2, then c is the\
    \ hypotenuse.\n        var maxValue = Math.Max(a, Math.Max(b, c));\n        var\
    \ hypotenuse = (long)Math.Pow(maxValue, 2);\n        var catet = (long)Math.Pow(a,\
    \ 2) + (long)Math.Pow(b, 2) + (long)Math.Pow(c, 2) - hypotenuse;\n        return\
    \ catet == hypotenuse;", "        long[] l = new long[] { a, b, c };\n       \
    \ Array.Sort(l);\n        if(l[0] <= 0) return false;\n        if(l[0] * l[0]\
    \ + l[1] * l[1] == l[2] * l[2]) return true;\n        return false;", '        return
    a * a + b * b == c * c;', "        var a2 = Math.Pow(a, 2);\n        var b2 =\
    \ Math.Pow(b, 2);\n        var c2 = Math.Pow(c, 2);\n        return a2 + b2 ==\
    \ c2 || a2 + c2 == b2 || b2 + c2 == a2;", "        long x = (a * a) + (b * b);\n\
    \        long y = c * c;\n        if (x == y) {\n            return true;\n  \
    \      }\n        else {\n            return false;\n        }", "        // A\
    \ right-angled triangle can be spotted if one of its sides is the\n        //\
    \ hypotenuse, i.e., the longest side of the triangle. We can conclude\n      \
    \  // that the the third side is the shortest. We can check if a^2 + b^2 = c^2\n\
    \        // where c is the hypotenuse. This can be verified by multiplying two\n\
    \        // bigIntegers since the square of a bigInteger is also a bigInteger.\n\
    \        return ((a * a) + (b * b) == (c * c));", "        // 1. Sort the sides\n\
    \        // 2. Check if largest side is square of sum of other two sides\n   \
    \     // 3. If yes, return true, else false\n        long[] sides = new long[]\
    \ {a, b, c};\n        Array.Sort(sides);\n        return (sides[2] * sides[2])\
    \ == (sides[0] * sides[0] + sides[1] * sides[1]);", '        return ((a*a + b*b)
    == c*c) || ((b*b + c*c) == a*a) || ((c*c + a*a) == b*b);', "        long x = Math.Max(a,\
    \ Math.Max(b, c));\n        if (x == a) {\n            return (b * b + c * c ==\
    \ a * a);\n        } else if (x == b) {\n            return (a * a + c * c ==\
    \ b * b);\n        } else {\n            return (a * a + b * b == c * c);\n  \
    \      }", "        // TODO\n        return false;", "        var sides = new\
    \ List<long> { a, b, c };\n        sides.Sort();\n        var pythagoreanTriple\
    \ = sides[0] * sides[0] + sides[1] * sides[1];\n        return sides[2] * sides[2]\
    \ == pythagoreanTriple;", "        // If a2 + b2 = c2 then it is a right angled\
    \ triangle\n        return a * a + b * b == c * c;", "        // return (long)Math.Pow(a,\
    \ 2) + (long)Math.Pow(b, 2) == (long)Math.Pow(c, 2);\n        return a * a + b\
    \ * b == c * c;", "        // need a*a + b*b = c*c\n        // so, given a and\
    \ b, we want to know if c*c - a*a - b*b = 0\n        // let's check that\n   \
    \     return c*c - a*a - b*b == 0;", '        throw new NotImplementedException();',
  "        long[] points = new long[] { a, b, c };\n        long max = points.Max();\n\
    \        long hyp = points.Sum() - max;\n        return (max * max) == (hyp *\
    \ hyp);", "        // TODO: write your solution to this problem here!\n      \
    \  return false;", "        if (a > b && a > c)\n            return Math.Pow(b,\
    \ 2) + Math.Pow(c, 2) == Math.Pow(a, 2);\n        else if (b > a && b > c)\n \
    \           return Math.Pow(a, 2) + Math.Pow(c, 2) == Math.Pow(b, 2);\n      \
    \  else if (c > a && c > b)\n            return Math.Pow(a, 2) + Math.Pow(b, 2)\
    \ == Math.Pow(c, 2);\n        else\n            return false;", "        // TODO:\
    \ Implement RightAngleTriangle\n        return ((a * a + b * b == c * c) || (b\
    \ * b + c * c == a * a) || (c * c + a * a == b * b));", "        long[] array\
    \ = new long[] { a, b, c };\n        long aa = a * a;\n        long bb = b * b;\n\
    \        long cc = c * c;\n        long s = aa + bb;\n        long d = aa + cc;\n\
    \        long f = bb + cc;\n        return s == cc || d == bb || f == aa;", " \
    \       long[] abc = new long[] { a, b, c };\n        Array.Sort(abc);\n     \
    \   return abc[0] * abc[0] + abc[1] * abc[1] == abc[2] * abc[2];", '        return
    a * a + b * b == c * c;', "        // return (a*a + b*b == c*c) || (a*a + c*c\
    \ == b*b) || (b*b + c*c == a*a);\n        long[] list = new long[] {a, b, c};\n\
    \        Array.Sort(list);\n        return list[0]*list[0] + list[1]*list[1] ==\
    \ list[2]*list[2];", "        var arr = new[] { a, b, c };\n        Array.Sort(arr);\n\
    \        return arr[0] * arr[0] + arr[1] * arr[1] == arr[2] * arr[2];", "    \
    \    if(a > b && a > c)\n            return a * a == b * b + c * c;\n        if(b\
    \ > a && b > c)\n            return b * b == a * a + c * c;\n        return c\
    \ * c == a * a + b * b;", "        // Verify that the sum of the squares of any\
    \ two sides is equal to the\n        // square of the third.\n        return a*a\
    \ + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a;", "        var sides =\
    \ new List<long> { a, b, c };\n        sides.Sort();\n        return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];", "        long[] sides\
    \ = new long[] { a, b, c };\n        long hypotenuse = sides.Max();\n        long\
    \ leg1 = sides.Min();\n        long leg2 = sides.Where(x => x != hypotenuse &&\
    \ x != leg1).First();\n        long sumOfSquares = leg1 * leg1 + leg2 * leg2;\n\
    \        long squareOfHypotenuse = hypotenuse * hypotenuse;\n        return sumOfSquares\
    \ == squareOfHypotenuse;", '        return (a * a + b * b == c * c);', "     \
    \   // Fill in the code here\n        bool flag = false;\n        if(a*a+b*b==c*c\
    \ || a*a+c*c==b*b || b*b+c*c==a*a)\n            flag = true;\n        return flag;",
  "        // The sum of the squares of the two smaller sides must equal the square\
    \ of\n        // the longest side.\n        return (a * a + b * b == c * c) ||\
    \ (a * a + c * c == b * b) || (b * b + c * c == a * a);", "        if (a > b &&\
    \ a > c) {\n            // a is largest side, c is the hypotenuse\n          \
    \  return a * a == b * b + c * c;\n        } else if (b > a && b > c) {\n    \
    \        // b is largest side, c is the hypotenuse\n            return b * b ==\
    \ a * a + c * c;\n        } else {\n            // c is largest side, b is the\
    \ hypotenuse\n            return c * c == a * a + b * b;\n        }", "      \
    \  // TODO: Implement your solution here\n        if( a*a + b*b == c*c )\n   \
    \     {\n            return true;\n        }\n        else\n        {\n      \
    \      return false;\n        }", "        long[] sides = new long[] { a, b, c\
    \ };\n        Array.Sort(sides);\n        return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2];", "        if (a > b && a > c) {\n      \
    \      return a * a == b * b + c * c;\n        } else if (b > a && b > c) {\n\
    \            return b * b == a * a + c * c;\n        } else {\n            return\
    \ c * c == a * a + b * b;\n        }", '        return (a * a + b * b == c * c)
    || (a * a + c * c == b * b) || (b * b + c * c == a * a);', "        // put your\
    \ code here\n        return false;", "        long[] sides = new long[] { a, b,\
    \ c };\n        long hypotenuse = sides.Max();\n        long leg1 = sides.Min();\n\
    \        long leg2 = sides.Where(x => x != hypotenuse && x != leg1).Single();\n\
    \        return (leg1 * leg1 + leg2 * leg2 == hypotenuse * hypotenuse);", "  \
    \      // NOTE: Solutions should not use trigonometric functions, such as\n  \
    \      // Math.Cos() or Math.Sin().\n        // BEGIN SOLUTION\n        var x\
    \ = new[] { a, b, c };\n        Array.Sort(x);\n        return x[0] * x[0] + x[1]\
    \ * x[1] == x[2] * x[2];\n        // END SOLUTION", "        var sides = new List<long>\
    \ { a, b, c };\n        sides.Sort();\n        return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2];", "        //return (a*a+b*b==c*c || a*a+c*c==b*b\
    \ || b*b+c*c==a*a);\n        var list = new List<long>{a,b,c};\n        list.Sort();\n\
    \        return (list[0]*list[0]+list[1]*list[1]==list[2]*list[2]);", "      \
    \  double x = (double)a;\n        double y = (double)b;\n        double z = (double)c;\n\
    \        return Math.Pow(x, 2) + Math.Pow(y, 2) == Math.Pow(z, 2);", "       \
    \ var sides = new List<long>() { a, b, c };\n        var max = sides.Max();\n\
    \        var other = sides.Except(new List<long>() { max }).ToList();\n      \
    \  return Math.Pow(max, 2) == Math.Pow(other[0], 2) + Math.Pow(other[1], 2);",
  "        // return (a * a) + (b * b) == (c * c);\n        return Math.Pow(a, 2)\
    \ + Math.Pow(b, 2) == Math.Pow(c, 2);", '        return (Math.Pow(a, 2) + Math.Pow(b,
    2) == Math.Pow(c, 2));', '        return ((a * a) + (b * b) == (c * c)) || ((a
    * a) + (c * c) == (b * b)) || ((b * b) + (c * c) == (a * a));', "        // You\
    \ can use Geometry.cs, a .cs file available in the coding area\n        // which\
    \ contains classes and methods to help you solve this\n        // problem. \n\
    \        \n        // You are not allowed to use any other external .cs or .dll\
    \ files.\n        // You are not allowed to create any new classes.\n        //\
    \ You are not allowed to use any methods for string manipulation.\n\n        //\
    \ Solve this problem by implementing the RightAngleTriangle function\n       \
    \ // below.\n        // You can use the GetLength method of the LineSegment class\
    \ to get\n        // the length of a LineSegment.\n        // Return true if the\
    \ three LineSegments form a right-angled triangle,\n        // false otherwise.\n\
    \        // Remember, you are not allowed to use any other external .cs or .dll\n\
    \        // files.\n\n        // SOLUTION STARTS HERE //\n        throw new NotImplementedException();\n\
    \        // SOLUTION ENDS HERE //", "        // first, take the square root of\
    \ a,b,c\n        // second, sum these three numbers\n        // third, see if\
    \ it is equal to the third number squared\n        // if it is, then it is a right\
    \ angle triangle\n        long[] sides = new long[] {a, b, c};\n        long largestSide\
    \ = a;\n        if (b > largestSide) {\n            largestSide = b;\n       \
    \ }\n        if (c > largestSide) {\n            largestSide = c;\n        }\n\
    \        if (largestSide == a) {\n            return Math.Pow(a, 2) == Math.Pow(b,\
    \ 2) + Math.Pow(c, 2);\n        } else if (largestSide == b) {\n            return\
    \ Math.Pow(b, 2) == Math.Pow(a, 2) + Math.Pow(c, 2);\n        } else {\n     \
    \       return Math.Pow(c, 2) == Math.Pow(a, 2) + Math.Pow(b, 2);\n        }",
  '        return (a*a + b*b == c*c) || (b*b + c*c == a*a) || (c*c + a*a == b*b);',
  "        var sides = new long[] { a, b, c };\n        Array.Sort(sides);\n     \
    \   var a2 = sides[0] * sides[0];\n        var b2 = sides[1] * sides[1];\n   \
    \     var c2 = sides[2] * sides[2];\n        if (a2 + b2 == c2) return true;\n\
    \        return false;", '        return a*a + b*b == c*c;', "        // n^2 +\
    \ n^2 = n^2\n        // n^2 = n^2 + n^2\n        // x^2 + y^2 = z^2\n        return\
    \ (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a\
    \ * a);", '        return (Math.Pow(a, 2) + Math.Pow(b, 2) == Math.Pow(c, 2));',
  "        // code goes here\n        long sum_of_squares = (a * a) + (b * b);\n \
    \       long c_squared = c * c;\n        if (sum_of_squares == c_squared)\n  \
    \      {\n            return true;\n        }\n        else\n        {\n     \
    \       return false;\n        }", "        // your code goes here\n        throw\
    \ new NotImplementedException();", "        if (a > b && a > c)\n            return\
    \ Math.Pow(a, 2) == Math.Pow(b, 2) + Math.Pow(c, 2);\n        else if (b > a &&\
    \ b > c)\n            return Math.Pow(b, 2) == Math.Pow(a, 2) + Math.Pow(c, 2);\n\
    \        else\n            return Math.Pow(c, 2) == Math.Pow(a, 2) + Math.Pow(b,\
    \ 2);", "        // Fill in this part.\n        // Go to http://www.mathsisfun.com/triangle.html\
    \ if you forgot how to \n        // find out if a triangle is right-angled\n \
    \       return false;", "        // Insert your code here.\n        throw new\
    \ NotImplementedException();", '        return a * a + b * b == c * c;', "   \
    \     // TODO: implement me\n        return true;", "        // PUT YOUR CODE\
    \ HERE\n        return false;", "        // TODO\n        return false;", "  \
    \      var s = new long[] { a, b, c };\n        Array.Sort(s);\n        return\
    \ s[0] * s[0] + s[1] * s[1] == s[2] * s[2];", "        long[] sides = new long[]\
    \ { a, b, c };\n        Array.Sort(sides);\n        return (sides[0] * sides[0]\
    \ + sides[1] * sides[1]) == sides[2] * sides[2];", "        // Compute the maximum\
    \ of the three sides.\n        long max = a;\n        if (b > max) {\n       \
    \     max = b;\n        }\n        if (c > max) {\n            max = c;\n    \
    \    }\n        // The largest side is opposite to the right angle, so it must\
    \ be \n        // squared.\n        long max2 = max * max;\n        // The other\
    \ two sides must be squared and summed, but don't forget that \n        // this\
    \ sum is not yet squared (because it is not a side).\n        long sum2 = a *\
    \ a + b * b + c * c - max2;\n        // If the maximum side squared is equal to\
    \ the sum of the squares of the \n        // other two sides then we have a right-angled\
    \ triangle.\n        return max2 == sum2;", "        // the side with the largest\
    \ length can never be the hypotenuse of a\n        // right-angled triangle, because\
    \ the hypotenuse is the longest side of\n        // the triangle.\n        if\
    \ (a < b && b < c) return false;\n        if (a < c && c < b) return false;\n\
    \        if (b < a && a < c) return false;\n        if (b < c && c < a) return\
    \ false;\n        if (c < a && a < b) return false;\n        if (c < b && b <\
    \ a) return false;\n        // the side with the largest length can never be the\
    \ hypotenuse of a\n        // right-angled triangle, because the hypotenuse is\
    \ the longest side of\n        // the triangle.\n\n        // a^2 + b^2 = c^2\n\
    \        return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b\
    \ + c * c == a * a);", "        long max = Math.Max(a, Math.Max(b, c));\n    \
    \    // max is the hypotenuse\n        long pythagoras = (a * a) + (b * b) + (c\
    \ * c) - (max * max);\n        // square of the sum of the other two sides\n \
    \       return pythagoras == 0;", "        // Implement me!\n        if (a * a\
    \ + b * b == c * c) {\n            return true;\n        }\n        return false;",
  "        // Your code here\n        return false;", "        var a2 = Math.Pow(a,\
    \ 2);\n        var b2 = Math.Pow(b, 2);\n        var c2 = Math.Pow(c, 2);\n  \
    \      var cB = b2 + c2;\n        var cA = a2 + c2;\n        var cC = a2 + b2;\n\
    \        var c1 = Math.Round(Math.Sqrt(cA), 0);\n        var c2B = Math.Round(Math.Sqrt(cB),\
    \ 0);\n        var c2C = Math.Round(Math.Sqrt(cC), 0);\n        if (c == c1 ||\
    \ c == c2B || c == c2C) {\n            return true;\n        }\n        return\
    \ false;", "        long[] ar = new long[] { a, b, c };\n        Array.Sort(ar);\n\
    \        return ar[0] * ar[0] + ar[1] * ar[1] == ar[2] * ar[2];", "        //Implement\
    \ me!\n        return false;", "        long[] sides = new long[] { a, b, c };\n\
    \        Array.Sort(sides);\n        return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2];", "        if (a <= 0 || b <= 0 || c <= 0)\n       \
    \     return false;\n        // Pythagorean theorem\n        if (a > b && a >\
    \ c) {\n            if (a * a == b * b + c * c)\n                return true;\n\
    \        } else if (b > a && b > c) {\n            if (b * b == a * a + c * c)\n\
    \                return true;\n        } else if (c > a && c > b) {\n        \
    \    if (c * c == a * a + b * b)\n                return true;\n        }\n  \
    \      return false;", '        return (a*a + b*b == c*c) || (a*a + c*c == b*b)
    || (b*b + c*c == a*a);', "        // Let's sort the sides by size. We need to\
    \ know which sides are the\n        // longest and shortest.\n        long[] x\
    \ = new long[] { a, b, c };\n        Array.Sort(x);\n        long hypotenuse =\
    \ x[2];\n        long shortside = x[0];\n        long longside = x[1];\n     \
    \   // Now it's easy to determine whether the triangle is right-angled:\n    \
    \    if (shortside*shortside + longside*longside == hypotenuse*hypotenuse) {\n\
    \            return true;\n        } else {\n            return false;\n     \
    \   }", "        // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n        // sides form a right-angled triangle, false otherwise.\n\
    \        // A right-angled triangle is a triangle in which one angle is right\
    \ angle or \n        // 90 degree.\n        // Example:\n        // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n        // (true)\n        // >>> RightAngleTriangle((1L), (2L),\
    \ (3L))\n        // (false)\n        var baseSqrd = a * a;\n        var heightSqrd\
    \ = b * b;\n        var hypotenuseSqrd = c * c;\n        if (baseSqrd + heightSqrd\
    \ == hypotenuseSqrd) {\n            return true;\n        }\n        return false;",
  "        // 1. Compare sides\n        if(a > b && a > c) {\n            return (a\
    \ * a == b * b + c * c);\n        } else if(b > a && b > c) {\n            return\
    \ (b * b == a * a + c * c);\n        } else {\n            return (c * c == a\
    \ * a + b * b);\n        }", "        // Your code goes here.\n        throw new\
    \ NotImplementedException();", "        double[] sides = new double[] { a, b,\
    \ c };\n        Array.Sort(sides);\n        double hyp = sides[2];\n        double\
    \ side1 = sides[0];\n        double side2 = sides[1];\n        return (hyp * hyp)\
    \ == (side1 * side1) + (side2 * side2);", "        if (a < b) {\n            var\
    \ t = a;\n            a = b;\n            b = t;\n        }\n        if (a < c)\
    \ {\n            var t = a;\n            a = c;\n            c = t;\n        }\n\
    \        return c * c + b * b == a * a;", "        if (a > b && a > c) {\n   \
    \         return a * a == b * b + c * c;\n        } else if (b > a && b > c) {\n\
    \            return b * b == a * a + c * c;\n        } else {\n            return\
    \ c * c == a * a + b * b;\n        }", "        // Implement me!\n        long[]\
    \ sides = new long[] { a, b, c };\n        Array.Sort(sides);\n        long hypo\
    \ = sides[2];\n        long adj = sides[1];\n        long opp = sides[0];\n  \
    \      if (hypo * hypo == adj * adj + opp * opp)\n            return true;\n \
    \       return false;", "        long[] sides = new long[] { a, b, c };\n    \
    \    Array.Sort(sides);\n        return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2];", "        // Solve the problem yourself.\n        //\
    \ return true;", "        long[] l = new long[] { a, b, c };\n        Array.Sort(l);\n\
    \        return l[0] * l[0] + l[1] * l[1] == l[2] * l[2];", "        long[] sides\
    \ = new long[] { a, b, c };\n        Array.Sort(sides);\n        return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];", "        // Write\
    \ code here\n        long[] num = {a, b, c};\n        Array.Sort(num);\n     \
    \   if (num[0] * num[0] + num[1] * num[1] == num[2] * num[2]) {\n            return\
    \ true;\n        }\n        return false;", "        // Insert your code here.\n\
    \        return (a*a + b*b == c*c);", '        throw new NotImplementedException();',
  "        // Using pythagoras theorem\n        return a * a + b * b == c * c || a\
    \ * a + c * c == b * b || c * c + b * b == a * a;", "        // Check if a, b\
    \ and c are integers\n        // Check if a, b and c are positive\n        //\
    \ Check if a is less than b plus c and so on\n        if (a > 0 && b > 0 && c\
    \ > 0) {\n            if (a < b + c && b < a + c && c < a + b) {\n           \
    \     if (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c ==\
    \ a * a) {\n                    return true;\n                }\n            }\n\
    \        }\n        return false;", "        // Your code here\n        return\
    \ (a*a + b*b == c*c);", "        // sqrt(a^2 + b^2) == c?\n        return Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) == Math.Pow(c, 2);", "        long max = Math.Max(a, b);\n\
    \        max = Math.Max(max, c);\n        long sum = a + b + c;\n        if (max\
    \ * max == sum - max) {\n            return true;\n        }\n        return false;"]
stop_tokens:
- "\n    }\n"
