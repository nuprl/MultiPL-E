name: HumanEval_24_largest_divisor
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // For a given number n, find the largest number that divides n\
  \ evenly, smaller than n\n    // >>> LargestDivisor((15L))\n    // (5L)\n    public\
  \ static long LargestDivisor(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestDivisor((3L))\
  \ == (1L));\n    Debug.Assert(LargestDivisor((7L)) == (1L));\n    Debug.Assert(LargestDivisor((10L))\
  \ == (5L));\n    Debug.Assert(LargestDivisor((100L)) == (50L));\n    Debug.Assert(LargestDivisor((49L))\
  \ == (7L));\n    }\n\n}\n"
completions: ["        long min = 2;\n        while (n % min == 0) min++;\n      \
    \  min--;\n        long max = n / 2;\n        while (max > min) {\n          \
    \  long num = (min + max) / 2;\n            if (n % num == 0) {\n            \
    \    min = num;\n            } else {\n                max = num - 1;\n      \
    \      }\n        }\n        return min;", '        return (Enumerable.Range(2,
    Int32.MaxValue - 1).Reverse().First(i => n % i == 0));', "        long largestDivisor\
    \ = 0;\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n\
    \                largestDivisor = i;\n            }\n        }\n        return\
    \ largestDivisor;", "        long res = n - 1;\n        while (n % res != 0) res--;\n\
    \        return res;", "        long maxDivisor = 1;\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            if (n % i == 0) {\n                maxDivisor\
    \ = i;\n            }\n        }\n        return maxDivisor;", "        for (long\
    \ d = n-1; d > 1; d--) {\n            if (n % d == 0) return d;\n        }\n \
    \       return 1;", "        long max = (long)Math.Sqrt(n);\n        for (long\
    \ i = max; i > 1; i--) {\n            if (n % i == 0) {\n                return\
    \ i;\n            }\n        }\n        return n;", "        for (long i = n -\
    \ 1; i > 1; i--) {\n            if (n % i == 0) {\n                return i;\n\
    \            }\n        }\n        return 0;", "        Debug.Assert(n >= 1);\n\
    \        if (n == 1) {\n            return n;\n        }\n        var factors\
    \ = PrimeFactors(n);\n        var factorCounts = new Dictionary<long, int>();\n\
    \        foreach (var f in factors) {\n            if (!factorCounts.ContainsKey(f))\
    \ {\n                factorCounts[f] = 0;\n            }\n            factorCounts[f]++;\n\
    \        }\n        return factorCounts.Keys.Aggregate(1L, (acc, x) => acc * x);",
  "        var c = n / 2;\n        while (c > 1) {\n            if (n % c == 0) {\n\
    \                return c;\n            }\n            c -= 1;\n        }\n  \
    \      return 1;", "        long best = 1;\n        for (long i = 2; i <= n /\
    \ 2; i++) {\n            if (n % i == 0) best = i;\n        }\n        return\
    \ best;", "        long divisor = 2;\n        while (divisor <= Math.Sqrt(n))\
    \ {\n            if (n % divisor == 0) {\n                return n / divisor;\n\
    \            }\n            divisor++;\n        }\n        return 1;", "     \
    \   // If n is prime, the answer is 1\n        if (IsPrime(n)) {\n           \
    \ return 1;\n        }\n        // Multiply all the primes smaller than n together\n\
    \        // This is guaranteed to be the largest divisor\n        // (since no\
    \ numbers with fewer factors will divide n)\n        long divisor = 1;\n     \
    \   foreach (var prime in Primes(n)) {\n            divisor *= prime;\n      \
    \  }\n        return divisor;", "        for (long i = n / 2; i > 1; i--) {\n\
    \            if (n % i == 0) return i;\n        }\n        return n;", "     \
    \   for (long i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n\
    \                return n / i;\n            }\n        }\n        return 1;",
  "        // Base case\n        if (n == 1) return 0;\n        if (n < 1) throw new\
    \ ArgumentException(\"n must be positive\");\n        // Find a factor with a\
    \ fast algorithm\n        long factor = 1;\n        while (n % 2 == 0) {\n   \
    \         factor = 2;\n            n /= 2;\n        }\n        long maxFactor\
    \ = (long)Math.Sqrt(n);\n        for (long f = 3; f <= maxFactor; f += 2) {\n\
    \            while (n % f == 0) {\n                factor = f;\n             \
    \   n /= f;\n            }\n        }\n        if (n > 2) factor = n;\n      \
    \  return factor;", "        // (1) Start with the largest possible number that\
    \ divides n evenly, n-1\n        long x = n - 1;\n        // (2) Check if x divides\
    \ n evenly\n        while (n % x != 0) {\n            // (3) If not, subtract\
    \ 1 from x and try again\n            x--;\n        }\n        // (4) If x does\
    \ divide n evenly, then return x\n        return x;", "        for (int i = 2;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                n /= i;\n   \
    \             i--;\n            }\n        }\n        return n;", "        long\
    \ limit = (long)Math.Sqrt(n);\n        for (long i = 2; i <= limit; i++) {\n \
    \           if (n % i == 0) {\n                return n / i;\n            }\n\
    \        }\n        return 1;", "        // Find the smallest prime factor of\
    \ n\n        long f = 1;\n        while (f < n) {\n            f++;\n        \
    \    if (n % f == 0) {\n                // Divide n by f, and repeat with the\
    \ result\n                return LargestDivisor(n / f);\n            }\n     \
    \   }\n        // We've found the largest divisor!\n        return n;", "    \
    \    int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
    \                return n / i;\n            }\n            i++;\n        }\n \
    \       return 1;", "        // think of it as a factorization\n        // n =\
    \ a_0 * a_1 * a_2 * ... * a_k\n        // now, we iterate through all primes,\
    \ finding their factors\n        long ans = 1;\n        foreach (long prime in\
    \ Prime.Sieve(n)) {\n            // iterate as long as n is divisible by prime\n\
    \            while (n % prime == 0) {\n                ans *= prime;\n       \
    \         n /= prime;\n            }\n        }\n        return ans;", "     \
    \   long r = (long)Math.Floor(Math.Sqrt(n));\n        while (r > 1) {\n      \
    \      if (n % r == 0) {\n                return r;\n            }\n         \
    \   r -= 1;\n        }\n        return -1;", "        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                return n / i;\n     \
    \       }\n        }\n        return 1;", "        long root = (long)Math.Floor(Math.Sqrt(n));\n\
    \        long divisor = root;\n        while (n % divisor != 0) {\n          \
    \  divisor--;\n        }\n        return divisor;", "        long res = 1;\n \
    \       long max = (long)Math.Floor(Math.Sqrt(n));\n        for (long i = max;\
    \ i > 1; i--) {\n            if (n % i == 0) {\n                res = i;\n   \
    \             break;\n            }\n        }\n        return res;", "      \
    \  for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n          \
    \      n /= i;\n                i--;\n            }\n        }\n        return\
    \ n;", "        for (long i = n / 2; i > 1; i--) {\n            if (n % i == 0)\
    \ {\n                return i;\n            }\n        }\n        return 1;",
  "        for (long i = n - 1; i > 1; i--) {\n            if (n % i == 0) {\n   \
    \             return i;\n            }\n        }\n        return 1;", "     \
    \   // If n is even, divide by 2 until n is odd\n        while ((n & 1) == 0)\
    \ n /= 2;\n        // Search for a factor\n        for (long f = 3; f <= Math.Sqrt(n);\
    \ f += 2) {\n            if (n % f == 0) {\n                // Found a factor,\
    \ factor out\n                n /= f;\n                // Check if we're still\
    \ even and divide by 2 if so\n                while ((n & 1) == 0) n /= 2;\n \
    \               // Check if the new n is equal to the last factor\n          \
    \      if (n == f) return f;\n                // Otherwise go back to the top\
    \ of the loop and see if f divides n\n            }\n        }\n        // If\
    \ n is 1 or n is prime, return 1\n        return 1;", "        long bound = (long)Math.Ceiling(Math.Sqrt(n));\n\
    \        for (long i = bound; i > 1; i--) {\n            if (n % i == 0) {\n \
    \               return i;\n            }\n        }\n        return 1;", "   \
    \     Debug.Assert(n >= 2);\n        long result = n / 2;\n        while (result\
    \ * 2 >= n) {\n            if (n % result == 0)\n                return result;\n\
    \            result--;\n        }\n        Debug.Assert(false);\n        return\
    \ -1;", "        long d = 2;\n        while (d * d <= n) {\n            if (n\
    \ % d == 0) {\n                n /= d;\n            } else {\n               \
    \ d++;\n            }\n        }\n        return n;", "        long upper = (long)Math.Sqrt(n)\
    \ + 1;\n        for (long d = upper; d > 1; d--) {\n            if (n % d == 0)\
    \ {\n                return d;\n            }\n        }\n        return 1;",
  "        long d = 1;\n        for (long i = 2; i < n; i++) {\n            if (n\
    \ % i == 0) {\n                d = i;\n            }\n        }\n        return\
    \ d;", "        long result = 1;\n        for (long d = 2; d <= n; d++) {\n  \
    \          if (n % d == 0) {\n                result = d;\n            }\n   \
    \     }\n        return result;", "        long largest = 1;\n        for (long\
    \ i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n            }\n        }\n        return largest;", "        long d =\
    \ 2;\n        while(n % d != 0) {\n            d++;\n        }\n        return\
    \ d;", "        long x = 2;\n        while (x*x < n) {\n            if (n % x\
    \ == 0) {\n                return n / x;\n            }\n            x++;\n  \
    \      }\n        return 1;", "        int i = 2;\n        long max_divisor =\
    \ 1;\n        while (i * i <= n) {\n            if (n % i == 0) {\n          \
    \      max_divisor = i;\n            }\n            i += 1;\n        }\n     \
    \   return max_divisor;", "        if (n % 2 == 0) {\n            return n / 2;\n\
    \        }\n        for (long x = (long)Math.Sqrt(n); x > 1; x--) {\n        \
    \    if (n % x == 0) {\n                return x;\n            }\n        }\n\
    \        return 1;", "        if (n == 0) {\n            return 0;\n        }\n\
    \        long a = 1;\n        long b = n;\n        while (a < b) {\n         \
    \   if (n % a == 0) {\n                b = n / a;\n            }\n           \
    \ ++a;\n        }\n        return a;", "        for (long i = n - 1; i > 1; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;", "        for (long i = n-1; i > 1; i--) {\n  \
    \          if (n % i == 0) {\n                return i;\n            }\n     \
    \   }\n        return 0;", "        // Return the number itself if it's prime\n\
    \        if (IsPrime(n)) {\n            return n;\n        }\n        // Find\
    \ the largest prime factor and return that\n        long largestPrimeFactor =\
    \ LargestPrimeFactor(n);\n        return largestPrimeFactor;", "        long upto\
    \ = (long)Math.Ceiling(Math.Sqrt(n));\n        for (long i = upto; i > 1; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;", "        for (long i = n - 1; i > 1; i--) {\n\
    \            if (n % i == 0) return i;\n        }\n        return 1;", "     \
    \   long largestDivisor = 1;\n        for (long i = 2; i <= n / 2; i++) {\n  \
    \          if (n % i == 0) {\n                largestDivisor = i;\n          \
    \  }\n        }\n        return largestDivisor;", "        // Bound on how far\
    \ to check factors\n        long upper = (long)Math.Floor(Math.Sqrt(n));\n   \
    \     for (long i = upper; i > 1; i--) {\n            if (n % i == 0) {\n    \
    \            return i;\n            }\n        }\n        return 1;", "      \
    \  long divisor = n / 2;\n        while (n % divisor != 0) {\n            divisor--;\n\
    \        }\n        return divisor;", "        for (long i = n-1; i > 1; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;", "        for (long i = n - 1; i > 1; i--) {\n\
    \            if (n % i == 0) {\n                return i;\n            }\n   \
    \     }\n        return 1;", "        for (long i = n - 1; i > 1; i--) {\n   \
    \         if (n % i == 0) {\n                return i;\n            }\n      \
    \  }\n        return -1;", "        long result = 1;\n        long m = 2;\n  \
    \      while (m * m <= n) {\n            if (n % m == 0) {\n                result\
    \ = m;\n                n /= m;\n            } else {\n                m++;\n\
    \            }\n        }\n        return result;", "        long p;\n       \
    \ for (p = 2; p <= Math.Sqrt(n); p++) {\n            if (n % p == 0)\n       \
    \         return n / p;\n        }\n        return 1;", "        // If a number\
    \ is prime, the largest divisor will be 1\n        if (PrimeCheck(n)) {\n    \
    \        return 1;\n        }\n\n        // If a number is less than two, it has\
    \ no divisors\n        if (n < 2) {\n            return 0;\n        }\n\n    \
    \    // Reduce the largest possible number to search, by only considering prime\
    \ numbers that are less than the value\n        var prev_primes = PrimeNumbers.PreviousPrimes(n);\n\
    \        var last_primes = prev_primes.Where(a => a < n).ToList();\n\n       \
    \ // Divide the number by each prime number, and check if the result is even\n\
    \        foreach (var prime in last_primes) {\n            if (n % prime == 0)\
    \ {\n                return n / prime;\n            }\n        }\n\n        //\
    \ Return the last prime number, if none of the primes divide the number evenly\n\
    \        return last_primes.Last();", '        return LargestDivisor(n, 2);',
  "        long m = (long)Math.Sqrt(n);\n        for (long i = m; i > 1; i--) {\n\
    \            if (n % i == 0) {\n                return i;\n            }\n   \
    \     }\n        return 1;", "        for (long i = n - 1; i > 1; i--) {\n   \
    \         if (n % i == 0) {\n                return i;\n            }\n      \
    \  }\n        return -1;", "        // This method will try to find the largest\
    \ divisor by going backwards\n        // and seeing if they go into n. In the\
    \ worst case, n is a prime number.\n        // In that case, this algorithm will\
    \ end up taking linear time. But it\n        // will do a lot of unnecessary work.\n\
    \        for (long i = n-1; i > 1; i--) {\n            if (n % i == 0) {\n   \
    \             return i;\n            }\n        }\n        return 1;", "     \
    \   long divisor = n - 1;\n        while (divisor > 1) {\n            if (n %\
    \ divisor == 0) {\n                return divisor;\n            }\n          \
    \  divisor -= 1;\n        }\n        return -1;", "        if (n < 2) {\n    \
    \        return 1;\n        }\n        long largest = 1;\n        long i = 1;\n\
    \        while (i * i <= n) {\n            if (n % i == 0) {\n               \
    \ largest = i;\n            }\n            i++;\n        }\n        if (largest\
    \ * largest == n) {\n            return largest;\n        }\n        else {\n\
    \            return largest * LargestDivisor(n / largest);\n        }", "    \
    \    long largest_divisor = 1;\n        for (long i = 2; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                largest_divisor = i;\n           \
    \ }\n        }\n        return largest_divisor;", "        // Please enter your\
    \ code here\n        return 0;", "        long m = (long)Math.Floor(Math.Sqrt(n));\n\
    \        while (n % m != 0 && m > 1) {\n            m--;\n        }\n        return\
    \ m;", "        if (n % 2 == 0) {\n            return n / 2;\n        }\n    \
    \    long m = (long)Math.Sqrt(n);\n        long k = n / m;\n        for (long\
    \ i = k; i > 1; i--) {\n            if (n % i == 0) {\n                return\
    \ i;\n            }\n        }\n        return 1;", "        for (long d = n /\
    \ 2; d > 1; d--) {\n            if (n % d == 0) {\n                return d;\n\
    \            }\n        }\n        return 1;", "        long e = (long) Math.Sqrt(n);\n\
    \        while (e > 1) {\n            if (n % e == 0) {\n                return\
    \ e;\n            }\n            e -= 1;\n        }\n        return 1;", "   \
    \     for (long i = n - 1; i > 1; i--) {\n            if (n % i == 0) {\n    \
    \            return i;\n            }\n        }\n        return 1;", "      \
    \  if (n < 1) {\n            throw new ArgumentException(\"n must be greater than\
    \ zero.\", \"n\");\n        }\n        if (n == 1) {\n            return 1;\n\
    \        }\n        long boundary = n / 2;\n        for (long i = boundary; i\
    \ > 1; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 1;", "        if (n % 2 == 0) {\n      \
    \      n /= 2;\n            while (n % 2 == 0) {\n                n /= 2;\n  \
    \          }\n            return n;\n        }\n        for (long i = 3; i * i\
    \ <= n; i += 2) {\n            if (n % i == 0) {\n                n /= i;\n  \
    \              while (n % i == 0) {\n                    n /= i;\n           \
    \     }\n                return n;\n            }\n        }\n        return 1;",
  "        long i = 2;\n        while (n % i != 0) {\n            i += 1;\n      \
    \  }\n        return i;", "        for (long i = 2; i <= Math.Ceiling(Math.Sqrt(n));\
    \ i++) {\n            if (n % i == 0) {\n                return n / i;\n     \
    \       }\n        }\n        return 1;", "        // Check all the odd numbers\n\
    \        for (long factor = n / 2; factor > 1; factor--) {\n            if (n\
    \ % factor == 0) {\n                return factor;\n            }\n        }\n\
    \        return 1;", "        if (n == 1) {\n            return 1;\n        }\n\
    \        var sqrt = (long)Math.Sqrt(n);\n        for (long i = sqrt; i > 1; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;", "        if (n % 2 == 0) return n / 2;\n\n   \
    \     int limit = (int)Math.Sqrt(n);\n        for (int i = 3; i <= limit; i +=\
    \ 2) {\n            if (n % i == 0) return n / i;\n        }\n        return 1;",
  "        for (long i = n / 2; i > 1; i--) {\n            if (n % i == 0) {\n   \
    \             return i;\n            }\n        }\n        return 1;", "     \
    \   for (long i = n / 2; i > 1; i--) {\n            if (n % i == 0) {\n      \
    \          return i;\n            }\n        }\n        return 1;", "        var\
    \ r = (long)Math.Sqrt(n);\n        while (n % r != 0) {\n            r--;\n  \
    \      }\n        return r;", "        BigInteger sqrt = BigInteger.Zero;\n  \
    \      BigInteger.TryParse(Math.Sqrt(n).ToString(), out sqrt);\n        for (long\
    \ d = (long)sqrt; d > 1; d--) {\n            if (n % d == 0) {\n             \
    \   return d;\n            }\n        }\n        return -1;", "        if (n <\
    \ 2) return 0;\n        long i = n / 2;\n        while (n % i != 0) i--;\n   \
    \     return i;", "        for (long d = n / 2; d > 1; d--) {\n            if\
    \ (n % d == 0) {\n                return d;\n            }\n        }\n      \
    \  return 1;", "        long bound = (long)Math.Sqrt(n);\n        for (long i\
    \ = bound; i > 1; i--) {\n            if (n % i == 0) {\n                return\
    \ i;\n            }\n        }\n        return 1;", "        long i = n;\n   \
    \     do {\n            i--;\n        } while (n % i != 0);\n        return i;",
  "        for (long d = n / 2; d > 1; d--) {\n            if (n % d == 0) {\n   \
    \             return d;\n            }\n        }\n        return 1;", "     \
    \   BigInteger sq = BigInteger.Sqrt(n);\n        for (BigInteger i = sq; i > 1;\
    \ i--) {\n            if (n % i == 0) {\n                return (long)i;\n   \
    \         }\n        }\n        return 1;", "        var result = 1L;\n      \
    \  for (var i = 2L; i <= n; i++) {\n            if (n % i == 0) {\n          \
    \      result = i;\n            }\n        }\n        return result;", "     \
    \   long largest = 1;\n        for (long i = 2; i < n; i++) {\n            if\
    \ (n % i == 0) {\n                largest = i;\n            }\n        }\n   \
    \     return largest;", "        for (long i = 2; i < n; i++) {\n            if\
    \ (n % i == 0) {\n                return n / i;\n            }\n        }\n  \
    \      return 1;", "        long[] divisors = Factor(n);\n        long best =\
    \ 0;\n        for (int i = divisors.Length - 1; i >= 0; i--) {\n            if\
    \ (n % divisors[i] == 0) {\n                best = divisors[i];\n            \
    \    break;\n            }\n        }\n        return best;", "        long a\
    \ = (long)Math.Sqrt(n);\n        while(n % a != 0) a--;\n        return a;", " \
    \       for (long i = n-1; i > 1; i--) {\n            if (n % i == 0) return i;\n\
    \        }\n        return 1;", "        for (long i = n - 1; i > 1; i--) {\n\
    \            if (n % i == 0) return i;\n        }\n        return 0;", "     \
    \   for (long i = n - 1; i > 1; i--) {\n            if (n % i == 0) {\n      \
    \          return i;\n            }\n        }\n        return 1;", "        long\
    \ factor = 3;\n        long maxFactor = (long)Math.Sqrt(n);\n        while (n\
    \ > 1 && factor <= maxFactor) {\n            if (n % factor == 0) {\n        \
    \        n /= factor;\n                maxFactor = (long)Math.Sqrt(n);\n     \
    \       } else {\n                factor += 2;\n            }\n        }\n   \
    \     return n;", "        long r = n - 1;\n        while (r > 1) {\n        \
    \    if (n % r == 0)\n                return r;\n            r--;\n        }\n\
    \        return 1;", "        long i = 2;\n        while (i < n) {\n         \
    \   if (n % i == 0) {\n                return n / i;\n            }\n        \
    \    i++;\n        }\n        return -1;", "        if (n % 2 == 0) {\n      \
    \      return n / 2;\n        }\n        else {\n            for (long i = 3;\
    \ i < n; i += 2) {\n                if (n % i == 0) {\n                    return\
    \ n / i;\n                }\n            }\n        }\n        return 1;", " \
    \       for (long i = n - 1; i > 1; i--) {\n            if (n % i == 0) {\n  \
    \              return i;\n            }\n        }\n        return 1;", "    \
    \    long u = (long)Math.Floor(Math.Sqrt(n));\n        while (u > 0) {\n     \
    \       if (n % u == 0) {\n                return u;\n            }\n        \
    \    u--;\n        }\n        return 1;", "        for (long i = n-1; i > 1; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;", "        long i = n-1;\n        while (i > 1)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \            i--;\n        }\n        return 1;", "        if (n % 2 == 0) {\n\
    \            return n / 2;\n        }\n        // Evenly divides if the result\
    \ is an integer\n        var sqrt = Math.Floor(Math.Sqrt(n));\n        for (long\
    \ i = 3; i <= sqrt; i+=2) {\n            if (n % i == 0) {\n                return\
    \ n / i;\n            }\n        }\n        return 1;", "        // while n is\
    \ not a perfect square,\n        // remove the largest square factor of n\n  \
    \      while (Math.Sqrt(n) != (long)Math.Sqrt(n)) {\n            var ldf = LargestDivisorFactor(n);\n\
    \            if (ldf == 1)\n                return 1;\n            n /= ldf;\n\
    \        }\n        return n;", "        long largest = 1;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n            }\n        }\n        return largest;", "        for (long\
    \ i = n / 2; i > 1; i--) {\n            if (n % i == 0) {\n                return\
    \ i;\n            }\n        }\n        return 1;", "        if (n < 0) {\n  \
    \          return LargestDivisor(-n);\n        }\n        if (n == 0) {\n    \
    \        return 0;\n        }\n        if (n == 1) {\n            return 1;\n\
    \        }\n        // >>> PrimeFactorization(5L)\n        // (5L)\n        //\
    \ >>> PrimeFactorization(15L)\n        // (3L, 5L)\n        List<long> primeFactorization\
    \ = PrimeFactorization(n);\n        // >>> Divisors(5L)\n        // (1L, 5L)\n\
    \        // >>> Divisors(15L)\n        // (1L, 3L, 5L, 15L)\n        List<long>\
    \ divisors = Divisors(primeFactorization);\n        return divisors[divisors.Count\
    \ - 2];", "        for (long d = n - 1; d > 1; d--)\n            if (n % d ==\
    \ 0)\n                return d;\n        return 1;", "        long result = 1;\n\
    \        for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n\
    \                result = i;\n            }\n        }\n        return result;",
  "        long d = n / 2;\n        while (n % d != 0) {\n            d--;\n     \
    \   }\n        return d;", "        for (int i = 2; i < n; i++) {\n          \
    \  if (n % i == 0) {\n                return n / i;\n            }\n        }\n\
    \        return 1;", "        for (long i = 2; i < n; i++) {\n            if (n\
    \ % i == 0) {\n                return n / i;\n            }\n        }\n     \
    \   throw new ArgumentException(\"Not Divisible.\");", "        var candidate\
    \ = new long[] { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97 };\n        foreach (var c in candidate) {\n\
    \            if (n % c == 0) {\n                return n / c;\n            }\n\
    \        }\n        return 1;", "        // Start at the root of the number\n\
    \        long root = (long)Math.Sqrt(n);\n        for (long i = root; i > 1; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;", "        var p = 2L;\n        while (p * p <=\
    \ n) {\n            if (n % p == 0)\n                n /= p;\n            else\n\
    \                p++;\n        }\n        return n;", "        if (n == 0L) {\n\
    \            return 0L;\n        }\n        var stopWatch = new Stopwatch();\n\
    \        stopWatch.Start();\n        var sqrtN = (long)Math.Sqrt(n);\n       \
    \ var factor = 2L;\n        while (n > 1 && factor <= sqrtN) {\n            while\
    \ (n % factor == 0) {\n                n /= factor;\n            }\n         \
    \   factor += 1;\n        }\n        stopWatch.Stop();\n        return n;", " \
    \       long limit = (long)Math.Ceiling(Math.Sqrt(n));\n        for (long i =\
    \ limit; i > 1; i--) {\n            if (n % i == 0) {\n                return\
    \ i;\n            }\n        }\n        return 1;", "        if (n % 2 == 0) return\
    \ LargestDivisor(n / 2);\n        if (n % 3 == 0) return LargestDivisor(n / 3);\n\
    \        long i = 5;\n        while (i <= Math.Sqrt(n)) {\n            if (n %\
    \ i == 0) return LargestDivisor(n / i);\n            if (n % (i + 2) == 0) return\
    \ LargestDivisor(n / (i + 2));\n            i += 6;\n        }\n        return\
    \ n;", "        if (n == 1) {\n            return 1;\n        }\n        var limit\
    \ = (long)Math.Sqrt(n);\n        for (var i = limit; i > 1; i--) {\n         \
    \   if (n % i == 0) {\n                return i;\n            }\n        }\n \
    \       return 1;", "        long ld = n-1;\n        while (n % ld != 0) {\n \
    \           ld--;\n        }\n        return ld;", "        if (n == 1) return\
    \ 1;\n        for (long i = n - 1; i > 1; i--) {\n            if (n % i == 0)\
    \ return i;\n        }\n        return 1;", "        Debug.Assert(n > 0);\n  \
    \      for (long i = n - 1; i > 1; i--) {\n            if (n % i == 0) {\n   \
    \             return i;\n            }\n        }\n        throw new InvalidOperationException(\"\
    No divisor found\");", "        long result = 1;\n        for (long i = 2; i <\
    \ n; i++) {\n            if (n % i == 0) {\n                result = i;\n    \
    \        }\n        }\n        return result;", "        for (long i = n - 1;\
    \ i > 1; i--) {\n            if (n % i == 0) return i;\n        }\n        return\
    \ 1;", "        long result = 1;\n        for (long d = 2; d * d <= n; d++) {\n\
    \            if (n % d == 0) {\n                while (n % d == 0) {\n       \
    \             n /= d;\n                }\n                result *= d;\n     \
    \       }\n        }\n        if (n > 1) {\n            result *= n;\n       \
    \ }\n        return result;", "        var ld = n/2L;\n        while (ld > 1L)\
    \ {\n            if (n % ld == 0L)\n                return ld;\n            ld\
    \ -= 1L;\n        }\n        return 1L;", "        // >>> n = (15L)\n        long\
    \ i = 2;\n        // >>> i = (2L)\n        while ((n % i) != 0) {\n          \
    \  // >>> i < (15L)\n            // >>> n % i != (0L)\n            i += 1;\n \
    \           // >>> i = (3L)\n            // >>> i < (15L)\n            // >>>\
    \ n % i != (0L)\n            i += 1;\n            // >>> i = (5L)\n          \
    \  // >>> i < (15L)\n            // >>> n % i == (0L)\n        }\n        // >>>\
    \ i < (15L)\n        // >>> n % i == (0L)\n        return i;\n        // >>> i\
    \ = (5L)", "        if(n == 1) return 1;\n        int half = (int)Math.Sqrt(n);\n\
    \        for(int i = half; i > 1; i--) {\n            if(n % i == 0) return i;\n\
    \        }\n        return 1;", "        long d = 2;\n        while (n % d !=\
    \ 0) d++;\n        return d;", "        for (long i = n - 1; i > 1; i--) {\n \
    \           if (n % i == 0) return i;\n        }\n        return 1;", "      \
    \  if (n < 2) {\n            return 1;\n        }\n        long i = 2;\n     \
    \   while (i * i <= n) {\n            if (n % i == 0) {\n                n /=\
    \ i;\n            } else {\n                i++;\n            }\n        }\n \
    \       return n;", "        long a = (long)Math.Sqrt(n);\n        while (n %\
    \ a != 0) {\n            a--;\n        }\n        return a;", "        for (int\
    \ i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return\
    \ n / i;\n            }\n        }\n        return 1;", "        if (n < 2) return\
    \ n;\n        long i;\n        if (n % 2 == 0) {\n            i = n / 2;\n   \
    \     } else {\n            i = (n - 1) / 2;\n        }\n        for (; i > 1;\
    \ i--) {\n            if (n % i == 0) {\n                return i;\n         \
    \   }\n        }\n        return 1;", "        var isqrt = (long)Math.Ceiling(Math.Sqrt(n));\n\
    \        for (long i = isqrt; i > 1; i--) {\n            if (n % i == 0) return\
    \ i;\n        }\n        return 1;", "        var maxFactor = n / 2;\n       \
    \ while (maxFactor > 0) {\n            if (n % maxFactor == 0) return maxFactor;\n\
    \            maxFactor--;\n        }\n        return 1;", "        if (n < 2)\
    \ return 0;\n        long upperBound = n / 2;\n        for (long divisor = upperBound;\
    \ divisor > 1; divisor--) {\n            if (n % divisor == 0) return divisor;\n\
    \        }\n        return 1;", "        for (long x = n - 1; x > 1; x--) {\n\
    \            if (n % x == 0) {\n                return x;\n            }\n   \
    \     }\n        return n;", '        return LargestDivisorHelper(n, 2);', " \
    \       // This is O(sqrt(n))\n        for (long i = (long)Math.Sqrt(n); i > 1;\
    \ i--) {\n            if (n % i == 0) {\n                return i;\n         \
    \   }\n        }\n        return 1;", "        if (n % 2 == 0) return LargestDivisor(n\
    \ / 2);\n        if (n % 3 == 0) return LargestDivisor(n / 3);\n        if (n\
    \ % 5 == 0) return LargestDivisor(n / 5);\n        return n;", "        // Assert:\
    \ n >= 1\n        if (n == 1) {\n            return 1;\n        }\n\n        long\
    \ maxDivisor = 1;\n        for (long i = 2; i <= Math.Sqrt(n); i++) {\n      \
    \      if (n % i == 0) {\n                maxDivisor = i;\n            }\n   \
    \     }\n        return maxDivisor;", "        if (n % 2 == 0) return LargestDivisor(n\
    \ / 2);\n        if (n % 3 == 0) return LargestDivisor(n / 3);\n        if (n\
    \ % 5 == 0) return LargestDivisor(n / 5);\n        if (n % 7 == 0) return LargestDivisor(n\
    \ / 7);\n        return n;", "        long v = 1;\n        for (long i = 2; i\
    \ <= n / 2; i++) {\n            if (n % i == 0) {\n                v = Math.Max(v,\
    \ i);\n            }\n        }\n        return v;", "        for (long i = n\
    \ / 2; i > 1; i--) {\n            if (n % i == 0) {\n                return i;\n\
    \            }\n        }\n        return 1;", "        for (long i = 2; i < n;\
    \ i++) {\n            if (n % i == 0) {\n                return i;\n         \
    \   }\n        }\n        return 1;", "        if (n == 1) return 1;\n       \
    \ long ld = 1;\n        int l = (int)Math.Floor(Math.Sqrt(n));\n        for (int\
    \ i = l; i > 1; i--) {\n            if (n % i == 0) {\n                ld = i;\n\
    \                break;\n            }\n        }\n        return ld;", "    \
    \    long res = 1;\n        for (long d = 2; d <= n; d++) {\n            if (n\
    \ % d == 0) res = d;\n        }\n        return res;", "        for (long i =\
    \ n / 2; i > 1; i--) {\n            if (n % i == 0) {\n                return\
    \ i;\n            }\n        }\n        return 1;", "        for (int i = 2; i\
    \ < n; i++) {\n            if (n % i == 0) {\n                n /= i;\n      \
    \          i--;\n            }\n        }\n        return n;", "        for (long\
    \ i = n - 1; i > 1; i--) {\n            if (n % i == 0) {\n                return\
    \ i;\n            }\n        }\n        return 1;", "        for (long i = n -\
    \ 1; i > 1; i--) {\n            if (n % i == 0) {\n                return i;\n\
    \            }\n        }\n        return 1;", "        long last = -1;\n    \
    \    long now = 0;\n        while (now != last) {\n            last = now;\n \
    \           now = n / (1 + (n - 1) / (last + 1));\n        }\n        return now;",
  "        Debug.Assert(n > 0);\n        var root = (long)Math.Sqrt(n);\n        for\
    \ (long i = root; i > 1; i--) {\n            if (n % i == 0) {\n             \
    \   return i;\n            }\n        }\n        return n;", "        long largest\
    \ = 0;\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n\
    \                largest = i;\n            }\n        }\n        return largest;",
  "        var limit = Math.Floor(Math.Sqrt(n));\n        for (long i = limit; i >\
    \ 1; i--) {\n            if (n % i == 0) {\n                return i;\n      \
    \      }\n        }\n        return 1;", "        // Start at the largest number\
    \ less than n.\n        // If it divides n evenly, return it.\n        // Otherwise,\
    \ subtract one and check again.\n        // Repeat until we find a divisor.\n\
    \        for (long i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n \
    \               return i;\n            }\n        }\n        // This should never\
    \ happen.\n        return -1;", "        var i = (long)Math.Sqrt(n);\n       \
    \ while (i > 1) {\n            if (n % i == 0) {\n                return i;\n\
    \            }\n            i--;\n        }\n        return 1;", "        for\
    \ (long i = n / 2; i > 1; i--) {\n            if (n % i == 0) {\n            \
    \    return i;\n            }\n        }\n        return 1;", "        long k\
    \ = (long)Math.Sqrt(n);\n        while (n % k != 0) {\n            k -= 1;\n \
    \       }\n        return k;", "        int N=(int)Math.Sqrt(n);\n        if (N<3)\
    \ {\n            return 1;\n        }\n        int p=2;\n        while (p<=N)\
    \ {\n            if (n%p==0) {\n                return n/p;\n            }\n \
    \           p++;\n        }\n        return 1;", "        long largestDivisor\
    \ = 0;\n        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largestDivisor = i;\n            }\n        }\n        return\
    \ largestDivisor;", "        for (long k = n - 1; k > 1; k--) {\n            if\
    \ (n % k == 0) {\n                return k;\n            }\n        }\n      \
    \  return n;", "        if (n < 0) { n = -n; }\n        while (n > 1) {\n    \
    \        if (IsPrime(n)) {\n                return n / 2;\n            }\n   \
    \         n--;\n        }\n        return 1;", "        long result = 1;\n   \
    \     for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n   \
    \             result = i;\n            }\n        }\n        return result;",
  "        // The code below can be replaced with\n        return n / LargestPrimeDivisor(n);\n\
    \        // But this would require a Prime generator, so let's not do it.\n  \
    \      long result = 1;\n        for (long i = 2; i < n; i++) {\n            if\
    \ (n % i == 0) {\n                result = i;\n            }\n        }\n    \
    \    return result;", '        return (long)Math.Sqrt(n);', "        if (n % 2\
    \ == 0) {\n            return n / 2;\n        }\n        for (int i = 3; i <=\
    \ Math.Sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return\
    \ n / i;\n            }\n        }\n        return 1;", "        for (long i =\
    \ n - 1; i > 1; i--) {\n            if (n % i == 0) return i;\n        }\n   \
    \     return 1;", "        if (n < 3) return 0;\n        long lim = (long)Math.Sqrt(n)\
    \ + 1;\n        for (long i = lim; i > 1; i--) {\n            if (n % i == 0)\
    \ {\n                return i;\n            }\n        }\n        return 1;",
  "        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ {\n                return n / i;\n            }\n            i += 1;\n     \
    \   }\n        return 1;", "        // We should explore all divisors, in order\
    \ of size, since we want the largest one.\n        // This is much faster if we\
    \ use factors, since we can go through each factor in constant time, by\n    \
    \    // keeping a list of all factors.\n        // If a number is a factor of\
    \ n, it means that n / f is an integer.\n        // That is, n % f == 0.\n   \
    \     foreach (long f in Factors(n)) {\n            if (n % f == 0) {\n      \
    \          return f;\n            }\n        }\n        return 1;", "        long\
    \ k = (long)Math.Floor(Math.Sqrt(n));\n        while (k > 1) {\n            if\
    \ (n % k == 0) {\n                return k;\n            }\n            k--;\n\
    \        }\n        return 1;", "        for (long i = 2; i < n; i++) {\n    \
    \        if (n % i == 0) return n / i;\n        }\n        return 1;", "     \
    \   for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n     \
    \           return n / i;\n            }\n        }\n        return 1;", "   \
    \     for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) return i;\n\
    \        }\n        return 1;", "        for (long i = n - 1; i > 1; i--) {\n\
    \            if (n % i == 0) {\n                return i;\n            }\n   \
    \     }\n        return 1;", "        for (long i = 2; i <= n; i++) {\n      \
    \      if (n % i == 0) {\n                return n / i;\n            }\n     \
    \   }\n        return 1;", "        long factor = 2;\n        while (factor <\
    \ n) {\n            if (n % factor == 0) {\n                n /= factor;\n   \
    \         } else {\n                factor++;\n            }\n        }\n    \
    \    return n;", "        for (long i = 2; i * i <= n; i++) {\n            if\
    \ (n % i == 0) {\n                return n / i;\n            }\n        }\n  \
    \      return 1;", "        for (long i = n - 1; i > 1; i--) {\n            if\
    \ (n % i == 0) {\n                return i;\n            }\n        }\n      \
    \  return 1;", "        long x = n;\n        for (long i = 2; i * i <= x; i++)\
    \ {\n            if (x % i == 0) {\n                return x / i;\n          \
    \  }\n        }\n        return 1;", "        if (n == 0) {\n            return\
    \ 0;\n        }\n        long index = 1;\n        long indexSquared = 1;\n   \
    \     while (indexSquared < n) {\n            if (n % index == 0) {\n        \
    \        if (index > indexSquared) {\n                    return index;\n    \
    \            }\n            }\n            index++;\n            indexSquared\
    \ = index * index;\n        }\n        return n;", "        long max = n;\n  \
    \      long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ max = i;\n            i += 1;\n        }\n        return max;", "        long\
    \ d = n - 1;\n        while(d > 1) {\n            if(n % d == 0) {\n         \
    \       return d;\n            }\n            d--;\n        }\n        return\
    \ 1;", '        return Enumerable.Range(2, (int)Math.Sqrt(n) - 1).First(k => n
    % k == 0);', "        long p;\n        while(true) {\n            p = SmallestDivisor(n);\n\
    \            if(p == 1) return n;\n            n /= p;\n        }", "        for\
    \ (long d = n / 2; d > 1; d--) {\n            if (n % d == 0) return d;\n    \
    \    }\n        return 1;", "        if (n == 0) return 0;\n        long r = n;\n\
    \        while (r * r > n) r = (r + n / r) / 2;\n        return r;", "       \
    \ var s = Math.Sqrt(n);\n        for (long i = (long)Math.Ceiling(s); i > 1; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;", "        // Enumerate the factors of n\n     \
    \   var factors = Enumerable.Range(2, (int)Math.Floor(Math.Sqrt(n)))\n       \
    \     .Where(i => n % i == 0)\n            .Select(i => (long)i);\n        return\
    \ factors.Last();", "        long maxd = 0;\n        long i = 2;\n        while\
    \ (i * i <= n) {\n            if (n % i == 0) {\n                maxd = i;\n \
    \           }\n            i += 1;\n        }\n        return maxd;", "      \
    \  long d = 2;\n        while (d * d <= n) {\n            if (n % d == 0) {\n\
    \                n /= d;\n            } else {\n                d++;\n       \
    \     }\n        }\n        return n;", "        long largestDivisor = 1;\n  \
    \      long upperBound = n / 2;\n        for (long i = 2; i <= upperBound; i++)\
    \ {\n            if (n % i == 0) {\n                largestDivisor = i;\n    \
    \        }\n        }\n        return largestDivisor;", "        long candidate\
    \ = n - 1;\n        while (candidate > 1) {\n            if (n % candidate ==\
    \ 0) {\n                return candidate;\n            }\n            candidate\
    \ -= 1;\n        }\n        return 1;", "        for (long d = n - 1; d > 1; d--)\
    \ {\n            if (n % d == 0) {\n                return d;\n            }\n\
    \        }\n        return 1;", "        if (n == 1) return 1;\n        for (long\
    \ i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) return n / i;\n\
    \        }\n        return 1;", "        long m = 2;\n        while (m * m <=\
    \ n) {\n            if (n % m == 0) n = n / m;\n            else m++;\n      \
    \  }\n        return n;", "        long d = 2;\n        while (d * d <= n) {\n\
    \            if (n % d == 0) {\n                n /= d;\n            } else {\n\
    \                d++;\n            }\n        }\n        return n;", "       \
    \ if (n % 2 == 0) return n / 2;\n        else if (n % 3 == 0) return n / 3;\n\
    \        else if (n % 5 == 0) return n / 5;\n        else if (n % 7 == 0) return\
    \ n / 7;\n        else if (n % 11 == 0) return n / 11;\n        else return 1;"]
stop_tokens:
- "\n    }\n"
