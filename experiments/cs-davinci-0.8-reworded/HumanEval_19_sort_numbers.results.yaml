language: cs
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        throw new NotImplementedException();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <1b41c9aef7da4508bd6c83268c258e32>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <1b41c9aef7da4508bd6c83268c258e32>:0 \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Convert the string into an array of integers\n        // Sort\
    \ the array in ascending order using Array.Sort()\n        // Return a string\
    \ of numbers separated by spaces\n\n        // Convert the string into an array\
    \ of integers\n        int[] numbers_int = new int[numbers.Split(' ').Length];\n\
    \        for (int i = 0; i < numbers.Split(' ').Length; i++) {\n            numbers_int[i]\
    \ = int.Parse(numbers.Split(' ')[i]);\n        }\n\n        // Sort the array\
    \ in ascending order using Array.Sort()\n        Array.Sort(numbers_int);\n\n\
    \        // Return a string of numbers separated by spaces\n        string numbers_sort\
    \ = \"\";\n        for (int i = 0; i < numbers_int.Length; i++) {\n          \
    \  numbers_sort += numbers_int[i] + \" \";\n        }\n        return numbers_sort.Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x00022] in <e1b847bb6e614fd082c969bb1b8f96f4>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <e1b847bb6e614fd082c969bb1b8f96f4>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x00022] in <e1b847bb6e614fd082c969bb1b8f96f4>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <e1b847bb6e614fd082c969bb1b8f96f4>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        Dictionary<string, int> map = new Dictionary<string, int> {\n   \
    \         { \"zero\", 0 },\n            { \"one\", 1 },\n            { \"two\"\
    , 2 },\n            { \"three\", 3 },\n            { \"four\", 4 },\n        \
    \    { \"five\", 5 },\n            { \"six\", 6 },\n            { \"seven\", 7\
    \ },\n            { \"eight\", 8 },\n            { \"nine\", 9 }\n        };\n\
    \        return string.Join(\" \", numbers.Split(' ').Select(x => map[x]).OrderBy(x\
    \ => x).Select(x => map.First(y => y.Value == x).Key));\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\"\
    )));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String x) [0x00000] in <a07df28e00624e35ad5cf363b9fba7df>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].MoveNext\
    \ () [0x00029] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join\
    \ (System.String separator, System.Collections.Generic.IEnumerable`1[T] values)\
    \ [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000e9] in <a07df28e00624e35ad5cf363b9fba7df>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <a07df28e00624e35ad5cf363b9fba7df>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String x) [0x00000] in <a07df28e00624e35ad5cf363b9fba7df>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 "
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        int[] res = numbers.Split(' ').Select(x => Convert.ToInt32(x)).OrderBy(x\
    \ => x).ToArray();\n        string result = \"\";\n        for (int i = 0; i <\
    \ res.Length; i++) {\n            result += Convert.ToString(res[i]) + \" \";\n\
    \        }\n        return result.Substring(0, result.Length - 1);\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider)\
    \ [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32\
    \ (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at Problem+<>c.<SortNumbers>b__0_0 (System.String x) [0x00000] in <2f8b9ce3c59549b0b69c39e7d81fb8de>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1[TElement].ToArray () [0x00000] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.Enumerable.ToArray[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x00052] in <2f8b9ce3c59549b0b69c39e7d81fb8de>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <2f8b9ce3c59549b0b69c39e7d81fb8de>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider)\
    \ [0"
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        throw new NotImplementedException();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <1b41c9aef7da4508bd6c83268c258e32>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <1b41c9aef7da4508bd6c83268c258e32>:0 \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var words = numbers.Split(' ');\n        var ints = words.Select(w\
    \ => ParseNumber(w)).ToArray();\n        Array.Sort(ints);\n        return String.Join(\"\
    \ \", ints.Select(i => StringNumber(i)));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzkji_oj7.cs(16,38): error CS0103: The name ''ParseNumber'' does not exist
    in the current context

    /tmp/tmpzkji_oj7.cs(18,50): error CS0103: The name ''StringNumber'' does not exist
    in the current context

    '
  timestamp: 1659976273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // <<<\n        var strDigits = new List<string>() { \"zero\", \"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\" };\n        var digits = numbers.Split(' ').Select(s => strDigits.IndexOf(s)).OrderBy(s\
    \ => s).Select(s => strDigits[s]);\n        return string.Join(\" \", digits);\n\
    \        // >>>\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__2\
    \ (System.Int32 s) [0x00000] in <ef80bd9d1e0245618b87de6ac04e1af0>:0 \n  at System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].MoveNext\
    \ () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join\
    \ (System.String separator, System.Collections.Generic.IEnumerable`1[T] values)\
    \ [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000da] in <ef80bd9d1e0245618b87de6ac04e1af0>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <ef80bd9d1e0245618b87de6ac04e1af0>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__2\
    \ (System.Int32 s) [0x00000] in <ef80bd9d1e0245618b87de6ac04e1af0>:0 \n  at System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].MoveNext\
    \ () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join\
    \ (System.String separator, System.Collections.Generic.IEnumerable`1[T] values)\
    \ [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000da] in <ef80bd9d1e0245618b87de6ac04e1af0>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <ef80bd9d1e0245618b87de6ac04e1af0>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        List<int> nums = new List<int>();\n        string[] values = numbers.Split('\
    \ ');\n        foreach (string v in values) {\n            switch (v) {\n    \
    \            case \"zero\":\n                    nums.Add(0);\n              \
    \      break;\n                case \"one\":\n                    nums.Add(1);\n\
    \                    break;\n                case \"two\":\n                 \
    \   nums.Add(2);\n                    break;\n                case \"three\":\n\
    \                    nums.Add(3);\n                    break;\n              \
    \  case \"four\":\n                    nums.Add(4);\n                    break;\n\
    \                case \"five\":\n                    nums.Add(5);\n          \
    \          break;\n                case \"six\":\n                    nums.Add(6);\n\
    \                    break;\n                case \"seven\":\n               \
    \     nums.Add(7);\n                    break;\n                case \"eight\"\
    :\n                    nums.Add(8);\n                    break;\n            \
    \    case \"nine\":\n                    nums.Add(9);\n                    break;\n\
    \            }\n        }\n        nums.Sort();\n        string ret = \"\";\n\
    \        foreach (int i in nums) {\n            switch (i) {\n               \
    \ case 0:\n                    ret += \"zero \";\n                    break;\n\
    \                case 1:\n                    ret += \"one \";\n             \
    \       break;\n                case 2:\n                    ret += \"two \";\n\
    \                    break;\n                case 3:\n                    ret\
    \ += \"three \";\n                    break;\n                case 4:\n      \
    \              ret += \"four \";\n                    break;\n               \
    \ case 5:\n                    ret += \"five \";\n                    break;\n\
    \                case 6:\n                    ret += \"six \";\n             \
    \       break;\n                case 7:\n                    ret += \"seven \"\
    ;\n                    break;\n                case 8:\n                    ret\
    \ += \"eight \";\n                    break;\n                case 9:\n      \
    \              ret += \"nine \";\n                    break;\n            }\n\
    \        }\n        return ret.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var numList = numbers.Split(' ').ToList();\n        var numDict =\
    \ new Dictionary<string, int>();\n        numDict.Add(\"zero\", 0);\n        numDict.Add(\"\
    one\", 1);\n        numDict.Add(\"two\", 2);\n        numDict.Add(\"three\", 3);\n\
    \        numDict.Add(\"four\", 4);\n        numDict.Add(\"five\", 5);\n      \
    \  numDict.Add(\"six\", 6);\n        numDict.Add(\"seven\", 7);\n        numDict.Add(\"\
    eight\", 8);\n        numDict.Add(\"nine\", 9);\n        numList.Sort((x, y) =>\
    \ numDict[x].CompareTo(numDict[y]));\n        return string.Join(\" \", numList);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Your code here\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n       \n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptkyfm2ev.cs(14,26): error CS0161: ''Problem.SortNumbers(string)'': not
    all code paths return a value

    '
  timestamp: 1659976273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var nums = new [] {0,1,2,3,4,5,6,7,8,9};\n        var map = new Dictionary<string,\
    \ int> {\n            {\"zero\", 0},\n            {\"one\", 1},\n            {\"\
    two\", 2},\n            {\"three\", 3},\n            {\"four\", 4},\n        \
    \    {\"five\", 5},\n            {\"six\", 6},\n            {\"seven\", 7},\n\
    \            {\"eight\", 8},\n            {\"nine\", 9}\n        };\n        var\
    \ list = numbers.Split().Select(x => map[x]).ToList();\n        list.Sort();\n\
    \        string res = \"\";\n        foreach (var num in list) {\n           \
    \ res += num.ToString() + \" \";\n        }\n        return res.Trim();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String x) [0x00000] in <9ec21de41e15450e9af47b849183aa76>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToList\
    \ () [0x00014] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToList[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x000c4] in <9ec21de41e15450e9af47b849183aa76>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <9ec21de41e15450e9af47b849183aa76>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String x) [0x00000] in <9ec21de41e15450e9af47b849183aa76>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToList\
    \ () [0x00014] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToList[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x000c4] in <9ec21de41e15450e9af47b849183aa76>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <9ec21de41e15450e9af47b849183aa76>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        throw new NotImplementedException();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <1b41c9aef7da4508bd6c83268c258e32>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <1b41c9aef7da4508bd6c83268c258e32>:0 \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        int[] n = numbers.Split(' ').Select(s => int.Parse(s)).ToArray();\n\
    \        Array.Sort(n);\n        return string.Join(\" \", n);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\
    \")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String s) [0x00000] in <999e37e74a01476c9da297299797efd8>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x0002e] in <999e37e74a01476c9da297299797efd8>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <999e37e74a01476c9da297299797efd8>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String s) [0x00000] in <999e37e74a01476c9da297299797efd8>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6"
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        List<string> nums = numbers.Split(' ').ToList();\n        nums.Sort();\n\
    \        string result = \"\";\n        for (int i = 0; i < nums.Count; i++) {\n\
    \            result += nums[i] + \" \";\n        }\n        return result.Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eb48161efb8d4d9384089bdb32cc99d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eb48161efb8d4d9384089bdb32cc99d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // TODO: Implement this\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\
    \")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa3b4a208c834950bd08b58c21804653>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa3b4a208c834950bd08b58c21804653>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Your code goes here\n        int[] n = new int[numbers.Split('\
    \ ').Length];\n        for (int i = 0; i < numbers.Split(' ').Length; i++) {\n\
    \            n[i] = int.Parse(numbers.Split(' ')[i]);\n        }\n        var\
    \ s = from e in n orderby e select e;\n        string number = \"\";\n       \
    \ foreach (var element in s) {\n            number += element.ToString() + \"\
    \ \";\n        }\n        return number.Substring(0, number.Length - 1);\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x00022] in <7ea8432c1fff4173beb8fca19866e02b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <7ea8432c1fff4173beb8fca19866e02b>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x00022] in <7ea8432c1fff4173beb8fca19866e02b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <7ea8432c1fff4173beb8fca19866e02b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        int[] numberals = new int[10];\n        for (int i = 0; i < numbers.Length;\
    \ i += 4) {\n            int index = -1;\n            switch (numbers.Substring(i,\
    \ 4)) {\n                case \"zero\": index = 0; break;\n                case\
    \ \"one\": index = 1; break;\n                case \"two\": index = 2; break;\n\
    \                case \"thre\": index = 3; break;\n                case \"four\"\
    : index = 4; break;\n                case \"five\": index = 5; break;\n      \
    \          case \"six\": index = 6; break;\n                case \"seve\": index\
    \ = 7; break;\n                case \"eight\": index = 8; break;\n           \
    \     case \"nine\": index = 9; break;\n            }\n            numberals[index]++;\n\
    \        }\n        StringBuilder outStr = new StringBuilder();\n        for (int\
    \ i = 0; i < 10; i++) {\n            string numeral = \"\";\n            switch\
    \ (i) {\n                case 0: numeral = \"zero\"; break;\n                case\
    \ 1: numeral = \"one\"; break;\n                case 2: numeral = \"two\"; break;\n\
    \                case 3: numeral = \"three\"; break;\n                case 4:\
    \ numeral = \"four\"; break;\n                case 5: numeral = \"five\"; break;\n\
    \                case 6: numeral = \"six\"; break;\n                case 7: numeral\
    \ = \"seven\"; break;\n                case 8: numeral = \"eight\"; break;\n \
    \               case 9: numeral = \"nine\"; break;\n            }\n          \
    \  for (int j = 0; j < numberals[i]; j++) {\n                outStr.Append(numeral);\n\
    \                outStr.Append(\" \");\n            }\n        }\n        return\
    \ outStr.ToString().Trim();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length\
    \ must refer to a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x00013] in <ed4b4ee048ea416f9113be444d45a194>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0001b] in <ed4b4ee048ea416f9113be444d45a194>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ and length must refer to a location within the string.\nParameter name: length\n\
    \  at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String\
    \ numbers) [0x00013] in <ed4b4ee048ea416f9113be444d45a194>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0001b] in <ed4b4ee048ea416f9113be444d45a194>:0 \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var words = numbers.Split(' ');\n        var numberals = new Dictionary<string,\
    \ BigInteger>() {\n            { \"zero\", 0 },\n            { \"one\", 1 },\n\
    \            { \"two\", 2 },\n            { \"three\", 3 },\n            { \"\
    four\", 4 },\n            { \"five\", 5 },\n            { \"six\", 6 },\n    \
    \        { \"seven\", 7 },\n            { \"eight\", 8 },\n            { \"nine\"\
    , 9 }\n        };\n        var ans = words.Select(n => numberals[n]).OrderBy(n\
    \ => n).Select(n => numberals.First(x => x.Value == n).Key);\n        return String.Join(\"\
    \ \", ans);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String n) [0x00000] in <c82b506ab7194866983f791ff42469d6>:0 \n  at (wrapper\
    \ delegate-invoke) System.Func`2[System.String,System.Numerics.BigInteger].invoke_TResult_T(string)\n\
    \  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray ()\
    \ [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].MoveNext\
    \ () [0x00029] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join\
    \ (System.String separator, System.Collections.Generic.IEnumerable`1[T] values)\
    \ [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x00119] in <c82b506ab7194866983f791ff42469d6>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <c82b506ab7194866983f791ff42469d6>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String n) [0x00000] in <c82b506ab7194866983f791ff42469d6>:0 \n  at (wrapper\
    \ delegate-invoke) System.Func`2[System.String,System.Numerics.BigInteger].invoke_TResult_T(string)\n\
    \  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray ()\
    \ [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor\
    \ (System.C"
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // remove me\n        // =============================\n        return\
    \ \"error\";\n        // =============================\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\"\
    )));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca9d113e1a5a4dbe8c5f7e7a519a88df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca9d113e1a5a4dbe8c5f7e7a519a88df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        return string.Join(\" \",\n                           numbers.Split(new\
    \ char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)\n                   \
    \               .Select(s => int.Parse(s))\n                                 \
    \ .OrderBy(x => x)\n                                  .Select(x => x.ToString()));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String s) [0x00000] in <884fe40462f0416a873c3043685dc287>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].MoveNext\
    \ () [0x00029] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join\
    \ (System.String separator, System.Collections.Generic.IEnumerable`1[T] values)\
    \ [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x00084] in <884fe40462f0416a873c3043685dc287>:0 \n\
    \  at Problem.Main (System.String[] args) [0x0001b] in <884fe40462f0416a873c3043685dc287>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016]"
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        numbers = numbers.Replace(\"zero\", \"0\");\n        numbers = numbers.Replace(\"\
    one\", \"1\");\n        numbers = numbers.Replace(\"two\", \"2\");\n        numbers\
    \ = numbers.Replace(\"three\", \"3\");\n        numbers = numbers.Replace(\"four\"\
    , \"4\");\n        numbers = numbers.Replace(\"five\", \"5\");\n        numbers\
    \ = numbers.Replace(\"six\", \"6\");\n        numbers = numbers.Replace(\"seven\"\
    , \"7\");\n        numbers = numbers.Replace(\"eight\", \"8\");\n        numbers\
    \ = numbers.Replace(\"nine\", \"9\");\n        string[] s = numbers.Split(' ');\n\
    \        int[] i = new int[s.Length];\n        for (int j = 0; j < s.Length; j++)\
    \ {\n            i[j] = int.Parse(s[j]);\n        }\n        Array.Sort(i);\n\
    \        string ret = \"\";\n        for (int j = 0; j < i.Length; j++) {\n  \
    \          ret += i[j].ToString() + \" \";\n        }\n        ret = ret.TrimEnd('\
    \ ');\n        ret = ret.Replace(\"0\", \"zero\");\n        ret = ret.Replace(\"\
    1\", \"one\");\n        ret = ret.Replace(\"2\", \"two\");\n        ret = ret.Replace(\"\
    3\", \"three\");\n        ret = ret.Replace(\"4\", \"four\");\n        ret = ret.Replace(\"\
    5\", \"five\");\n        ret = ret.Replace(\"6\", \"six\");\n        ret = ret.Replace(\"\
    7\", \"seven\");\n        ret = ret.Replace(\"8\", \"eight\");\n        ret =\
    \ ret.Replace(\"9\", \"nine\");\n        return ret;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\"\
    )));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x000cd] in <4c8c6856e2fe495984fc6f3a6126208d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <4c8c6856e2fe495984fc6f3a6126208d>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x000cd] in <4c8c6856e2fe495984fc6f3a6126208d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <4c8c6856e2fe495984fc6f3a6126208d>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] words = numbers.Split(' ');\n        string[] nums = new\
    \ string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n  \
    \          if (words[i] == \"zero\") nums[i] = \"0\";\n            if (words[i]\
    \ == \"one\") nums[i] = \"1\";\n            if (words[i] == \"two\") nums[i] =\
    \ \"2\";\n            if (words[i] == \"three\") nums[i] = \"3\";\n          \
    \  if (words[i] == \"four\") nums[i] = \"4\";\n            if (words[i] == \"\
    five\") nums[i] = \"5\";\n            if (words[i] == \"six\") nums[i] = \"6\"\
    ;\n            if (words[i] == \"seven\") nums[i] = \"7\";\n            if (words[i]\
    \ == \"eight\") nums[i] = \"8\";\n            if (words[i] == \"nine\") nums[i]\
    \ = \"9\";\n        }\n        Array.Sort(nums);\n        string str = \"\";\n\
    \        for (int i = 0; i < nums.Length; i++) {\n            if (nums[i] == \"\
    0\") str += \"zero \";\n            if (nums[i] == \"1\") str += \"one \";\n \
    \           if (nums[i] == \"2\") str += \"two \";\n            if (nums[i] ==\
    \ \"3\") str += \"three \";\n            if (nums[i] == \"4\") str += \"four \"\
    ;\n            if (nums[i] == \"5\") str += \"five \";\n            if (nums[i]\
    \ == \"6\") str += \"six \";\n            if (nums[i] == \"7\") str += \"seven\
    \ \";\n            if (nums[i] == \"8\") str += \"eight \";\n            if (nums[i]\
    \ == \"9\") str += \"nine \";\n        }\n        str = str.TrimEnd(' ');\n  \
    \      return str;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        return numbers;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50a172a6a818409aaf9c329805ebc608>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50a172a6a818409aaf9c329805ebc608>:0 \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        throw new NotImplementedException();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <1b41c9aef7da4508bd6c83268c258e32>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <1b41c9aef7da4508bd6c83268c258e32>:0 \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        Dictionary<string, int> dic = new Dictionary<string, int>() {\n \
    \           {\"zero\", 0},\n            {\"one\", 1},\n            {\"two\", 2},\n\
    \            {\"three\", 3},\n            {\"four\", 4},\n            {\"five\"\
    , 5},\n            {\"six\", 6},\n            {\"seven\", 7},\n            {\"\
    eight\", 8},\n            {\"nine\", 9}\n        };\n        string[] strs = numbers.Split('\
    \ ');\n        List<int> ints = new List<int>();\n        foreach (string str\
    \ in strs) {\n            ints.Add(dic[str]);\n        }\n        ints.Sort();\n\
    \        StringBuilder sb = new StringBuilder();\n        foreach (int num in\
    \ ints) {\n            sb.Append(dic.Where(a => a.Value == num).First().Key);\n\
    \            sb.Append(\" \");\n        }\n        sb.Remove(sb.Length - 1, 1);\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000ab] in <37508d9dc02140668502742a7ad00c71>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <37508d9dc02140668502742a7ad00c71>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000ab] in <37508d9dc02140668502742a7ad00c71>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <37508d9dc02140668502742a7ad00c71>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var nums = numbers.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).ToList();\n\
    \        if (nums.Count == 0) return \"\";\n        Dictionary<string, int> dict\
    \ = new Dictionary<string, int>();\n        dict.Add(\"zero\", 0);\n        dict.Add(\"\
    one\", 1);\n        dict.Add(\"two\", 2);\n        dict.Add(\"three\", 3);\n \
    \       dict.Add(\"four\", 4);\n        dict.Add(\"five\", 5);\n        dict.Add(\"\
    six\", 6);\n        dict.Add(\"seven\", 7);\n        dict.Add(\"eight\", 8);\n\
    \        dict.Add(\"nine\", 9);\n        nums.Sort((a, b) => dict[a].CompareTo(dict[b]));\n\
    \        return string.Join(\" \", nums);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        return string.Join(\" \",\n            numbers.Split()\n        \
    \    .Select(n => Int32.Parse(n))\n            .OrderBy(i => i)\n            .Select(i\
    \ => i.ToString())\n            .ToArray());\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <ebbd9a9dcbba41398f6d44bdfdc01957>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].PreallocatingToArray\
    \ (System.Int32 count) [0x00035] in <e540098dd111461e919c5863f6975c29>:0 \n  at\
    \ System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].ToArray ()\
    \ [0x00023] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x0007d] in <ebbd9a9dcbba41398f6d44bdfdc01957>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <ebbd9a9dcbba41398f6d44bdfdc01957>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberS"
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] nums = numbers.Split(' ');\n        Array.Sort(nums);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ nums.Length; i++) {\n            sb.Append(nums[i] + \" \");\n        }\n  \
    \      return sb.ToString().Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6f3f762bc6c4ee89d106922693618e9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6f3f762bc6c4ee89d106922693618e9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var map = new Dictionary<string, int> {\n            {\"zero\", 0},\n\
    \            {\"one\", 1},\n            {\"two\", 2},\n            {\"three\"\
    , 3},\n            {\"four\", 4},\n            {\"five\", 5},\n            {\"\
    six\", 6},\n            {\"seven\", 7},\n            {\"eight\", 8},\n       \
    \     {\"nine\", 9}\n        };\n        var nums = numbers.Split(' ').Select(x\
    \ => map[x]).ToArray();\n        Array.Sort(nums);\n        return String.Join(\"\
    \ \", nums.Select(x => String.Format(\"{0}\", x)));\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\"\
    )));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String x) [0x00000] in <5552db2e39b74cc182a34e2c40e64038>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x000af] in <5552db2e39b74cc182a34e2c40e64038>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <5552db2e39b74cc182a34e2c40e64038>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String x) [0x00000] in <5552db2e39b74cc182a34e2c40e64038>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x000af] in <5552db2e39b74cc182a34e2c40e64038>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <5552db2e39b74cc182a34e2c40e64038>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Implement here\n        return string.Empty;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\
    \")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a2bcb3b1e75f45e1bfe478aa43b707f8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a2bcb3b1e75f45e1bfe478aa43b707f8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        return string.Join(\" \", \n            (from n in numbers.Split(new\
    \ char[] { ' ' })\n             orderby NUMERAL_MAP[n]\n             select n));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprl_axm_4.cs(17,22): error CS0103: The name ''NUMERAL_MAP'' does not exist
    in the current context

    '
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        int[] A = new int[numbers.Split(' ').Length];\n        int i = 0;\n\
    \        foreach (string s in numbers.Split(' ')) {\n            A[i] = Convert.ToInt32(s);\n\
    \            i++;\n        }\n        Array.Sort(A);\n        return String.Join(\"\
    \ \", A);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider)\
    \ [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32\
    \ (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at Problem.SortNumbers (System.String numbers) [0x00029] in <338115d1f30b4826bb112823addab80c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <338115d1f30b4826bb112823addab80c>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider)\
    \ [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32\
    \ (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at Problem.SortNumbers (System.String numbers) [0x00029] in <338115d1f30b4826bb112823addab80c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <338115d1f30b4826bb112823addab80c>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var nums = new List<int>();\n        var nums_s = numbers.Split('\
    \ ');\n        foreach (var num in nums_s) {\n            switch (num) {\n   \
    \             case \"zero\":\n                    nums.Add(0);\n             \
    \       break;\n                case \"one\":\n                    nums.Add(1);\n\
    \                    break;\n                case \"two\":\n                 \
    \   nums.Add(2);\n                    break;\n                case \"three\":\n\
    \                    nums.Add(3);\n                    break;\n              \
    \  case \"four\":\n                    nums.Add(4);\n                    break;\n\
    \                case \"five\":\n                    nums.Add(5);\n          \
    \          break;\n                case \"six\":\n                    nums.Add(6);\n\
    \                    break;\n                case \"seven\":\n               \
    \     nums.Add(7);\n                    break;\n                case \"eight\"\
    :\n                    nums.Add(8);\n                    break;\n            \
    \    case \"nine\":\n                    nums.Add(9);\n                    break;\n\
    \            }\n        }\n        nums.Sort();\n        var ret = \"\";\n   \
    \     foreach (var num in nums) {\n            switch (num) {\n              \
    \  case 0:\n                    ret += \"zero \";\n                    break;\n\
    \                case 1:\n                    ret += \"one \";\n             \
    \       break;\n                case 2:\n                    ret += \"two \";\n\
    \                    break;\n                case 3:\n                    ret\
    \ += \"three \";\n                    break;\n                case 4:\n      \
    \              ret += \"four \";\n                    break;\n               \
    \ case 5:\n                    ret += \"five \";\n                    break;\n\
    \                case 6:\n                    ret += \"six \";\n             \
    \       break;\n                case 7:\n                    ret += \"seven \"\
    ;\n                    break;\n                case 8:\n                    ret\
    \ += \"eight \";\n                    break;\n                case 9:\n      \
    \              ret += \"nine \";\n                    break;\n            }\n\
    \        }\n        return ret.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Input: \"zero four five eight two seven three nine one six\"\n\
    \        // Expected Output: \"zero one two three four five six seven eight nine\"\
    \n        // Convert input into list of integers.\n        var ints = numbers.Split('\
    \ ').Select(n => Convert.ToInt32(n)).ToList();\n        ints.Sort();\n       \
    \ var result = string.Join(\" \", ints);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\
    \")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider)\
    \ [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32\
    \ (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <18889b5ff09645eba855d80e041bfe4c>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToList\
    \ () [0x00014] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToList[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x0002e] in <18889b5ff09645eba855d80e041bfe4c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <18889b5ff09645eba855d80e041bfe4c>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider)\
    \ [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32\
    \ (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <18889b5ff09645eba855d80e041bfe4c>:0\
    \ \n "
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] numArr = new string[numbers.Split(' ').Length];\n      \
    \  Array.Copy(numbers.Split(' '), numArr, numbers.Split(' ').Length);\n      \
    \  Array.Sort(numArr);\n        return string.Join(\" \", numArr);\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4985f5d5bd114f12afb7c6520150beaa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4985f5d5bd114f12afb7c6520150beaa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var tokens = numbers.Split(' ');\n        // We sort the numbers\
    \ in ascending order using the numeric values\n        // and then map the numeric\
    \ values back to the string labels.\n        var nums = tokens.Select(x => Array.IndexOf(Labels,\
    \ x)).OrderBy(x => x).Select(x => Labels[x]);\n        return string.Join(\" \"\
    , nums);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp89gefzy6.cs(18,53): error CS0103: The name ''Labels'' does not exist in
    the current context

    /tmp/tmp89gefzy6.cs(18,93): error CS0103: The name ''Labels'' does not exist in
    the current context

    '
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] nums = numbers.Split(' ');\n        string[] sorted = new\
    \ string[nums.Length];\n        Array.Sort(nums);\n        foreach (string s in\
    \ nums) {\n            sorted.Append(s);\n        }\n        return sorted;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphlu4cu0y.cs(21,16): error CS0029: Cannot implicitly convert type ''string[]''
    to ''string''

    '
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        int[] freq = new int[10];\n        for (int i = 0; i < numbers.Length;\
    \ i += 4) {\n            freq[numbers[i] - 'o']++;\n        }\n        StringBuilder\
    \ ans = new StringBuilder();\n        for (int i = 0; i < 10; i++) {\n       \
    \     for (int j = 0; j < freq[i]; j++) {\n                ans.Append(i + 'o');\n\
    \                ans.Append(' ');\n            }\n        }\n        return ans.ToString().Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.SortNumbers (System.String numbers) [0x00016]\
    \ in <5ebb515c6a354aeaa5b1e92a23281d66>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x0001b] in <5ebb515c6a354aeaa5b1e92a23281d66>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.SortNumbers (System.String numbers) [0x00016] in <5ebb515c6a354aeaa5b1e92a23281d66>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0001b] in <5ebb515c6a354aeaa5b1e92a23281d66>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] num = numbers.Split();\n        List<int> list = new List<int>();\n\
    \        for (int i = 0; i < num.Length; i++) {\n            switch (num[i]) {\n\
    \                case \"zero\": list.Add(0); break;\n                case \"one\"\
    : list.Add(1); break;\n                case \"two\": list.Add(2); break;\n   \
    \             case \"three\": list.Add(3); break;\n                case \"four\"\
    : list.Add(4); break;\n                case \"five\": list.Add(5); break;\n  \
    \              case \"six\": list.Add(6); break;\n                case \"seven\"\
    : list.Add(7); break;\n                case \"eight\": list.Add(8); break;\n \
    \               case \"nine\": list.Add(9); break;\n            }\n        }\n\
    \        list.Sort();\n        string res = \"\";\n        for (int i = 0; i <\
    \ list.Count; i++) {\n            switch (list[i]) {\n                case 0:\
    \ res += \"zero \"; break;\n                case 1: res += \"one \"; break;\n\
    \                case 2: res += \"two \"; break;\n                case 3: res\
    \ += \"three \"; break;\n                case 4: res += \"four \"; break;\n  \
    \              case 5: res += \"five \"; break;\n                case 6: res +=\
    \ \"six \"; break;\n                case 7: res += \"seven \"; break;\n      \
    \          case 8: res += \"eight \"; break;\n                case 9: res += \"\
    nine \"; break;\n            }\n        }\n        return res.Trim();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        Dictionary<string,int> d = new Dictionary<string,int>();\n      \
    \  d.Add(\"zero\",0);\n        d.Add(\"one\",1);\n        d.Add(\"two\",2);\n\
    \        d.Add(\"three\",3);\n        d.Add(\"four\",4);\n        d.Add(\"five\"\
    ,5);\n        d.Add(\"six\",6);\n        d.Add(\"seven\",7);\n        d.Add(\"\
    eight\",8);\n        d.Add(\"nine\",9);\n        List<int> res = new List<int>();\n\
    \        foreach(string s in numbers.Split(' ')) {\n            res.Add(d[s]);\n\
    \        }\n        res.Sort();\n        string answer = \"\";\n        foreach(int\
    \ i in res) {\n            foreach(string key in d.Keys) {\n                if(d[key]\
    \ == i) {\n                    answer += key;\n                    answer += \"\
    \ \";\n                }\n            }\n        }\n        return answer.Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000a7] in <fe44da4197a2473da2fdc5c630cec353>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <fe44da4197a2473da2fdc5c630cec353>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000a7] in <fe44da4197a2473da2fdc5c630cec353>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <fe44da4197a2473da2fdc5c630cec353>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var numbersStr = numbers.Split(' ');\n        var numbersInt = numbersStr.Select(s\
    \ => int.Parse(s)).ToArray();\n        Array.Sort(numbersInt);\n        return\
    \ string.Join(\" \", numbersInt);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String s) [0x00000] in <d6457e1b343c4d3e908dfeed4d5489c1>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x00030] in <d6457e1b343c4d3e908dfeed4d5489c1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <d6457e1b343c4d3e908dfeed4d5489c1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String s) [0x00000] in <d6457e1b343c4d3e908dfeed4d5489c1>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6"
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var table = new Dictionary<string, int>\n        {\n            {\"\
    zero\", 0},\n            {\"one\", 1},\n            {\"two\", 2},\n          \
    \  {\"three\", 3},\n            {\"four\", 4},\n            {\"five\", 5},\n \
    \           {\"six\", 6},\n            {\"seven\", 7},\n            {\"eight\"\
    , 8},\n            {\"nine\", 9}\n        };\n        var result = new StringBuilder();\n\
    \        var nums = numbers.Split(' ');\n        foreach (var num in nums.OrderBy(x\
    \ => table[x])) {\n            result.Append($\"{num} \");\n        }\n      \
    \  return result.ToString().Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String x) [0x00000] in <79253ec9f1c84b2f81ea41ead99d18f1>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys\
    \ (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements,\
    \ System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at\
    \ System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32\
    \ count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap\
    \ (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000f2] in <79253ec9f1c84b2f81ea41ead99d18f1>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <79253ec9f1c84b2f81ea41ead99d18f1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String x) [0x00000] in <79253ec9f1c84b2f81ea41ead99d18f1>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys\
    \ (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements,\
    \ System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at\
    \ System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] "
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        Dictionary<string, int> d = new Dictionary<string, int>();\n    \
    \    d.Add(\"zero\", 0);\n        d.Add(\"one\", 1);\n        d.Add(\"two\", 2);\n\
    \        d.Add(\"three\", 3);\n        d.Add(\"four\", 4);\n        d.Add(\"five\"\
    , 5);\n        d.Add(\"six\", 6);\n        d.Add(\"seven\", 7);\n        d.Add(\"\
    eight\", 8);\n        d.Add(\"nine\", 9);\n        StringBuilder sb = new StringBuilder();\n\
    \        var sorted = numbers.Split(' ').OrderBy(x => d[x]);\n        foreach\
    \ (var v in sorted) {\n            sb.Append(v);\n            sb.Append(\" \"\
    );\n        }\n        return sb.ToString().Trim();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\"\
    )));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String x) [0x00000] in <9db91c9bd0824a499e6fcf185c6e60b1>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys\
    \ (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements,\
    \ System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at\
    \ System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32\
    \ count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap\
    \ (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x00111] in <9db91c9bd0824a499e6fcf185c6e60b1>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <9db91c9bd0824a499e6fcf185c6e60b1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String x) [0x00000] in <9db91c9bd0824a499e6fcf185c6e60b1>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys\
    \ (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements,\
    \ System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at\
    \ System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] "
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] split = numbers.Split(' ');\n        int[] num = new int[split.Length];\n\
    \        for (int i = 0; i < split.Length; i++) {\n            num[i] = convert(split[i]);\n\
    \        }\n        Array.Sort(num);\n        for (int i = 0; i < split.Length;\
    \ i++) {\n            split[i] = convert(num[i]);\n        }\n        return string.Join(\"\
    \ \", split);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp01u8bgb_.cs(18,22): error CS0103: The name ''convert'' does not exist
    in the current context

    /tmp/tmp01u8bgb_.cs(22,24): error CS0103: The name ''convert'' does not exist
    in the current context

    '
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Fill me in\n        return \"\";\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e0762f522354af7b31c78e271bb332b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e0762f522354af7b31c78e271bb332b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] numstrs = numbers.Split(' ');\n        int[] nums = new\
    \ int[numstrs.Length];\n        for (int i = 0; i < numstrs.Length; i++) {\n \
    \           switch (numstrs[i]) {\n                case \"zero\":\n          \
    \          nums[i] = 0;\n                    break;\n                case \"one\"\
    :\n                    nums[i] = 1;\n                    break;\n            \
    \    case \"two\":\n                    nums[i] = 2;\n                    break;\n\
    \                case \"three\":\n                    nums[i] = 3;\n         \
    \           break;\n                case \"four\":\n                    nums[i]\
    \ = 4;\n                    break;\n                case \"five\":\n         \
    \           nums[i] = 5;\n                    break;\n                case \"\
    six\":\n                    nums[i] = 6;\n                    break;\n       \
    \         case \"seven\":\n                    nums[i] = 7;\n                \
    \    break;\n                case \"eight\":\n                    nums[i] = 8;\n\
    \                    break;\n                case \"nine\":\n                \
    \    nums[i] = 9;\n                    break;\n            }\n        }\n    \
    \    Array.Sort(nums);\n        for (int i = 0; i < nums.Length; i++) {\n    \
    \        switch (nums[i]) {\n                case 0:\n                    numstrs[i]\
    \ = \"zero\";\n                    break;\n                case 1:\n         \
    \           numstrs[i] = \"one\";\n                    break;\n              \
    \  case 2:\n                    numstrs[i] = \"two\";\n                    break;\n\
    \                case 3:\n                    numstrs[i] = \"three\";\n      \
    \              break;\n                case 4:\n                    numstrs[i]\
    \ = \"four\";\n                    break;\n                case 5:\n         \
    \           numstrs[i] = \"five\";\n                    break;\n             \
    \   case 6:\n                    numstrs[i] = \"six\";\n                    break;\n\
    \                case 7:\n                    numstrs[i] = \"seven\";\n      \
    \              break;\n                case 8:\n                    numstrs[i]\
    \ = \"eight\";\n                    break;\n                case 9:\n        \
    \            numstrs[i] = \"nine\";\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuq3d6v49.cs(85,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpuq3d6v49.cs(93,2): error CS1513: } expected

    '
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        Dictionary<string, int> map = new Dictionary<string, int>() {\n \
    \           {\"zero\", 0},\n            {\"one\", 1},\n            {\"two\", 2},\n\
    \            {\"three\", 3},\n            {\"four\", 4},\n            {\"five\"\
    , 5},\n            {\"six\", 6},\n            {\"seven\", 7},\n            {\"\
    eight\", 8},\n            {\"nine\", 9}\n        };\n        // Split the numbers\
    \ into an array\n        string[] digits = numbers.Split(' ');\n        // Sort\
    \ the array by comparing the integer values of the numberals\n        Array.Sort(digits,\
    \ (a, b) => map[a].CompareTo(map[b]));\n        // Join the array back together\
    \ into a string\n        return string.Join(\" \", digits);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\
    \")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] nums = numbers.Split(' ');\n        Array.Sort(nums);\n\
    \        return string.Join(\" \", nums);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d76c29864c04d66bc3a1531ae16b0f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d76c29864c04d66bc3a1531ae16b0f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] numArray = numbers.Split(' ');\n        string[] original\
    \ = new string[numArray.Length];\n        for (int i = 0; i < numArray.Length;\
    \ i++)\n            original[i] = numArray[i];\n        Array.Sort(numArray);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ numArray.Length; i++) {\n            if (numArray[i] == \"zero\")\n        \
    \        sb.Append(i.ToString());\n            else if (numArray[i] == \"one\"\
    )\n                sb.Append(i.ToString());\n            else if (numArray[i]\
    \ == \"two\")\n                sb.Append(i.ToString());\n            else if (numArray[i]\
    \ == \"three\")\n                sb.Append(i.ToString());\n            else if\
    \ (numArray[i] == \"four\")\n                sb.Append(i.ToString());\n      \
    \      else if (numArray[i] == \"five\")\n                sb.Append(i.ToString());\n\
    \            else if (numArray[i] == \"six\")\n                sb.Append(i.ToString());\n\
    \            else if (numArray[i] == \"seven\")\n                sb.Append(i.ToString());\n\
    \            else if (numArray[i] == \"eight\")\n                sb.Append(i.ToString());\n\
    \            else if (numArray[i] == \"nine\")\n                sb.Append(i.ToString());\n\
    \            else\n                sb.Append(i.ToString());\n        }\n     \
    \   int[] index = Array.ConvertAll(sb.ToString().ToCharArray(), c => (int)Char.GetNumericValue(c));\n\
    \        string[] result = new string[numArray.Length];\n        for (int i =\
    \ 0; i < numArray.Length; i++)\n            result[i] = original[index[i]];\n\
    \        return string.Join(\" \", result);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc01a60ed35c4dea972ad7bffa9c9553>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc01a60ed35c4dea972ad7bffa9c9553>:0 \n"
  stdout: ''
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Tuple (numeral, number)\n        var nums = new List<Tuple<string,\
    \ int>>() {\n            Tuple.Create(\"zero\", 0),\n            Tuple.Create(\"\
    one\", 1),\n            Tuple.Create(\"two\", 2),\n            Tuple.Create(\"\
    three\", 3),\n            Tuple.Create(\"four\", 4),\n            Tuple.Create(\"\
    five\", 5),\n            Tuple.Create(\"six\", 6),\n            Tuple.Create(\"\
    seven\", 7),\n            Tuple.Create(\"eight\", 8),\n            Tuple.Create(\"\
    nine\", 9)\n        };\n        var args = numbers.Split(' ');\n        var sorted\
    \ = new List<string>();\n        for (int i = 0; i < args.Length; i++) {\n   \
    \         var arg = args[i];\n            var num = nums.FirstOrDefault(t => t.Item1\
    \ == arg);\n            if (num == null) throw new ArgumentException(string.Format(\"\
    {0} is not a valid numeral\", arg));\n            sorted.Add(num.Item1);\n   \
    \     }\n        return string.Join(\" \", sorted.OrderBy(x => x).ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException:  is not a valid numeral\n\
    \  at Problem.SortNumbers (System.String numbers) [0x00113] in <d6d6b2a059a44bd2bda9812e28b86c8c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <d6d6b2a059a44bd2bda9812e28b86c8c>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException:  is not a valid\
    \ numeral\n  at Problem.SortNumbers (System.String numbers) [0x00113] in <d6d6b2a059a44bd2bda9812e28b86c8c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <d6d6b2a059a44bd2bda9812e28b86c8c>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        int[] nums = new int[numbers.Length];\n        int count = 0;\n \
    \       int n = 0;\n        char[] delimiterChars = { ' ' };\n        String[]\
    \ words = numbers.Split(delimiterChars);\n        for (int i = 0; i < words.Length;\
    \ i++) {\n            if (words[i] == \"zero\")\n                n = 0;\n    \
    \        else if (words[i] == \"one\")\n                n = 1;\n            else\
    \ if (words[i] == \"two\")\n                n = 2;\n            else if (words[i]\
    \ == \"three\")\n                n = 3;\n            else if (words[i] == \"four\"\
    )\n                n = 4;\n            else if (words[i] == \"five\")\n      \
    \          n = 5;\n            else if (words[i] == \"six\")\n               \
    \ n = 6;\n            else if (words[i] == \"seven\")\n                n = 7;\n\
    \            else if (words[i] == \"eight\")\n                n = 8;\n       \
    \     else if (words[i] == \"nine\")\n                n = 9;\n            nums[count]\
    \ = n;\n            count++;\n        }\n        Array.Sort(nums);\n        StringBuilder\
    \ builder = new StringBuilder();\n        foreach (int value in nums) {\n    \
    \        if (value == 0)\n                builder.Append(\"zero \");\n       \
    \     else if (value == 1)\n                builder.Append(\"one \");\n      \
    \      else if (value == 2)\n                builder.Append(\"two \");\n     \
    \       else if (value == 3)\n                builder.Append(\"three \");\n  \
    \          else if (value == 4)\n                builder.Append(\"four \");\n\
    \            else if (value == 5)\n                builder.Append(\"five \");\n\
    \            else if (value == 6)\n                builder.Append(\"six \");\n\
    \            else if (value == 7)\n                builder.Append(\"seven \");\n\
    \            else if (value == 8)\n                builder.Append(\"eight \");\n\
    \            else if (value == 9)\n                builder.Append(\"nine \");\n\
    \        }\n        string result = builder.\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptmnpvml9.cs(68,33): error CS1001: Identifier expected

    /tmp/tmptmnpvml9.cs(68,33): error CS1002: ; expected

    '
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var list = numbers.Split(' ').ToList();\n        var sortedList =\
    \ list.OrderBy(n => int.Parse(n));\n        return string.Join(\" \", sortedList);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <024078d05af14f188e46b72f09161c41>:0\
    \ \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[]\
    \ elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements,\
    \ System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at\
    \ System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32\
    \ count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap\
    \ (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join\
    \ (System.String separator, System.Collections.Generic.IEnumerable`1[T] values)\
    \ [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x00036] in <024078d05af14f188e46b72f09161c41>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <024078d05af14f188e46b72f09161c41>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, "
  stdout: ''
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        int[] numberOrder = new int[10];\n        foreach (string number\
    \ in numbers.Split(' ')) {\n            numberOrder[NumberToIndex(number)]++;\n\
    \        }\n        return IndexToString(numberOrder);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\"\
    )));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp974lheqh.cs(17,25): error CS0103: The name ''NumberToIndex'' does not
    exist in the current context

    /tmp/tmp974lheqh.cs(19,16): error CS0103: The name ''IndexToString'' does not
    exist in the current context

    '
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var numbersStr = numbers.Split(' ');\n        //var numbersInt =\
    \ Array.ConvertAll(numbersStr, s => int.Parse(s));\n        var numbersInt = numbersStr.Select(int.Parse).ToArray();\n\
    \        Array.Sort(numbersInt);\n        var numStr2 = Array.ConvertAll(numbersInt,\
    \ x => x.ToString());\n        return string.Join(\" \", numStr2);\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x0001d] in <88f49557c4144061973b7c4310a492d4>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <88f49557c4144061973b7c4310a492d4>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x0001d] in <88f49557c4144061973b7c4310a492d4>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <88f49557c4144061973b7c4310a492d4>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        int[] digits = new int[10];\n        var tokenizer = new StringTokenizer(numbers);\n\
    \        while (tokenizer.hasMoreTokens()) {\n            var token = tokenizer.nextToken();\n\
    \            digits[Int32.Parse(token)]++;\n        }\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < 10; i++) {\n           \
    \ for (int j = 0; j < digits[i]; j++) {\n                sb.Append(i);\n     \
    \           sb.Append(\" \");\n            }\n        }\n        return sb.ToString().Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2jfiikmf.cs(16,29): error CS0246: The type or namespace name ''StringTokenizer''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Put your code here\n        return numbers;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\
    \")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c22c1e8b384a41cabac6767d6f31134b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c22c1e8b384a41cabac6767d6f31134b>:0 \n"
  stdout: ''
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        int[] n = new int[numbers.Split(' ').Length];\n        for (int i\
    \ = 0; i < n.Length; i++)\n            n[i] = Int32.Parse(numbers.Split(' ')[i]);\n\
    \        Array.Sort(n);\n        string s = \"\";\n        for (int i = 0; i <\
    \ n.Length; i++)\n            s += n[i] + \" \";\n        return s.Trim();\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x00021] in <bc5be68e9e784a69b5d3bb3ace00baa4>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <bc5be68e9e784a69b5d3bb3ace00baa4>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x00021] in <bc5be68e9e784a69b5d3bb3ace00baa4>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <bc5be68e9e784a69b5d3bb3ace00baa4>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var n = numbers.Split(' ').ToList();\n        var num = new List<int>();\n\
    \        var result = \"\";\n        Dictionary<string, int> d = new Dictionary<string,\
    \ int>();\n        d.Add(\"zero\", 0);\n        d.Add(\"one\", 1);\n        d.Add(\"\
    two\", 2);\n        d.Add(\"three\", 3);\n        d.Add(\"four\", 4);\n      \
    \  d.Add(\"five\", 5);\n        d.Add(\"six\", 6);\n        d.Add(\"seven\", 7);\n\
    \        d.Add(\"eight\", 8);\n        d.Add(\"nine\", 9);\n        for (int i\
    \ = 0; i < n.Count; i++) {\n            if (d.ContainsKey(n[i])) {\n         \
    \       num.Add(d[n[i]]);\n            }\n        }\n        num.Sort();\n   \
    \     for (int i = 0; i < num.Count; i++) {\n            foreach (var item in\
    \ d) {\n                if (item.Value == num[i]) {\n                    result\
    \ += item.Key + \" \";\n                }\n            }\n        }\n        return\
    \ result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var arr = numbers.Split(' ');\n        var ints = arr.Select(x =>\
    \ int.Parse(x)).ToArray();\n        Array.Sort(ints);\n        return string.Join(\"\
    \ \", ints);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String x) [0x00000] in <317e5e99bd0f4a658e62db58aae54c68>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x00030] in <317e5e99bd0f4a658e62db58aae54c68>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <317e5e99bd0f4a658e62db58aae54c68>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String x) [0x00000] in <317e5e99bd0f4a658e62db58aae54c68>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6"
  stdout: ''
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] nbrs = numbers.Split(' ');\n        int[] nbr_nums = new\
    \ int[nbrs.Length];\n        for (int i = 0; i < nbrs.Length; i++) {\n       \
    \     nbr_nums[i] = numeralToInt(nbrs[i]);\n        }\n        Array.Sort(nbr_nums);\n\
    \        string sorted_nbrs = \"\";\n        for (int i = 0; i < nbr_nums.Length;\
    \ i++) {\n            sorted_nbrs += intToNumeral(nbr_nums[i]) + \" \";\n    \
    \    }\n        return sorted_nbrs.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdf4svh_c.cs(18,27): error CS0103: The name ''numeralToInt'' does not exist
    in the current context

    /tmp/tmpdf4svh_c.cs(23,28): error CS0103: The name ''intToNumeral'' does not exist
    in the current context

    '
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        Dictionary<string, int> map = new Dictionary<string, int>() {\n \
    \           {\"zero\", 0},\n            {\"one\", 1},\n            {\"two\", 2},\n\
    \            {\"three\", 3},\n            {\"four\", 4},\n            {\"five\"\
    , 5},\n            {\"six\", 6},\n            {\"seven\", 7},\n            {\"\
    eight\", 8},\n            {\"nine\", 9}\n        };\n        string[] values =\
    \ numbers.Split(' ');\n        int[] nums = new int[values.Length];\n        for\
    \ (int i = 0; i < values.Length; i++) {\n            nums[i] = map[values[i]];\n\
    \        }\n        Array.Sort(nums);\n        StringBuilder builder = new StringBuilder();\n\
    \        for (int i = 0; i < nums.Length; i++) {\n            foreach (var entry\
    \ in map) {\n                if (entry.Value == nums[i]) {\n                 \
    \   builder.Append(entry.Key + \" \");\n                    break;\n         \
    \       }\n            }\n        }\n        return builder.ToString().Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000a3] in <b17db757864b46af946a7aa497f6cd6a>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <b17db757864b46af946a7aa497f6cd6a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000a3] in <b17db757864b46af946a7aa497f6cd6a>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <b17db757864b46af946a7aa497f6cd6a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        List<int> sortedNums = new List<int>();\n        string[] numsArr\
    \ = numbers.Split(' ');\n        foreach (string num in numsArr) {\n         \
    \   switch (num) {\n                case \"zero\":\n                    sortedNums.Add(0);\n\
    \                    break;\n                case \"one\":\n                 \
    \   sortedNums.Add(1);\n                    break;\n                case \"two\"\
    :\n                    sortedNums.Add(2);\n                    break;\n      \
    \          case \"three\":\n                    sortedNums.Add(3);\n         \
    \           break;\n                case \"four\":\n                    sortedNums.Add(4);\n\
    \                    break;\n                case \"five\":\n                \
    \    sortedNums.Add(5);\n                    break;\n                case \"six\"\
    :\n                    sortedNums.Add(6);\n                    break;\n      \
    \          case \"seven\":\n                    sortedNums.Add(7);\n         \
    \           break;\n                case \"eight\":\n                    sortedNums.Add(8);\n\
    \                    break;\n                case \"nine\":\n                \
    \    sortedNums.Add(9);\n                    break;\n            }\n        }\n\
    \        sortedNums.Sort();\n        string output = \"\";\n        foreach (int\
    \ num in sortedNums) {\n            switch (num) {\n                case 0:\n\
    \                    output += \"zero \";\n                    break;\n      \
    \          case 1:\n                    output += \"one \";\n                \
    \    break;\n                case 2:\n                    output += \"two \";\n\
    \                    break;\n                case 3:\n                    output\
    \ += \"three \";\n                    break;\n                case 4:\n      \
    \              output += \"four \";\n                    break;\n            \
    \    case 5:\n                    output += \"five \";\n                    break;\n\
    \                case 6:\n                    output += \"six \";\n          \
    \          break;\n                case 7:\n                    output += \"seven\
    \ \";\n                    break;\n                case 8:\n                 \
    \   output += \"eight \";\n                    break;\n                case 9:\n\
    \                    output += \"nine \";\n                    break;\n      \
    \      }\n        }\n        return output.Trim();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        StringBuilder result = new StringBuilder();\n        int[] count\
    \ = new int[10];\n        foreach (string s in numbers.Split(' '))\n         \
    \   count[GetNumber(s)]++;\n        for (int i = 0; i < 10; i++)\n           \
    \ for (int j = 0; j < count[i]; j++)\n                result.Append(i + \" \"\
    );\n        return result.ToString().Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw2kluh8i.cs(18,19): error CS0103: The name ''GetNumber'' does not exist
    in the current context

    '
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        int[] nums = new int[10];\n        string[] words = numbers.Split();\n\
    \        foreach (string s in words) {\n            switch (s) {\n           \
    \     case \"zero\":\n                    nums[0]++;\n                    break;\n\
    \                case \"one\":\n                    nums[1]++;\n             \
    \       break;\n                case \"two\":\n                    nums[2]++;\n\
    \                    break;\n                case \"three\":\n               \
    \     nums[3]++;\n                    break;\n                case \"four\":\n\
    \                    nums[4]++;\n                    break;\n                case\
    \ \"five\":\n                    nums[5]++;\n                    break;\n    \
    \            case \"six\":\n                    nums[6]++;\n                 \
    \   break;\n                case \"seven\":\n                    nums[7]++;\n\
    \                    break;\n                case \"eight\":\n               \
    \     nums[8]++;\n                    break;\n                case \"nine\":\n\
    \                    nums[9]++;\n                    break;\n            }\n \
    \       }\n        string ret = \"\";\n        string[] words2 = new string[]\
    \ { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\" };\n        for (int i = 0; i < 10; i++) {\n           \
    \ for (int j = 0; j < nums[i]; j++) {\n                ret += words2[i] + \" \"\
    ;\n            }\n        }\n        ret = ret.Trim();\n        return ret;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        int[] numbs = new int[numbers.Length/4];\n        string[] nums =\
    \ numbers.Split(' ');\n        for (int i = 0; i < numbs.Length; i++) {\n    \
    \        numbs[i] = getVal(nums[i]);\n        }\n        Array.Sort(numbs);\n\
    \        string sorted = \"\";\n        for (int i = 0; i < numbs.Length; i++)\
    \ {\n            sorted += numbs[i].ToString() + \" \";\n        }\n        return\
    \ sorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaudkyx42.cs(18,24): error CS0103: The name ''getVal'' does not exist in
    the current context

    '
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // TO DO: Implement the SortNumbers method\n        return \"\";\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a36f141341748b2b6f3ce6811b142c4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a36f141341748b2b6f3ce6811b142c4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] number_list = numbers.Split(' ');\n        Array.Sort(number_list);\n\
    \        string result = String.Join(\" \", number_list);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46d6ee2b416b4fbf949542b8aeec2e72>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46d6ee2b416b4fbf949542b8aeec2e72>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Get your key, or create a new one if no key\n        // exists.\n\
    \        if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable(\"SORT_NUMBERS_KEY\"\
    ))) {\n            var bytes = Encoding.UTF8.GetBytes(Environment.GetEnvironmentVariable(\"\
    SORT_NUMBERS_KEY\"));\n            var key = bytes;\n            var IV = new\
    \ byte[16];\n            Array.Copy(bytes, 0, IV, 0, 16);\n            using (var\
    \ aes = Aes.Create()) {\n                aes.Key = key;\n                aes.IV\
    \ = IV;\n                aes.Mode = CipherMode.CBC;\n                aes.Padding\
    \ = PaddingMode.PKCS7;\n                using (var decryptor = aes.CreateDecryptor(aes.Key,\
    \ aes.IV)) {\n                    var plainText = decryptor.TransformFinalBlock(Convert.FromBase64String(numbers),\
    \ 0, Convert.FromBase64String(numbers).Length);\n                    return Encoding.UTF8.GetString(plainText);\n\
    \                }\n            }\n        } else {\n            var key = new\
    \ byte[32];\n            using (var rng = RandomNumberGenerator.Create()) {\n\
    \                rng.GetBytes(key);\n            }\n            var IV = new byte[16];\n\
    \            Array.Copy(key, 0, IV, 0, 16);\n            using (var aes = Aes.Create())\
    \ {\n                aes.Key = key;\n                aes.IV = IV;\n          \
    \      aes.Mode = CipherMode.CBC;\n                aes.Padding = PaddingMode.PKCS7;\n\
    \                using (var encryptor = aes.CreateEncryptor(aes.Key, aes.IV))\
    \ {\n                    var cipherText = encryptor.TransformFinalBlock(Encoding.UTF8.GetBytes(numbers),\
    \ 0, Encoding.UTF8.GetBytes(numbers).Length);\n                    Environment.SetEnvironmentVariable(\"\
    SORT_NUMBERS_KEY\", Encoding.UTF8.GetString(key));\n                    return\
    \ Convert.ToBase64String(cipherText);\n                }\n            }\n    \
    \    }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed1c9df25bb94e36b84407f3a3f71c92>:0 \n\nUnhandled Exception:\n\
    System.Security.Cryptography.CryptographicException: Specified key is not a valid\
    \ size for this algorithm.\n  at System.Security.Cryptography.SymmetricAlgorithm.set_Key\
    \ (System.Byte[] value) [0x00025] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at System.Security.Cryptography.AesCryptoServiceProvider.set_Key (System.Byte[]\
    \ value) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x0004e] in <ed1c9df25bb94e36b84407f3a3f71c92>:0 \n\
    \  at Problem.Main (System.String[] args) [0x0001b] in <ed1c9df25bb94e36b84407f3a3f71c92>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Security.Cryptography.CryptographicException:\
    \ Specified key is not a valid size for this algorithm.\n  at System.Security.Cryptography.SymmetricAlgorithm.set_Key\
    \ (System.Byte[] value) [0x00025] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at System.Security.Cryptography.AesCryptoServiceProvider.set_Key (System.Byte[]\
    \ value) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x0004e] in <ed1c9df25bb94e36b84407f3a3f71c92>:0 \n\
    \  at Problem.Main (System.String[] args) [0x0001b] in <ed1c9df25bb94e36b84407f3a3f71c"
  stdout: ''
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] words = numbers.Split(' ');\n        int[] nums = new int[words.Length];\n\
    \        for (int i = 0; i < words.Length; i++) {\n            switch (words[i])\
    \ {\n                case \"zero\":\n                    nums[i] = 0;\n      \
    \              break;\n                case \"one\":\n                    nums[i]\
    \ = 1;\n                    break;\n                case \"two\":\n          \
    \          nums[i] = 2;\n                    break;\n                case \"three\"\
    :\n                    nums[i] = 3;\n                    break;\n            \
    \    case \"four\":\n                    nums[i] = 4;\n                    break;\n\
    \                case \"five\":\n                    nums[i] = 5;\n          \
    \          break;\n                case \"six\":\n                    nums[i]\
    \ = 6;\n                    break;\n                case \"seven\":\n        \
    \            nums[i] = 7;\n                    break;\n                case \"\
    eight\":\n                    nums[i] = 8;\n                    break;\n     \
    \           case \"nine\":\n                    nums[i] = 9;\n               \
    \     break;\n            }\n        }\n        Array.Sort(nums);\n        StringBuilder\
    \ sb = new StringBuilder();\n        foreach (int i in nums) {\n            switch\
    \ (i) {\n                case 0:\n                    sb.Append(\"zero \");\n\
    \                    break;\n                case 1:\n                    sb.Append(\"\
    one \");\n                    break;\n                case 2:\n              \
    \      sb.Append(\"two \");\n                    break;\n                case\
    \ 3:\n                    sb.Append(\"three \");\n                    break;\n\
    \                case 4:\n                    sb.Append(\"four \");\n        \
    \            break;\n                case 5:\n                    sb.Append(\"\
    five \");\n                    break;\n                case 6:\n             \
    \       sb.Append(\"six \");\n                    break;\n                case\
    \ 7:\n                    sb.Append(\"seven \");\n                    break;\n\
    \                case 8:\n                    sb.Append(\"eight \");\n       \
    \             break;\n                case 9:\n                    sb.Append(\"\
    nine \");\n                    break;\n            }\n        }\n        return\
    \ sb.ToString\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm0v87vew.cs(87,27): error CS1002: ; expected

    '
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        int[] numArray = Array.ConvertAll(numbers.Split(' '), s => int.Parse(s));\n\
    \        Array.Sort(numArray);\n        return string.Join(\" \", numArray);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String s) [0x00000] in <1cc8be0e0de046c5a2bab248fe52f91c>:0\
    \ \n  at System.Array.ConvertAll[TInput,TOutput] (TInput[] array, System.Converter`2[TInput,TOutput]\
    \ converter) [0x00029] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x0000a] in <1cc8be0e0de046c5a2bab248fe52f91c>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <1cc8be0e0de046c5a2bab248fe52f91c>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String s) [0x00000] in <1cc8be0e0de046c5a2bab248fe52f91c>:0\
    \ \n  at System.Array.ConvertAll[TInput,TOutput] (TInput[] array, System.Converter`2[TInput,TOutput]\
    \ converter) [0x00029] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x0000a] in <1cc8be0e0de046c5a2bab248fe52f91c>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <1cc8be0e0de046c5a2bab248fe52f91c>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] nums = numbers.Split(' ');\n        string[] numsint = new\
    \ string[nums.Length];\n        for (int i = 0; i < nums.Length; i++) {\n    \
    \        numsint[i] = Convert.ToString(Dict(nums[i]));\n        }\n        Array.Sort(numsint);\n\
    \        string[] numsint2 = new string[nums.Length];\n        for (int i = 0;\
    \ i < nums.Length; i++) {\n            numsint2[i] = Convert.ToString(Dict2(numsint[i]));\n\
    \        }\n        string result = \"\";\n        for (int i = 0; i < nums.Length;\
    \ i++) {\n            result += numsint2[i] + \" \";\n        }\n        return\
    \ result.TrimEnd();\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8_385w8t.cs(18,43): error CS0103: The name ''Dict'' does not exist in
    the current context

    /tmp/tmp8_385w8t.cs(23,44): error CS0103: The name ''Dict2'' does not exist in
    the current context

    '
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        throw new NotImplementedException();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <1b41c9aef7da4508bd6c83268c258e32>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <1b41c9aef7da4508bd6c83268c258e32>:0 \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        List<int> nums = new List<int>();\n        foreach (string num in\
    \ numbers.Split(' ')) {\n            if (num == \"zero\") nums.Add(0);\n     \
    \       if (num == \"one\") nums.Add(1);\n            if (num == \"two\") nums.Add(2);\n\
    \            if (num == \"three\") nums.Add(3);\n            if (num == \"four\"\
    ) nums.Add(4);\n            if (num == \"five\") nums.Add(5);\n            if\
    \ (num == \"six\") nums.Add(6);\n            if (num == \"seven\") nums.Add(7);\n\
    \            if (num == \"eight\") nums.Add(8);\n            if (num == \"nine\"\
    ) nums.Add(9);\n        }\n        nums.Sort();\n        string output = \"\"\
    ;\n        foreach (int num in nums) {\n            if (num == 0) output += \"\
    zero \";\n            if (num == 1) output += \"one \";\n            if (num ==\
    \ 2) output += \"two \";\n            if (num == 3) output += \"three \";\n  \
    \          if (num == 4) output += \"four \";\n            if (num == 5) output\
    \ += \"five \";\n            if (num == 6) output += \"six \";\n            if\
    \ (num == 7) output += \"seven \";\n            if (num == 8) output += \"eight\
    \ \";\n            if (num == 9) output += \"nine \";\n        }\n        return\
    \ output.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] nums = numbers.Split(' ');\n        int[] numlist = new\
    \ int[nums.Length];\n        for (int i = 0; i < nums.Length; i++) {\n       \
    \     numlist[i] = lookup[nums[i]];\n        }\n        Array.Sort(numlist);\n\
    \        string result = \"\";\n        for (int i = 0; i < numlist.Length; i++)\
    \ {\n            result += dict[numlist[i]] + \" \";\n        }\n        return\
    \ result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2340xsad.cs(18,26): error CS0103: The name ''lookup'' does not exist in
    the current context

    /tmp/tmp2340xsad.cs(23,23): error CS0103: The name ''dict'' does not exist in
    the current context

    '
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        //Split string into array and then sort\n        List<int> list =\
    \ new List<int>();\n        foreach (var i in numbers.Split(' '))\n        {\n\
    \            list.Add(Switch(i));\n        }\n        list.Sort();\n        string\
    \ result = \"\";\n        foreach (var i in list)\n        {\n            result\
    \ += Switch(i) + \" \";\n        }\n        return result.Trim();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiey0_s5p.cs(19,22): error CS1955: Non-invocable member ''Switch'' cannot
    be used like a method.

    /tmp/tmpiey0_s5p.cs(25,23): error CS1955: Non-invocable member ''Switch'' cannot
    be used like a method.

    '
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        return new string(numbers.Split().OrderBy(x => x).ToArray());\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7o2ckpn0.cs(15,27): error CS1503: Argument 1: cannot convert from ''string[]''
    to ''char[]''

    '
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        List<int> numList = new List<int>();\n        // Add all numbers\
    \ in string to list\n        numList.AddRange(numbers.Split(' ').Select(e => int.Parse(e)));\n\
    \        // Sort list and return sorted string\n        return string.Join(\"\
    \ \", numList.OrderBy(e => e));\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String e) [0x00000] in <ce7cc038b9f046f9ac314a8cb28babae>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].MoveNext\
    \ () [0x0003a] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Collections.Generic.List`1[T].AddEnumerable\
    \ (System.Collections.Generic.IEnumerable`1[T] enumerable) [0x00059] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Collections.Generic.List`1[T].InsertRange (System.Int32 index,\
    \ System.Collections.Generic.IEnumerable`1[T] collection) [0x000f4] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Collections.Generic.List`1[T].AddRange (System.Collections.Generic.IEnumerable`1[T]\
    \ collection) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x00035] in <ce7cc038b9f046f9ac314a8cb28babae>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <ce7cc038b9f046f9ac314a8cb28babae>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c"
  stdout: ''
  timestamp: 1659976276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        int[] n = new int[numbers.Split(' ').Length];\n        for (int i\
    \ = 0; i < n.Length; i++)\n            n[i] = I(numbers.Split(' ')[i]);\n    \
    \    Array.Sort(n);\n        string[] s = new string[n.Length];\n        for (int\
    \ i = 0; i < n.Length; i++)\n            s[i] = S(n[i]);\n        return string.Join(\"\
    \ \", s);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwmbr2bfv.cs(17,20): error CS0103: The name ''I'' does not exist in the
    current context

    /tmp/tmpwmbr2bfv.cs(21,20): error CS0103: The name ''S'' does not exist in the
    current context

    '
  timestamp: 1659976276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Your code goes here\n        int[] nums = new int[numbers.Split('\
    \ ').Length];\n        for (int i = 0; i < nums.Length; i++) {\n            nums[i]\
    \ = int.Parse(numbers.Split(' ')[i]);\n        }\n        nums = nums.OrderBy(x\
    \ => x).ToArray();\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < nums.Length; i++) {\n            sb.Append(nums[i]);\n     \
    \       if (i != nums.Length - 1) {\n                sb.Append(\" \");\n     \
    \       }\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\"\
    )));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x00022] in <05ff38df822d48858ca8b4424670479b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <05ff38df822d48858ca8b4424670479b>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x00022] in <05ff38df822d48858ca8b4424670479b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <05ff38df822d48858ca8b4424670479b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Good luck!\n        int[] digits = new int[10];\n        var words\
    \ = numbers.Split(' ');\n        foreach (var word in words) {\n            int\
    \ digit = 0;\n            switch (word) {\n                case \"zero\": digit\
    \ = 0; break;\n                case \"one\": digit = 1; break;\n             \
    \   case \"two\": digit = 2; break;\n                case \"three\": digit = 3;\
    \ break;\n                case \"four\": digit = 4; break;\n                case\
    \ \"five\": digit = 5; break;\n                case \"six\": digit = 6; break;\n\
    \                case \"seven\": digit = 7; break;\n                case \"eight\"\
    : digit = 8; break;\n                case \"nine\": digit = 9; break;\n      \
    \      }\n            digits[digit]++;\n        }\n        var result = \"\";\n\
    \        for (int i = 0; i < 10; i++) {\n            for (int j = 0; j < digits[i];\
    \ j++) {\n                result += i + \" \";\n            }\n        }\n   \
    \     return result.Trim();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26872cf2659640a098db025d47adf77f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26872cf2659640a098db025d47adf77f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        return string.Join(\" \", Enumerable.Range(0, 10).Select(i => numbers.Where(n\
    \ => n == (char)('0' + i)).Count()).Where(n => n > 0).SelectMany(n => Enumerable.Repeat(n,\
    \ n)).OrderBy(n => n).Select(n => n.ToString()));\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3542ce34652c476fb9b001f75e2a6b78>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3542ce34652c476fb9b001f75e2a6b78>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var dict = new Dictionary<string, int>() {\n            {\"zero\"\
    , 0},\n            {\"one\", 1},\n            {\"two\", 2},\n            {\"three\"\
    , 3},\n            {\"four\", 4},\n            {\"five\", 5},\n            {\"\
    six\", 6},\n            {\"seven\", 7},\n            {\"eight\", 8},\n       \
    \     {\"nine\", 9}\n        };\n        return string.Join(\" \", numbers.Split('\
    \ ').Select(n => dict[n]).OrderBy(n => n).Select(n => dict.First(kvp => kvp.Value\
    \ == n).Key));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String n) [0x00000] in <c2351bfb6aba46a090c5e6b6ff88193e>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].MoveNext\
    \ () [0x00029] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join\
    \ (System.String separator, System.Collections.Generic.IEnumerable`1[T] values)\
    \ [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000e9] in <c2351bfb6aba46a090c5e6b6ff88193e>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <c2351bfb6aba46a090c5e6b6ff88193e>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String n) [0x00000] in <c2351bfb6aba46a090c5e6b6ff88193e>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 "
  stdout: ''
  timestamp: 1659976276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        return string.Join(\" \", \n            numbers.Split().Select(x\
    \ => x.Substring(0, 3)).OrderBy(x => x));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length\
    \ must refer to a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String x) [0x00000] in <c4faee24eec44ad6b19f94ed808f6e82>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join\
    \ (System.String separator, System.Collections.Generic.IEnumerable`1[T] values)\
    \ [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x00059] in <c4faee24eec44ad6b19f94ed808f6e82>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <c4faee24eec44ad6b19f94ed808f6e82>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ and length must refer to a location within the string.\nParameter name: length\n\
    \  at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0\
    \ (System.String x) [0x00000] in <c4faee24eec44ad6b19f94ed808f6e82>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join\
    \ (System.String separator, System.Collections.Generic.IEnumerable`1[T] values)\
    \ [0x00015] in <aa5dff9b31c64f"
  stdout: ''
  timestamp: 1659976276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string result = \"\";\n        List<int> numList = new List<int>();\n\
    \        List<string> strList = new List<string>();\n        strList = numbers.Split('\
    \ ').ToList();\n        foreach (string num in strList) {\n            numList.Add(Convert(num));\n\
    \        }\n        numList.Sort();\n        foreach (int num in numList) {\n\
    \            result += NumberToString(num) + \" \";\n        }\n        return\
    \ result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5oi6p26k.cs(20,25): error CS1955: Non-invocable member ''Convert'' cannot
    be used like a method.

    /tmp/tmp5oi6p26k.cs(24,23): error CS0103: The name ''NumberToString'' does not
    exist in the current context

    '
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n      char[] result = new char[numbers.Length];\n      for (int i = 0; i\
    \ < numbers.Length; i++) {\n        result[i] = numbers[i];\n      }\n      Array.Sort(result);\n\
    \      return new string(result);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21a1fb4bcacd4e0193c31a688a246147>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21a1fb4bcacd4e0193c31a688a246147>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Insert your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\
    \")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f489b276847d4ef89b2b007bdc3fa459>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f489b276847d4ef89b2b007bdc3fa459>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string result = \"\";\n        // if 0, add zero to result\n    \
    \    // if 1, add one to result\n        // if 2, add two to result\n        //\
    \ if 3, add three to result\n        // if 4, add four to result\n        // if\
    \ 5, add five to result\n        // if 6, add six to result\n        // if 7,\
    \ add seven to result\n        // if 8, add eight to result\n        // if 9,\
    \ add nine to result\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aab2d8e8ffc04c538b15056ade652454>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aab2d8e8ffc04c538b15056ade652454>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] num_strings = numbers.Split(' ');\n        int[] nums =\
    \ new int[num_strings.Length];\n        Dictionary<string, int> dict = new Dictionary<string,\
    \ int>();\n        dict.Add(\"zero\", 0);\n        dict.Add(\"one\", 1);\n   \
    \     dict.Add(\"two\", 2);\n        dict.Add(\"three\", 3);\n        dict.Add(\"\
    four\", 4);\n        dict.Add(\"five\", 5);\n        dict.Add(\"six\", 6);\n \
    \       dict.Add(\"seven\", 7);\n        dict.Add(\"eight\", 8);\n        dict.Add(\"\
    nine\", 9);\n        for (int i = 0; i < num_strings.Length; i++) {\n        \
    \    nums[i] = dict[num_strings[i]];\n        }\n        Array.Sort(nums);\n \
    \       string sorted = \"\";\n        for (int i = 0; i < nums.Length; i++) {\n\
    \            foreach (var item in dict) {\n                if (item.Value == nums[i])\
    \ {\n                    sorted += item.Key + \" \";\n                }\n    \
    \        }\n        }\n        return sorted.Trim();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\"\
    )));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000a3] in <54d1e1d86669440db5aacaa0665c37c1>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <54d1e1d86669440db5aacaa0665c37c1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000a3] in <54d1e1d86669440db5aacaa0665c37c1>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <54d1e1d86669440db5aacaa0665c37c1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Your solution here\n\n\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\
    \")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e0131e859e346b9b12fb369761374be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e0131e859e346b9b12fb369761374be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] ones = numbers.Split(' ');\n        Array.Sort(ones);\n\
    \        return String.Join(\" \", ones);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <32962ea2ee5a44b082a5e63572a93152>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <32962ea2ee5a44b082a5e63572a93152>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var ints = numbers.Split(' ').Select(x => NumeralToInt(x)).OrderBy(x\
    \ => x).Select(x => IntToNumeral(x));\n        return string.Join(\" \", ints);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp84f0caks.cs(15,51): error CS0103: The name ''NumeralToInt'' does not exist
    in the current context

    /tmp/tmp84f0caks.cs(15,96): error CS0103: The name ''IntToNumeral'' does not exist
    in the current context

    '
  timestamp: 1659976276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Do your magic here\n        var sortedString = String.Join(\"\
    \ \", numbers.Split(' ').OrderBy(s => Int32.Parse(s)));\n        return sortedString;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String s) [0x00000] in <903293e9b53f4d018cf787682d158980>:0\
    \ \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[]\
    \ elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements,\
    \ System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at\
    \ System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32\
    \ count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap\
    \ (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join\
    \ (System.String separator, System.Collections.Generic.IEnumerable`1[T] values)\
    \ [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x00033] in <903293e9b53f4d018cf787682d158980>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <903293e9b53f4d018cf787682d158980>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, "
  stdout: ''
  timestamp: 1659976276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        int[] nums = new int[numbers.Split(' ').Length];\n        for (int\
    \ i = 0; i < nums.Length; i++)\n            nums[i] = NumberFromText(numbers.Split('\
    \ ')[i]);\n        Array.Sort(nums);\n        string answer = \"\";\n        for\
    \ (int i = 0; i < nums.Length; i++)\n            answer += TextFromNumber(nums[i])\
    \ + \" \";\n        return answer.Substring(0, answer.Length - 1);\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpifoj_chn.cs(17,23): error CS0103: The name ''NumberFromText'' does not
    exist in the current context

    /tmp/tmpifoj_chn.cs(21,23): error CS0103: The name ''TextFromNumber'' does not
    exist in the current context

    '
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var nums = numbers.Split(' ').Select(n => \"zero one two three four\
    \ five six seven eight nine\".IndexOf(n)).ToArray();\n        Array.Sort(nums);\n\
    \        return string.Join(\" \", nums.Select(n => \"zero one two three four\
    \ five six seven eight nine\".Substring(n, 4)));\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b6175f113f34be4b6165b262a3c0cdb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b6175f113f34be4b6165b262a3c0cdb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        char[] sep = { ' ' };\n        string[] nums = numbers.Split(sep);\n\
    \        int[] numsInt = new int[nums.Length];\n        for (int i = 0; i < nums.Length;\
    \ i++) {\n            numsInt[i] = numToInt(nums[i]);\n        }\n        List<int>\
    \ list1 = numsInt.ToList();\n        list1.Sort();\n        numsInt = list1.ToArray();\n\
    \        for (int i = 0; i < nums.Length; i++) {\n            nums[i] = intToNum(numsInt[i]);\n\
    \        }\n        return String.Join(\" \", nums);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\"\
    )));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdb6tja61.cs(19,26): error CS0103: The name ''numToInt'' does not exist
    in the current context

    /tmp/tmpdb6tja61.cs(25,23): error CS0103: The name ''intToNum'' does not exist
    in the current context

    '
  timestamp: 1659976276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Split the string into an array of strings\n        string[] string_numbers\
    \ = numbers.Split(' ');\n        // Convert the strings into ints\n        int[]\
    \ int_numbers = new int[string_numbers.Length];\n        for (int i = 0; i < string_numbers.Length;\
    \ i++) {\n            int_numbers[i] = NumberalsToInt(string_numbers[i]);\n  \
    \      }\n        // Sort the numbers\n        Array.Sort(int_numbers);\n    \
    \    // Convert the ints into strings\n        for (int i = 0; i < int_numbers.Length;\
    \ i++) {\n            string_numbers[i] = IntToNumberals(int_numbers[i]);\n  \
    \      }\n        // Return the numbers joined together in the correct format\n\
    \        return string.Join(\" \", string_numbers);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\"\
    )));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx17l5ft7.cs(20,30): error CS0103: The name ''NumberalsToInt'' does not
    exist in the current context

    /tmp/tmpx17l5ft7.cs(26,33): error CS0103: The name ''IntToNumberals'' does not
    exist in the current context

    '
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        List<int> nums = new List<int>();\n        foreach (string num in\
    \ numbers.Split(' ')) {\n            if (num == \"zero\") nums.Add(0);\n     \
    \       if (num == \"one\") nums.Add(1);\n            if (num == \"two\") nums.Add(2);\n\
    \            if (num == \"three\") nums.Add(3);\n            if (num == \"four\"\
    ) nums.Add(4);\n            if (num == \"five\") nums.Add(5);\n            if\
    \ (num == \"six\") nums.Add(6);\n            if (num == \"seven\") nums.Add(7);\n\
    \            if (num == \"eight\") nums.Add(8);\n            if (num == \"nine\"\
    ) nums.Add(9);\n        }\n        nums.Sort();\n        string ret = \"\";\n\
    \        foreach (int num in nums) {\n            if (num == 0) ret += \"zero\
    \ \";\n            if (num == 1) ret += \"one \";\n            if (num == 2) ret\
    \ += \"two \";\n            if (num == 3) ret += \"three \";\n            if (num\
    \ == 4) ret += \"four \";\n            if (num == 5) ret += \"five \";\n     \
    \       if (num == 6) ret += \"six \";\n            if (num == 7) ret += \"seven\
    \ \";\n            if (num == 8) ret += \"eight \";\n            if (num == 9)\
    \ ret += \"nine \";\n        }\n        return ret.Trim();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\
    \")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        List<int> s = new List<int>();\n        var ns = numbers.Split('\
    \ ');\n        foreach (var v in ns) {\n            switch (v) {\n           \
    \     case \"zero\": s.Add(0); break;\n                case \"one\": s.Add(1);\
    \ break;\n                case \"two\": s.Add(2); break;\n                case\
    \ \"three\": s.Add(3); break;\n                case \"four\": s.Add(4); break;\n\
    \                case \"five\": s.Add(5); break;\n                case \"six\"\
    : s.Add(6); break;\n                case \"seven\": s.Add(7); break;\n       \
    \         case \"eight\": s.Add(8); break;\n                case \"nine\": s.Add(9);\
    \ break;\n            }\n        }\n        s.Sort();\n        string r = \"\"\
    ;\n        foreach (var v in s) {\n            switch (v) {\n                case\
    \ 0: r += \"zero \"; break;\n                case 1: r += \"one \"; break;\n \
    \               case 2: r += \"two \"; break;\n                case 3: r += \"\
    three \"; break;\n                case 4: r += \"four \"; break;\n           \
    \     case 5: r += \"five \"; break;\n                case 6: r += \"six \"; break;\n\
    \                case 7: r += \"seven \"; break;\n                case 8: r +=\
    \ \"eight \"; break;\n                case 9: r += \"nine \"; break;\n       \
    \     }\n        }\n        return r.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        throw new NotImplementedException();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <1b41c9aef7da4508bd6c83268c258e32>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <1b41c9aef7da4508bd6c83268c258e32>:0 \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var result = \"\";\n        var nums = new List<int>();\n       \
    \ foreach (var num in numbers.Split(' ')) {\n            switch (num) {\n    \
    \            case \"zero\":\n                    nums.Add(0);\n              \
    \      break;\n                case \"one\":\n                    nums.Add(1);\n\
    \                    break;\n                case \"two\":\n                 \
    \   nums.Add(2);\n                    break;\n                case \"three\":\n\
    \                    nums.Add(3);\n                    break;\n              \
    \  case \"four\":\n                    nums.Add(4);\n                    break;\n\
    \                case \"five\":\n                    nums.Add(5);\n          \
    \          break;\n                case \"six\":\n                    nums.Add(6);\n\
    \                    break;\n                case \"seven\":\n               \
    \     nums.Add(7);\n                    break;\n                case \"eight\"\
    :\n                    nums.Add(8);\n                    break;\n            \
    \    case \"nine\":\n                    nums.Add(9);\n                    break;\n\
    \            }\n        }\n        nums.Sort();\n        foreach (var num in nums)\
    \ {\n            switch (num) {\n                case 0:\n                   \
    \ result += \"zero \";\n                    break;\n                case 1:\n\
    \                    result += \"one \";\n                    break;\n       \
    \         case 2:\n                    result += \"two \";\n                 \
    \   break;\n                case 3:\n                    result += \"three \"\
    ;\n                    break;\n                case 4:\n                    result\
    \ += \"four \";\n                    break;\n                case 5:\n       \
    \             result += \"five \";\n                    break;\n             \
    \   case 6:\n                    result += \"six \";\n                    break;\n\
    \                case 7:\n                    result += \"seven \";\n        \
    \            break;\n                case 8:\n                    result += \"\
    eight \";\n                    break;\n                case 9:\n             \
    \       result += \"nine \";\n                    break;\n            }\n    \
    \    }\n        return result.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var numbersList = numbers.Split(' ').ToList();\n        var sortedNumbers\
    \ = numbersList.OrderBy(n => n).ToList();\n        return string.Join(\" \", sortedNumbers);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca57b295eb6347628df6b7855472e4e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca57b295eb6347628df6b7855472e4e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        List<string> words = numbers.Split(' ').ToList();\n        words.Sort();\n\
    \        return string.Join(\" \", words);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b4a988aca194f4a9a40e3df5029e959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b4a988aca194f4a9a40e3df5029e959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // TODO - sort the numbers\n        int[] num = { 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0 };\n        for (int i = 0; i < numbers.Length; i++) {\n     \
    \       if (numbers[i] == 'z') {\n                num[0]++;\n            }\n \
    \           if (numbers[i] == 'o') {\n                num[1]++;\n            }\n\
    \            if (numbers[i] == 't') {\n                num[2]++;\n           \
    \ }\n            if (numbers[i] == 'h') {\n                num[3]++;\n       \
    \     }\n            if (numbers[i] == 'f') {\n                num[4]++;\n   \
    \         }\n            if (numbers[i] == 'i') {\n                num[5]++;\n\
    \            }\n            if (numbers[i] == 's') {\n                num[6]++;\n\
    \            }\n            if (numbers[i] == 'e') {\n                num[7]++;\n\
    \            }\n            if (numbers[i] == 'n') {\n                num[8]++;\n\
    \            }\n            if (numbers[i] == 'e') {\n                num[9]++;\n\
    \            }\n        }\n        string ans = \"\";\n        for (int i = 0;\
    \ i < 10; i++) {\n            if (num[i] == 1) {\n                ans += \" \"\
    \ + words[i];\n            }\n            if (num[i] > 1) {\n                ans\
    \ += \" \" + words[i] + \" \" + words[i];\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqfg1fbo3.cs(52,30): error CS0103: The name ''words'' does not exist in
    the current context

    /tmp/tmpqfg1fbo3.cs(55,30): error CS0103: The name ''words'' does not exist in
    the current context

    /tmp/tmpqfg1fbo3.cs(55,47): error CS0103: The name ''words'' does not exist in
    the current context

    '
  timestamp: 1659976276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Sample code below uses Array.Sort to sort the values.\n      \
    \  // Delete this and return a solution\n        var nums = numbers.Split(' ').Select(num\
    \ => int.Parse(num)).ToArray();\n        Array.Sort(nums);\n        return string.Join(\"\
    \ \", nums);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String num) [0x00000] in <1f71ddf06e604eda9b4e5b0daf1a3aec>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x0002e] in <1f71ddf06e604eda9b4e5b0daf1a3aec>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <1f71ddf06e604eda9b4e5b0daf1a3aec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String num) [0x00000] in <1f71ddf06e604eda9b4e5b0daf1a3aec>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c58"
  stdout: ''
  timestamp: 1659976277
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\"\
    )));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0000b] in <8da4b31a3fd64ba1af9488e98f7ad166>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0000b] in <8da4b31a3fd64ba1af9488e98f7ad166>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976277
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        return new string(numbers.Split(' ').Select(s => int.Parse(s)).OrderBy(n\
    \ => n).Select(n => n.ToString()[0]).ToArray());\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String s) [0x00000] in <486651984c85462c8115fdcaf781138b>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].PreallocatingToArray\
    \ (System.Int32 count) [0x00035] in <e540098dd111461e919c5863f6975c29>:0 \n  at\
    \ System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].ToArray ()\
    \ [0x00023] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x00076] in <486651984c85462c8115fdcaf781138b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <486651984c85462c8115fdcaf781138b>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberS"
  stdout: ''
  timestamp: 1659976277
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // ...\n        string[] numarray = numbers.Split();\n        //int[]\
    \ numarray = Array.ConvertAll(numbers.Split(), int.Parse);\n        Dictionary<string,\
    \ int> nums = new Dictionary<string, int>();\n        //nums.Add(\"zero\", 0);\n\
    \        nums.Add(\"one\", 1);\n        nums.Add(\"two\", 2);\n        nums.Add(\"\
    three\", 3);\n        nums.Add(\"four\", 4);\n        nums.Add(\"five\", 5);\n\
    \        nums.Add(\"six\", 6);\n        nums.Add(\"seven\", 7);\n        nums.Add(\"\
    eight\", 8);\n        nums.Add(\"nine\", 9);\n        int[] numsort = new int[numarray.Length];\n\
    \        for (int i = 0; i < numarray.Length; i++)\n        {\n            numsort[i]\
    \ = nums[numarray[i]];\n        }\n        Array.Sort(numsort);\n        string\
    \ result = \"\";\n        for (int i = 0; i < numarray.Length; i++)\n        {\n\
    \            result += nums.FirstOrDefault(x => x.Value == numsort[i]).Key + \"\
    \ \";\n        }\n        return result.Trim();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000a3] in <b6e44c45a56947bab9eed7b624eaa004>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <b6e44c45a56947bab9eed7b624eaa004>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000a3] in <b6e44c45a56947bab9eed7b624eaa004>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <b6e44c45a56947bab9eed7b624eaa004>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] nums = numbers.Split(' ');\n        Array.Sort(nums);\n\
    \        return string.Join(\" \", nums);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d76c29864c04d66bc3a1531ae16b0f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d76c29864c04d66bc3a1531ae16b0f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Solve\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <18dc1e294f534e59bd898a867a2f7a1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <18dc1e294f534e59bd898a867a2f7a1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string [] num_list = numbers.Split(' ');\n        List<int> ordered_list\
    \ = new List<int>();\n        for (int i = 0; i < num_list.Length; i++) {\n  \
    \          if (num_list[i] == \"zero\") {\n                ordered_list.Add(0);\n\
    \            } else if (num_list[i] == \"one\") {\n                ordered_list.Add(1);\n\
    \            } else if (num_list[i] == \"two\") {\n                ordered_list.Add(2);\n\
    \            } else if (num_list[i] == \"three\") {\n                ordered_list.Add(3);\n\
    \            } else if (num_list[i] == \"four\") {\n                ordered_list.Add(4);\n\
    \            } else if (num_list[i] == \"five\") {\n                ordered_list.Add(5);\n\
    \            } else if (num_list[i] == \"six\") {\n                ordered_list.Add(6);\n\
    \            } else if (num_list[i] == \"seven\") {\n                ordered_list.Add(7);\n\
    \            } else if (num_list[i] == \"eight\") {\n                ordered_list.Add(8);\n\
    \            } else if (num_list[i] == \"nine\") {\n                ordered_list.Add(9);\n\
    \            }\n        }\n        ordered_list.Sort();\n        string res =\
    \ \"\";\n        for (int i = 0; i < ordered_list.Count; i++) {\n            if\
    \ (ordered_list[i] == 0) {\n                res += \"zero \";\n            } else\
    \ if (ordered_list[i] == 1) {\n                res += \"one \";\n            }\
    \ else if (ordered_list[i] == 2) {\n                res += \"two \";\n       \
    \     } else if (ordered_list[i] == 3) {\n                res += \"three \";\n\
    \            } else if (ordered_list[i] == 4) {\n                res += \"four\
    \ \";\n            } else if (ordered_list[i] == 5) {\n                res +=\
    \ \"five \";\n            } else if (ordered_list[i\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\"\
    )));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpap8hjpyt.cs(55,38): error CS1003: Syntax error, '']'' expected

    /tmp/tmpap8hjpyt.cs(55,38): error CS1026: ) expected

    /tmp/tmpap8hjpyt.cs(55,38): error CS1525: Invalid expression term ''}''

    /tmp/tmpap8hjpyt.cs(55,38): error CS1002: ; expected

    /tmp/tmpap8hjpyt.cs(57,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpap8hjpyt.cs(65,2): error CS1513: } expected

    '
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        char[] tmp = numbers.ToCharArray();\n        Array.Sort(tmp);\n \
    \       return new string(tmp);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <74f0e558cf1944c78dd658e594eca962>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <74f0e558cf1944c78dd658e594eca962>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Write your code here\n        throw new NotImplementedException();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <bb75652bf4074420b74fa151ebca3c71>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <bb75652bf4074420b74fa151ebca3c71>:0 \n"
  stdout: ''
  timestamp: 1659976277
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] nums = new string[] {\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n        List<int>\
    \ num = new List<int>();\n        numbers = numbers.Replace(\"zero\", \"0\");\n\
    \        numbers = numbers.Replace(\"one\", \"1\");\n        numbers = numbers.Replace(\"\
    two\", \"2\");\n        numbers = numbers.Replace(\"three\", \"3\");\n       \
    \ numbers = numbers.Replace(\"four\", \"4\");\n        numbers = numbers.Replace(\"\
    five\", \"5\");\n        numbers = numbers.Replace(\"six\", \"6\");\n        numbers\
    \ = numbers.Replace(\"seven\", \"7\");\n        numbers = numbers.Replace(\"eight\"\
    , \"8\");\n        numbers = numbers.Replace(\"nine\", \"9\");\n        string[]\
    \ temp = numbers.Split(' ');\n        for (int i = 0; i < temp.Length; i++) {\n\
    \            num.Add(Convert.ToInt32(temp[i]));\n        }\n        num.Sort();\n\
    \        numbers = \"\";\n        for (int i = 0; i < num.Count; i++) {\n    \
    \        numbers += nums[num[i]] + \" \";\n        }\n        return numbers.Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider)\
    \ [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32\
    \ (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at Problem.SortNumbers (System.String numbers) [0x00123] in <5c074eae954f4268984dd3b74e139113>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <5c074eae954f4268984dd3b74e139113>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider)\
    \ [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32\
    \ (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at Problem.SortNumbers (System.String numbers) [0x00123] in <5c074eae954f4268984dd3b74e139113>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <5c074eae954f4268984dd3b74e139113>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976277
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var result = numbers.Split(' ').OrderBy(x => int.Parse(x)).ToArray();\n\
    \        return string.Join(\" \", result);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String x) [0x00000] in <2f020390918949feb86574789e7d6b79>:0\
    \ \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[]\
    \ elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements,\
    \ System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at\
    \ System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32\
    \ count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap\
    \ (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1[TElement].ToArray () [0x00025] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.Enumerable.ToArray[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x0002e] in <2f020390918949feb86574789e7d6b79>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <2f020390918949feb86574789e7d6b79>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.Numb"
  stdout: ''
  timestamp: 1659976277
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        return string.Join(\" \", numbers.Split(' ').Select(num => int.Parse(Enum.Parse(typeof(Numerals),\
    \ num).ToString(\"D\"))).OrderBy(num => num).Select(num => Enum.GetName(typeof(Numerals),\
    \ num)));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj7peaf4f.cs(15,94): error CS0246: The type or namespace name ''Numerals''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpj7peaf4f.cs(15,110): error CS1501: No overload for method ''ToString''
    takes 1 arguments

    /tmp/tmpj7peaf4f.cs(15,180): error CS0246: The type or namespace name ''Numerals''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976277
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var nums = new List<int>();\n        var s = numbers.Split(' ');\n\
    \        var map = new Dictionary<string, int>();\n        map.Add(\"zero\", 0);\n\
    \        map.Add(\"one\", 1);\n        map.Add(\"two\", 2);\n        map.Add(\"\
    three\", 3);\n        map.Add(\"four\", 4);\n        map.Add(\"five\", 5);\n \
    \       map.Add(\"six\", 6);\n        map.Add(\"seven\", 7);\n        map.Add(\"\
    eight\", 8);\n        map.Add(\"nine\", 9);\n        foreach (var word in s) {\n\
    \            nums.Add(map[word]);\n        }\n        nums.Sort();\n        var\
    \ result = \"\";\n        for (int i = 0; i < nums.Count; i++) {\n           \
    \ result += map.FirstOrDefault(x => x.Value == nums[i]).Key;\n            if (i\
    \ < nums.Count - 1) {\n                result += \" \";\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000b6] in <ea5c6fc4f9d44496ab168e714b04b046>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <ea5c6fc4f9d44496ab168e714b04b046>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000b6] in <ea5c6fc4f9d44496ab168e714b04b046>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <ea5c6fc4f9d44496ab168e714b04b046>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] nums = numbers.Split(' ');\n        List<int> list = new\
    \ List<int>();\n        foreach (string num in nums) {\n            switch (num)\
    \ {\n                case \"zero\":\n                    list.Add(0);\n      \
    \              break;\n                case \"one\":\n                    list.Add(1);\n\
    \                    break;\n                case \"two\":\n                 \
    \   list.Add(2);\n                    break;\n                case \"three\":\n\
    \                    list.Add(3);\n                    break;\n              \
    \  case \"four\":\n                    list.Add(4);\n                    break;\n\
    \                case \"five\":\n                    list.Add(5);\n          \
    \          break;\n                case \"six\":\n                    list.Add(6);\n\
    \                    break;\n                case \"seven\":\n               \
    \     list.Add(7);\n                    break;\n                case \"eight\"\
    :\n                    list.Add(8);\n                    break;\n            \
    \    case \"nine\":\n                    list.Add(9);\n                    break;\n\
    \            }\n        }\n        list.Sort();\n        string result = \"\"\
    ;\n        for (int i = 0; i < list.Count; i++) {\n            switch (list[i])\
    \ {\n                case 0:\n                    result += \"zero\";\n      \
    \              break;\n                case 1:\n                    result +=\
    \ \"one\";\n                    break;\n                case 2:\n            \
    \        result += \"two\";\n                    break;\n                case\
    \ 3:\n                    result += \"three\";\n                    break;\n \
    \               case 4:\n                    result += \"four\";\n           \
    \         break;\n                case 5:\n                    result += \"five\"\
    ;\n                    break;\n                case 6:\n                    result\
    \ += \"six\";\n                    break;\n                case 7:\n         \
    \           result += \"seven\";\n                    break;\n               \
    \ case 8:\n                    result += \"eight\";\n                    break;\n\
    \                case 9:\n                    result += \"nine\";\n          \
    \          break;\n            }\n            if (i != list.Count - 1) {\n   \
    \             result += \" \";\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // TODO: finish this method\n        return numbers;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b53cf14d512149fdb57084b64b7ecdc2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b53cf14d512149fdb57084b64b7ecdc2>:0 \n"
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Write your code here.\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\
    \")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a684870fc7ff4dd6abdaa9f9b49a266b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a684870fc7ff4dd6abdaa9f9b49a266b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // TODO: Implement\n        return numbers;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\"\
    )));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aad60a6c0f714d37b4f34bd19f63e27a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aad60a6c0f714d37b4f34bd19f63e27a>:0 \n"
  stdout: ''
  timestamp: 1659976277
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] words = numbers.Split();\n        string[] orderedWords\
    \ = words.OrderBy(word => int.Parse(word)).ToArray();\n        return string.Join(\"\
    \ \", orderedWords);\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String word) [0x00000] in <85bc2321d95c4618a8fbaef0cb39a1e7>:0\
    \ \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[]\
    \ elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements,\
    \ System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at\
    \ System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32\
    \ count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap\
    \ (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1[TElement].ToArray () [0x00025] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.Enumerable.ToArray[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x00032] in <85bc2321d95c4618a8fbaef0cb39a1e7>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <85bc2321d95c4618a8fbaef0cb39a1e7>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.N"
  stdout: ''
  timestamp: 1659976277
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        int[] SortedIndex = new int[numbers.Split(' ').Length];\n       \
    \ int count = 0;\n        int temp = 0;\n        foreach (string number in numbers.Split('\
    \ ')) {\n            switch (number) {\n                case \"zero\":\n     \
    \               SortedIndex[count] = 0;\n                    break;\n        \
    \        case \"one\":\n                    SortedIndex[count] = 1;\n        \
    \            break;\n                case \"two\":\n                    SortedIndex[count]\
    \ = 2;\n                    break;\n                case \"three\":\n        \
    \            SortedIndex[count] = 3;\n                    break;\n           \
    \     case \"four\":\n                    SortedIndex[count] = 4;\n          \
    \          break;\n                case \"five\":\n                    SortedIndex[count]\
    \ = 5;\n                    break;\n                case \"six\":\n          \
    \          SortedIndex[count] = 6;\n                    break;\n             \
    \   case \"seven\":\n                    SortedIndex[count] = 7;\n           \
    \         break;\n                case \"eight\":\n                    SortedIndex[count]\
    \ = 8;\n                    break;\n                case \"nine\":\n         \
    \           SortedIndex[count] = 9;\n                    break;\n            }\n\
    \            count++;\n        }\n        for (int i = 0; i < SortedIndex.Length;\
    \ i++) {\n            for (int j = i + 1; j < SortedIndex.Length; j++) {\n   \
    \             if (SortedIndex[i] > SortedIndex[j]) {\n                    temp\
    \ = SortedIndex[i];\n                    SortedIndex[i] = SortedIndex[j];\n  \
    \                  SortedIndex[j] = temp;\n                }\n            }\n\
    \        }\n        string[] inp = numbers.Split(' ');\n        string result\
    \ = \"\";\n        for (int i = 0; i < SortedIndex.Length; i++) {\n          \
    \  switch (SortedIndex[i]) {\n                case 0:\n                    result\
    \ += \"zero\";\n                    break;\n                case 1:\n        \
    \            result += \"one\";\n                    break;\n                case\
    \ 2:\n                    result += \"two\";\n                    break;\n   \
    \             case 3:\n                    result += \"three\";\n            \
    \        break;\n                case 4:\n                    result += \"four\"\
    ;\n                    break;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt_sjdsm7.cs(82,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpt_sjdsm7.cs(90,2): error CS1513: } expected

    '
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Your code goes here\n        var digits = new int[10];\n     \
    \   foreach (var word in numbers.Split(' ')) {\n            switch (word) {\n\
    \                case \"zero\": digits[0]++; break;\n                case \"one\"\
    : digits[1]++; break;\n                case \"two\": digits[2]++; break;\n   \
    \             case \"three\": digits[3]++; break;\n                case \"four\"\
    : digits[4]++; break;\n                case \"five\": digits[5]++; break;\n  \
    \              case \"six\": digits[6]++; break;\n                case \"seven\"\
    : digits[7]++; break;\n                case \"eight\": digits[8]++; break;\n \
    \               case \"nine\": digits[9]++; break;\n            }\n        }\n\
    \        var builder = new StringBuilder();\n        for (int i = 0; i < 10; i++)\
    \ {\n            for (int j = 0; j < digits[i]; j++) {\n                builder.Append(i);\n\
    \                builder.Append(' ');\n            }\n        }\n        return\
    \ builder.ToString().Trim();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a332de9e40d2461e899da6bf024c00bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a332de9e40d2461e899da6bf024c00bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var num = numbers.Split(' ').ToList();\n        var nums = new List<int>();\n\
    \        foreach (var n in num) {\n            switch (n) {\n                case\
    \ \"zero\":\n                    nums.Add(0);\n                    break;\n  \
    \              case \"one\":\n                    nums.Add(1);\n             \
    \       break;\n                case \"two\":\n                    nums.Add(2);\n\
    \                    break;\n                case \"three\":\n               \
    \     nums.Add(3);\n                    break;\n                case \"four\"\
    :\n                    nums.Add(4);\n                    break;\n            \
    \    case \"five\":\n                    nums.Add(5);\n                    break;\n\
    \                case \"six\":\n                    nums.Add(6);\n           \
    \         break;\n                case \"seven\":\n                    nums.Add(7);\n\
    \                    break;\n                case \"eight\":\n               \
    \     nums.Add(8);\n                    break;\n                case \"nine\"\
    :\n                    nums.Add(9);\n                    break;\n            }\n\
    \        }\n        nums.Sort();\n        var newNum = new List<string>();\n \
    \       foreach (var n in nums) {\n            switch (n) {\n                case\
    \ 0:\n                    newNum.Add(\"zero\");\n                    break;\n\
    \                case 1:\n                    newNum.Add(\"one\");\n         \
    \           break;\n                case 2:\n                    newNum.Add(\"\
    two\");\n                    break;\n                case 3:\n               \
    \     newNum.Add(\"three\");\n                    break;\n                case\
    \ 4:\n                    newNum.Add(\"four\");\n                    break;\n\
    \                case 5:\n                    newNum.Add(\"five\");\n        \
    \            break;\n                case 6:\n                    newNum.Add(\"\
    six\");\n                    break;\n                case 7:\n               \
    \     newNum.Add(\"seven\");\n                    break;\n                case\
    \ 8:\n                    newNum.Add(\"eight\");\n                    break;\n\
    \                case 9:\n                    newNum.Add(\"nine\");\n        \
    \            break;\n            }\n        }\n        return string.Join(\" \"\
    , newNum);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Write your code here\n\n        // Handle empty string\n     \
    \   if (string.IsNullOrEmpty(numbers))\n            return \"\";\n\n        //\
    \ Parse into string\n        var dict = new Dictionary<string, int>();\n     \
    \   dict.Add(\"zero\", 0);\n        dict.Add(\"one\", 1);\n        dict.Add(\"\
    two\", 2);\n        dict.Add(\"three\", 3);\n        dict.Add(\"four\", 4);\n\
    \        dict.Add(\"five\", 5);\n        dict.Add(\"six\", 6);\n        dict.Add(\"\
    seven\", 7);\n        dict.Add(\"eight\", 8);\n        dict.Add(\"nine\", 9);\n\
    \n        var numbersAsStrings = numbers.Split(' ');\n        var numbersAsInts\
    \ = new int[numbersAsStrings.Length];\n        for (int i = 0; i < numbersAsStrings.Length;\
    \ i++)\n        {\n            numbersAsInts[i] = dict[numbersAsStrings[i]];\n\
    \        }\n\n        // Sort numbers\n        Array.Sort(numbersAsInts);\n\n\
    \        // Build output string\n        var output = new StringBuilder();\n \
    \       for (int i = 0; i < numbersAsInts.Length; i++)\n        {\n          \
    \  var value = numbersAsInts[i];\n            string key = dict.FirstOrDefault(x\
    \ => x.Value == value).Key;\n            output.Append(key);\n            if (i\
    \ < numbersAsInts.Length - 1)\n                output.Append(\" \");\n       \
    \ }\n\n        return output.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        return numbers;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50a172a6a818409aaf9c329805ebc608>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50a172a6a818409aaf9c329805ebc608>:0 \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] sorted = numbers.Split(' ').OrderBy(o => o.Length).ThenBy(o\
    \ => o).ToArray();\n        return string.Join(\" \", sorted);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\
    \")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3d2f9a03e37645c5ac7ec2d8a1fbab12>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3d2f9a03e37645c5ac7ec2d8a1fbab12>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        List<string> nums = numbers.Split(' ').ToList();\n        nums.Sort();\n\
    \        return string.Join(\" \", nums);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1cc0cd8feaa34c4daea56c2169173026>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1cc0cd8feaa34c4daea56c2169173026>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var r = \"zero one two three four five six seven eight nine\";\n\
    \        var d = r.Split(' ').Select((x, i) => (x, i)).ToDictionary(x => x.x,\
    \ x => x.i);\n        var sa = numbers.Split(' ').Select(x => d[x]).ToArray();\n\
    \        Array.Sort(sa);\n        return string.Join(\" \", sa.Select(x => r.Split('\
    \ ')[x]));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__3\
    \ (System.String x) [0x00000] in <95e45f9e5f1745149864fc9670fb841d>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x000a7] in <95e45f9e5f1745149864fc9670fb841d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <95e45f9e5f1745149864fc9670fb841d>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__3\
    \ (System.String x) [0x00000] in <95e45f9e5f1745149864fc9670fb841d>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x000a7] in <95e45f9e5f1745149864fc9670fb841d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <95e45f9e5f1745149864fc9670fb841d>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        return numbers;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50a172a6a818409aaf9c329805ebc608>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50a172a6a818409aaf9c329805ebc608>:0 \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // split numbers on spaces\n        // return string of numbers after\
    \ being sorted\n        return string.Join(\" \", numbers.Split(' ').OrderBy(s\
    \ => s));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d5cccd70b054830859cf8920ce3ed1b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d5cccd70b054830859cf8920ce3ed1b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // EDIT HERE\n        var nums = numbers.Split(' ');\n        var\
    \ dict = new Dictionary<string, int>\n        {\n            {\"zero\", 0},\n\
    \            {\"one\", 1},\n            {\"two\", 2},\n            {\"three\"\
    , 3},\n            {\"four\", 4},\n            {\"five\", 5},\n            {\"\
    six\", 6},\n            {\"seven\", 7},\n            {\"eight\", 8},\n       \
    \     {\"nine\", 9}\n        };\n        Array.Sort(nums, (x, y) => dict[x].CompareTo(dict[y]));\n\
    \        return string.Join(\" \", nums);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976277
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] numeralArray = numbers.Split(' ');\n        int[] numberArray\
    \ = new int[numeralArray.Length];\n        int[] finalArray = new int[numeralArray.Length];\n\
    \        for (int i = 0; i < numeralArray.Length; i++) {\n            numberArray[i]\
    \ = Convert.ToInt32(numeralArray[i]);\n        }\n        Array.Sort(numberArray);\n\
    \        for (int i = 0; i < numeralArray.Length; i++) {\n            finalArray[i]\
    \ = Convert.ToInt32(numberArray[i]);\n        }\n        return String.Join(\"\
    \ \", finalArray);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider)\
    \ [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32\
    \ (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at Problem.SortNumbers (System.String numbers) [0x00022] in <138dcbd359a541cc9e3dadffe5240366>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <138dcbd359a541cc9e3dadffe5240366>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider)\
    \ [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32\
    \ (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at Problem.SortNumbers (System.String numbers) [0x00022] in <138dcbd359a541cc9e3dadffe5240366>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <138dcbd359a541cc9e3dadffe5240366>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976277
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var res = new List<int>();\n        var words = numbers.Split(' ');\n\
    \        foreach (var word in words) {\n            res.Add(toInt(word));\n  \
    \      }\n        res.Sort();\n        return string.Join(\" \", res.Select(x\
    \ => toWord(x)));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsw60o455.cs(18,21): error CS0103: The name ''toInt'' does not exist in
    the current context

    /tmp/tmpsw60o455.cs(21,49): error CS0103: The name ''toWord'' does not exist in
    the current context

    '
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // TODO: Implement this\n        Dictionary<string, int> map = new\
    \ Dictionary<string, int>();\n        map.Add(\"zero\", 0);\n        map.Add(\"\
    one\", 1);\n        map.Add(\"two\", 2);\n        map.Add(\"three\", 3);\n   \
    \     map.Add(\"four\", 4);\n        map.Add(\"five\", 5);\n        map.Add(\"\
    six\", 6);\n        map.Add(\"seven\", 7);\n        map.Add(\"eight\", 8);\n \
    \       map.Add(\"nine\", 9);\n        var nums = numbers.Split(\" \");\n    \
    \    Array.Sort(nums, (a, b) => map[a].CompareTo(map[b]));\n        return string.Join(\"\
    \ \", nums);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] words = numbers.Split(' ');\n        string[] sorted = words.OrderBy(s\
    \ => s).ToArray();\n        string result = \"\";\n        foreach (string s in\
    \ sorted) {\n            result += s + \" \";\n        }\n        return result.Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73aaf8d8422b49aabcc4b0b632a463c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73aaf8d8422b49aabcc4b0b632a463c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Implement me!\n        return string.Empty;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\
    \")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a92159b1928342378d49d4a22515d85d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a92159b1928342378d49d4a22515d85d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var nums = new Dictionary<string, int> {\n            { \"zero\"\
    , 0 },\n            { \"one\", 1 },\n            { \"two\", 2 },\n           \
    \ { \"three\", 3 },\n            { \"four\", 4 },\n            { \"five\", 5 },\n\
    \            { \"six\", 6 },\n            { \"seven\", 7 },\n            { \"\
    eight\", 8 },\n            { \"nine\", 9 }\n        };\n        var pairs = numbers.Split('\
    \ ').Select(x => new { Num = nums[x], Name = x });\n        var sorted = pairs.OrderBy(x\
    \ => x.Num).Select(x => x.Name);\n        return string.Join(\" \", sorted);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String x) [0x00000] in <eb57c9caf68147009cc247d027315a15>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].MoveNext\
    \ () [0x00029] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join\
    \ (System.String separator, System.Collections.Generic.IEnumerable`1[T] values)\
    \ [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000fa] in <eb57c9caf68147009cc247d027315a15>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <eb57c9caf68147009cc247d027315a15>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String x) [0x00000] in <eb57c9caf68147009cc247d027315a15>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 "
  stdout: ''
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        Dictionary<string, int> alphabet = new Dictionary<string, int>()\
    \ {\n            {\"zero\", 0},\n            {\"one\", 1},\n            {\"two\"\
    , 2},\n            {\"three\", 3},\n            {\"four\", 4},\n            {\"\
    five\", 5},\n            {\"six\", 6},\n            {\"seven\", 7},\n        \
    \    {\"eight\", 8},\n            {\"nine\", 9}\n        };\n        int[] nums\
    \ = numbers.Split(' ').Select(x => alphabet[x]).ToArray();\n        Array.Sort(nums);\n\
    \        return string.Join(\" \", nums.Select(x => alphabet.First(y => y.Value\
    \ == x).Key));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String x) [0x00000] in <6d2338620e7c412c8e2cf5951c86beeb>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x000af] in <6d2338620e7c412c8e2cf5951c86beeb>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <6d2338620e7c412c8e2cf5951c86beeb>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String x) [0x00000] in <6d2338620e7c412c8e2cf5951c86beeb>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x000af] in <6d2338620e7c412c8e2cf5951c86beeb>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <6d2338620e7c412c8e2cf5951c86beeb>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Fill in your answer here\n        string sorted = \"\";\n    \
    \    int[] ints = new int[10];\n        foreach (var num in numbers.Split()) {\n\
    \            ints[DigitToInt(num)]++;\n        }\n        for (int i = 0; i <\
    \ 10; i++) {\n            for (int j = 0; j < ints[i]; j++) {\n              \
    \  sorted += IntToDigit(i) + \" \";\n            }\n        }\n        return\
    \ sorted.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5nm7bf_p.cs(19,18): error CS0103: The name ''DigitToInt'' does not exist
    in the current context

    /tmp/tmp5nm7bf_p.cs(23,27): error CS0103: The name ''IntToDigit'' does not exist
    in the current context

    '
  timestamp: 1659976277
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] nums = numbers.Split(' ');\n        int[] sorted = new int[nums.Length];\n\
    \        int i = 0;\n        foreach (string num in nums) {\n            switch\
    \ (num) {\n                case \"zero\":\n                    sorted[i] = 0;\n\
    \                    break;\n                case \"one\":\n                 \
    \   sorted[i] = 1;\n                    break;\n                case \"two\":\n\
    \                    sorted[i] = 2;\n                    break;\n            \
    \    case \"three\":\n                    sorted[i] = 3;\n                   \
    \ break;\n                case \"four\":\n                    sorted[i] = 4;\n\
    \                    break;\n                case \"five\":\n                \
    \    sorted[i] = 5;\n                    break;\n                case \"six\"\
    :\n                    sorted[i] = 6;\n                    break;\n          \
    \      case \"seven\":\n                    sorted[i] = 7;\n                 \
    \   break;\n                case \"eight\":\n                    sorted[i] = 8;\n\
    \                    break;\n                case \"nine\":\n                \
    \    sorted[i] = 9;\n                    break;\n            }\n            i++;\n\
    \        }\n        Array.Sort(sorted);\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (int num in sorted) {\n            switch (num) {\n         \
    \       case 0:\n                    sb.Append(\"zero \");\n                 \
    \   break;\n                case 1:\n                    sb.Append(\"one \");\n\
    \                    break;\n                case 2:\n                    sb.Append(\"\
    two \");\n                    break;\n                case 3:\n              \
    \      sb.Append(\"three \");\n                    break;\n                case\
    \ 4:\n                    sb.Append(\"four \");\n                    break;\n\
    \                case 5:\n                    sb.Append(\"five \");\n        \
    \            break;\n                case 6:\n                    sb.Append(\"\
    six \");\n                    break;\n                case 7:\n              \
    \      sb.Append(\"seven \");\n                    break;\n                case\
    \ 8:\n                    sb.Append(\"eight \");\n                    break;\n\
    \                case 9:\n                    sb.Append(\"nine \");\n        \
    \            break;\n            }\n        }\n        return sb.ToString().Trim();\n\
    \    }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmqd7b70v.cs(100,1): error CS1022: Type or namespace definition, or end-of-file
    expected

    '
  timestamp: 1659976277
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        if (numbers == null)\n            throw new ArgumentNullException(\"\
    numbers\");\n        string[] words = numbers.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        if (words.Length == 0)\n            return \"\";\n        List<string>\
    \ numbersList = new List<string>();\n        foreach (string word in words) {\n\
    \            if (ToNumerals.ContainsKey(word))\n                numbersList.Add(word);\n\
    \            else\n                throw new ArgumentException(\"Invalid number\
    \ '\" + word + \"'\");\n        }\n        numbersList.Sort((x, y) =>\n      \
    \      string.Compare(ToNumerals[x], ToNumerals[y], StringComparison.Ordinal));\n\
    \        return string.Join(\" \", numbersList);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpflkhtf33.cs(22,17): error CS0103: The name ''ToNumerals'' does not exist
    in the current context

    /tmp/tmpflkhtf33.cs(28,28): error CS0103: The name ''ToNumerals'' does not exist
    in the current context

    /tmp/tmpflkhtf33.cs(28,43): error CS0103: The name ''ToNumerals'' does not exist
    in the current context

    '
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var numDict = new Dictionary<int, int>\n        {\n            {1,\
    \ numbers.ToLower().Count(c => c == 'o')},\n            {2, numbers.ToLower().Count(c\
    \ => c == 't')},\n            {3, numbers.ToLower().Count(c => c == 'h')},\n \
    \           {4, numbers.ToLower().Count(c => c == 'f')},\n            {5, numbers.ToLower().Count(c\
    \ => c == 'v')},\n            {6, numbers.ToLower().Count(c => c == 'x')},\n \
    \           {7, numbers.ToLower().Count(c => c == 's')},\n            {8, numbers.ToLower().Count(c\
    \ => c == 'g')},\n            {9, numbers.ToLower().Count(c => c == 'i')},\n \
    \           {0, numbers.ToLower().Count(c => c == 'z')}\n        };\n        var\
    \ result = \"\";\n        for (int i = 0; i < 10; i++)\n        {\n          \
    \  for (int j = 0; j < numDict[i]; j++)\n            {\n                result\
    \ += i.ToString();\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9115ee2afc4f4a68aca9ac0ff2e2bdba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9115ee2afc4f4a68aca9ac0ff2e2bdba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var numeralToWord = new Dictionary<string, int> {\n            {\"\
    zero\", 0},\n            {\"one\", 1},\n            {\"two\", 2},\n          \
    \  {\"three\", 3},\n            {\"four\", 4},\n            {\"five\", 5},\n \
    \           {\"six\", 6},\n            {\"seven\", 7},\n            {\"eight\"\
    , 8},\n            {\"nine\", 9}\n        };\n        var words = numbers.Split('\
    \ ');\n        Array.Sort(words, (w1, w2) => numeralToWord[w1].CompareTo(numeralToWord[w2]));\n\
    \        return string.Join(\" \", words);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var output = \"\";\n        char[] nums = numbers.ToCharArray();\n\
    \        Array.Sort(nums);\n        for (int i = 0; i < nums.Length; i++) {\n\
    \            output += nums[i];\n        }\n        return output;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <251ffc8c70614bbba5f1947df1581add>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <251ffc8c70614bbba5f1947df1581add>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        int[] a = new int[10];\n        foreach (string s in numbers.Split('\
    \ '))\n            a[s.Length - 1]++;\n        string res = \"\";\n        for\
    \ (int i = 0; i < 10; i++)\n            for (int j = 0; j < a[i]; j++)\n     \
    \           res += GetNumber(i + 1);\n        return res;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\"\
    )));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp86m5_srt.cs(21,24): error CS0103: The name ''GetNumber'' does not exist
    in the current context

    '
  timestamp: 1659976277
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // YOUR CODE HERE\n        int[] result = new int[3];\n        string[]\
    \ number = new string[3];\n        int counter = 0;\n        string[] array =\
    \ numbers.Split(' ');\n        for (int i = 0; i < array.Length; i++) {\n    \
    \        if (array[i] == \"one\") {\n                number[counter] = \"one\"\
    ;\n                result[counter] = 1;\n                counter++;\n        \
    \    }\n            if (array[i] == \"two\") {\n                number[counter]\
    \ = \"two\";\n                result[counter] = 2;\n                counter++;\n\
    \            }\n            if (array[i] == \"three\") {\n                number[counter]\
    \ = \"three\";\n                result[counter] = 3;\n                counter++;\n\
    \            }\n            if (array[i] == \"four\") {\n                number[counter]\
    \ = \"four\";\n                result[counter] = 4;\n                counter++;\n\
    \            }\n            if (array[i] == \"five\") {\n                number[counter]\
    \ = \"five\";\n                result[counter] = 5;\n                counter++;\n\
    \            }\n            if (array[i] == \"six\") {\n                number[counter]\
    \ = \"six\";\n                result[counter] = 6;\n                counter++;\n\
    \            }\n            if (array[i] == \"seven\") {\n                number[counter]\
    \ = \"seven\";\n                result[counter] = 7;\n                counter++;\n\
    \            }\n            if (array[i] == \"eight\") {\n                number[counter]\
    \ = \"eight\";\n                result[counter] = 8;\n                counter++;\n\
    \            }\n            if (array[i] == \"nine\") {\n                number[counter]\
    \ = \"nine\";\n                result[counter] = 9;\n                counter++;\n\
    \            }\n            if (array[i] == \"zero\") {\n                number[counter]\
    \ = \"zero\";\n                result[counter] = 0;\n                counter++;\n\
    \            }\n        }\n        Array.Sort(result, number);\n        string[]\
    \ final = new string[3];\n        final[0] = number[0];\n        final[1] = number[1];\n\
    \        final[2] = number[2];\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptwpy3ke_.cs(14,26): error CS0161: ''Problem.SortNumbers(string)'': not
    all code paths return a value

    '
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var result = new StringBuilder();\n        int[] nums = { 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0 };\n        var numsDict = new Dictionary<string, int>\n\
    \        {\n            {\"zero\", 0},\n            {\"one\", 1},\n          \
    \  {\"two\", 2},\n            {\"three\", 3},\n            {\"four\", 4},\n  \
    \          {\"five\", 5},\n            {\"six\", 6},\n            {\"seven\",\
    \ 7},\n            {\"eight\", 8},\n            {\"nine\", 9}\n        };\n  \
    \      foreach (var num in numbers.Split(' '))\n        {\n            nums[numsDict[num]]++;\n\
    \        }\n        for (int i = 0; i < 10; i++)\n        {\n            for (int\
    \ j = 0; j < nums[i]; j++)\n            {\n                result.Append(i);\n\
    \                result.Append(' ');\n            }\n        }\n        return\
    \ result.ToString().Trim();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000af] in <dfcc3432abba4921a0878d9d378cd321>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <dfcc3432abba4921a0878d9d378cd321>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000af] in <dfcc3432abba4921a0878d9d378cd321>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <dfcc3432abba4921a0878d9d378cd321>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var numDict = new Dictionary<string, int>() {\n            {\"zero\"\
    , 0},\n            {\"one\", 1},\n            {\"two\", 2},\n            {\"three\"\
    , 3},\n            {\"four\", 4},\n            {\"five\", 5},\n            {\"\
    six\", 6},\n            {\"seven\", 7},\n            {\"eight\", 8},\n       \
    \     {\"nine\", 9}\n        };\n        var words = numbers.Split();\n      \
    \  var ints = new int[words.Length];\n        for (int i = 0; i < words.Length;\
    \ i++) {\n            ints[i] = numDict[words[i]];\n        }\n        Array.Sort(ints);\n\
    \        words = new string[ints.Length];\n        for (int i = 0; i < ints.Length;\
    \ i++) {\n            words[i] = numDict.First(kvp => kvp.Value == ints[i]).Key;\n\
    \        }\n        return string.Join(\" \", words);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\"\
    )));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000af] in <55feb13c556e4f0793276810afaaba90>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <55feb13c556e4f0793276810afaaba90>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000af] in <55feb13c556e4f0793276810afaaba90>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <55feb13c556e4f0793276810afaaba90>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        List<int> list = new List<int>();\n        foreach (string s in numbers.Split('\
    \ ')) {\n            list.Add(int.Parse(s));\n        }\n        list.Sort();\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ list.Count; i++) {\n            sb.Append(list[i]);\n            if (i != list.Count\
    \ - 1) sb.Append(' ');\n        }\n        return sb.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\
    \")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x0001c] in <b68cf3480e3642c08d12a8f581435036>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <b68cf3480e3642c08d12a8f581435036>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x0001c] in <b68cf3480e3642c08d12a8f581435036>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <b68cf3480e3642c08d12a8f581435036>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var dict = new Dictionary<string, int> { { \"zero\", 0 }, { \"one\"\
    , 1 }, { \"two\", 2 }, { \"three\", 3 }, { \"four\", 4 }, { \"five\", 5 }, { \"\
    six\", 6 }, { \"seven\", 7 }, { \"eight\", 8 }, { \"nine\", 9 } };\n        var\
    \ dict2 = new Dictionary<int, string> { { 0, \"zero\" }, { 1, \"one\" }, { 2,\
    \ \"two\" }, { 3, \"three\" }, { 4, \"four\" }, { 5, \"five\" }, { 6, \"six\"\
    \ }, { 7, \"seven\" }, { 8, \"eight\" }, { 9, \"nine\" } };\n        var numbers2\
    \ = numbers.Split(' ').Select(x => dict[x]).OrderBy(x => x).Select(x => dict2[x]);\n\
    \        return string.Join(\" \", numbers2);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String x) [0x00000] in <4a7107ee698244fc97e481838a786413>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].MoveNext\
    \ () [0x00029] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join\
    \ (System.String separator, System.Collections.Generic.IEnumerable`1[T] values)\
    \ [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x00173] in <4a7107ee698244fc97e481838a786413>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <4a7107ee698244fc97e481838a786413>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String x) [0x00000] in <4a7107ee698244fc97e481838a786413>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 "
  stdout: ''
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var tokens = numbers.Split(' ');\n        var numbersMap = new Dictionary<string,\
    \ int> {\n            { \"zero\", 0 },\n            { \"one\", 1 },\n        \
    \    { \"two\", 2 },\n            { \"three\", 3 },\n            { \"four\", 4\
    \ },\n            { \"five\", 5 },\n            { \"six\", 6 },\n            {\
    \ \"seven\", 7 },\n            { \"eight\", 8 },\n            { \"nine\", 9 }\n\
    \        };\n        var sorted = tokens.Select(t => numbersMap[t]).OrderBy(i\
    \ => i).Select(i => $\"{i}\");\n        return string.Join(\" \", sorted);\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String t) [0x00000] in <ba6389d9ac8e47069a669cf72dca1f07>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].MoveNext\
    \ () [0x00029] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join\
    \ (System.String separator, System.Collections.Generic.IEnumerable`1[T] values)\
    \ [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000fa] in <ba6389d9ac8e47069a669cf72dca1f07>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <ba6389d9ac8e47069a669cf72dca1f07>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String t) [0x00000] in <ba6389d9ac8e47069a669cf72dca1f07>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 "
  stdout: ''
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Insert your code here\n        var numList = numbers.Split(' ').ToList();\n\
    \        var numDict = new Dictionary<string, int>\n        {\n            {\"\
    zero\", 0},\n            {\"one\", 1},\n            {\"two\", 2},\n          \
    \  {\"three\", 3},\n            {\"four\", 4},\n            {\"five\", 5},\n \
    \           {\"six\", 6},\n            {\"seven\", 7},\n            {\"eight\"\
    , 8},\n            {\"nine\", 9}\n        };\n        var final = numList.OrderBy(n\
    \ => numDict[n]).ToList();\n        return string.Join(\" \", final);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String n) [0x00000] in <ada237b151054b45800e8c01cb97de96>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys\
    \ (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements,\
    \ System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at\
    \ System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32\
    \ count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap\
    \ (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1[TElement].ToList () [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.Enumerable.ToList[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000b6] in <ada237b151054b45800e8c01cb97de96>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <ada237b151054b45800e8c01cb97de96>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String n) [0x00000] in <ada237b151054b45800e8c01cb97de96>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys\
    \ (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements,\
    \ System.I"
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] nums = numbers.Split(new char[] { ' ' });\n        Array.Sort(nums);\n\
    \        return string.Join(\" \", nums);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <28836b0bf7c24288bc6786ce992ae6ce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <28836b0bf7c24288bc6786ce992ae6ce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        List<int> order = new List<int>();\n        for (int i = 0; i < numbers.Length;\
    \ i++) {\n            if (numbers[i] == ' ') {\n                continue;\n  \
    \          }\n            int v = 0;\n            switch (numbers[i]) {\n    \
    \            case 'z': v = 0; break;\n                case 'o': v = 1; break;\n\
    \                case 't': v = 2; break;\n                case 'h': v = 3; break;\n\
    \                case 'f': v = 4; break;\n                case 'i': v = 5; break;\n\
    \                case 's': v = 6; break;\n                case 'e': v = 7; break;\n\
    \                case 'n': v = 8; break;\n                case 'e': v = 9; break;\n\
    \            }\n            order.Add(v);\n        }\n        order.Sort();\n\
    \        StringBuilder b = new StringBuilder();\n        foreach (int x in order)\
    \ {\n            if (b.Length > 0) {\n                b.Append(' ');\n       \
    \     }\n            switch (x) {\n                case 0: b.Append(\"zero\");\
    \ break;\n                case 1: b.Append(\"one\"); break;\n                case\
    \ 2: b.Append(\"two\"); break;\n                case 3: b.Append(\"three\"); break;\n\
    \                case 4: b.Append(\"four\"); break;\n                case 5: b.Append(\"\
    five\"); break;\n                case 6: b.Append(\"six\"); break;\n         \
    \       case 7: b.Append(\"seven\"); break;\n                case 8: b.Append(\"\
    eight\"); break;\n                case 9: b.Append(\"nine\"); break;\n       \
    \     }\n        }\n        return b.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpacxe1cyb.cs(31,17): error CS0152: The switch statement contains multiple
    cases with the label value ''e''

    '
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        throw new NotImplementedException();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <1b41c9aef7da4508bd6c83268c258e32>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <1b41c9aef7da4508bd6c83268c258e32>:0 \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        return string.Join(\" \",\n            numbers.Split().Select(\n\
    \                x => int.Parse(x)).OrderBy(\n                    x => x).Select(\n\
    \                        x => x.ToString()));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String x) [0x00000] in <badbc272729a4e97b8ce7cb99b4690ec>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].MoveNext\
    \ () [0x00029] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join\
    \ (System.String separator, System.Collections.Generic.IEnumerable`1[T] values)\
    \ [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x0007d] in <badbc272729a4e97b8ce7cb99b4690ec>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <badbc272729a4e97b8ce7cb99b4690ec>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016]"
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        if (numbers == null) {\n            throw new ArgumentNullException(nameof(numbers));\n\
    \        }\n        numbers = numbers.Trim();\n        if (numbers.Length == 0)\
    \ {\n            return \"\";\n        }\n        string[] split = numbers.Split(new\
    \ char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n        Dictionary<string,\
    \ int> numStringToDigit = new Dictionary<string, int>() {\n            {\"zero\"\
    , 0},\n            {\"one\", 1},\n            {\"two\", 2},\n            {\"three\"\
    , 3},\n            {\"four\", 4},\n            {\"five\", 5},\n            {\"\
    six\", 6},\n            {\"seven\", 7},\n            {\"eight\", 8},\n       \
    \     {\"nine\", 9},\n        };\n        int[] digits = split.Select(x => numStringToDigit[x]).ToArray();\n\
    \        Array.Sort(digits);\n        return string.Join(\" \", digits.Select(x\
    \ => numStringToDigit.First(y => y.Value == x).Key));\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\"\
    )));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        Dictionary<string, int> dict = new Dictionary<string, int>();\n \
    \       dict.Add(\"zero\", 0);\n        dict.Add(\"one\", 1);\n        dict.Add(\"\
    two\", 2);\n        dict.Add(\"three\", 3);\n        dict.Add(\"four\", 4);\n\
    \        dict.Add(\"five\", 5);\n        dict.Add(\"six\", 6);\n        dict.Add(\"\
    seven\", 7);\n        dict.Add(\"eight\", 8);\n        dict.Add(\"nine\", 9);\n\
    \        int[] nums = numbers.Split(' ').Select(x => dict[x]).ToArray();\n   \
    \     Array.Sort(nums);\n        StringBuilder sb = new StringBuilder();\n   \
    \     foreach (int i in nums) {\n            sb.Append(i.ToString() + \" \");\n\
    \        }\n        sb.Remove(sb.Length - 1, 1);\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String x) [0x00000] in <fed1f2872e4c4cf5a8e1d1ce6181ce04>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x000e1] in <fed1f2872e4c4cf5a8e1d1ce6181ce04>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <fed1f2872e4c4cf5a8e1d1ce6181ce04>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String x) [0x00000] in <fed1f2872e4c4cf5a8e1d1ce6181ce04>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x000e1] in <fed1f2872e4c4cf5a8e1d1ce6181ce04>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <fed1f2872e4c4cf5a8e1d1ce6181ce04>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        char[] sep = { ' ' };\n        string[] tok = numbers.Split(sep);\n\
    \        int[] arr = new int[tok.Length];\n        for (int i = 0; i < tok.Length;\
    \ i++) {\n            switch (tok[i]) {\n                case \"zero\":\n    \
    \                arr[i] = 0;\n                    break;\n                case\
    \ \"one\":\n                    arr[i] = 1;\n                    break;\n    \
    \            case \"two\":\n                    arr[i] = 2;\n                \
    \    break;\n                case \"three\":\n                    arr[i] = 3;\n\
    \                    break;\n                case \"four\":\n                \
    \    arr[i] = 4;\n                    break;\n                case \"five\":\n\
    \                    arr[i] = 5;\n                    break;\n               \
    \ case \"six\":\n                    arr[i] = 6;\n                    break;\n\
    \                case \"seven\":\n                    arr[i] = 7;\n          \
    \          break;\n                case \"eight\":\n                    arr[i]\
    \ = 8;\n                    break;\n                case \"nine\":\n         \
    \           arr[i] = 9;\n                    break;\n            }\n        }\n\
    \        Array.Sort(arr);\n        string ret = \"\";\n        for (int i = 0;\
    \ i < arr.Length; i++) {\n            switch (arr[i]) {\n                case\
    \ 0:\n                    ret += \"zero \";\n                    break;\n    \
    \            case 1:\n                    ret += \"one \";\n                 \
    \   break;\n                case 2:\n                    ret += \"two \";\n  \
    \                  break;\n                case 3:\n                    ret +=\
    \ \"three \";\n                    break;\n                case 4:\n         \
    \           ret += \"four \";\n                    break;\n                case\
    \ 5:\n                    ret += \"five \";\n                    break;\n    \
    \            case 6:\n                    ret += \"six \";\n                 \
    \   break;\n                case 7:\n                    ret += \"seven \";\n\
    \                    break;\n                case 8:\n                    ret\
    \ += \"eight \";\n                    break;\n                case 9:\n      \
    \              ret += \"nine \";\n                    break;\n            }\n\
    \        }\n        ret = ret.Substring(0, ret.Length - 1);\n        return ret;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <972a5a4f855841b483355ce80e5d6a49>:0 \n"
  stdout: ''
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        throw new NotImplementedException();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <1b41c9aef7da4508bd6c83268c258e32>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <1b41c9aef7da4508bd6c83268c258e32>:0 \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        return numbers;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50a172a6a818409aaf9c329805ebc608>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50a172a6a818409aaf9c329805ebc608>:0 \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var nums = numbers.Split(' ');\n        var nums2 = new string[nums.Length];\n\
    \        for (int i = 0; i < nums.Length; i++) {\n            if (nums[i] == \"\
    zero\") {\n                nums2[i] = \"0\";\n            } else if (nums[i] ==\
    \ \"one\") {\n                nums2[i] = \"1\";\n            } else if (nums[i]\
    \ == \"two\") {\n                nums2[i] = \"2\";\n            } else if (nums[i]\
    \ == \"three\") {\n                nums2[i] = \"3\";\n            } else if (nums[i]\
    \ == \"four\") {\n                nums2[i] = \"4\";\n            } else if (nums[i]\
    \ == \"five\") {\n                nums2[i] = \"5\";\n            } else if (nums[i]\
    \ == \"six\") {\n                nums2[i] = \"6\";\n            } else if (nums[i]\
    \ == \"seven\") {\n                nums2[i] = \"7\";\n            } else if (nums[i]\
    \ == \"eight\") {\n                nums2[i] = \"8\";\n            } else if (nums[i]\
    \ == \"nine\") {\n                nums2[i] = \"9\";\n            }\n        }\n\
    \        Array.Sort(nums2);\n        for (int i = 0; i < nums.Length; i++) {\n\
    \            if (nums2[i] == \"0\") {\n                nums2[i] = \"zero\";\n\
    \            } else if (nums2[i] == \"1\") {\n                nums2[i] = \"one\"\
    ;\n            } else if (nums2[i] == \"2\") {\n                nums2[i] = \"\
    two\";\n            } else if (nums2[i] == \"3\") {\n                nums2[i]\
    \ = \"three\";\n            } else if (nums2[i] == \"4\") {\n                nums2[i]\
    \ = \"four\";\n            } else if (nums2[\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6yd6d0hu.cs(52,30): error CS1003: Syntax error, '']'' expected

    /tmp/tmp6yd6d0hu.cs(52,30): error CS1026: ) expected

    /tmp/tmp6yd6d0hu.cs(52,30): error CS1525: Invalid expression term ''}''

    /tmp/tmp6yd6d0hu.cs(52,30): error CS1002: ; expected

    /tmp/tmp6yd6d0hu.cs(54,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp6yd6d0hu.cs(62,2): error CS1513: } expected

    '
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] data = numbers.Split(' ');\n        var dict = new Dictionary<int,\
    \ string>();\n        foreach (string word in data) {\n            switch (word)\
    \ {\n                case \"zero\":\n                    dict.Add(0, word);\n\
    \                    break;\n                case \"one\":\n                 \
    \   dict.Add(1, word);\n                    break;\n                case \"two\"\
    :\n                    dict.Add(2, word);\n                    break;\n      \
    \          case \"three\":\n                    dict.Add(3, word);\n         \
    \           break;\n                case \"four\":\n                    dict.Add(4,\
    \ word);\n                    break;\n                case \"five\":\n       \
    \             dict.Add(5, word);\n                    break;\n               \
    \ case \"six\":\n                    dict.Add(6, word);\n                    break;\n\
    \                case \"seven\":\n                    dict.Add(7, word);\n   \
    \                 break;\n                case \"eight\":\n                  \
    \  dict.Add(8, word);\n                    break;\n                case \"nine\"\
    :\n                    dict.Add(9, word);\n                    break;\n      \
    \      }\n        }\n        var sortedDict = dict.OrderBy(x => x.Key);\n    \
    \    StringBuilder sb = new StringBuilder();\n        foreach (KeyValuePair<int,\
    \ string> num in sortedDict) {\n            sb.Append(num.Value + \" \");\n  \
    \      }\n        return sb.ToString().Trim();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        return new string(numbers.Split().OrderBy(x => int.Parse(x)).ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjiixkr5g.cs(15,27): error CS1503: Argument 1: cannot convert from ''string[]''
    to ''char[]''

    '
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var words = numbers.Split(' ');\n        var values = new int[words.Length];\n\
    \        for (int i = 0; i < words.Length; i++)\n            values[i] = WordToNumber(words[i]);\n\
    \        Array.Sort(values);\n        var sb = new StringBuilder();\n        for\
    \ (int i = 0; i < values.Length; i++) {\n            if (i > 0)\n            \
    \    sb.Append(' ');\n            sb.Append(NumberToWord(values[i]));\n      \
    \  }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptfkrcou8.cs(18,25): error CS0103: The name ''WordToNumber'' does not exist
    in the current context

    /tmp/tmptfkrcou8.cs(24,23): error CS0103: The name ''NumberToWord'' does not exist
    in the current context

    '
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        throw new NotImplementedException();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <1b41c9aef7da4508bd6c83268c258e32>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <1b41c9aef7da4508bd6c83268c258e32>:0 \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] numeralWords = numbers.Split(' ');\n        int[] numeralInts\
    \ = new int[numeralWords.Length];\n        for (int i = 0; i < numeralWords.Length;\
    \ i++) {\n            numeralInts[i] = ParseNumeral(numeralWords[i]);\n      \
    \  }\n        Array.Sort(numeralInts);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < numeralInts.Length; i++) {\n            sb.Append(FormatNumeral(numeralInts[i]));\n\
    \            if (i != numeralInts.Length - 1) {\n                sb.Append(\"\
    \ \");\n            }\n        }\n        return sb.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\
    \")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyhaol0sb.cs(18,30): error CS0103: The name ''ParseNumeral'' does not exist
    in the current context

    /tmp/tmpyhaol0sb.cs(23,23): error CS0103: The name ''FormatNumeral'' does not
    exist in the current context

    '
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] numberals = numbers.Split(' ');\n        int[] numbers2\
    \ = new int[numberals.Length];\n        for (int i = 0; i < numberals.Length;\
    \ i++) {\n            string numeral = numberals[i];\n            switch (numeral)\
    \ {\n                case \"zero\":\n                    numbers2[i] = 0;\n  \
    \                  break;\n                case \"one\":\n                   \
    \ numbers2[i] = 1;\n                    break;\n                case \"two\":\n\
    \                    numbers2[i] = 2;\n                    break;\n          \
    \      case \"three\":\n                    numbers2[i] = 3;\n               \
    \     break;\n                case \"four\":\n                    numbers2[i]\
    \ = 4;\n                    break;\n                case \"five\":\n         \
    \           numbers2[i] = 5;\n                    break;\n                case\
    \ \"six\":\n                    numbers2[i] = 6;\n                    break;\n\
    \                case \"seven\":\n                    numbers2[i] = 7;\n     \
    \               break;\n                case \"eight\":\n                    numbers2[i]\
    \ = 8;\n                    break;\n                case \"nine\":\n         \
    \           numbers2[i] = 9;\n                    break;\n            }\n    \
    \    }\n        Array.Sort(numbers2);\n        string result = \"\";\n       \
    \ for (int i = 0; i < numbers2.Length; i++) {\n            if (i != 0) {\n   \
    \             result += \" \";\n            }\n            switch (numbers2[i])\
    \ {\n                case 0:\n                    result += \"zero\";\n      \
    \              break;\n                case 1:\n                    result +=\
    \ \"one\";\n                    break;\n                case 2:\n            \
    \        result += \"two\";\n                    break;\n                case\
    \ 3:\n                    result += \"three\";\n                    break;\n \
    \               case 4:\n                    result += \"four\";\n           \
    \         break;\n                case 5:\n                    result += \"five\"\
    ;\n                    break;\n                case 6:\n                    result\
    \ += \"six\";\n                    break;\n                case 7:\n         \
    \           result += \"seven\";\n                    break;\n               \
    \ case 8:\n                    result += \"eight\";\n                    break;\n\
    \                case 9:\n                    result += \"nine\";\n          \
    \          break;\n            }\n        }\n        return result;\n    }\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp44hn9r99.cs(102,1): error CS1022: Type or namespace definition, or end-of-file
    expected

    '
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        throw new NotImplementedException();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <1b41c9aef7da4508bd6c83268c258e32>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <1b41c9aef7da4508bd6c83268c258e32>:0 \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        Dictionary<string, int> nums = new Dictionary<string, int>();\n \
    \       int i = 0;\n        foreach (string num in numbers.Split(' ')) {\n   \
    \         nums[num] = i++;\n        }\n        i = 0;\n        string[] nums_sort\
    \ = nums.OrderBy(x => x.Value).Select(x => x.Key).ToArray();\n        string ret\
    \ = nums_sort[0];\n        for (i = 1; i < nums_sort.Length; i++) {\n        \
    \    ret += \" \" + nums_sort[i];\n        }\n        return ret;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <099f90374b8246078c90a8cd09326160>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <099f90374b8246078c90a8cd09326160>:0 \n"
  stdout: ''
  timestamp: 1659976279
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        return string.Join(\" \", numbers.Split(' ').Select(int.Parse).OrderBy(x\
    \ => x).Select(x => x.ToString()));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].MoveNext\
    \ () [0x00029] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join\
    \ (System.String separator, System.Collections.Generic.IEnumerable`1[T] values)\
    \ [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x00068] in <59dacead35de42b1b97fcf1cbdc6392d>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <59dacead35de42b1b97fcf1cbdc6392d>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResul"
  stdout: ''
  timestamp: 1659976279
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var result = string.Join(\" \", (numbers\n            .Split(' ')\n\
    \            .Select(n => int.Parse(n.Substring(1)))\n            .OrderBy(n =>\
    \ n)));\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: startIndex\
    \ cannot be larger than length of string.\nParameter name: startIndex\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <0a99bd11796d4fe985c7c18d35bd8e2b>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.JoinCore[T]\
    \ (System.Char* separator, System.Int32 separatorLength, System.Collections.Generic.IEnumerable`1[T]\
    \ values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.String.Join[T]\
    \ (System.String separator, System.Collections.Generic.IEnumerable`1[T] values)\
    \ [0x0001b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x00057] in <0a99bd11796d4fe985c7c18d35bd8e2b>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <0a99bd11796d4fe985c7c18d35bd8e2b>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: startIndex\
    \ cannot be larger than length of string.\nParameter name: startIndex\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <0a99bd11796d4fe985c7c18d35bd8e2b>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Li"
  stdout: ''
  timestamp: 1659976279
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var n = new List<int>();\n        foreach (var num in numbers.Split('\
    \ '))\n            n.Add(ToNumber(num));\n        n.Sort();\n        var res =\
    \ new List<string>();\n        foreach (var num in n)\n            res.Add(ToNumberal(num));\n\
    \        return string.Join(\" \", res);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjilh4dc0.cs(17,19): error CS0103: The name ''ToNumber'' does not exist
    in the current context

    /tmp/tmpjilh4dc0.cs(21,21): error CS0103: The name ''ToNumberal'' does not exist
    in the current context

    '
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // The short solution\n        // return string.Join(\" \",\n   \
    \     //   numbers.Split(\" \")\n        //          .Select(num => int.Parse(wordToInt[num]))\n\
    \        //          .OrderBy(num => num)\n        //          .Select(num =>\
    \ intToWord[num]));\n\n        string[] numberWords = numbers.Split(\" \");\n\
    \        int[] numbersInt = new int[numberWords.Length];\n        for (int i =\
    \ 0; i < numberWords.Length; i++) {\n            numbersInt[i] = wordToInt[numberWords[i]];\n\
    \        }\n        Array.Sort(numbersInt);\n        for (int i = 0; i < numberWords.Length;\
    \ i++) {\n            numberWords[i] = intToWord[numbersInt[i]];\n        }\n\
    \        return string.Join(\" \", numberWords);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2o2tu2ql.cs(25,29): error CS0103: The name ''wordToInt'' does not exist
    in the current context

    /tmp/tmp2o2tu2ql.cs(29,30): error CS0103: The name ''intToWord'' does not exist
    in the current context

    '
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        return \"\";\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69dddfca7fef44319f3d44ed53659685>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69dddfca7fef44319f3d44ed53659685>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        return \"\";\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69dddfca7fef44319f3d44ed53659685>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69dddfca7fef44319f3d44ed53659685>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976279
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        int[] ordinals = { 0, 3, 4, 5, 6, 7, 8, 9, 10, 11 };\n        string[]\
    \ strings = { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\" };\n        int[] nums = numbers.Split(' ').Select(x\
    \ => ordinals[Array.IndexOf(strings, x)]).ToArray();\n        Array.Sort(nums);\n\
    \        return string.Join(\" \", nums.Select(x => strings[x]));\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\"\
    )).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String x) [0x00012] in <0af75bf1d43242c0ab9d3c09a32c75a2>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x00097] in <0af75bf1d43242c0ab9d3c09a32c75a2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <0af75bf1d43242c0ab9d3c09a32c75a2>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index\
    \ was outside the bounds of the array.\n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__0\
    \ (System.String x) [0x00012] in <0af75bf1d43242c0ab9d3c09a32c75a2>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x00097] in <0af75bf1d43242c0ab9d3c09a32c75a2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <0af75bf1d43242c0ab9d3c09a32c75a2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        StringBuilder builder = new StringBuilder();\n        String[] output\
    \ = new String[10];\n        String[] input = numbers.Split(' ');\n        foreach\
    \ (String s in input) {\n            int n = 0;\n            switch (s) {\n  \
    \              case \"zero\": n = 0; break;\n                case \"one\": n =\
    \ 1; break;\n                case \"two\": n = 2; break;\n                case\
    \ \"three\": n = 3; break;\n                case \"four\": n = 4; break;\n   \
    \             case \"five\": n = 5; break;\n                case \"six\": n =\
    \ 6; break;\n                case \"seven\": n = 7; break;\n                case\
    \ \"eight\": n = 8; break;\n                case \"nine\": n = 9; break;\n   \
    \         }\n            output[n] = s;\n        }\n        for (int i = 0; i\
    \ < 10; i++) {\n            if (output[i] != null) {\n                builder.Append(output[i]);\n\
    \                builder.Append(\" \");\n            }\n        }\n        return\
    \ builder.ToString().Trim();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976279
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var n = new int[10];\n        foreach (var c in numbers.Split(' '))\n\
    \            n[WordToNumber(c)]++;\n        var sb = new StringBuilder();\n  \
    \      for (int i = 0; i < 10; i++)\n            for (int j = 0; j < n[i]; j++)\n\
    \                sb.Append(NumberToWord(i)).Append(' ');\n        sb.Length--;\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphqiz6j4a.cs(17,15): error CS0103: The name ''WordToNumber'' does not exist
    in the current context

    /tmp/tmphqiz6j4a.cs(21,27): error CS0103: The name ''NumberToWord'' does not exist
    in the current context

    '
  timestamp: 1659976279
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        throw new NotImplementedException();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <1b41c9aef7da4508bd6c83268c258e32>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <1b41c9aef7da4508bd6c83268c258e32>:0 \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        List<string> numerals = new List<string>();\n        // Create a\
    \ dictionary of the numerals \n        // (we have to loop through the numerals\
    \ anyways, so we might as well add them to the list)\n        Dictionary<string,\
    \ int> numeral_value = new Dictionary<string, int>();\n        string[] numeral_pairs\
    \ = numbers.Split(' ');\n        foreach (string pair in numeral_pairs) {\n  \
    \          string[] split_pair = pair.Split(' ');\n            string numeral\
    \ = split_pair[0];\n            string number = split_pair[1];\n            int\
    \ value = int.Parse(number);\n            if (!numeral_value.ContainsKey(numeral))\
    \ {\n                numerals.Add(numeral);\n                numeral_value.Add(numeral,\
    \ value);\n            } else {\n                numeral_value[numeral] += value;\n\
    \            }\n        }\n        // Sort the numerals by value\n        numerals.Sort((x,\
    \ y) => numeral_value[x].CompareTo(numeral_value[y]));\n        // Print the string\n\
    \        StringBuilder sb = new StringBuilder();\n        foreach (string numeral\
    \ in numerals) {\n            sb.Append(numeral + \" \");\n        }\n       \
    \ return sb.ToString().Trim();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.SortNumbers (System.String numbers) [0x00048]\
    \ in <6a6111a7ff76431f9a50896dc7e753ca>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <6a6111a7ff76431f9a50896dc7e753ca>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.SortNumbers (System.String numbers) [0x00048] in <6a6111a7ff76431f9a50896dc7e753ca>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <6a6111a7ff76431f9a50896dc7e753ca>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976279
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        return string.Join(\" \",\n                           numbers.Split('\
    \ ')\n                                  .Select(x => Convert(x))\n           \
    \                       .OrderBy(x => x)\n                                  .Select(x\
    \ => Convert(x)));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpisn6085w.cs(17,48): error CS1955: Non-invocable member ''Convert'' cannot
    be used like a method.

    /tmp/tmpisn6085w.cs(19,48): error CS1955: Non-invocable member ''Convert'' cannot
    be used like a method.

    '
  timestamp: 1659976279
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var nums = numbers.Split(' ').Select(n => Convert.ToInt32(new string(n.Reverse().TakeWhile(c\
    \ => c != 'e').Reverse().ToArray()))).ToArray();\n        Array.Sort(nums);\n\
    \        return String.Join(\" \", nums.Select(i => new string((\"zero one two\
    \ three four five six seven eight nine\").Split(' ')[i].Reverse().TakeWhile(c\
    \ => c != 'e').Reverse().ToArray())));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider)\
    \ [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32\
    \ (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00039] in <0aaf526fbaff45d9a68d3db37b2aef0c>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SortNumbers (System.String numbers) [0x0002e] in <0aaf526fbaff45d9a68d3db37b2aef0c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <0aaf526fbaff45d9a68d3db37b2aef0c>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider)\
    \ [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32\
    \ (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00039] in <0aaf526fbaff45d9a68d3db37b2aef0c>:0 "
  stdout: ''
  timestamp: 1659976279
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        if (numbers == null) throw new ArgumentNullException(\"numbers\"\
    );\n        return string.Join(\" \", numbers.Split(' ').Select(s => Convert.ToInt32(s)).OrderBy(i\
    \ => i).Select(i => i.ToString()));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider)\
    \ [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32\
    \ (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at Problem+<>c.<SortNumbers>b__0_0 (System.String s) [0x00000] in <17c4940df7c5469b9d890d4bc9dd1251>:0\
    \ \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray\
    \ () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext\
    \ () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].MoveNext\
    \ () [0x00029] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join\
    \ (System.String separator, System.Collections.Generic.IEnumerable`1[T] values)\
    \ [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x0008e] in <17c4940df7c5469b9d890d4bc9dd1251>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <17c4940df7c5469b9d890d4bc9dd1251>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globa"
  stdout: ''
  timestamp: 1659976279
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var numbersDict = new Dictionary<string, int>();\n        numbersDict.Add(\"\
    zero\", 0);\n        numbersDict.Add(\"one\", 1);\n        numbersDict.Add(\"\
    two\", 2);\n        numbersDict.Add(\"three\", 3);\n        numbersDict.Add(\"\
    four\", 4);\n        numbersDict.Add(\"five\", 5);\n        numbersDict.Add(\"\
    six\", 6);\n        numbersDict.Add(\"seven\", 7);\n        numbersDict.Add(\"\
    eight\", 8);\n        numbersDict.Add(\"nine\", 9);\n        List<int> myList\
    \ = new List<int>();\n        string[] words = numbers.Split(null);\n        foreach\
    \ (string word in words) {\n            myList.Add(numbersDict[word]);\n     \
    \   }\n        myList.Sort();\n        for (int i = 0; i < myList.Count; i++)\
    \ {\n            foreach (KeyValuePair<string, int> pair in numbersDict) {\n \
    \               if (pair.Value == myList[i]) {\n                    words[i] =\
    \ pair.Key;\n                }\n            }\n        }\n        return string.Join(\"\
    \ \", words);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000a7] in <43dc18f23f774450b0503a3618571e18>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <43dc18f23f774450b0503a3618571e18>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000a7] in <43dc18f23f774450b0503a3618571e18>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <43dc18f23f774450b0503a3618571e18>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var a = numbers.Split(' ');\n        Array.Sort(a);\n        return\
    \ string.Join(\" \", a);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0214723b56474f709df68b9ad3c7c901>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0214723b56474f709df68b9ad3c7c901>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976279
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] num = numbers.Split(' ');\n        string[] numIndex = new\
    \ string[num.Length];\n        for (int i = 0; i < num.Length; i++) {\n      \
    \      if (num[i] == \"zero\") {\n                numIndex[i] = \"0\";\n     \
    \       }\n            else if (num[i] == \"one\") {\n                numIndex[i]\
    \ = \"1\";\n            }\n            else if (num[i] == \"two\") {\n       \
    \         numIndex[i] = \"2\";\n            }\n            else if (num[i] ==\
    \ \"three\") {\n                numIndex[i] = \"3\";\n            }\n        \
    \    else if (num[i] == \"four\") {\n                numIndex[i] = \"4\";\n  \
    \          }\n            else if (num[i] == \"five\") {\n                numIndex[i]\
    \ = \"5\";\n            }\n            else if (num[i] == \"six\") {\n       \
    \         numIndex[i] = \"6\";\n            }\n            else if (num[i] ==\
    \ \"seven\") {\n                numIndex[i] = \"7\";\n            }\n        \
    \    else if (num[i] == \"eight\") {\n                numIndex[i] = \"8\";\n \
    \           }\n            else if (num[i] == \"nine\") {\n                numIndex[i]\
    \ = \"9\";\n            }\n        }\n        Array.Sort(numIndex);\n        string\
    \ result = \"\";\n        for (int i = 0; i < numIndex.Length; i++) {\n      \
    \      if (numIndex[i] == \"0\") {\n                result += \"zero \";\n   \
    \         }\n            else if (numIndex[i] == \"1\") {\n                result\
    \ += \"one \";\n            }\n            else if (numIndex[i] == \"2\") {\n\
    \                result += \"two \";\n            }\n            else if (numIndex[i]\
    \ == \"3\") {\n                result += \"three \";\n            }\n        \
    \    else if (numIndex[i] == \"4\") {\n                result += \"four \";\n\
    \            }\n            else if (numIndex[i] == \"5\") {\n               \
    \ result += \"five \"\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpud0xayil.cs(68,34): error CS1002: ; expected

    /tmp/tmpud0xayil.cs(70,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpud0xayil.cs(78,2): error CS1513: } expected

    '
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] nums = numbers.Split(' ');\n        int[] all = new int[nums.Length];\n\
    \        for (int i = 0; i < nums.Length; i++) {\n            all[i] = ConvertNum(nums[i]);\n\
    \        }\n        Array.Sort(all);\n        string result = \"\";\n        for\
    \ (int i = 0; i < all.Length; i++) {\n            result += ConvertNum(all[i]);\n\
    \            if (i < all.Length - 1) {\n                result += \" \";\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqdt5bzkn.cs(18,22): error CS0103: The name ''ConvertNum'' does not exist
    in the current context

    /tmp/tmpqdt5bzkn.cs(23,23): error CS0103: The name ''ConvertNum'' does not exist
    in the current context

    '
  timestamp: 1659976279
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] numArr = numbers.Split(' ');\n        string[] numToWord\
    \ = { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\" };\n        int[] wordToNum = new int[10];\n        for\
    \ (int i = 0; i < numToWord.Length; i++) {\n            wordToNum[i] = Array.IndexOf(numArr,\
    \ numToWord[i]);\n        }\n        Array.Sort(wordToNum);\n        string[]\
    \ ans = new string[numArr.Length];\n        for (int i = 0; i < numArr.Length;\
    \ i++) {\n            ans[i] = numArr[wordToNum[i]];\n        }\n        return\
    \ string.Join(\" \", ans);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.SortNumbers (System.String numbers) [0x000aa]\
    \ in <c1e801c6c9144b6ba703ed264d435db4>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <c1e801c6c9144b6ba703ed264d435db4>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.SortNumbers (System.String numbers) [0x000aa] in <c1e801c6c9144b6ba703ed264d435db4>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <c1e801c6c9144b6ba703ed264d435db4>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976279
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // your code goes here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\"\
    )));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0000b] in <09e4297ef9114dae8da64d5e9f122287>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0000b] in <09e4297ef9114dae8da64d5e9f122287>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        int[] digits = new int[10];\n        string[] nums = numbers.Split('\
    \ ');\n        foreach (string s in nums) {\n            switch (s) {\n      \
    \          case \"zero\":\n                    digits[0]++;\n                \
    \    break;\n                case \"one\":\n                    digits[1]++;\n\
    \                    break;\n                case \"two\":\n                 \
    \   digits[2]++;\n                    break;\n                case \"three\":\n\
    \                    digits[3]++;\n                    break;\n              \
    \  case \"four\":\n                    digits[4]++;\n                    break;\n\
    \                case \"five\":\n                    digits[5]++;\n          \
    \          break;\n                case \"six\":\n                    digits[6]++;\n\
    \                    break;\n                case \"seven\":\n               \
    \     digits[7]++;\n                    break;\n                case \"eight\"\
    :\n                    digits[8]++;\n                    break;\n            \
    \    case \"nine\":\n                    digits[9]++;\n                    break;\n\
    \            }\n        }\n        string result = \"\";\n        for (int i =\
    \ 0; i < 10; i++) {\n            if (digits[i] > 0) {\n                switch\
    \ (i) {\n                    case 0:\n                        result += \"zero\
    \ \";\n                        break;\n                    case 1:\n         \
    \               result += \"one \";\n                        break;\n        \
    \            case 2:\n                        result += \"two \";\n          \
    \              break;\n                    case 3:\n                        result\
    \ += \"three \";\n                        break;\n                    case 4:\n\
    \                        result += \"four \";\n                        break;\n\
    \                    case 5:\n                        result += \"five \";\n \
    \                       break;\n                    case 6:\n                \
    \        result += \"six \";\n                        break;\n               \
    \     case 7:\n                        result += \"seven \";\n               \
    \         break;\n                    case 8:\n                        result\
    \ += \"eight \";\n                        break;\n                    case 9:\n\
    \                        result += \"nine \";\n                        break;\n\
    \                }\n            }\n        }\n        return result.Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976279
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Write your code here\n        int zero = 0;\n        int one =\
    \ 0;\n        int two = 0;\n        int three = 0;\n        int four = 0;\n  \
    \      int five = 0;\n        int six = 0;\n        int seven = 0;\n        int\
    \ eight = 0;\n        int nine = 0;\n        int dash = 0;\n        //System.Diagnostics.Debug.WriteLine(numbers);\n\
    \        foreach (char i in numbers) {\n            if (i == 'e') {\n        \
    \        four += 1;\n            }\n            else if (i == 'f') {\n       \
    \         five += 1;\n            }\n            else if (i == 'i') {\n      \
    \          six += 1;\n            }\n            else if (i == 'n') {\n      \
    \          seven += 1;\n            }\n            else if (i == 'o') {\n    \
    \            one += 1;\n                zero += 1;\n            }\n          \
    \  else if (i == 'r') {\n                three += 1;\n            }\n        \
    \    else if (i == 's') {\n                seven += 1;\n            }\n      \
    \      else if (i == 't') {\n                two += 1;\n                three\
    \ += 1;\n            }\n            else if (i == 'v') {\n                five\
    \ += 1;\n            }\n            else if (i == 'w') {\n                two\
    \ += 1;\n            }\n            else if (i == 'x') {\n                six\
    \ += 1;\n            }\n            else if (i == 'z') {\n                zero\
    \ += 1;\n            }\n            else if (i == ' ') {\n                dash\
    \ += 1;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < zero; i++) {\n            sb.Append(\"zero \");\n\
    \        }\n        for (int i = 0; i < one; i++) {\n            sb.Append(\"\
    one \");\n        }\n        for (int i = 0; i < two; i++) {\n            sb.Append(\"\
    two \");\n        }\n        for (int i = 0; i < three; i++) {\n            sb.Append(\"\
    three\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbjqbogxn.cs(82,23): error CS1010: Newline in constant

    /tmp/tmpbjqbogxn.cs(82,29): error CS1026: ) expected

    /tmp/tmpbjqbogxn.cs(82,29): error CS1002: ; expected

    /tmp/tmpbjqbogxn.cs(84,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpbjqbogxn.cs(92,2): error CS1513: } expected

    '
  timestamp: 1659976279
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        throw new NotImplementedException();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n\
    \    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <1b41c9aef7da4508bd6c83268c258e32>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <1b41c9aef7da4508bd6c83268c258e32>:0 \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var arr = numbers.Split(' ');\n        var ret = new string[arr.Length];\n\
    \        for (int i = 0; i < arr.Length; i++) {\n            ret[i] = arr[i];\n\
    \        }\n        Array.Sort(ret);\n        for (int i = 0; i < ret.Length;\
    \ i++) {\n            if (i == ret.Length - 1) {\n                return ret[i];\n\
    \            }\n            ret[i] += \" \";\n        }\n        return numbers;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc32e4d840b6496495c40b7de8459378>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc32e4d840b6496495c40b7de8459378>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // Your code goes here.\n        Dictionary<string, int> map = new\
    \ Dictionary<string, int>() {\n            {\"zero\", 0},\n            {\"one\"\
    , 1},\n            {\"two\", 2},\n            {\"three\", 3},\n            {\"\
    four\", 4},\n            {\"five\", 5},\n            {\"six\", 6},\n         \
    \   {\"seven\", 7},\n            {\"eight\", 8},\n            {\"nine\", 9}\n\
    \        };\n        string[] nums = numbers.Split(' ');\n        Array.Sort(nums,\
    \ (x, y) => map[x].CompareTo(map[y]));\n        return string.Join(\" \", nums);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\
    \")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\"\
    )));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five\
    \ nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\"\
    )).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"\
    six five four three two one zero\")).Equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        var n = numbers.Split(' ').ToList();\n        n.Sort();\n       \
    \ return string.Join(\" \", n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5c91e289ea6b4aeb824637f24f3ae391>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5c91e289ea6b4aeb824637f24f3ae391>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        string[] nums = new string[] {\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n        int[]\
    \ cnt = new int[10];\n        foreach (string s in numbers.Split(' ')) {\n   \
    \         for (int i = 0; i < 10; i++) {\n                if (s == nums[i]) cnt[i]++;\n\
    \            }\n        }\n        StringBuilder sb = new StringBuilder();\n \
    \       for (int i = 0; i < 10; i++) {\n            for (int j = 0; j < cnt[i];\
    \ j++) {\n                sb.Append(nums[i]);\n                sb.Append(' ');\n\
    \            }\n        }\n        return sb.ToString().Trim();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\
    \")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        List<int> nums = new List<int>();\n        foreach (string num in\
    \ numbers.Split()) {\n            switch (num) {\n                case \"zero\"\
    :\n                    nums.Add(0);\n                    break;\n            \
    \    case \"one\":\n                    nums.Add(1);\n                    break;\n\
    \                case \"two\":\n                    nums.Add(2);\n           \
    \         break;\n                case \"three\":\n                    nums.Add(3);\n\
    \                    break;\n                case \"four\":\n                \
    \    nums.Add(4);\n                    break;\n                case \"five\":\n\
    \                    nums.Add(5);\n                    break;\n              \
    \  case \"six\":\n                    nums.Add(6);\n                    break;\n\
    \                case \"seven\":\n                    nums.Add(7);\n         \
    \           break;\n                case \"eight\":\n                    nums.Add(8);\n\
    \                    break;\n                case \"nine\":\n                \
    \    nums.Add(9);\n                    break;\n            }\n        }\n    \
    \    nums.Sort();\n        StringBuilder result = new StringBuilder();\n     \
    \   foreach (int num in nums) {\n            result.Append(num.ToString() + \"\
    \ \");\n        }\n        return result.ToString().Trim();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\
    \")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"\
    three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"\
    five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\"\
    )));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d97a0a0f60094fadac56ba8edd3d87c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d97a0a0f60094fadac56ba8edd3d87c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976280
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers)\
    \ {\n        // TODO: Implement this function\n\n        Dictionary<string, int>\
    \ dict = new Dictionary<string, int>();\n        dict.Add(\"zero\", 0);\n    \
    \    dict.Add(\"one\", 1);\n        dict.Add(\"two\", 2);\n        dict.Add(\"\
    three\", 3);\n        dict.Add(\"four\", 4);\n        dict.Add(\"five\", 5);\n\
    \        dict.Add(\"six\", 6);\n        dict.Add(\"seven\", 7);\n        dict.Add(\"\
    eight\", 8);\n        dict.Add(\"nine\", 9);\n\n        string[] numbersArr =\
    \ numbers.Split(' ');\n        List<int> nums = new List<int>();\n        for\
    \ (int i = 0; i < numbersArr.Length; i++)\n        {\n            nums.Add(dict[numbersArr[i]]);\n\
    \        }\n        nums.Sort();\n        for (int i = 0; i < numbersArr.Length;\
    \ i++)\n        {\n            numbersArr[i] = dict.FirstOrDefault(x => x.Value\
    \ == nums[i]).Key;\n        }\n        string sorted = string.Join(\" \", numbersArr);\n\
    \        return sorted;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"\
    three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\"\
    )).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero\
    \ four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n\
    \    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000ab] in <b943a0da8634476da1333f2d72db7a12>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <b943a0da8634476da1333f2d72db7a12>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:\
    \ The given key '' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item\
    \ (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers\
    \ (System.String numbers) [0x000ab] in <b943a0da8634476da1333f2d72db7a12>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00001] in <b943a0da8634476da1333f2d72db7a12>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976280
