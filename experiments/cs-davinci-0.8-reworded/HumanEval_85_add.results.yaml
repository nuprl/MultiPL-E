language: cs
name: HumanEval_85_add
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((long x, int i) => (i % 2
    != 0)).Select((long x) => (long)(x % 2)).Sum();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6a26f7181c4b4ae68ace7f8425ae1ebe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6a26f7181c4b4ae68ace7f8425ae1ebe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (long i = 0; i
    < lst.Count; i++) {\n            if (i % 2 == 1 && lst[(int)i] % 2 == 0) {\n                sum
    += lst[(int)i];\n            }\n        }\n        return sum;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        bool startFromEven
    = true;\n        for (int i = 0; i < lst.Count; i++) {\n            long num =
    lst[i];\n            if (startFromEven && num % 2 == 0) {\n                sum
    += num;\n            }\n            startFromEven = !startFromEven;\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a1c54ec51c34676a3c607a3b4013bc7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a1c54ec51c34676a3c607a3b4013bc7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long res = 0L;\n        for (int i = 0; i
    < lst.Count; i += 2) {\n            if (lst[i] % 2L == 0L) {\n                res
    += lst[i];\n            }\n        }\n        return res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b687faac729745fe894ff884dc159f8c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b687faac729745fe894ff884dc159f8c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Select((ele, i) => new { ele, i
    })\n        .Where(x => x.i % 2 == 1 && x.ele % 2 == 0)\n        .Select(x =>
    x.ele)\n        .Sum();\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n
    \   Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,
    (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst\n            .Select((val, i) =>
    (val: val, i: i))\n            .Where(pair => pair.i % 2 == 1)\n            .Where(pair
    => pair.val % 2 == 0)\n            .Select(pair => pair.val)\n            .Sum();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        int n = lst.Count;\n        long sum = 0;\n
    \       for (int i = 0; i < n; i += 2) {\n            if (lst[i] % 2 == 0) {\n
    \               sum += lst[i];\n            }\n        }\n        return sum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5bd63217059e4e7eaf8410a154c1ff8f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5bd63217059e4e7eaf8410a154c1ff8f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((v, i) => i % 2 == 1 && v
    % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((l, i) => l % 2 == 0 && i
    % 2 == 1).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long result = (long)0L;\n        foreach (var
    i in lst) {\n            if (i % (long)2L == (long)0L) {\n                if (lst.IndexOf(i)
    % (long)2L == (long)1L) {\n                    result += i;\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9d6278f7a14696bc1cc021c405dad2>:0
    \n"
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        // *** BEGIN SOLUTION ***\n        return
    lst.Where((x, i) => i % 2 == 1).Where(x => x % 2 == 0).Sum();\n        // ***
    END SOLUTION ***\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        // your code here\n        long output = 0;\n
    \       for (int i = 0; i < lst.Count; i += 2) {\n            output += lst[i];\n
    \       }\n        return output;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <414059f161a14bd19fb39d7d89daa310>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <414059f161a14bd19fb39d7d89daa310>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        // todo: implement the body of this function\n
    \       long result = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if
    (i % 2 == 1 && lst[i] % 2 == 0) {\n                result += lst[i];\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long ret = 0L;\n        for (long i = 0L;
    i < lst.Count; i++) {\n            if (i % 2L == 1L && lst[(int)i] % 2L == 0L)
    {\n                ret += lst[(int)i];\n            }\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        bool is_odd = true;\n
    \       foreach (long item in lst) {\n            if (is_odd && (item % 2) ==
    0) {\n                sum += item;\n            }\n            is_odd = !is_odd;\n
    \       }\n        return sum;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) ==
    (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,
    (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83db951aef6b4e0780595b02c394a716>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83db951aef6b4e0780595b02c394a716>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        var sum = 0L;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0)\n                sum
    += lst[i];\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long acc = (long)0L;\n        {\n            long
    i__prev1 = i;\n\n            foreach (var (__i, __v) in lst.Select((v, i) => (i,
    v)))\n            {\n                i = __i;\n                v = __v;\n                if
    (i % (long)2L == (long)1L && v % (long)2L == (long)0L)\n                {\n                    acc
    += v;\n                }\n\n            }\n\n            i = i__prev1;\n        }\n\n
    \       return acc;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp473v4fl9.cs(16,29): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmp473v4fl9.cs(20,17): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmp473v4fl9.cs(21,17): error CS0103: The name ''v'' does not exist in the
    current context

    /tmp/tmp473v4fl9.cs(22,21): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmp473v4fl9.cs(22,49): error CS0103: The name ''v'' does not exist in the
    current context

    /tmp/tmp473v4fl9.cs(24,28): error CS0103: The name ''v'' does not exist in the
    current context

    /tmp/tmp473v4fl9.cs(29,13): error CS0103: The name ''i'' does not exist in the
    current context

    '
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((long x, int i) => i % 2
    == 1 && x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) ==
    (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,
    (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long result = 0;\n        for (int i = 0;
    i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                result
    += lst[i];\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        List<long> a = new List<long>();\n        int
    n = lst.Count;\n        int c = 0;\n        while (c < n) {\n            int c0
    = c;\n            while (c < n && (lst[c] % 2L) == 0L) {\n                c =
    c + 1;\n            }\n            int c1 = c;\n            long acc = 0L;\n            int
    x = c0;\n            while (x < c1) {\n                acc = acc + lst[x];\n                x
    = x + 1;\n            }\n            a.Add(acc);\n            c = c + 1;\n        }\n
    \       long res = 0L;\n        foreach (long x0 in a) {\n            res = res
    + x0;\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1e9a3d1a63954bd5b2f510c785f55f52>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1e9a3d1a63954bd5b2f510c785f55f52>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976783
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long res = 0L;\n        long i = 0L;\n        long
    it = 0L;\n        long i_1 = 0L;\n        foreach (var it in lst) {\n            i_1
    = i;\n            i = i_1 + (long)1L;\n            if (i % (long)2L == (long)1L
    && it % (long)2L == (long)0L) {\n                res = res + it;\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) ==
    (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,
    (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpesawjofc.cs(18,22): error CS0136: A local or parameter named ''it'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpesawjofc.cs(16,14): warning CS0219: The variable ''it'' is assigned but
    its value is never used

    '
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        // Write code here\n        return lst.Where((x,
    i) => i % 2 == 1 && x % 2 == 0).Sum();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        throw new NotImplementedException();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n
    \   Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L, (long)6L,
    (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <1c6398d3283346f893d3046989620190>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <1c6398d3283346f893d3046989620190>:0 \n"
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((v, idx) => idx % 2 == 1
    && v % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Select((x, i) => (i % 2 == 1 &&
    x % 2 == 0) ? x : 0).Sum();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) ==
    (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,
    (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        long n = (long)lst.Count;\n
    \       for (long i = 0; i < n; i++) {\n            long v = lst[(int)i];\n            if
    (i % 2 == 1) {\n                sum += v;\n            }\n        }\n        return
    sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55f1235743e0496aab6d684a9f0ee9b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55f1235743e0496aab6d684a9f0ee9b4>:0
    \n"
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return (long)1L;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d579d1ab4fd4e6eab15787d0f1913c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d579d1ab4fd4e6eab15787d0f1913c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long rv = 0L;\n        for (long i = 0L; i
    < lst.Count; i++) {\n            if (lst[(int)i] % 2L == 0L && i % 2L == 1L) {\n
    \               rv += lst[(int)i];\n            }\n        }\n        return rv;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976784
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        throw new NotImplementedException();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n
    \   Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L, (long)6L,
    (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <1c6398d3283346f893d3046989620190>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <1c6398d3283346f893d3046989620190>:0 \n"
  stdout: ''
  timestamp: 1659976784
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        int i = 0;\n        for
    (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 ==
    0) {\n                sum += lst[i];\n            }\n        }\n        return
    sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_guos8tb.cs(16,18): error CS0136: A local or parameter named ''i'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp_guos8tb.cs(15,13): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    '
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long res = (long)0L;\n        for (long i
    = (long)0L; i < lst.Count; i++) {\n            var val = lst[(int)i];\n            if
    (i % (long)2L == (long)1L && val % (long)2L == (long)0L) {\n                res
    += val;\n            }\n        }\n        return res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long res = 0L;\n        for (long i = 0L;
    i < lst.Count; i++) {\n            if (i % 2L == 1L && lst[(int)i] % 2L == 0L)
    {\n                res += lst[(int)i];\n            }\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst\n            .Where((x, i) => i
    % 2 == 1)\n            .Where(x => x % 2 == 0)\n            .Sum();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976784
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        var evens = from i in lst.Indexed() where
    i.Item1 % 2 == 1 && i.Item2 % 2 == 0 select i.Item2;\n        return evens.Sum();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwll2_inq.cs(14,35): error CS1061: ''List<long>'' does not contain a definition
    for ''Indexed'' and no accessible extension method ''Indexed'' accepting a first
    argument of type ''List<long>'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long Result = 0L;\n        for (int idx =
    0; idx < lst.Count; idx++) {\n            if (idx % 2 == 1 && lst[idx] % 2 ==
    0) {\n                Result += lst[idx];\n            }\n        }\n        return
    Result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long ret = 0L;\n        for (long i = 0L;
    i < lst.Count; i++) {\n            if (i % 2L == 1L && lst[(int)i] % 2L == 0L)
    {\n                ret += lst[(int)i];\n            }\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        // return lst.Where((item, index) => index
    % 2 == 1 && item % 2 == 0).Sum();\n        // return lst.Where((item, index) =>
    index % 2 == 1).Where(item => item % 2 == 0).Sum();\n        //return lst.Where((item,
    index) => index % 2 == 1).Sum(item => item % 2 == 0 ? item : 0);\n        return
    lst.Sum((item, index) => index % 2 == 1 && item % 2 == 0 ? item : 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n
    \   Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L, (long)6L,
    (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp08bre5bg.cs(17,24): error CS1593: Delegate ''Func<long, int>'' does not
    take 2 arguments

    '
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long evens = 0L;\n        for (int i = 0;
    i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                evens
    += lst[i];\n            }\n        }\n        return evens;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long res = 0L;\n        for (long i = 1L;
    i < lst.Count; i += 2L) {\n            if (lst[(int)i] % 2L == 0L) {\n                res
    += lst[(int)i];\n            }\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i += 2) {\n            long x = lst[i];\n            if (x % 2L ==
    0L) {\n                sum += x;\n            }\n        }\n        return sum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a4c55c80bae4d02bb9a2c879d91b20b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a4c55c80bae4d02bb9a2c879d91b20b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long res = 0L;\n        long i = 0L;\n        while
    (i < lst.Count) {\n            if (i % 2L == 1L) {\n                if (lst[(int)i]
    % 2L == 0L) {\n                    res += lst[(int)i];\n                }\n            }\n
    \           i++;\n        }\n        return res;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return  lst.Where((arg00, arg01) => arg01
    % 2 == 1).Where((arg00, arg01) => arg00 % 2 == 0).Sum();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        // Write your code here\n        long sum
    = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 ==
    1 && lst[i] % 2 == 0) {\n                sum += lst[i];\n            }\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long s = 0L;\n        long i = 0L;\n        while
    (i < (long)lst.Count) {\n            if ((i % (long)2L) == (long)0L) {\n                s
    += lst[(int)i];\n            }\n            i += (long)1L;\n        }\n        return
    s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bb9fe37108724714825dfc1dbd89a867>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bb9fe37108724714825dfc1dbd89a867>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i += 2) {\n            if (lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53c16ac1131e4df296b5260c75b59727>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53c16ac1131e4df296b5260c75b59727>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0)\n                sum
    += lst[i];\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long ret = 0L;\n        for (long i = 0L;
    i < lst.Count; i++) {\n            if (lst[(int)i] % 2L == 0L && i % 2L == 1L)
    {\n                ret += lst[(int)i];\n            }\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        var Sum = (long)0L;\n        foreach (var
    j in lst) {\n            if (j % (long)2L == (long)0L) {\n                Sum
    += j;\n            }\n        }\n        return Sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5cac70127e44b328d98c06a47233ab5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5cac70127e44b328d98c06a47233ab5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            long elem = lst[i];\n            if (i % 2 == 1
    && elem % 2 == 0) {\n                sum += elem;\n            }\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (long i = 0; i
    < lst.Count; i++) {\n            if (lst[(int)i] % 2 == 0 && i % 2 == 1) {\n                sum
    += lst[(int)i];\n            }\n        }\n        return sum;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long value = 0L;\n        for (int i = 0;
    i < lst.Count; i = i + 2) {\n            value = value + lst[i];\n        }\n
    \       return value;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7bf82fb55a34502b9b22213bde3e994>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7bf82fb55a34502b9b22213bde3e994>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Aggregate(0L, (acc, e) => acc +
    ((e % 2 == 0 && lst.IndexOf(e) % 2 == 1) ? e : 0));\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44255318281b4c45a6575137f7abab90>:0
    \n"
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i += 2) {\n            long num = lst[i];\n            if (num % 2
    == 0) {\n                sum += num;\n            }\n        }\n        return
    sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21849c8e1787435dacaf03f55c3488d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21849c8e1787435dacaf03f55c3488d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((long x, int i) => (i%2)
    == 1 && (x%2) == 0).Sum();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) ==
    (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,
    (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long res = 0L;\n        for (long i = 0L;
    i < lst.Count; i++) {\n            long arg_0E_0 = lst[(int)i];\n            if
    (IsEven(arg_0E_0) && !IsEven(i)) {\n                res = res + lst[(int)i];\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp294p2r_y.cs(17,17): error CS0103: The name ''IsEven'' does not exist in
    the current context

    /tmp/tmp294p2r_y.cs(17,38): error CS0103: The name ''IsEven'' does not exist in
    the current context

    '
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((item, index) => item % 2
    == 0 && index % 2 == 1).Sum();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) ==
    (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,
    (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        int n = 0;\n        long sum = 0;\n        while(true)
    {\n            bool loopVar0 = false;\n            bool loopVar1 = true;\n            foreach(int
    i in new Range(0, lst.Count, 1)) {\n                if(loopVar1 && lst[i] % 2L
    == 0L) {\n                    if(n % 2 == 0) {\n                        sum +=
    lst[i];\n                    }\n                    n++;\n                }\n
    \               loopVar0 = true;\n            }\n            if(loopVar0) {\n
    \               loopVar1 = false;\n            }\n            if(loopVar1) {\n
    \               break;\n            }\n        }\n        return sum;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n
    \   Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L, (long)6L,
    (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyrbkk32e.cs(19,34): error CS1729: ''Range'' does not contain a constructor
    that takes 3 arguments

    /tmp/tmpyrbkk32e.cs(19,30): error CS1579: foreach statement cannot operate on
    variables of type ''Range'' because ''Range'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long tot = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0)\n                tot
    += lst[i];\n        }\n        return tot;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        var res = lst.Select((x, i) => (x, i))\n            .Where(t
    => t.Item2 % 2 == 1)\n            .Select(t => t.Item1)\n            .Where(x
    => x % 2 == 0)\n            .Sum();\n        return res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        // TODO: Find a correct implementation (using
    LINQ would be nice)\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b08869087de54d8a878401fdc86e7b3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b08869087de54d8a878401fdc86e7b3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i += 2) {\n            if (lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53c16ac1131e4df296b5260c75b59727>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53c16ac1131e4df296b5260c75b59727>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Select((x, i) => new {x, i}).Where(x
    => x.i % 2 == 1).Select(x => x.x).Where(x => x % 2 == 0).Sum();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((item, index) => index %
    2 == 1 && item % 2 == 0).Sum();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) ==
    (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,
    (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((long x, int i) => i % 2
    == 1 && x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) ==
    (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,
    (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((x, idx) => idx % 2 == 1
    && x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long ret = 0L;\n        for (int i = 0; i
    < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                ret
    += lst[i];\n            }\n        }\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <482a7d462e1b458dba3ac97fbe4ee1e2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <482a7d462e1b458dba3ac97fbe4ee1e2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i += 2) {\n            long value = lst[i];\n            if (value
    % 2 == 0) {\n                sum += value;\n            }\n        }\n        return
    sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c150f1c8edb44fd2a15af2a081fc8af9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c150f1c8edb44fd2a15af2a081fc8af9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (long i = 1; i
    < lst.Count; i += 2) {\n            if (lst[(int)i] % 2 == 0) {\n                sum
    += lst[(int)i];\n            }\n        }\n        return sum;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        // INSERT YOUR CODE HERE\n        return 0;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db8d20b4c8454652b9518aebeaaed288>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db8d20b4c8454652b9518aebeaaed288>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long result = 0;\n        for (long i = 0;
    i < lst.Count; i += 1) {\n            if (i % 2 == 1 && lst[(int)i] % 2 == 0)
    {\n                result += lst[(int)i];\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i += 2) {\n            sum += lst[i];\n        }\n        return sum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2641908dd40d4055ba660f96b049b686>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2641908dd40d4055ba660f96b049b686>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1 && x
    % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((o, i) => i % 2 == 1 && o
    % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        int counter = 0;\n
    \       foreach (long i in lst) {\n            if (counter % 2 == 1 && i % 2 ==
    0) {\n                sum += i;\n            }\n            counter++;\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (long i = 0; i
    < lst.Count; i++) {\n            long element = lst[(int)i];\n            if (element
    % 2L == 0L && i % 2L == 1L) {\n                sum += element;\n            }\n
    \       }\n        return sum;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) ==
    (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,
    (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        var n = lst.Where((arg0, arg1) => (arg1 %
    (long)2L) == (long)0L && (arg0 % (long)2L) == (long)0L).Sum();\n        return
    n;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d40262a4624e46e7add09370df168723>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d40262a4624e46e7add09370df168723>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long s = 0L;\n        long i = 0L;\n        while
    (i < (long)lst.Count) {\n            if ((i % (long)2L) == (long)1L) {\n                s
    += lst[(int)i];\n            }\n\n            i += (long)1L;\n        }\n\n        return
    s;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ca9c6d5a581c41eda85e02ff9fe27af9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ca9c6d5a581c41eda85e02ff9fe27af9>:0
    \n"
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Select((long val, int idx) => (idx
    % 2 != 0 && val % 2 == 0) ? val : 0).Sum();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        // your code here...\n        long sum = 0;\n
    \       for (long i = 0; i < lst.Count; i++) {\n            if (i % 2 != 0 &&
    lst[(int)i] % 2 == 0) {\n                sum += lst[(int)i];\n            }\n
    \       }\n        return sum;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) ==
    (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,
    (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Select((x, i) => (x, i)).Where(x
    => x.Item2 % 2 == 1).Where(x => x.Item1 % 2 == 0).Sum(x => x.Item1);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n
    \   Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L, (long)6L,
    (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Select((value, index) => (index
    % 2 == 1 && value % 2 == 0) ? value : 0).Sum();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1).Where(x
    => x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long result = 0;\n        for (int i = 0;
    i < lst.Count; i += 2) {\n            if (lst[i] % 2 == 0) {\n                result
    += lst[i];\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85abe417c7bf44dab32835e2be25c318>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85abe417c7bf44dab32835e2be25c318>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long s = 0L;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1) {\n                s += lst[i];\n
    \           }\n        }\n        return s;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <13db4e072b09471987f2beeac6ed036f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <13db4e072b09471987f2beeac6ed036f>:0
    \n"
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((long x, int idx) => x %
    2L == 0L && idx % 2 != 0).Sum();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((v, i) => i % 2 == 1 && v
    % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long res = 0L;\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n
    \   Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L, (long)6L,
    (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64db38e3f6584d529c44eaf77312792c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64db38e3f6584d529c44eaf77312792c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long output = (long)0L;\n        long idx
    = (long)0L;\n        foreach (var x in lst) {\n            if (idx % (long)2L
    == (long)1L && x % (long)2L == (long)0L) {\n                output += x;\n            }\n
    \           idx++;\n        }\n        return output;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst\n            .Where((x, i) => i
    % 2 == 1)\n            .Where(x => x % 2 == 0)\n            .Sum();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long ret = 0L;\n        var get = lst.ToArray();\n
    \       foreach (long i in get) {\n            if ((i % (long)2L) == (long)0L)
    {\n                var index = Array.IndexOf(get, i);\n                if ((index
    % (long)2L) == (long)1L) {\n                    ret += i;\n                }\n
    \           }\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f75df9a77db64d5aa77bc1f77b3b0ca9>:0
    \n"
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long ret = 0L;\n        for (int i = 0; i
    < lst.Count; i += 2) {\n            ret += lst[i];\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d637cbefa3a14029a6f58f296540efe6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d637cbefa3a14029a6f58f296540efe6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        int i;\n        long result = 0L;\n        i
    = 0;\n        while (i < lst.Count) {\n            if (i % 2 == 1) {\n                result
    += lst[i];\n            }\n            i++;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9c045ac38d541ce8d3a95f852b814a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9c045ac38d541ce8d3a95f852b814a9>:0
    \n"
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long acc=0L;\n        for (int i=0; i<lst.Count;
    i++) {\n            if (i%2==1 && lst[i]%2==0) {\n                acc+=lst[i];\n
    \           }\n        }\n        return acc;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((item, index) => index %
    2 == 1 && item % 2 == 0).Sum();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) ==
    (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,
    (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long summ = 0;\n        for (int i = 0; i
    < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                summ
    += lst[i];\n            }\n        }\n        return summ;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long s = 0L;\n        for (long i = 0L; i
    < lst.Count; i++) {\n            if (i % 2L == 1L && lst[(int)i] % 2L == 0L) {\n
    \               s += lst[(int)i];\n            }\n        }\n        return s;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        //input\n        //((new List<long>(new long[]{(long)4L,
    (long)2L, (long)6L, (long)7L})))\n        //output\n        //(2L)\n        long
    sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 2
    == 1 && lst[i] % 2 == 0) {\n                sum += lst[i];\n            }\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0)\n                sum
    += lst[i];\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976784
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        // v1 is a value of the same type as lst.\n
    \       // v1 is a value of the same type as lst.\n        var v1 = lst;\n        //
    v0 is a value of the same type as lst.\n        // v0 is a value of the same type
    as lst.\n        var v0 = lst;\n        // lst[0] : (long)\n        // lst[0]
    : (long)\n        var lst0 = lst[0];\n        // lst[0] : (long)\n        // lst[0]
    : (long)\n        var lst1 = lst[0];\n        // lst[0] : (long)\n        // lst[0]
    : (long)\n        var lst2 = lst[0];\n        // lst[0] : (long)\n        // lst[0]
    : (long)\n        var lst3 = lst[0];\n        // lst[0] : (long)\n        // lst[0]
    : (long)\n        var lst4 = lst[0];\n        // lst[0] : (long)\n        // lst[0]
    : (long)\n        var lst5 = lst[0];\n        // lst[0] : (long)\n        // lst[0]
    : (long)\n        var lst6 = lst[0];\n        // lst[0] : (long)\n        // lst[0]
    : (long)\n        var lst7 = lst[0];\n        // lst[0] : (long)\n        // lst[0]
    : (long)\n        var lst8 = lst[0];\n        // lst[0] : (long)\n        // lst[0]
    : (long)\n        var lst9 = lst[0];\n        // lst[0] : (long)\n        // lst[0]
    : (long)\n        var lst10 = lst[0];\n        // lst[0] : (long)\n        //
    lst[0] : (long)\n        var lst11 = lst[\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfq0j3ai7.cs(55,25): error CS1003: Syntax error, '']'' expected

    /tmp/tmpfq0j3ai7.cs(55,25): error CS1002: ; expected

    '
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        int i = 0;\n        while
    (i < lst.Count) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n            i += 1;\n        }\n        return sum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1).Where(x
    => x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        // Write your code here\n        int j = 1;\n
    \       long sum = 0;\n        foreach (long i in lst) {\n            if (j %
    2 == 1) {\n                sum += i;\n            }\n            j++;\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d959030963e4469cb2923e418eda007e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d959030963e4469cb2923e418eda007e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        // replace with your code.\n        return
    0L;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <436de004b0a345a08e18cdedf3091dfc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <436de004b0a345a08e18cdedf3091dfc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long[] a = lst.Where((long i, int j) => (((i
    & (long)1L) == (long)0L) && ((j & (long)1L) == (long)1L))).ToArray();\n        long
    i = (long)0L;\n        foreach (long x in a) {\n            i += x;\n        }\n
    \       return i;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1).Where(x
    => x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((long l, int i) => i % 2
    == 1).Where((long i) => i % 2 == 0).Sum();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long value = 0L;\n        for (int i = 0;
    i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                value
    += lst[i];\n            }\n        }\n        return value;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i += 2) {\n            if (lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53c16ac1131e4df296b5260c75b59727>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53c16ac1131e4df296b5260c75b59727>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i += 2) {\n            if (lst[i] % 2 == 0)\n                sum +=
    lst[i];\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8edde76900554103bae954fa03056be5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8edde76900554103bae954fa03056be5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((long x, int i) => (x % (long)2L
    == (long)0L && i % (long)2L == (long)1L)).Sum();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        var pairs = lst.Select((x, i) => new { x,
    i }).Where(x => x.i % 2 == 1).Where(x => x.x % 2 == 0);\n        return pairs.Sum(x
    => x.x);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        var _temp0 = lst;\n        if (_temp0 == null)\n
    \       {\n            throw new System.Exception(\"variable has not been initialized!\");\n
    \       }\n        else\n        {\n            long result = (long)0L;\n            foreach
    (var x in _temp0)\n            {\n                {\n                    var _temp
    = x;\n                    if (_temp == null)\n                    {\n                        throw
    new System.Exception(\"variable has not been initialized!\");\n                    }\n
    \                   else\n                    {\n                        long
    temp0 = _temp;\n                        result = (result + temp0);\n                    }\n
    \               }\n            }\n            return result;\n        }\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n
    \   Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L, (long)6L,
    (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26cde9404b964089a7ce9a90043d4822>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26cde9404b964089a7ce9a90043d4822>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((element, index) => (index
    % 2 == 1 && element % 2 == 0)).Sum();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        // Check whether the list is empty.\n        if
    (lst.Count < 1L) {\n            throw new Exception(\"The list is empty!\");\n
    \       }\n        long sum = 0L;\n        long i = 0L;\n        while (i < lst.Count)
    {\n            long num = lst[(int)i];\n            if (num % 2L == 0L && i %
    2L == 1L) {\n                sum += num;\n            }\n            i += 1L;\n
    \       }\n        return sum;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) ==
    (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,
    (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1).Where(x
    => x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return (long)lst.Where((long item, int index)
    => {\n            return index % 2 == 1 && item % 2 == 0;\n        }).Sum();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((long x, int i) => (x % (long)2L
    == (long)0L && i % (long)2L == (long)1L)).Sum();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i += 2) {\n            if (lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53c16ac1131e4df296b5260c75b59727>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53c16ac1131e4df296b5260c75b59727>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976784
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        var e = new List<long>();\n        var o =
    new List<long>();\n        long total = 0;\n        foreach (var x in lst) {\n
    \           if (x % 2 == 0) {\n                e.Add(x);\n            } else {\n
    \               o.Add(x);\n            }\n        }\n        if (e.Count > o.Count)
    {\n            for (int i = 0; i < o.Count; i++) {\n                total += e[i];\n
    \           }\n        } else {\n            for (int i = 0; i < e.Count; i++)
    {\n                total += e[i];\n            }\n        }\n        return total;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0162596f93f48f3b2429c56ccdff223>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0162596f93f48f3b2429c56ccdff223>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst\n            .Where((val, index)
    => index % 2 == 1 && val % 2 == 0)\n            .Sum();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long _sum = (long)0L;\n        for (long i
    = (long)0L; i < lst.Count; i++) {\n            if (i % (long)2L == (long)0L &&
    lst[(int)i] % (long)2L == (long)0L) {\n                _sum += lst[(int)i];\n
    \           }\n        }\n        return _sum;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3dcd6776416e46eb913e8b0e6bcbafb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3dcd6776416e46eb913e8b0e6bcbafb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long total = 0;\n        for (int i = 0; i
    < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                total
    += lst[i];\n            }\n        }\n        return total;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((a,b) => b % 2 == 1 && a
    % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((x,i) => i % 2 == 1 && x
    % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long ret = 0L;\n        for (int i = 0; i
    < lst.Count; i++) {\n            long e = lst[i];\n            if (i % 2L == 1L
    && e % 2L == 0L) {\n                ret += e;\n            }\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((e, i) => i % 2 == 1 && e
    % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        int count = 0;\n        foreach (var item
    in lst) {\n            if (count % 2 == 1 && item % 2 == 0) {\n                count
    += item;\n            }\n            count++;\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmi6ayxli.cs(17,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Aggregate(0L, (z, x) => z + (x
    % 2 == 0 && x % 4 != 0 ? x : 0));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c9674ef6ec04a2f8944ef23ca42506c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c9674ef6ec04a2f8944ef23ca42506c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        // Write your code here\n        return 0;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1bdabd0177b4ac0b6b8d00cb6e4fa46>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1bdabd0177b4ac0b6b8d00cb6e4fa46>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976787
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        int[] i = lst.Select((n,i) => new {i,n}).Where(n
    => n.i % 2 == 1 && n.n % 2 == 0).Select(n => n.n).ToArray();\n        long v =
    0;\n        i.ToList().ForEach(n => v += n);\n        return v;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxni9s9e1.cs(14,19): error CS0029: Cannot implicitly convert type ''long[]''
    to ''int[]''

    '
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        var sum = 0L;\n        var idx = 0;\n        while
    (idx < lst.Count) {\n            if (idx % 2 == 1 && lst[idx] % 2 == 0) {\n                sum
    += lst[idx];\n            }\n            idx += 1;\n        }\n        return
    sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((e, i) => i % 2 == 1 && e
    % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((e, i) => i % 2 == 1 && e
    % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long ret = 0L;\n        foreach (var i in
    lst) {\n            if (i % 2L == 0L) {\n                ret += i;\n            }\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) ==
    (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,
    (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f172895e52a64fa7b2a9860ac62bfebe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f172895e52a64fa7b2a9860ac62bfebe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        var lll = lst.Where((long n, int i) => n %
    2 == 0 && i % 2 == 1);\n        return lll.Aggregate((long acc, long n) => acc
    + n);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((long x, int i) => x % 2L
    == 0L && i % 2 == 1).Sum();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) ==
    (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,
    (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        foreach (long i in
    lst) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n
    \       }\n        return sum;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) ==
    (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,
    (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e6c6ba2730e845dd90f60bcad85a62f5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e6c6ba2730e845dd90f60bcad85a62f5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long i = (long)0L;\n        long cnt = (long)0L;\n
    \       while (i < (long)lst.Count) {\n            if (i % (long)2L == (long)0L
    && lst[(int)i] % (long)2L == (long)0L) {\n                cnt += lst[(int)i];\n
    \           }\n            i++;\n        }\n        return cnt;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f0661936128046c799c440a94bdbda55>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f0661936128046c799c440a94bdbda55>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return (long)lst.Select((item, index) => new
    { item, index }).Where(t => t.index % 2 == 1).Where(t => t.item % 2 == 0).Select(t
    => t.item).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long v = 0L;\n        long i = 0L;\n        long
    x = 0L;\n        long __ret = new long();\n        foreach (var __x in lst)\n
    \       {\n            x = __x;\n            if (i % 2L == 0L)\n            {\n
    \               v = v + x;\n            }\n\n            i = i + 1L;\n        }\n\n
    \       __ret = v;\n        return __ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <104f4dd75df94f38a699246753a85680>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <104f4dd75df94f38a699246753a85680>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Select((e, i) => ((i + 1) % 2 ==
    0) ? (e % 2 == 0 ? e : 0) : 0).Sum();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long a = 0L;\n        long i = 0L;\n        foreach
    (var x in lst) {\n            if (x % 2L == 0L && i % 2L == 1L) {\n                a
    += x;\n            }\n            i++;\n        }\n        return a;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n
    \   Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L, (long)6L,
    (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long total = 0;\n        for (int i = 0; i
    < lst.Count; i++) {\n            long n = lst[i];\n            if (i % 2 == 1
    && n % 2 == 0) {\n                total += n;\n            }\n        }\n        return
    total;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((long l, int i) => (i % 2
    == 1) && (l % 2 == 0)).Sum();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) ==
    (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,
    (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        // your code here\n        return lst.FindAll(e
    => e % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a08226f72bb4fa59e17cee0cb25a55c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a08226f72bb4fa59e17cee0cb25a55c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long acc = 0L;\n        for (int i = 0; i
    < lst.Count; i++) {\n            var x = lst[i];\n            if (x % 2L == 0L
    && i % 2 == 1) {\n                acc += x;\n            }\n        }\n        return
    acc;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976787
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long ret = 0L;\n        long index = 0L;\n
    \       long length = (long)lst.Count;\n        while (index < length) {\n            long
    val = lst[(int)index];\n            if (Even(val) && Odd(index)) {\n                ret
    = ret + val;\n            }\n            index = index + 1L;\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaj4ms1sz.cs(19,17): error CS0103: The name ''Even'' does not exist in
    the current context

    /tmp/tmpaj4ms1sz.cs(19,30): error CS0103: The name ''Odd'' does not exist in the
    current context

    '
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst\n            .Where((n, i) => i
    % 2 == 1)\n            .Where(n => n % 2 == 0)\n            .Sum();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long even = 0;\n        for (int i = 0; i
    < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                even
    += lst[i];\n            }\n        }\n        return even;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        var res = 0L;\n        for (var i = 0; i <
    lst.Count; i += 2) {\n            if (lst[i] % 2 == 0) {\n                res
    += lst[i];\n            }\n        }\n        return res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e594e5f33dca4ed2bc1d5a8235f2d7eb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e594e5f33dca4ed2bc1d5a8235f2d7eb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((value, index) => value %
    2 == 0 && index % 2 == 1).Sum();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i+=2) {\n            if (lst[i] % 2 == 0) {\n                sum +=
    lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dd46f9239a314dd6a175a5c2b3dcfd3e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dd46f9239a314dd6a175a5c2b3dcfd3e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        var sum = 0L;\n        var i = 0;\n        while
    (i < lst.Count) {\n            sum += lst[i];\n            i += 2;\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afea7f412fa04261ad73d1b077af1aef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afea7f412fa04261ad73d1b077af1aef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        // insert your code here\n        long sum
    = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 ==
    1 && lst[i] % 2 == 0) {\n                sum += lst[i];\n            }\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return lst.Where((x,i) => i % 2 == 1 && x
    % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        int len = lst.Count;\n        if (len == 0)
    {\n            return 0;\n        } else {\n            long result = 0;\n            for
    (int i = 0; i < len; i++) {\n                if (i % 2 == 1) {\n                    result
    += lst[i];\n                }\n            }\n            return result;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1da168b92c8540edb7215065c440cd06>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1da168b92c8540edb7215065c440cd06>:0
    \n"
  stdout: ''
  timestamp: 1659976788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        var odd = new List<long>();\n        var counter
    = 0;\n        foreach (var element in lst) {\n            if (counter%2 == 1)
    {\n                odd.Add(element);\n            }\n            counter += 1;\n
    \       }\n        var sum = 0L;\n        foreach (var element in odd) {\n            if
    (element%2 == 0) {\n                sum += element;\n            }\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long ret = 0L;\n        for (int i = 0; i
    < lst.Count; i += 2) {\n            ret += lst[i];\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d637cbefa3a14029a6f58f296540efe6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d637cbefa3a14029a6f58f296540efe6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        // (2L)\n        return lst.Where((long n,
    int i) => n % (long)2L == (long)0L && i % (long)2L == (long)1L).Sum();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n
    \   Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L, (long)6L,
    (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sol = 0;\n        for (int i = 0; i <
    lst.Count; i+=2) {\n            if (lst[i] % 2 == 0) {\n                sol +=
    lst[i];\n            }\n        }\n        return sol;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dab407826a084bf38736865d122dace3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dab407826a084bf38736865d122dace3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        // (1) Compute parity of the number of odd
    indices.\n        //     If it is 0, then return 0.\n        // (2) Otherwise,
    add the even integers at odd indices.\n        // (3) If there are no even integers
    at odd indices, return the sum of odd integers at even indices.\n        // Insert
    code here.\n        int evenCount = 0;\n        int oddCount = 0;\n        int
    evenSum = 0;\n        int oddSum = 0;\n        for (int i = 0; i < lst.Count;
    i++) {\n            if (i % 2 == 0) {\n                evenCount++;\n                if
    (lst[i] % 2 == 0) {\n                    evenSum += (int)lst[i];\n                }\n
    \           } else {\n                oddCount++;\n                if (lst[i]
    % 2 == 1) {\n                    oddSum += (int)lst[i];\n                }\n            }\n
    \       }\n        if (evenCount % 2 == 0) {\n            return 0;\n        }
    else {\n            return evenSum + oddSum;\n        }\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ad5f4444e8541469d471dd1295ecd90>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ad5f4444e8541469d471dd1295ecd90>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long result = (long)0L;\n        long i =
    (long)0L;\n        while (i < (long)lst.Count)\n        {\n            if (i %
    (long)2L == (long)0L && lst[(int)i] % (long)2L == (long)0L)\n            {\n                result
    += lst[(int)i];\n            }\n\n            i += (long)1L;\n\n        }\n\n
    \       return result;\n\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n
    \   Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,
    (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f0b626674734df4a517b2017a6b7ed5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f0b626674734df4a517b2017a6b7ed5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long result = 0;\n        for (int i = 0;
    i < lst.Count; i += 2) {\n            if (lst[i] % 2 == 0) {\n                result
    += lst[i];\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85abe417c7bf44dab32835e2be25c318>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85abe417c7bf44dab32835e2be25c318>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long acc = 0L;\n        long i = 0L;\n        long
    x__prev1 = 0L;\n\n        foreach (var (_, __x) in lst)\n        {\n            i
    = __x;\n            if (i % 2L == 0L && i != x__prev1)\n            {\n                acc
    += i;\n            }\n\n            x__prev1 = i;\n\n        }\n\n        return
    acc;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf_72bacd.cs(18,34): error CS1061: ''long'' does not contain a definition
    for ''Deconstruct'' and no accessible extension method ''Deconstruct'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpf_72bacd.cs(18,34): error CS8129: No suitable ''Deconstruct'' instance
    or extension method was found for type ''long'', with 2 out parameters and a void
    return type.

    /tmp/tmpf_72bacd.cs(18,23): error CS8130: Cannot infer the type of implicitly-typed
    deconstruction variable ''_''.

    /tmp/tmpf_72bacd.cs(18,23): error CS8183: Cannot infer the type of implicitly-typed
    discard.

    /tmp/tmpf_72bacd.cs(18,26): error CS8130: Cannot infer the type of implicitly-typed
    deconstruction variable ''__x''.

    '
  timestamp: 1659976788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long result = 0;\n        int ind = 1;\n        while
    (ind < lst.Count) {\n            if (lst[ind] % 2 == 0) {\n                result
    += lst[ind];\n            }\n            ind += 2;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                sum
    += lst[i];\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        // Your code starts here...\n        long
    sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 2
    == 1 && lst[i] % 2 == 0) {\n                sum += lst[i];\n            }\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long ret = 0L;\n        for (int i = 0; i
    < lst.Count; i++) {\n            if (i % 2 != 0 && lst[i] % 2 == 0) {\n                ret
    += lst[i];\n            }\n        }\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <482a7d462e1b458dba3ac97fbe4ee1e2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <482a7d462e1b458dba3ac97fbe4ee1e2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long res = 0L;\n        long i = 0L;\n        foreach
    (var x in lst) {\n            if (i % 2L == 1L && x % 2L == 0L) {\n                res
    += x;\n            }\n            i++;\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n
    \   Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L, (long)6L,
    (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        // Good luck. (like you need it)\n        return
    lst.Where((long x, int i) => x % 2 == 0 && i % 2 == 1).Sum();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long result = 0;\n        for (int i = 0;
    i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                result
    += lst[i];\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long n = (long)0L;\n        for (long i =
    (long)0L; i < lst.Count; i++) {\n            if (lst[(int)i] % (long)2L == (long)0L
    && i % (long)2L == (long)1L) {\n                n += lst[(int)i];\n            }\n
    \       }\n        return n;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) ==
    (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,
    (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new
    long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976788
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        var v = (lst).AsEnumerable();\n        var
    z = (v).Select((__ContextSymbol21, (___index21) => (new { \n        ___index21
    = ___index21,\n        __ContextSymbol21 = __ContextSymbol21\n        })));\n
    \       var __dummy = (v).Select((__ContextSymbol21, (___index21) => new { \n
    \       ___index21 = ___index21,\n        __ContextSymbol21 = __ContextSymbol21\n
    \       });\n        var __dummy2 = (z).Where(((z_i) => (((z_i.___index21) % (2L))
    == (0L))));\n        var __dummy3 = (__dummy2).Select(((z_i) => (z_i.__ContextSymbol21)));\n
    \       var a = (__dummy3).Sum();\n        return a;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0qh_hp0e.cs(22,11): error CS1026: ) expected

    '
  timestamp: 1659976788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long ret = 0L;\n        long __a = 0L;\n        __a
    = 0L;\n        while (__a < lst.Count) {\n            if (__a % 2L == 1L && lst[(int)__a]
    % 2L == 0L) {\n                ret = ret + lst[(int)__a];\n            }\n            __a
    = __a + 1L;\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long ans = 0L;\n        for (long i = 0L;
    i < lst.Count; i += 1L) {\n            if (lst[(int)i] % 2L == 0L && i % 2L ==
    1L) {\n                ans += lst[(int)i];\n            }\n        }\n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long res = 0L;\n        for (long it = 0L;
    it < lst.Count; it++) {\n            if (it % 2L == 1L) {\n                if
    (lst[(int)it] % 2L == 0L) {\n                    res += lst[(int)it];\n                }\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))
    == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,
    (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a non-empty list of integers lst. add the even elements
    that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new
    long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static
    long Add(List<long> lst) {\n        long r = 0L;\n        foreach (long v in lst)
    {\n            if (v % 2L == 0L) {\n                r += v;\n            }\n        }\n
    \       return r;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new
    List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))
    == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,
    (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,
    (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <994b0d9184b34bba880465416f0b900f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <994b0d9184b34bba880465416f0b900f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976788
