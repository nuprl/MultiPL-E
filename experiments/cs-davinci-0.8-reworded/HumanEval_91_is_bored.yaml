name: HumanEval_91_is_bored
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You'll be given a string of words, and your task is to count\
  \ the number\n    // of boredoms. A boredom is a sentence that starts with the word\
  \ \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n\
  \    // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The sky\
  \ is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public\
  \ static long IsBored(string S) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"\
  Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n\
  \    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"\
  bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.\
  \ will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for\
  \ a walk\")) == (0L));\n    }\n\n}\n"
completions: ["        // Python's str.split() only accepts a single character. \n\
    \        var s = S.Split(new char[] { '.', '?', '!' });\n        return s.Count(x\
    \ => x.StartsWith(\"I\"));", "        long cnt = 0;\n        int state = 0;\n\
    \        for (int i = 0; i < S.Length; i++) {\n            if (state == 0) {\n\
    \                if (S[i] == 'I') {\n                    state = 1;\n        \
    \        }\n            } else if (state == 1) {\n                if (S[i] ==\
    \ ' ') {\n                    state = 2;\n                } else {\n         \
    \           state = 0;\n                }\n            } else if (state == 2)\
    \ {\n                if (S[i] == ' ') {\n                    continue;\n     \
    \           } else if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n        \
    \            cnt++;\n                    state = 0;\n                } else {\n\
    \                    state = 0;\n                }\n            }\n        }\n\
    \        return cnt;", "        int boredoms = 0;\n        bool statement = false;\n\
    \        bool sentence = false;\n        for (int i = 0; i < S.Length; i++) {\n\
    \            if (statement) {\n                if (S[i] == '.' || S[i] == '?'\
    \ || S[i] == '!') {\n                    statement = false;\n                \
    \    sentence = false;\n                }\n            } else {\n            \
    \    if (S[i] == 'I') {\n                    if (sentence) {\n               \
    \         boredoms++;\n                    }\n                    statement =\
    \ true;\n                } else if (S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n                    sentence = true;\n                }\n            }\n\
    \        }\n        return boredoms;", "        var boredom = 0L;\n        var\
    \ sentence = string.Empty;\n        foreach (var c in S) {\n            if (\"\
    !?.\".Contains(c)) {\n                if (sentence.StartsWith(\"I\"))\n      \
    \              boredom++;\n                sentence = string.Empty;\n        \
    \    } else {\n                sentence += c;\n            }\n        }\n    \
    \    return boredom;", "        // ...\n        return -1;", "        var ret\
    \ = 0L;\n        var list = S.Split('.', '?', '!');\n        foreach (var item\
    \ in list) {\n            if (item.Trim().StartsWith(\"I\")) {\n             \
    \   ret++;\n            }\n        }\n        return ret;", "        return S.Split(new\
    \ char[] { '.', '?', '!' }).Count(s => s.Trim().StartsWith(\"I \"));", "     \
    \   var boredoms = 0L;\n        var sentences = S.Split(new [] {'.', '?', '!'},\
    \ StringSplitOptions.RemoveEmptyEntries);\n        foreach (var sentence in sentences)\
    \ {\n            if (sentence.StartsWith(\"I\")) {\n                boredoms++;\n\
    \            }\n        }\n        return boredoms;", "        var boredoms =\
    \ S.Split('.', '?', '!');\n        return boredoms.Count(s => s.StartsWith(\"\
    I\"));", "        //split string by '.', '?' or '!' and count the number of sentences\n\
    \        //that start with \"I\"\n        return S.Split(new string[] { \".\"\
    , \"?\", \"!\" }, StringSplitOptions.None)\n                .Where(x => x.StartsWith(\"\
    I\"))\n                .Count();", "        // Place your code here\n        long\
    \ result = 0;\n        char[] delimiterChars = { '.', '?', '!' };\n        string[]\
    \ sentences = S.Split(delimiterChars);\n        foreach (string sentence in sentences)\
    \ {\n            if (sentence.StartsWith(\"I\")) {\n                result++;\n\
    \            }\n        }\n        return result;", "        // Your code goes\
    \ here.\n        return 0L;", "        var split = S.Split(new char[] { '.', '?',\
    \ '!' }, StringSplitOptions.RemoveEmptyEntries);\n        return split.Count(s\
    \ => s.Trim().StartsWith(\"I\"));", "        var s = S.Split(new char[] { ' ',\
    \ '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries);\n        return s.Count(x\
    \ => x == \"I\");", "        return S.Count(x => x == 'I');", "        int boredoms\
    \ = 0;\n        bool isBored = false;\n        string[] sentences = S.Split(new\
    \ char[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries);\n        for\
    \ (int i = 0; i < sentences.Length; i++) {\n            string[] words = sentences[i].Split(new\
    \ char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n            if (words.Length\
    \ > 0 && words[0] == \"I\") {\n                boredoms++;\n            }\n  \
    \      }\n        return boredoms;", "        long result = 0;\n        var tokens\
    \ = S.Split(new char[] { '.', '?', '!' });\n        foreach (var token in tokens)\
    \ {\n            if (token.Length > 0 && token[0] == 'I') {\n                result++;\n\
    \            }\n        }\n        return result;", "        long ans = 0;\n \
    \       foreach (var s in S.Split('.', '?', '!')) {\n            var t = s.Trim().Split('\
    \ ');\n            if (t.Length > 0 && t[0] == \"I\") ans++;\n        }\n    \
    \    return ans;", "        var words = S.Split('.', '?', '!');\n        return\
    \ words.Count(w => w.StartsWith(\"I \"));", "        return S.Split(new char[]\
    \ { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries).Count(x => x.Trim().StartsWith(\"\
    I\"));", "        string[] words = S.Split(' ');\n        int count = 0;\n   \
    \     foreach (string word in words) {\n            if (word == \"I\") {\n   \
    \             count++;\n            }\n        }\n        return count;", "  \
    \      return S.Split(new char[] { '.', '?', '!' }).Where(x => x.TrimStart().StartsWith(\"\
    I\")).Count();", "        // Clear all white space\n        S = S.Replace(\" \"\
    , \"\");\n        // Split on periods, question marks, and exclamation points.\n\
    \        // If the first character is an I, that's a boredom.\n        var sentences\
    \ = S.Split(new char[] { '.', '?', '!' });\n        var ct = 0;\n        foreach\
    \ (var sentence in sentences) {\n            if (sentence[0] == 'I') {\n     \
    \           ct++;\n            }\n        }\n        return ct;", "        long\
    \ cnt = 0;\n        var words = S.Split(new [] {' ', '.', '?', '!'}, StringSplitOptions.RemoveEmptyEntries);\n\
    \        for (int i = 0; i < words.Length; i++) {\n            if (words[i] ==\
    \ \"I\") {\n                cnt++;\n            }\n        }\n        return cnt;",
  "        long Bored = 0;\n        // Split string by sentences\n        string[]\
    \ sentences = S.Split(new char[] { '.', '?', '!' });\n        foreach (string\
    \ sentence in sentences) {\n            string[] words = sentence.Split(' ');\n\
    \            // First word is I, count as bored\n            if (words[0] == \"\
    I\")\n                Bored++;\n        }\n        return Bored;", "        var\
    \ boredoms = 0L;\n        var sentence = string.Empty;\n        foreach (var c\
    \ in S) {\n            if (c == '.' || c == '?' || c == '!') {\n             \
    \   var words = sentence.Split(' ');\n                if (words.Length > 0 &&\
    \ words[0] == \"I\") {\n                    boredoms++;\n                }\n \
    \               sentence = string.Empty;\n            } else {\n             \
    \   sentence += c;\n            }\n        }\n        return boredoms;", "   \
    \     long boredoms = 0;\n        string[] sentences = S.Split(new char[] { '.',\
    \ '?', '!' });\n        foreach (string sentence in sentences) {\n           \
    \ // sentences[i] = sentences[i].Trim();\n            if (sentence.Trim().StartsWith(\"\
    I\")) {\n                boredoms++;\n            }\n        }\n        return\
    \ boredoms;", "        long n = 0;\n        for (int i = 0; i < S.Length; i++)\
    \ {\n            if (S[i] == 'I') {\n                while (i < S.Length && S[i]\
    \ != '.' && S[i] != '?' && S[i] != '!')\n                    i++;\n          \
    \      n++;\n            }\n        }\n        return n;", "        // Write your\
    \ code here\n        int num = 0;\n        int index = 0;\n        while (index\
    \ != -1) {\n            index = S.IndexOf(\"I\", index);\n            if (index\
    \ != -1) {\n                num++;\n                index += 1;\n            }\n\
    \        }\n        return num;", "        long count = 0;\n        S = S.ToLower();\n\
    \        string[] boredoms = S.Split(new char[] { '.', '?', '!' });\n        for\
    \ (int i = 0; i < boredoms.Length; i++) {\n            string[] words = boredoms[i].Split('\
    \ ');\n            if (words.Length > 0 && words[0] == \"i\") {\n            \
    \    count++;\n            }\n        }\n        return count;", "        return\
    \ S.Split(new [] {'.', '?', '!'}, StringSplitOptions.RemoveEmptyEntries)\n   \
    \         .Count(l => l.StartsWith(\"I\"));", "        int N = S.Length;\n   \
    \     long numI = 0;\n        for (int i = 0; i < N; i++) {\n            // Skip\
    \ the letter\n            i++;\n            if (i == N) {\n                return\
    \ numI;\n            }\n            char c = S[i];\n            if (c == ' ')\
    \ {\n                continue;\n            }\n            if (c == 'i' || c ==\
    \ 'I') {\n                numI++;\n            }\n            while (i < N &&\
    \ S[i] != ' ' && S[i] != '.' && S[i] != '?' && S[i] != '!') {\n              \
    \  i++;\n            }\n        }\n        return numI;", '        return 0;',
  "        // TODO: Please solve the problem here\n        string[] words = S.Split(new\
    \ char[] { '.', '?', '!' });\n        long boredoms = 0;\n        foreach (string\
    \ word in words) {\n            if (word.StartsWith(\"I\")) {\n              \
    \  boredoms++;\n            }\n        }\n        return boredoms;", "       \
    \ var boredoms = 0L;\n        var words = S.Split('.', '?', '!');\n        for\
    \ (var i = 0; i < words.Length; i++) {\n            var word = words[i];\n   \
    \         if (word.StartsWith(\"I \")) {\n                boredoms++;\n      \
    \      }\n        }\n        return boredoms;", "        int n = S.Length;\n \
    \       int boredoms = 0;\n        bool startedSentence = false;\n        for\
    \ (int i = 0; i < n; i++) {\n            var c = S[i];\n            if (c == '.'\
    \ || c == '?' || c == '!') {\n                startedSentence = false;\n     \
    \       } else if (c == 'I') {\n                if (!startedSentence) {\n    \
    \                boredoms++;\n                }\n                startedSentence\
    \ = true;\n            }\n        }\n        return boredoms;", "        return\
    \ S.Split('!', '.', '?').Count(x => x.StartsWith(\"I\"));", "        if (S ==\
    \ null)\n            return 0;\n        int boring = 0;\n        for (int i =\
    \ 0; i < S.Length; i++) {\n            if (S[i] == 'I') {\n                int\
    \ j = i + 1;\n                while (j < S.Length && S[j] != '?' && S[j] != '.'\
    \ && S[j] != '!')\n                    j++;\n                boring++;\n     \
    \           i = j;\n            }\n        }\n        return boring;", "     \
    \   int count = 0;\n        string[] sentences = S.Split(new char[] { '.', '?',\
    \ '!' });\n        foreach (string sentence in sentences) {\n            if (sentence.Trim().StartsWith(\"\
    I\")) {\n                count++;\n            }\n        }\n        return count;",
  "        // Add your code here\n        return 0;", "        long count = 0;\n \
    \       string[] sentences = S.Split(new char[] { '.', '?', '!' });\n        foreach\
    \ (string sentence in sentences) {\n            string[] words = sentence.Split('\
    \ ');\n            if (words.Length > 0 && words[0] == \"I\") {\n            \
    \    count++;\n            }\n        }\n        return count;", "        int\
    \ boring = 0;\n        bool isBoring = false;\n        foreach (char c in S) {\n\
    \            if (c == '.' || c == '?' || c == '!') {\n                isBoring\
    \ = false;\n            } else if (c == 'I') {\n                isBoring = true;\n\
    \            } else if (isBoring && c == ' ') {\n                boring++;\n \
    \               isBoring = false;\n            }\n        }\n        return boring;",
  "        var numBoredoms = 0L;\n        var words = S.Split(new[] {' ', '.', '?',\
    \ '!'});\n        foreach (var word in words) {\n            if (word == \"I\"\
    ) {\n                numBoredoms++;\n            }\n        }\n        return\
    \ numBoredoms;", '        return 0;', "        long count = 0;\n        string[]\
    \ sentences = S.Split(new char[] { '.', '?', '!' });\n        foreach (string\
    \ sentence in sentences) {\n            string[] words = sentence.Split(new char[]\
    \ { ' ' });\n            if (words.Length > 0 && words[0] == \"I\") {\n      \
    \          count++;\n            }\n        }\n        return count;", "     \
    \   int count = 0;\n        foreach (string sentence in S.Split('.', '?', '!'))\
    \ {\n            if (sentence.StartsWith(\"I\")) {\n                count++;\n\
    \            }\n        }\n        return count;", "        return S.Split(new\
    \ char[] { '.', '?', '!' }).Where(x => x.Trim().StartsWith(\"I\")).Count();",
  "        // Iterate over the characters in the string, keeping track of the number\n\
    \        // of boredoms you've seen so far.\n        //\n        // Python 2:\n\
    \        // S = bytearray(S)\n        //\n        // Python 3:\n        // S =\
    \ S.encode('ascii')\n        // S = bytes(S)\n        //\n        // C++:\n  \
    \      // bytes S = bytes_from_string(S);\n        //\n        // C#:\n      \
    \  // byte[] S = System.Text.Encoding.ASCII.GetBytes(S);\n        //\n       \
    \ long count = 0;\n        bool seen_word = false;\n        for (long i = 0; i\
    \ < S.Length; i++) {\n            byte c = (byte)S[(int)i];\n            if (seen_word)\
    \ {\n                if (c == '!' || c == '?' || c == '.') {\n               \
    \     seen_word = false;\n                }\n            } else {\n          \
    \      if (c == 'I') {\n                    count++;\n                    seen_word\
    \ = true;\n                }\n            }\n        }\n        return count;",
  "        var count = 0L;\n        var sentences = S.Split(new char[] { '.', '?',\
    \ '!' });\n        foreach (var sentence in sentences) {\n            var words\
    \ = sentence.Split(new char[] { ' ' });\n            if (words.Length > 0 && words[0]\
    \ == \"I\") {\n                count++;\n            }\n        }\n        return\
    \ count;", "        // Type your code here.\n        var sentences = S.Split(new[]\
    \ { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries);\n        return sentences.Count(s\
    \ => s.StartsWith(\"I\"));", "        // S is a string\n        long count = 0;\n\
    \        // split sentence into a list\n        List<string> sentence = S.Split('.',\
    \ '?', '!').ToList();\n        // for each sentence check if it starts with I.\
    \ Use trim to get rid of the whitespace\n        foreach (string s in sentence)\
    \ {\n            if (s.Trim().StartsWith(\"I\")) {\n                count++;\n\
    \            }\n        }\n        return count;", "        // Split the string\
    \ by '.', '?' or '!'\n        var sentences = S.Split(new char[] { '.', '?', '!'\
    \ }, StringSplitOptions.RemoveEmptyEntries);\n        // Count the number of sentences\
    \ that start with \"I\"\n        return sentences.Count(s => s.Trim().StartsWith(\"\
    I\"));", "        var words = S.Split(new char[] { ' ', '.', '?', '!' });\n  \
    \      var count = 0L;\n        foreach (var word in words) {\n            if\
    \ (word == \"I\") {\n                count++;\n            }\n        }\n    \
    \    return count;", "        if (S == null) return 0;\n        int bored = 0;\n\
    \        foreach (string s in S.Split('.', '?', '!')) {\n            if (s.Trim().StartsWith(\"\
    I\")) {\n                bored++;\n            }\n        }\n        return bored;",
  "        var count = 0L;\n        var words = S.Split(new char[] { '.', '?', '!'\
    \ }, StringSplitOptions.RemoveEmptyEntries);\n        foreach (var word in words)\
    \ {\n            var wordAsList = word.Split(' ').ToList();\n            if (wordAsList.Count\
    \ > 0 && wordAsList[0] == \"I\") {\n                count++;\n            }\n\
    \        }\n        return count;", "        long boredoms = 0;\n        string[]\
    \ sentences = S.Split(new char[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        foreach (string sentence in sentences) {\n            if (sentence.TrimStart().StartsWith(\"\
    I\")) {\n                boredoms++;\n            }\n        }\n        return\
    \ boredoms;", "        return S.Split('.', '?', '!').Count(s => s.TrimStart().StartsWith(\"\
    I\"));", "        return  S.Split(new char[] { '.', '?', '!' },\n            \
    \             StringSplitOptions.RemoveEmptyEntries)\n                     .Count(s\
    \ => s.TrimStart().StartsWith(\"I\"));", "        int lastI = -1;\n        long\
    \ boredoms = 0;\n        for (int i = 0; i < S.Length; i++) {\n            if\
    \ (S[i] == 'I') {\n                if (lastI != -1) {\n                    boredoms\
    \ += 1;\n                }\n                lastI = i;\n            } else if\
    \ (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n                lastI = -1;\n\
    \            }\n        }\n        return boredoms;", "        var boredoms =\
    \ S.ToLower().Split(new char[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        return boredoms.Count(s => s.Trim().StartsWith(\"i\"));", "        var\
    \ b = 0L;\n        var i = 0;\n        while (i < S.Length) {\n            if\
    \ (S[i] == 'I') {\n                b++;\n                i++;\n              \
    \  while (i < S.Length && S[i] != '.' && S[i] != '?' && S[i] != '!') {\n     \
    \               i++;\n                }\n            }\n            i++;\n   \
    \     }\n        return b;", "        var boredoms = new List<string>();\n   \
    \     var sentences = S.Split(new[] {'.', '?', '!'}, StringSplitOptions.RemoveEmptyEntries);\n\
    \        var boredomsCount = 0;\n        foreach (var sentence in sentences) {\n\
    \            var words = sentence.Split(' ');\n            if (words[0] == \"\
    I\") {\n                boredomsCount++;\n            }\n        }\n        return\
    \ boredomsCount;", "        // Use split to separate the sentences.\n        //\
    \ Use count to count the number of times 'I' starts a sentence.\n        return\
    \ 0;", "        long num = 0;\n        string[] arr = S.Split(new char[] { '.',\
    \ '?', '!' }, StringSplitOptions.RemoveEmptyEntries);\n        foreach (string\
    \ str in arr) {\n            string[] words = str.Split(' ');\n            if\
    \ (words[0] == \"I\") {\n                num++;\n            }\n        }\n  \
    \      return num;", "        long boredoms = 0;\n        bool isBored = false;\n\
    \        for (int i = 0; i < S.Length; i++) {\n            if (S[i] == 'I') {\n\
    \                isBored = true;\n            }\n            if (S[i] == '.' ||\
    \ S[i] == '?' || S[i] == '!') {\n                if (isBored) {\n            \
    \        boredoms++;\n                }\n                isBored = false;\n  \
    \          }\n        }\n        return boredoms;", "        // your solution\
    \ here\n        long count = 0;\n        var sentences = S.Split(new char[] {\
    \ '.', '?', '!' });\n        foreach (var sentence in sentences) {\n         \
    \   if (sentence.Trim().StartsWith(\"I\")) {\n                count++;\n     \
    \       }\n        }\n        return count;", "        string[] words = S.Split('.',\
    \ '?', '!');\n        long boredoms = 0;\n        foreach (string word in words)\
    \ {\n            if (word.StartsWith(\"I\")) {\n                boredoms++;\n\
    \            }\n        }\n        return boredoms;", "        return (long)S.Split(new[]\
    \ { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries).Count(x => x.TrimStart().StartsWith(\"\
    I\"));", "        //Split sentences\n        string[] sentence = S.Split(new char[]\
    \ { '.', '?', '!' });\n        //Iterate through sentences and look for \"I\"\
    \ at the beginning of each sentence\n        long boredoms = 0;\n        foreach\
    \ (string s in sentence) {\n            if (s.Length > 0 && s[0] == 'I') {\n \
    \               boredoms++;\n            }\n        }\n        return boredoms;",
  "        long result = 0;\n        S = S.ToLower();\n        bool b = false;\n \
    \       for (int i = 0; i < S.Length; i++) {\n            if (S[i] == 'i') {\n\
    \                b = true;\n            }\n            if (S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n                if (b) {\n                    result++;\n\
    \                }\n                b = false;\n            }\n        }\n   \
    \     return result;", "        int count = 0;\n        string[] sentences = S.Split(new\
    \ char[] { '.', '?', '!' });\n        foreach (string s in sentences) {\n    \
    \        if (s.Trim().ToLower().StartsWith(\"i\"))\n                count++;\n\
    \        }\n        return count;", "        int boredoms = 0;\n        bool isBored\
    \ = false;\n        for (int i = 0; i < S.Length; i++) {\n            char c =\
    \ S[i];\n            if (c == '.' || c == '?' || c == '!') {\n               \
    \ isBored = false;\n            } else if (c == 'I') {\n                if (i\
    \ == 0 || S[i - 1] == '.' || S[i - 1] == '?' || S[i - 1] == '!') {\n         \
    \           isBored = true;\n                }\n            } else if (isBored)\
    \ {\n                if (c != ' ') {\n                    boredoms++;\n      \
    \              isBored = false;\n                }\n            }\n        }\n\
    \        return boredoms;", "        int boredoms = 0;\n        string[] split\
    \ = S.Split(new char[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        foreach (string s in split) {\n            if (s.TrimStart().StartsWith(\"\
    I\")) {\n                boredoms++;\n            }\n        }\n        return\
    \ boredoms;", "        // Split S into words.\n        var words = S.Split(new\
    \ char[] { ' ', '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries);\n   \
    \     var count = 0L;\n        for (int i = 0; i < words.Length; i++) {\n    \
    \        if (words[i] == \"I\") {\n                count++;\n            }\n \
    \       }\n        return count;", "        var split = S.Split(new[] {'.', '?',\
    \ '!'}, StringSplitOptions.RemoveEmptyEntries);\n        return split.Count(s\
    \ => s.TrimStart().StartsWith(\"I\"));", "        return S.Split('.', '?', '!').Count(s\
    \ => s.TrimStart().StartsWith(\"I\"));", "        var count = 0L;\n        var\
    \ words = S.Split(new char[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        foreach (var word in words) {\n            if (word.StartsWith(\"I\"\
    ))\n                count++;\n        }\n        return count;", "        long\
    \ result = 0;\n        int l = S.Length;\n        for (int i = 0; i < l; ++i)\
    \ {\n            if (S[i] == 'I') {\n                ++result;\n             \
    \   for (; i < l; ++i) {\n                    if (S[i] == '.' || S[i] == '?' ||\
    \ S[i] == '!') {\n                        break;\n                    }\n    \
    \            }\n            }\n        }\n        return result;", "        var\
    \ Ss = S.Split(new char[] { '.', '?', '!' });\n        var boredoms = 0L;\n  \
    \      foreach (var s in Ss) {\n            if (s.StartsWith(\"I \")) {\n    \
    \            boredoms++;\n            }\n        }\n        return boredoms;",
  "        // Code goes here\n        return 0;", "        // Write your code here\n\
    \        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n      \
    \  string[] sentences = S.Split(new[] { '.', '?', '!' });\n        long count\
    \ = 0;\n        foreach (string sen in sentences) {\n            if (sen.StartsWith(\"\
    I\")) {\n                count++;\n            }\n        }\n        return count;",
  "        int cnt = 0;\n        var parts = S.Split('.', '?', '!');\n        foreach\
    \ (var part in parts) {\n            if (part.Trim().StartsWith(\"I\")) {\n  \
    \              cnt++;\n            }\n        }\n        return cnt;", "     \
    \   long boredoms = 0;\n        int prev = 0;\n        while (true) {\n      \
    \      int first = S.IndexOf(\"I\", prev);\n            if (first == -1) {\n \
    \               break;\n            }\n            int next = S.IndexOf(\".\"\
    , first);\n            if (next == -1) {\n                next = S.IndexOf(\"\
    ?\", first);\n            }\n            if (next == -1) {\n                next\
    \ = S.IndexOf(\"!\", first);\n            }\n            if (next == -1) {\n \
    \               boredoms += 1;\n                break;\n            }\n      \
    \      boredoms += 1;\n            prev = next + 1;\n        }\n        return\
    \ boredoms;", "        // Your code here.\n        return 0L;", "        string[]\
    \ sentences = S.Split(new char[] { '.', '?', '!' });\n        return sentences.Select(x\
    \ => x.Trim()).Where(x => x.StartsWith(\"I\")).Count();", "        var boredoms\
    \ = 0L;\n        var sentenceStart = 0;\n        for (var i = 0; i < S.Length;\
    \ i++) {\n            switch (S[i]) {\n                case '.':\n           \
    \     case '?':\n                case '!':\n                    if (i > sentenceStart\
    \ && S[sentenceStart] == 'I') {\n                        boredoms++;\n       \
    \             }\n                    sentenceStart = i + 1;\n                \
    \    break;\n            }\n        }\n        if (sentenceStart < S.Length &&\
    \ S[sentenceStart] == 'I') {\n            boredoms++;\n        }\n        return\
    \ boredoms;", "        long result = 0;\n        bool isBored = false;\n     \
    \   foreach (char c in S) {\n            switch (c) {\n                case '.':\n\
    \                case '?':\n                case '!':\n                    if\
    \ (isBored) {\n                        result++;\n                    }\n    \
    \                isBored = false;\n                    break;\n              \
    \  case ' ':\n                    break;\n                default:\n         \
    \           if (c == 'I') {\n                        isBored = true;\n       \
    \             } else {\n                        isBored = false;\n           \
    \         }\n                    break;\n            }\n        }\n        return\
    \ result;", "        return S.Split('.', '?', '!').Count(s => s.Trim().StartsWith(\"\
    I\"));", "        if (S.Length == 0) {\n            return 0;\n        }\n   \
    \     long res = 0;\n        int i = 0;\n        bool bored = false;\n       \
    \ while (i < S.Length) {\n            if (bored) {\n                if (S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!') {\n                    bored = false;\n \
    \               }\n            } else {\n                if (S[i] == 'I') {\n\
    \                    res++;\n                    bored = true;\n             \
    \   }\n            }\n            i++;\n        }\n        return res;", "   \
    \     var i = 0;\n        while (i < S.Length && S[i] != 'I') {\n            ++i;\n\
    \        }\n        if (i == S.Length) return 0;\n        var boredoms = 1;\n\
    \        while (i < S.Length) {\n            ++i;\n            while (i < S.Length\
    \ && S[i] != '.' && S[i] != '?' && S[i] != '!') {\n                ++i;\n    \
    \        }\n            while (i < S.Length && S[i] != 'I') {\n              \
    \  ++i;\n            }\n            if (i < S.Length) {\n                ++boredoms;\n\
    \            }\n        }\n        return boredoms;", "        long Boredoms =\
    \ 0;\n        string Last = \"\";\n        foreach (string Word in S.Split(' ',\
    \ '.', '?', '!')) {\n            if (Last == \"I\")\n                Boredoms++;\n\
    \            Last = Word;\n        }\n        return Boredoms;", "        long\
    \ cnt = 0;\n        var substrings = S.Split(new [] {'.', '?', '!'});\n      \
    \  foreach (var substring in substrings) {\n            if (substring.Trim().StartsWith(\"\
    I\")) {\n                cnt++;\n            }\n        }\n        return cnt;",
  "        return S.Split('.', '?', '!').Count(x => x.Trim().StartsWith(\"I\"));",
  "        long boredoms = 0;\n        for (int i = 0; i < S.Length; i++) {\n    \
    \        if (S[i] == 'I') {\n                boredoms++;\n            }\n    \
    \    }\n        return boredoms;", "        var sc = new Scanner(S);\n       \
    \ long boredoms = 0;\n        while (sc.HasNext()) {\n            if (sc.Next().Equals(\"\
    I\")) {\n                boredoms++;\n            }\n        }\n        return\
    \ boredoms;", "        return S.Split(new char[] { '.', '?', '!' }).Where(x =>\
    \ x.StartsWith(\"I\")).Count();", "        long boredoms = 0;\n        List<string>\
    \ sentences = new List<string>();\n        char[] delimiters = { '.', '?', '!'\
    \ };\n        foreach (string sentence in S.Split(delimiters)) {\n           \
    \ sentences.Add(sentence);\n        }\n        foreach (string sentence in sentences)\
    \ {\n            List<string> words = new List<string>();\n            words.AddRange(sentence.Split('\
    \ '));\n            if (words.Count > 0 && words[0] == \"I\") {\n            \
    \    boredoms++;\n            }\n        }\n        return boredoms;", "     \
    \   var bs = 0L;\n        var start = 0;\n        while (start < S.Length) {\n\
    \            var end = S.IndexOfAny(new char[] { '.', '?', '!' }, start);\n  \
    \          if (end == -1)\n                end = S.Length;\n            var word\
    \ = S.Substring(start, end - start).Trim();\n            if (word.StartsWith(\"\
    I\"))\n                bs++;\n            start = end + 1;\n        }\n      \
    \  return bs;", "        // Enter your code here!\n        var tmp = S.Split(new\
    \ char[] { '.', '?', '!' });\n        long boredoms = 0;\n        foreach (var\
    \ i in tmp) {\n            if (i.TrimStart().StartsWith(\"I\"))\n            \
    \    boredoms++;\n        }\n        return boredoms;", "        return S.Split('.',\
    \ '?', '!').Where(x => x.Trim().StartsWith(\"I\")).Count();", "        long boredoms\
    \ = 0;\n        foreach (string sentence in S.Split(new[] { '.', '?', '!' }))\
    \ {\n            if (sentence.StartsWith(\"I\")) {\n                boredoms++;\n\
    \            }\n        }\n        return boredoms;", "        // Write your code\
    \ here\n        long s = 0;\n        string[] arr = S.Split(new char[] { '.',\
    \ '?', '!' });\n        foreach (string st in arr) {\n            if (st.Length\
    \ > 0 && st[0] == 'I') {\n                s++;\n            }\n        }\n   \
    \     return s;", "        long boredoms = 0;\n        string[] tokens = S.Split(new\
    \ char[] { ' ', '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries);\n   \
    \     for (int i = 0; i < tokens.Length; i++) {\n            if (tokens[i] ==\
    \ \"I\") {\n                boredoms++;\n            }\n        }\n        return\
    \ boredoms;", "        if (string.IsNullOrEmpty(S)) {\n            return 0;\n\
    \        }\n        return S.Split(new char[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries)\n\
    \            .Select(sentence => sentence.TrimStart().StartsWith(\"I\") ? 1 :\
    \ 0)\n            .Sum();", '        return 0;', "        string[] sentences =\
    \ S.Split(new char[] { '.', '?', '!' });\n        long boredoms = 0;\n       \
    \ foreach (string sentence in sentences) {\n            if (sentence.TrimStart().StartsWith(\"\
    I\"))\n                boredoms++;\n        }\n        return boredoms;", "  \
    \      // Convert to lower case, then split the string into an array of sentences.\n\
    \        string[] sentences = S.ToLower().Split(new char[] { '.', '?', '!' });\n\
    \        long count = 0;\n        foreach (string sentence in sentences) {\n \
    \           if (sentence.StartsWith(\"i\")) {\n                count++;\n    \
    \        }\n        }\n        return count;", "        string[] split = S.Split(new\
    \ Char[] { '.', '?', '!' });\n        return split.Select(x => x.Trim()).Where(x\
    \ => x.StartsWith(\"I\")).Count();", "        // Split the string into words\n\
    \        var words = S.Split(new char[] { '.', '?', '!' });\n        // Count\
    \ how many times \"I\" is at the beginning of each word\n        long num = 0;\n\
    \        foreach (var word in words) {\n            if (word.Length > 0 && word[0]\
    \ == 'I') {\n                num++;\n            }\n        }\n        return\
    \ num;", "        var boredoms = 0L;\n        for (var i = 0; i < S.Length; i++)\
    \ {\n            var c = S[i];\n            if (i < S.Length - 1 && S[i + 1] ==\
    \ 'I') {\n                boredoms++;\n            }\n        }\n        return\
    \ boredoms;", "        return S.Split('.', '?', '!').Where(s => s.StartsWith(\"\
    I\")).Count();", "        // BEGIN_SOLUTION\n        return S.Split('.', '?',\
    \ '!').Count(x => x.TrimStart().StartsWith(\"I\"));\n        // END_SOLUTION",
  "        long c = 0;\n        string[] s = S.Split('.', '?', '!');\n        for\
    \ (int i = 0; i < s.Length; i++) {\n            if (s[i].StartsWith(\"I\")) {\n\
    \                c++;\n            }\n        }\n        return c;", "       \
    \ return S.Split(new char[] { '.', '?', '!' }).Count(s => s.StartsWith(\"I\"));",
  "        // Implement this function.\n        long count = 0;\n        string[]\
    \ sentences = S.Split(new char[] { '.', '?', '!' });\n        for (int i = 0;\
    \ i < sentences.Length; i++) {\n            if (sentences[i].Split(' ')[0] ==\
    \ \"I\") {\n                count++;\n            }\n        }\n        return\
    \ count;", "        char[] delimiters = { '.', '?', '!' };\n        var boredoms\
    \ = S.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n        return\
    \ boredoms.Count(x => x.Trim().StartsWith(\"I\"));", "        long count = 0;\n\
    \        bool first = true;\n        foreach (var item in S.Split('.', '?', '!'))\
    \ {\n            if (first) {\n                first = false;\n              \
    \  continue;\n            }\n            if (item.Trim().StartsWith(\"I\")) {\n\
    \                count++;\n            }\n        }\n        return count;", " \
    \       var boredoms = 0L;\n        var pos = 0;\n        var end = S.Length;\n\
    \        var newline = false;\n        while (pos < end) {\n            var ch\
    \ = S[pos];\n            if (ch == '\\n') {\n                newline = true;\n\
    \            } else if (ch == '.' || ch == '?' || ch == '!') {\n             \
    \   if (newline) {\n                    boredoms++;\n                }\n     \
    \           newline = false;\n            } else {\n                newline =\
    \ false;\n            }\n            pos++;\n        }\n        return boredoms;",
  "        long boredoms = 0;\n        string[] sentences = S.Split(new char[] { '.',\
    \ '?', '!' }, StringSplitOptions.RemoveEmptyEntries);\n        foreach (string\
    \ sentence in sentences) {\n            if (sentence.Trim().StartsWith(\"I\"))\n\
    \                boredoms++;\n        }\n        return boredoms;", "        long\
    \ boredoms = 0;\n        var words = S.Split(\"?.!\".ToCharArray(), StringSplitOptions.RemoveEmptyEntries);\n\
    \        foreach (var word in words) {\n            if (word.StartsWith(\"I\"\
    )) {\n                boredoms++;\n            }\n        }\n        return boredoms;",
  "        string[] sentences = S.Split(new char[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        long result = 0;\n        foreach (string sentence in sentences) {\n\
    \            string[] words = sentence.Split(' ');\n            if (words.Length\
    \ > 0 && words[0] == \"I\") {\n                result++;\n            }\n    \
    \    }\n        return result;", "        long count = 0;\n        string[] sentences\
    \ = S.Split(new[] { '.', '?', '!' });\n        foreach (string sentence in sentences)\
    \ {\n            string[] words = sentence.Split(new[] { ' ' });\n           \
    \ if (words.Length == 0) {\n                continue;\n            }\n       \
    \     if (words[0] == \"I\") {\n                count++;\n            }\n    \
    \    }\n        return count;", "        string[] sentences = S.Split(new string[]\
    \ { \".\" }, StringSplitOptions.None);\n        long numBoredoms = 0;\n      \
    \  foreach (string sentence in sentences) {\n            if (sentence.Trim().StartsWith(\"\
    I\")) {\n                numBoredoms++;\n            }\n        }\n        return\
    \ numBoredoms;", "        long boredoms = 0;\n        char[] delim = { '.', '?',\
    \ '!' };\n        string[] sentences = S.Split(delim);\n        foreach (string\
    \ sentence in sentences) {\n            if (sentence.Length > 0 && sentence[0]\
    \ == 'I') {\n                boredoms++;\n            }\n        }\n        return\
    \ boredoms;", "        return S.Split('.', '?', '!').Where(x => x.StartsWith(\"\
    I\")).Count();", "        // NOTE: S is the input string\n        // NOTE: Return\
    \ the number of bordoms.\n        return 0L;", "        int cnt = 0;\n       \
    \ bool flag = false;\n        for (int i = 0; i < S.Length; i++) {\n         \
    \   if (S[i] == 'I') {\n                flag = true;\n            }\n        \
    \    if (S[i] == '?' || S[i] == '.' || S[i] == '!') {\n                if (flag)\
    \ {\n                    cnt++;\n                }\n                flag = false;\n\
    \            }\n        }\n        return cnt;", "        // Your answer is here.\n\
    \        return 0;", "        // Implement the algorithm here\n        long count\
    \ = 0;\n        if (S == null)\n            return 0;\n        string[] arr =\
    \ S.Split(new Char[] { '.', '?', '!' });\n        for (int i = 0; i < arr.Length;\
    \ i++)\n        {\n            if (arr[i].StartsWith(\"I\"))\n               \
    \ count++;\n        }\n        return count;", "        // Type your code here\n\
    \        string[] strings = S.Split(' ', '.', '?', '!');\n        long count =\
    \ 0;\n        foreach (string word in strings) {\n            if (word == \"I\"\
    ) {\n                count++;\n            }\n        }\n        return count;",
  "        int boredoms = 0;\n        bool I = false;\n        bool questionMark =\
    \ false;\n        bool exclaimationMark = false;\n        bool fullStop = false;\n\
    \        bool startedWord = false;\n        bool isWord = false;\n        bool\
    \ firstWord = true;\n        foreach (char c in S) {\n            if (c == ' '\
    \ || c == '?' || c == '!' || c == '.') {\n                isWord = false;\n  \
    \              if (startedWord) {\n                    if (I) {\n            \
    \            I = false;\n                        boredoms++;\n               \
    \     }\n                    startedWord = false;\n                }\n       \
    \         if (c == '?') {\n                    questionMark = true;\n        \
    \        }\n                if (c == '!') {\n                    exclaimationMark\
    \ = true;\n                }\n                if (c == '.') {\n              \
    \      fullStop = true;\n                }\n            } else {\n           \
    \     if (!isWord) {\n                    isWord = true;\n                   \
    \ if (firstWord) {\n                        firstWord = false;\n             \
    \       } else {\n                        startedWord = true;\n              \
    \      }\n                }\n                if (!startedWord) {\n           \
    \         if (c == 'I') {\n                        I = true;\n               \
    \     } else {\n                        I = false;\n                    }\n  \
    \              }\n            }\n        }\n        return boredoms;", "     \
    \   return S.Split(new char[] { '.', '?', '!' }).Count(str => str.StartsWith(\"\
    I\"));", "        return S.ToLower().Split(new char[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries).Count(x\
    \ => x.Trim().StartsWith(\"i\"));", "        long b = 0;\n        foreach (string\
    \ sentence in S.Split('.', '?', '!')) {\n            if (sentence.TrimStart().StartsWith(\"\
    I\"))\n                b++;\n        }\n        return b;", "        string[]\
    \ words = S.Split('.', '?', '!');\n        long ret = 0;\n        foreach (string\
    \ word in words) {\n            if (word.StartsWith(\"I \")) {\n             \
    \   ret++;\n            }\n        }\n        return ret;", "        var count\
    \ = 0L;\n        var b = false;\n        for (var i = 0; i < S.Length; i++) {\n\
    \            if (S[i] == ' ')\n                b = false;\n            else if\
    \ (S[i] == 'I')\n                b = true;\n            else if (S[i] == '.' ||\
    \ S[i] == '?' || S[i] == '!') {\n                if (b) count++;\n           \
    \     b = false;\n            }\n        }\n        return count;", "        long\
    \ boredoms = 0;\n        string[] sentences = S.Split(new[] { '.', '?', '!' });\n\
    \        foreach (string s in sentences) {\n            // Use TrimEnd to remove\
    \ trailing spaces.\n            if (s.TrimEnd().StartsWith(\"I\")) {\n       \
    \         boredoms++;\n            }\n        }\n        return boredoms;", " \
    \       var boredoms = 0L;\n        var words = S.Split(new char[] { '.', '?',\
    \ '!' });\n        for (var w = 0; w < words.Length; w++) {\n            var words2\
    \ = words[w].Split(new char[] { ' ' });\n            if (words2.Length == 0) continue;\n\
    \            if (words2[0] == \"I\") boredoms++;\n        }\n        return boredoms;",
  "        string[] a = S.Split(new char[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        List<string> l = new List<string>();\n        foreach (string s in a)\n\
    \            l.Add(s.Trim());\n        return l.Where(x => x.StartsWith(\"I\"\
    )).Count();", "        // ... your code here\n        string[] sentences = S.Split(new\
    \ char[] { '.', '?', '!' });\n        long count = 0;\n        foreach (string\
    \ sentence in sentences) {\n            string trimmed = sentence.Trim();\n  \
    \          if (trimmed.Length > 0 && trimmed[0] == 'I') {\n                count++;\n\
    \            }\n        }\n        return count;", "        return S.Split(new\
    \ char[] { '.', '?', '!' }).Where(s => s.Trim().StartsWith(\"I\")).Count();",
  "        return S.Count(c => c == 'I');", "        long r = 0;\n        string[]\
    \ ss = S.Split('.','?','!');\n        for (int i = 0; i < ss.Length; i++) {\n\
    \            if (ss[i].StartsWith(\"I\")) {\n                r++;\n          \
    \  }\n        }\n        return r;", "        return S.Count(c => c == 'I');",
  '        return 0;', "        var count = 0L;\n        var sentences = S.Split(new\
    \ char[] { '.', '?', '!' });\n        foreach (var sentence in sentences) {\n\
    \            if (sentence.Length > 0 && sentence[0] == 'I') {\n              \
    \  count++;\n            }\n        }\n        return count;", "        // Implement\
    \ this function.\n        return 0L;", "        // split the sentence into words\
    \ using String.Split()\n        var words = S.Split(' ');\n        // now count\
    \ the number of words that start with 'I'\n        return words.Count(w => w.StartsWith(\"\
    I\"));", "        return S.Split('.', '?', '!').Count(s => s.TrimStart().StartsWith(\"\
    I\"));", "        // Split the string into words.\n        string[] words = S.Split(new\
    \ char[] { ' ', '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries);\n   \
    \     long boredoms = 0;\n        for (int i = 0; i < words.Length; i++) {\n \
    \           if (words[i] == \"I\") {\n                boredoms++;\n          \
    \  }\n        }\n        return boredoms;", "        long result = 0;\n      \
    \  int pos = 0;\n        while (pos < S.Length) {\n            if (S[pos] == 'I')\
    \ {\n                if (pos == 0 || S[pos - 1] == '.' || S[pos - 1] == '?' ||\
    \ S[pos - 1] == '!') {\n                    result += 1;\n                }\n\
    \            }\n            pos += 1;\n        }\n        return result;", " \
    \       // Split on \".\" \"?\" \"!\" into a list of sentences\n        var sentences\
    \ = new List<string>();\n        var c = new char[] { '.', '?', '!' };\n     \
    \   var words = S.Split(c);\n        foreach (var word in words) {\n         \
    \   sentences.Add(word);\n        }\n        // count number of sentences that\
    \ start with \"I\"\n        long boredoms = 0;\n        foreach (var sentence\
    \ in sentences) {\n            if (sentence.StartsWith(\"I\")) {\n           \
    \     boredoms++;\n            }\n        }\n        return boredoms;", "    \
    \    // your code goes here.\n        return 0L;", "        return S.Split(new[]\
    \ { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries)\n                \
    \ .Count(x => x.Trim().StartsWith(\"I\"));", "        return S.Split(new char[]\
    \ { '.', '?', '!' }).Select(s => s.Trim()).Where(s => s.StartsWith(\"I\")).Count();",
  "        long Boredoms = 0;\n        foreach (var x in S.Split('.', '?', '!')) {\n\
    \            if (x.Trim().StartsWith(\"I\")) {\n                Boredoms++;\n\
    \            }\n        }\n        return Boredoms;", "        var words = S.Split(new\
    \ char[] { ' ', '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries);\n   \
    \     var boredoms = 0L;\n        for (var i = 0; i < words.Length; i++) {\n \
    \           if (words[i] == \"I\") {\n                boredoms++;\n          \
    \  }\n        }\n        return boredoms;", '        return 0;', "        long\
    \ ret = 0;\n        for (int i = 0; i < S.Length; i++) {\n            if (S[i]\
    \ == 'I') {\n                ret++;\n            }\n            if (S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n                while (i < S.Length && S[i]\
    \ != ' ') {\n                    i++;\n                }\n            }\n    \
    \    }\n        return ret;", "        var arr = S.Split(new char[] { '.', '?',\
    \ '!' });\n        return arr.Where(i => i.StartsWith(\"I\")).Count();", "   \
    \     return S.Split(new char[] { '.', '?', '!' }).Count(s => s.Trim().StartsWith(\"\
    I\"));", "        var words = S.Split(new char[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        var boredoms = words.Where(w => w.StartsWith(\"I\")).Count();\n     \
    \   return boredoms;", "        // split at ., ? or !\n        List<string> sentences\
    \ = S.Split(new char[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries).ToList();\n\
    \        long boredoms = 0;\n        // loop through the sentences\n        foreach\
    \ (string s in sentences) {\n            // split the sentence at spaces, which\
    \ will be the words\n            List<string> words = s.Split(' ').ToList();\n\
    \            // if the first word is I, increment boredoms\n            if (words[0]\
    \ == \"I\") {\n                boredoms++;\n            }\n        }\n       \
    \ return boredoms;", "        // Start coding here!\n        long c = 0;\n   \
    \     string[] words = S.Split('.','?','!');\n        //for(long i = 0; i < words.Length;\
    \ i++) {\n        //    Console.WriteLine(words[i]);\n        //}\n        //Console.WriteLine(\"\
    words.Length = {0}\", words.Length);\n        for(long i = 0; i < words.Length;\
    \ i++) {\n            if(words[i].Trim().StartsWith(\"I \")) {\n             \
    \   c++;\n            }\n        }\n        return c;", "        long count =\
    \ 0;\n        string[] str = S.Split(new char[] { '.', '?', '!' });\n        for\
    \ (int i = 0; i < str.Length; i++) {\n            if (str[i].Trim().StartsWith(\"\
    I\")) {\n                count++;\n            }\n        }\n        return count;",
  "        // Write your code here\n        // Your answer will be the total boredom\
    \ (long).\n        long ans = 0;\n        foreach (string s in S.Split('.', '?',\
    \ '!')) {\n            if (s.StartsWith(\"I\")) ans++;\n        }\n        return\
    \ ans;", "        var count = 0L;\n        var words = S.Split('.', '?', '!');\n\
    \        foreach (var w in words) {\n            if (w.Trim().StartsWith(\"I \"\
    )) {\n                count++;\n            }\n        }\n        return count;",
  "        // YOUR CODE HERE\n        return 0;", "        // Your code goes here.\
    \ Feel free to define additional functions.\n        // S.Contains(@\"I.\");\n\
    \        long i = 0;\n        string[] sentences = S.Split(new char[] { '.', '?',\
    \ '!' });\n        for (int j = 0; j < sentences.Length; j++) {\n            if\
    \ (sentences[j].Contains(\"I\")) {\n                i++;\n            }\n    \
    \    }\n        return i;", "        return S.Split('.', '?', '!').Where(x =>\
    \ x.StartsWith(\"I\")).Count();", "        long count = 0;\n        // Convert\
    \ string to character array.\n        var chars = S.ToCharArray();\n        var\
    \ i = 0;\n        while (i < chars.Length) {\n            // Keep looping while\
    \ we haven't reached the end of the array\n            // and the current character\
    \ is a letter.\n            while (i < chars.Length && Char.IsLetter(chars[i]))\
    \ {\n                // If the character is an \"I\", we've found a boredom.\n\
    \                if (chars[i] == 'I') {\n                    count++;\n      \
    \          }\n                i++;\n            }\n            // While the current\
    \ character is not a letter, keep going until\n            // we reach the end\
    \ of the array or a letter.\n            while (i < chars.Length && !Char.IsLetter(chars[i]))\
    \ {\n                i++;\n            }\n        }\n        return count;", " \
    \       var sentences = S.Split('.', '?', '!');\n        var boredoms = 0;\n \
    \       foreach (var sentence in sentences) {\n            if (sentence.TrimStart().StartsWith(\"\
    I\")) {\n                boredoms++;\n            }\n        }\n        return\
    \ boredoms;", "        return S.Split('.', '?', '!').Count(x => x.Trim().StartsWith(\"\
    I\"));", "        long count = 0;\n        int index = 0;\n        while (index\
    \ != -1) {\n            index = S.IndexOf(\"I\", index + 1);\n            if (index\
    \ != -1) {\n                count++;\n            }\n        }\n        return\
    \ count;", "        var count = 0L;\n        var words = S.Split(' ', '.', '?',\
    \ '!');\n        foreach (var word in words) {\n            if (word == \"I\"\
    ) {\n                count++;\n            }\n        }\n        return count;",
  "        return S.Where(c => c == 'I').Count();", "        long result = 0;\n  \
    \      // TODO: implement this method.\n        // Hint: Use the .NET API to split\
    \ the sentence by '.', '?' or '!'\n        // Hint: Use the .NET API to convert\
    \ the sentence to lowercase\n        return result;", "        string[] s = S.Split(new\
    \ char[] { '.', '?', '!' });\n        long b = 0;\n        foreach (string st\
    \ in s) {\n            string[] w = st.Split(new char[] { ' ' });\n          \
    \  if (w.Length > 0 && w[0] == \"I\") {\n                b++;\n            }\n\
    \        }\n        return b;", "        long count = 0;\n        for (int i =\
    \ 0; i < S.Length; i++) {\n            if (S[i] == 'I') {\n                if\
    \ (i == 0 || S[i - 1] == '.' || S[i - 1] == '?' || S[i - 1] == '!') {\n      \
    \              count++;\n                }\n            }\n        }\n       \
    \ return count;", "        long result = 0;\n        List<string> sentences =\
    \ new List<string>();\n        string sentence = \"\";\n        for (int i = 0;\
    \ i < S.Length; i++) {\n            char c = S[i];\n            if (c == '.' ||\
    \ c == '?' || c == '!') {\n                sentences.Add(sentence);\n        \
    \        sentence = \"\";\n            } else {\n                sentence += c;\n\
    \            }\n        }\n        foreach (string s in sentences) {\n       \
    \     if (s[0] == 'I') {\n                result++;\n            }\n        }\n\
    \        return result;", "        long r = 0;\n        for (int i = 0; i < S.Length;\
    \ i++) {\n            if (S[i] == 'I') {\n                r++;\n            }\n\
    \            if (S[i] == '!' || S[i] == '.' || S[i] == '?') {\n              \
    \  while (i < S.Length && S[i] != ' ') {\n                    i++;\n         \
    \       }\n            }\n        }\n        return r;", "        long count =\
    \ 0;\n        string[] items = S.Split(new char[] { '.', '?', '!' });\n      \
    \  foreach (string item in items) {\n            string[] words = item.Split('\
    \ ');\n            if (words.Length > 0 && words[0] == \"I\")\n              \
    \  count++;\n        }\n        return count;", "        long boredoms = 0;\n\
    \        StringBuilder sb = new StringBuilder();\n        foreach (char c in S)\
    \ {\n            if (c == '!' || c == '?' || c == '.') {\n                if (sb.Length\
    \ > 0 && sb[0] == 'I') {\n                    boredoms++;\n                }\n\
    \                sb.Clear();\n            } else {\n                sb.Append(c);\n\
    \            }\n        }\n        return boredoms;", "        long result = 0;\n\
    \        int i = 0;\n        bool bored = false;\n        foreach (char c in S)\
    \ {\n            switch (c) {\n                case '.':\n                case\
    \ '?':\n                case '!':\n                    i = 0;\n              \
    \      bored = false;\n                    break;\n                case ' ':\n\
    \                    i++;\n                    break;\n                case 'I':\n\
    \                    if (i == 0) {\n                        result++;\n      \
    \                  bored = true;\n                    }\n                    i++;\n\
    \                    break;\n                default:\n                    if\
    \ (bored) {\n                        i++;\n                    }\n           \
    \         break;\n            }\n        }\n        return result;", "       \
    \ var count = 0L;\n        var index = 0;\n        var sb = new StringBuilder();\n\
    \        var tokens = new List<string>();\n        while (index < S.Length) {\n\
    \            var c = S[index];\n            sb.Append(c);\n            if (c ==\
    \ ' ' || c == '.' || c == '?' || c == '!') {\n                tokens.Add(sb.ToString());\n\
    \                sb.Clear();\n            }\n            index++;\n        }\n\
    \        tokens.Add(sb.ToString());\n        foreach (var token in tokens) {\n\
    \            if (token.Length == 0) {\n                continue;\n           \
    \ }\n            var c = token[0];\n            if (c == '.' || c == '?' || c\
    \ == '!') {\n                continue;\n            }\n            if (token.Contains(\"\
    \ I \")) {\n                count++;\n            }\n        }\n        return\
    \ count;", "        return S.Split(new[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries)\n\
    \            .Count(s => s.StartsWith(\"I\"));", "        long boredoms = 0;\n\
    \        foreach (var sentence in S.Split('.', '?', '!')) {\n            string[]\
    \ words = sentence.Split();\n            if (words.Length > 0 && words[0] == \"\
    I\") {\n                boredoms++;\n            }\n        }\n        return\
    \ boredoms;", "        // To complete the function, replace 'return 0L' with the\
    \ correct code.\n        return 0L;", "        if (string.IsNullOrEmpty(S)) {\n\
    \            return 0;\n        }\n        string[] sentences = S.Split(new char[]\
    \ { '.', '?', '!' });\n        return sentences.Where(sentence => sentence.Trim().StartsWith(\"\
    I\", StringComparison.OrdinalIgnoreCase)).Count();", "        // Here, S is a\
    \ string of length N. You can iterate over the characters\n        // of S as\
    \ follows:\n        //\n        // for (int i = 0; i < S.Length; i++) {\n    \
    \    //     Console.WriteLine(S[i]);\n        // }\n        int count = 0;\n \
    \       for (int i = 0; i < S.Length; i++) {\n            int j = i;\n       \
    \     while (j < S.Length && S[j] != '.' && S[j] != '?' && S[j] != '!')\n    \
    \            j++;\n            if (S.Substring(i, j - i).StartsWith(\"I \"))\n\
    \                count++;\n            i = j;\n        }\n        return count;",
  "        long count = 0;\n        string[] splitString = S.Split('.','?','!');\n\
    \        for (int i = 0; i < splitString.Length; i++) {\n            if (splitString[i].Trim().StartsWith(\"\
    I\")) {\n                count += 1;\n            }\n        }\n        return\
    \ count;", "        long count = 0;\n        // Note: We have to store a sentence\
    \ as a List, because strings are\n        // immutable.\n        List<string>\
    \ sentence = new List<string>();\n        // Split the string into words by using\
    \ the space as a delimiter.\n        // This will give us an array of words, which\
    \ we can convert to a list.\n        List<string> words = S.Split(' ').ToList();\n\
    \        // We can iterate over the list of words, and add each word to the\n\
    \        // current sentence.\n        foreach (string word in words) {\n    \
    \        sentence.Add(word);\n            // If we encounter a delimiter (ie a\
    \ '.', '?' or '!'), we can check\n            // if the first word in the sentence\
    \ is \"I\".\n            if (word.EndsWith(\".\") || word.EndsWith(\"?\") || word.EndsWith(\"\
    !\")) {\n                if (sentence[0] == \"I\") {\n                    count\
    \ += 1;\n                }\n                // Clear the sentence, since we're\
    \ starting a new one.\n                sentence.Clear();\n            }\n    \
    \    }\n        return count;", "        long boredom = 0;\n        for (int i\
    \ = 0; i < S.Length; i++) {\n            if (S[i] == 'I') {\n                boredom++;\n\
    \            }\n        }\n        return boredom;", "        long boredoms =\
    \ 0;\n        string[] sentences = S.Split(new char[] { '.', '?', '!' });\n  \
    \      foreach (string sentence in sentences) {\n            if (sentence.StartsWith(\"\
    I\")) {\n                boredoms++;\n            }\n        }\n        return\
    \ boredoms;", "        int bored = 0;\n        int len = S.Length;\n        int\
    \ pos = 0;\n        while (pos < len) {\n            int next = S.IndexOfAny(new\
    \ char[] { '.', '?', '!' }, pos);\n            if (next < 0) next = len;\n   \
    \         if (next > pos) {\n                if (S[pos] == 'I') bored++;\n   \
    \         }\n            pos = next + 1;\n        }\n        return bored;", " \
    \       int wordIndex = 0;\n        long boredoms = 0;\n        bool firstWord\
    \ = true;\n        bool inSentence = false;\n        while (wordIndex < S.Length)\
    \ {\n            if (S[wordIndex] == ' ' || S[wordIndex] == '.' || S[wordIndex]\
    \ == '?' || S[wordIndex] == '!') {\n                firstWord = true;\n      \
    \          if (S[wordIndex] == '.' || S[wordIndex] == '?' || S[wordIndex] == '!')\
    \ {\n                    inSentence = false;\n                }\n            }\
    \ else if (firstWord && S[wordIndex] == 'I') {\n                if (!inSentence)\
    \ {\n                    boredoms++;\n                }\n                inSentence\
    \ = true;\n                firstWord = false;\n            } else {\n        \
    \        firstWord = false;\n            }\n            wordIndex++;\n       \
    \ }\n        return boredoms;", "        // return S.Split(new char[] { '.', '?',\
    \ '!' }).Count(x => x.Trim().StartsWith(\"I\"));\n        return S.Split(new char[]\
    \ { '.', '?', '!' }).Count(x => x.Trim().StartsWith(\"I\"));", "        long boredoms\
    \ = 0;\n        bool start = false;\n        for (int i = 0; i < S.Length; i++)\
    \ {\n            if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n          \
    \      start = false;\n            } else if (S[i] == 'I') {\n               \
    \ if (i > 0 && S[i - 1] == ' ') {\n                    boredoms++;\n         \
    \       }\n                start = true;\n            } else if (start && S[i]\
    \ == ' ') {\n                start = false;\n            }\n        }\n      \
    \  return boredoms;", "        string[] sentences = S.Split(new char[] { '.',\
    \ '?', '!' });\n        return sentences.Count(x => x.StartsWith(\"I\"));", " \
    \       // use a loop to iterate through the string\n        // check for the\
    \ words I and also for . or ? or !\n\n        // count the times I is present\
    \ at the beginning of a sentence\n        long count = 0;\n        string[] words\
    \ = S.Split('.', '?', '!');\n        for (int i = 0; i < words.Length; i++) {\n\
    \            if (words[i].TrimStart().StartsWith(\"I\")) {\n                count++;\n\
    \            }\n        }\n        return count;"]
stop_tokens:
- "\n    }\n"
