language: cs
name: HumanEval_133_sum_squares
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        for (int i
    = 0; i < lst.Count; i++) {\n            int number = (int)Math.Ceiling(lst[i]);\n
    \           sum += number * number;\n        }\n        return sum;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return (long)lst.Select(e => Math.Ceiling(e)).Select(e
    => e * e).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        for (int i
    = 0; i < lst.Count; i++) {\n            sum += (long)Math.Pow(Math.Ceiling(lst[i]),
    2);\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        lst = lst.Select(x => (float)Math.Ceiling(x)).ToList();\n
    \       long res = 0;\n        foreach (float x in lst) {\n            res +=
    (long)x * (long)x;\n        }\n        return res;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        foreach (float
    f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f), 2);\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long result = 0;\n        for (int
    i = 0; i < lst.Count; i++) {\n            float num = lst[i];\n            num
    = (float)Math.Ceiling(num);\n            result += (long)num * (long)num;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22807d3c6af443b38c9c6d37e6f057f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22807d3c6af443b38c9c6d37e6f057f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976809
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // Sum(Map(ToInt(Ceiling(x)), lst))\n
    \       long Sum(List<long> lst2) {\n            long r = 0L;\n            foreach
    (long element in lst2) {\n                r = (r + element);\n            }\n
    \           return r;\n        }\n        List<long> Map(Func<float, long> f,
    List<float> lst2) {\n            List<long> r = new List<long>();\n            foreach
    (float element in lst2) {\n                r.Add(f(element));\n            }\n
    \           return r;\n        }\n        long ToInt(float x) {\n            return
    (long)x;\n        }\n        Func<float, long> ToInt2 = ToInt;\n        float
    Ceiling(float x) {\n            return (float)Math.Ceiling((double)x);\n        }\n
    \       Func<float, long> ToInt3 = ToInt2;\n        Func<float, long> Ceiling2
    = (x) => ToInt3(Ceiling(x));\n        List<long> Map2 = Map;\n        List<long>
    Map3 = Map2;\n        List<long> Map4 = Map3;\n        List<long> Map5 = Map4;\n
    \       return Sum(Map5(Ceiling2, lst));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnb691cri.cs(48,27): error CS0428: Cannot convert method group ''Map''
    to non-delegate type ''List<long>''. Did you intend to invoke the method?

    /tmp/tmpnb691cri.cs(52,20): error CS0149: Method name expected

    '
  timestamp: 1659976809
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <220c376ddb574784b148e1951f1d72ad>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <220c376ddb574784b148e1951f1d72ad>:0 \n"
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        int newint
    = 0;\n        foreach (var item in lst) {\n            newint = Convert.ToInt32(Math.Ceiling(item));\n
    \           sum += (long)newint * (long)newint;\n        }\n        return sum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long res = 0;\n        foreach (float
    x in lst) {\n            res += (long)Math.Pow(Math.Ceiling(x), 2);\n        }\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // Write code here\n        long sum
    = 0;\n        foreach (float i in lst)\n        {\n            int y = (int) Math.Ceiling(i);\n
    \           int z = y * y;\n            sum += z;\n        }\n        return sum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long answer = 0;\n        for (int
    i = 0; i < lst.Count; i++) {\n            answer += (long)Math.Pow(Math.Ceiling(lst[i]),
    2);\n        }\n        return answer;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        List<float> res = new List<float>();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            float num = (float)Math.Ceiling(lst[i]);\n
    \           res.Add(num);\n        }\n        long sum = 0;\n        for (int
    i = 0; i < res.Count; i++) {\n            sum += (long)Math.Pow(res[i], 2);\n
    \       }\n        return sum;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return (long)lst.Select(i => Math.Ceiling(i)).Select(i
    => i * i).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // Just implement it. You have the
    example already.\n        long acc = 0;\n        foreach (float item in lst) {\n
    \           acc += (long)Math.Pow(Math.Ceiling(item), 2);\n        }\n        return
    acc;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long ret = 0;\n        foreach (float
    f in lst) {\n            float f2 = f;\n            if (f2 < 0) {\n                f2
    = -f2;\n            }\n            ret += (long)Math.Ceiling(f2) * (long)Math.Ceiling(f2);\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4124a56522f8417d8c54fe5646d7e11c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4124a56522f8417d8c54fe5646d7e11c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        foreach (float
    f in lst) {\n            sum += (long) Math.Pow(Math.Ceiling(f), 2);\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        for (int i
    = 0; i < lst.Count; i++) {\n            sum += (long)Math.Pow(Math.Ceiling(lst[i]),
    2);\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        foreach (float
    num in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(num), 2);\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        foreach (float
    f in lst) {\n            long rounded = (long)Math.Ceiling(f);\n            sum
    += rounded * rounded;\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        long length
    = lst.Count;\n        for (int i = 0; i < length; i++) {\n            float number
    = lst[i];\n            number = (float)Math.Ceiling(number);\n            sum
    += (long)number * (long)number;\n        }\n        return sum;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        foreach (float
    i in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(i), 2);\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        lst = lst.Select(x => (float)Math.Ceiling(x)).ToList();\n
    \       var sum = 0L;\n        foreach (var x in lst) {\n            sum += (long)Math.Pow(x,
    2);\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        //return lst.Select(x => x + 0.5f).Select(x
    => (long)x).Select(x => x * x).Sum();\n        return lst.Select(x => Math.Ceiling(x)).Select(x
    => (long)x).Select(x => x * x).Sum();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum=0;\n        for(int i=0;i<lst.Count;i++)\n
    \       {\n            sum+=(long)Math.Ceiling(lst[i])*(long)Math.Ceiling(lst[i]);\n
    \       }\n        return sum;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        lst = lst.Select(el => el > 0 ? (float)Math.Ceiling(el)
    : (float)Math.Floor(el)).ToList();\n        return (long)lst.Select(el => el *
    el).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b537bf1848494119948320e234194806>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b537bf1848494119948320e234194806>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long ret = 0;\n        foreach (float
    f in lst) {\n            ret += (long)Math.Pow(Math.Ceiling(f), 2);\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        foreach (float
    x in lst) {\n            float c = (float)Math.Ceiling(x);\n            sum +=
    (long)(c * c);\n        }\n        return sum;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return lst.Select(x => (long)Math.Ceiling(x)).Select(x
    => x * x).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return lst.Select(x => (long)Math.Ceiling(x)).Select(x
    => x * x).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        foreach (float
    flt in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(flt), 2);\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        List<int> ls = new List<int>();\n
    \       foreach (float item in lst) {\n            ls.Add((int)Math.Ceiling(item));\n
    \       }\n        return ls.Sum(x => x * x);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return lst.Select(x => (long) Math.Ceiling(x)).Sum(x
    => x * x);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // REPLACE \"return 0L;\" WITH YOUR
    CODE\n        long sum = 0;\n        foreach (float f in lst) {\n            sum
    += (long)Math.Pow(Math.Ceiling(f), 2);\n        }\n        return sum;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // your code here\n        double
    sum = 0;\n        foreach (float item in lst)\n        {\n            int it =
    Convert.ToInt32(Math.Ceiling(item));\n            sum += Math.Pow(it, 2);\n        }\n
    \       return Convert.ToInt64(sum);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        var lst2 = lst.Select(x => Math.Ceiling(x)).Select(x
    => (long)x);\n        var sum = lst2.Select(x => x * x).Sum();\n        return
    sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        for (int i
    = 0; i < lst.Count; i++) {\n            sum += Convert.ToInt64(Math.Ceiling(lst[i]));\n
    \       }\n        return sum;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc18edd980794f6db7d4cc5719dd05d5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc18edd980794f6db7d4cc5719dd05d5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976810
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        lst = (from x in lst select (long)Math.Ceiling(x)).ToList();\n
    \       long sum = 0;\n        foreach (long x in lst)\n            sum += x *
    x;\n        return sum;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqa6v5a54.cs(24,15): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''System.Collections.Generic.List<float>''

    '
  timestamp: 1659976810
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        lst = lst.Select(n => (long)Math.Ceiling(n)).ToList();\n
    \       long sum = 0;\n        foreach (long n in lst) {\n            sum += n
    * n;\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8rwvl69m.cs(24,15): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''System.Collections.Generic.List<float>''

    '
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        lst = lst.Select(x => (float)Math.Ceiling(x)).ToList();\n
    \       long sum = 0;\n        foreach (float i in lst) {\n            sum +=
    (long)i * (long)i;\n        }\n        return sum;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        lst = lst.Select(f => (float)Math.Ceiling(f)).ToList();\n
    \       return lst.Select(f => (long)Math.Pow(f, 2)).Sum();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        List<float> list = new List<float>();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            list.Add((float)Math.Ceiling(lst[i]));\n
    \       }\n        long sum = 0;\n        for (int i = 0; i < list.Count; i++)
    {\n            sum += (long)Math.Pow(list[i], 2);\n        }\n        return sum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // Create a return variable with the
    default value of zero.\n        long result = 0L;\n        // Loop over the input
    list.\n        for (int i = 0; i < lst.Count; i++) {\n            // Get the value
    from the list.\n            var elem = lst[i];\n            // Add the element
    to the result.\n            result += (long)Math.Ceiling(elem) * (long)Math.Ceiling(elem);\n
    \       }\n        // Return the result.\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        BigInteger sum = BigInteger.Zero;\n
    \       lst.ForEach(f => sum += (BigInteger)Math.Ceiling(f) * (BigInteger)Math.Ceiling(f));\n
    \       return (long)sum;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long ans = 0;\n        foreach (float
    i in lst) {\n            ans += (long)Math.Pow(Math.Ceiling(i), 2);\n        }\n
    \       return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        foreach (float
    number in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(number), 2);\n
    \       }\n        return sum;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return lst.Select(x => (long)Math.Ceiling(x)).Select(x
    => x * x).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        List<float> _lst = new List<float>();\n
    \       foreach (float num in lst) {\n            _lst.Add((float)Math.Ceiling(num));\n
    \       }\n        BigInteger sum = 0;\n        foreach (float num in _lst) {\n
    \           sum += (BigInteger)Math.Pow(num, 2);\n        }\n        return (long)sum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        foreach (float
    item in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(item), 2);\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        var result = from f in lst\n                     select
    (long)Math.Ceiling(f) * (long)Math.Ceiling(f);\n        return result.Sum();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22807d3c6af443b38c9c6d37e6f057f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22807d3c6af443b38c9c6d37e6f057f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // your code\n        List<int> list
    = new List<int>();\n        for (int i = 0; i < lst.Count; i++)\n        {\n            int
    j = (int)Math.Ceiling(lst[i]);\n            list.Add(j);\n        }\n        long
    k = 0;\n        for (int i = 0; i < list.Count; i++)\n        {\n            long
    m = list[i] * list[i];\n            k += m;\n        }\n        return k;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        for (int i
    = 0; i < lst.Count; i++) {\n            sum += (long)Math.Pow(Math.Ceiling(lst[i]),
    2);\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        for (int i
    = 0; i < lst.Count; i++) {\n            float x = lst[i];\n            if (x <
    0) {\n                sum += (long)Math.Ceiling(-x);\n            } else {\n                sum
    += (long)Math.Ceiling(x) * (long)Math.Ceiling(x);\n            }\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49d2e2c9fc5d4dc39c6fdeed9aa21f36>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49d2e2c9fc5d4dc39c6fdeed9aa21f36>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long ret = 0;\n        foreach (float
    f in lst) {\n            ret += Convert.ToInt64(Math.Ceiling(f)) * Convert.ToInt64(Math.Ceiling(f));\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // >>> START CODING HERE <<<\n        long
    sum = 0;\n        for (int i = 0; i < lst.Count; i++)\n        {\n            lst[i]
    = (float)Math.Ceiling(lst[i]);\n            sum += (long)Math.Pow(lst[i], 2);\n
    \       }\n        return sum;\n        // >>> END CODING HERE <<<\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long ret = 0;\n        for (int i
    = 0; i < lst.Count; i++) {\n            float elm = lst[i];\n            if (elm
    < 0) {\n                elm = 0 - elm;\n            }\n            elm = (float)Math.Ceiling(elm);\n
    \           long val = (long)elm;\n            ret += val * val;\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84ca41b076d7407484eba845130742df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84ca41b076d7407484eba845130742df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return lst.Select(x => (long)Math.Ceiling(x)).Select(x
    => x * x).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        for (int i
    = 0; i < lst.Count; i++) {\n            float tmp = lst[i];\n            if (tmp
    < 0) {\n                tmp = -tmp;\n            }\n            sum += (long)Math.Ceiling(tmp)
    * (long)Math.Ceiling(tmp);\n        }\n        return sum;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf00a0188e7347b39479f341b274e3ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf00a0188e7347b39479f341b274e3ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976811
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long res = 0;\n        foreach (float
    elem in lst) {\n            float elemRound = Math.Ceiling(elem);\n            long
    elemSqr = (long)Math.Pow(elemRound, 2);\n            res += elemSqr;\n        }\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp34gv8c9i.cs(26,31): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long result = 0;\n        foreach
    (float number in lst) {\n            result += (long)Math.Pow(Math.Ceiling(number),
    2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long res = 0;\n        foreach (float
    i in lst) {\n            res += (long)Math.Pow(Math.Ceiling(i), 2);\n        }\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // Do not use a for loop or the built-in
    sum function.\n        // Find the sum of the squared numbers in the list,\n        //
    round each element in the list to the upper int(Ceiling) first.\n        long
    result = 0;\n        foreach (var x in lst) {\n            result += (long)Math.Ceiling(x)
    * (long)Math.Ceiling(x);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return (long)lst.Select(i => i >=
    0 ? Math.Ceiling(i) : Math.Floor(i)).Sum(i => i * i);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06cba5bc916745c0a22cd2634d761f62>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06cba5bc916745c0a22cd2634d761f62>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return (long)Enumerable.Sum(lst.Select(x
    => Math.Ceiling(x) * Math.Ceiling(x)));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return (long) (from num in lst\n                       select
    Math.Ceiling(num)\n                       into ceil\n                       select
    Math.Pow(ceil, 2))\n                       .Sum();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // Write your code here\n        var
    result = 0L;\n        foreach (var item in lst)\n        {\n            result
    += (long)Math.Pow(Math.Ceiling(item), 2);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        var answer = 0L;\n        for (var
    i = 0; i < lst.Count; i++) {\n            answer += (long) Math.Ceiling(lst[i])
    * (long) Math.Ceiling(lst[i]);\n        }\n        return answer;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976811
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        BigInteger result = BigInteger.Zero;\n
    \       for (int i = 0; i < lst.Count; i++) {\n            long tmp = (long)Math.Ceiling(lst[i]);\n
    \           BigInteger tmp2 = BigInteger.Multiply(tmp, tmp);\n            result
    = BigInteger.Add(result, tmp2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp8l4kcxt.cs(30,16): error CS0266: Cannot implicitly convert type ''System.Numerics.BigInteger''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return lst.Select(x => (long)Math.Ceiling(x)).Select(x
    => x * x).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long result = 0;\n        if (lst.Count
    > 0) {\n            // Write code here\n            foreach (float f in lst) {\n
    \               result += (long)Math.Pow(Math.Ceiling(f), 2);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22807d3c6af443b38c9c6d37e6f057f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22807d3c6af443b38c9c6d37e6f057f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22807d3c6af443b38c9c6d37e6f057f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22807d3c6af443b38c9c6d37e6f057f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // Your code here.\n        return
    0L;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <89b43cf9f4e44742a48e602d6e337b15>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <89b43cf9f4e44742a48e602d6e337b15>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976811
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <220c376ddb574784b148e1951f1d72ad>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <220c376ddb574784b148e1951f1d72ad>:0 \n"
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        var sum = 0L;\n        foreach (var
    f in lst) {\n            var x = Math.Ceiling(f);\n            sum += (long)x
    * (long)x;\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976811
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        foreach (float
    i in lst) {\n            double d = Math.Ceiling(i);\n            sum += (long)
    d * d;\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp58mcx6ve.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        foreach (float
    f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f), 2);\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long result = 0;\n        foreach
    (float f in lst) {\n            float x = (float)Math.Ceiling(f);\n            result
    += x * x;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr1c0vjhl.cs(27,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return lst.Select(x => (long) Math.Ceiling(x)).Select(x
    => x * x).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long ret = 0;\n        foreach (float
    x in lst) {\n            ret += (long)Math.Pow(Math.Ceiling(x), 2);\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return (long)lst.Select(x => Math.Ceiling(x))\n
    \                .Select(x => x * x)\n                 .Sum();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        lst = lst.Select(n => (long)Math.Ceiling(n)).ToList();\n
    \       long square = 0;\n        foreach (long elem in lst) {\n            square
    += elem * elem;\n        }\n        return square;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7zb8opyk.cs(24,15): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''System.Collections.Generic.List<float>''

    '
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22807d3c6af443b38c9c6d37e6f057f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22807d3c6af443b38c9c6d37e6f057f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long i = 0;\n        foreach (float
    f in lst) {\n            int v = (int)Math.Ceiling(f);\n            i += v * v;\n
    \       }\n        return i;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long l = 0;\n        foreach (float
    f in lst) {\n            l += (long) Math.Pow(Math.Ceiling(f), 2);\n        }\n
    \       return l;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22807d3c6af443b38c9c6d37e6f057f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22807d3c6af443b38c9c6d37e6f057f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        List<float> result = new List<float>();\n
    \       long sum = 0;\n        foreach (float num in lst) {\n            float
    x = (float)Math.Ceiling(num);\n            sum += (long)Math.Pow(x, 2);\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        List<int> intList = new List<int>();\n
    \       foreach (float f in lst) {\n            intList.Add((int)Math.Ceiling(f));\n
    \       }\n        long sum = 0;\n        foreach (int i in intList) {\n            sum
    += i * i;\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return (long)lst.Select(x => Math.Ceiling(x)
    * Math.Ceiling(x)).Sum();\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long result = 0;\n        // Start
    writing your code here...\n        for (int i = 0; i < lst.Count; i++)\n        {\n
    \           result += (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return lst.Select(p => (long)Math.Ceiling(p)).Select(p
    => p * p).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long ret = 0;\n        foreach (float
    f in lst) {\n            float f2 = Math.Ceiling(f);\n            ret += (long)f2
    * (long)f2;\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiy69h65n.cs(26,24): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // Write your code here\n        var
    sum = 0L;\n        lst.ForEach(x => sum += (long)Math.Pow(Math.Ceiling(x), 2));\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return (long)lst.Sum(x => Math.Ceiling(x)
    * Math.Ceiling(x));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22807d3c6af443b38c9c6d37e6f057f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22807d3c6af443b38c9c6d37e6f057f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        int length = lst.Count;\n        long
    result = 0;\n        for (int i = 0; i < length; i++) {\n            result +=
    (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long result = 0;\n        foreach
    (float i in lst) {\n            result += (long)Math.Pow(Math.Ceiling(i), 2);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        lst = lst.Select(x => (long)Math.Ceiling(x)).ToList();\n
    \       long sum = 0;\n        foreach (long x in lst) {\n            sum += x
    * x;\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpug8vo862.cs(24,15): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''System.Collections.Generic.List<float>''

    '
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // Given a list of numbers, return
    the sum of all the squared numbers.\n        // Get the sum of all numbers squared\n
    \       // [1, 2, 3] --> [1, 4, 9]\n        // Get the sum of all elements in
    the list\n        // [1, 4, 9] --> 14\n        long result = 0;\n        //    long
    sum = 0;\n        //    for (int i = 0; i < lst.Count; i++) {\n        //        sum
    += (long)lst[i];\n        //    }\n        //    return sum;\n        return (long)lst.Select(i
    => (long)Math.Ceiling(i)).Sum(i => i * i);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // Your code goes here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <042f424980b8495ca633d9c83c43f096>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <042f424980b8495ca633d9c83c43f096>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long result = 0;\n        for (int
    i = 0; i < lst.Count; i++) {\n            result += (long)Math.Pow(Math.Ceiling(lst[i]),
    2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return (long)lst.Select(elem => Math.Ceiling(elem)).Select(elem
    => Math.Pow(elem, 2)).Sum();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        foreach (float
    el in lst) {\n            long v = (long)Math.Ceiling(el);\n            sum +=
    v * v;\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // implement this function\n        return
    0L;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dcf4469078b049cda2f72194762e34a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dcf4469078b049cda2f72194762e34a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        for (int i
    = 0; i < lst.Count; i++) {\n            lst[i] = (float)Math.Ceiling(lst[i]);\n
    \           sum += (long)Math.Pow(lst[i], 2);\n        }\n        return sum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long res = 0;\n        foreach (float
    num in lst) {\n            res += (long)Math.Pow(Math.Ceiling(num), 2);\n        }\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long rt = 0;\n        foreach (float
    e in lst)\n            rt += (long)Math.Ceiling(e) * (long)Math.Ceiling(e);\n
    \       return rt;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        if (lst == null) {\n            return
    0L;\n        }\n        long sum = 0L;\n        for (int i = 0; i < lst.Count;
    i++) {\n            sum += (long)Math.Pow(Math.Ceiling(lst[i]), 2.0);\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // your code here...\n        long
    total = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            total +=
    (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n        return
    total;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        int S = 0;\n        foreach (var v
    in lst) {\n            var x = Math.Ceiling(v);\n            S += (int)x * (int)x;\n
    \       }\n        return S;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return lst.Select(c => (long)Math.Ceiling(c)).Select(c
    => c * c).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        float sum = 0;\n        for (int i
    = 0; i < lst.Count; i++) {\n            var val = Math.Ceiling(lst[i]);\n            sum
    += (float)Math.Pow(val, 2);\n        }\n        return (long)sum;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        foreach (float
    f in lst) {\n            long f2 = (long)Math.Ceiling(f) * (long)Math.Ceiling(f);\n
    \           sum += f2;\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return lst.Select(x => (long)Math.Ceiling(x)).Select(x
    => x * x).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long result = 0;\n        foreach
    (float item in lst) {\n            result += (long)Math.Pow(Math.Ceiling(item),
    2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long val = 0;\n        foreach (float
    item in lst) {\n            val += (long)Math.Pow(Math.Ceiling(item), 2);\n        }\n
    \       return val;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22807d3c6af443b38c9c6d37e6f057f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22807d3c6af443b38c9c6d37e6f057f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        List<long> newLst = new List<long>();\n
    \       for (long i = 0; i < lst.Count; i++) {\n            if (lst[(int)i] >=
    0) {\n                newLst.Add((long)Math.Ceiling(lst[(int)i]));\n            }
    else {\n                newLst.Add((long)Math.Floor(lst[(int)i]));\n            }\n
    \       }\n        long total = 0;\n        for (long i = 0; i < newLst.Count;
    i++) {\n            total += newLst[(int)i] * newLst[(int)i];\n        }\n        return
    total;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f34cf583842745b39d4ae9582dc34ec5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f34cf583842745b39d4ae9582dc34ec5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long result = 0;\n        lst.ForEach(f
    => result += (long)Math.Pow(Math.Ceiling(f), 2));\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        for (int i
    = 0; i < lst.Count; i++) {\n            lst[i] = (float)Math.Ceiling(lst[i]);\n
    \           sum += (long)Math.Pow(lst[i], 2);\n        }\n        return sum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        float p = 0;\n        for (int i =
    0; i < lst.Count; i++) {\n            float ceil = (float)Math.Ceiling(lst[i]);\n
    \           float s = ceil * ceil;\n            p += s;\n        }\n        return
    (long)p;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        lst = lst.Select(x => (float)Math.Ceiling(x)).ToList();\n
    \       return lst.Select(x => (long)Math.Pow(x, 2)).Sum();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // Your code goes here\n        lst
    = lst.Select(a => (float)Math.Ceiling(a)).ToList();\n        return lst.Select(a
    => (long)Math.Pow(a, 2)).Sum();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return (long)lst.Select(i => Math.Ceiling(i)
    * Math.Ceiling(i)).Sum();\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long output = 0;\n        for (int
    i = 0; i < lst.Count; i++) {\n            output += ((long)Math.Ceiling(lst[i])
    * (long)Math.Ceiling(lst[i]));\n        }\n        return output;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long result = 0;\n        // Write
    your code here\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <215bd06396af4b578c72909678486477>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <215bd06396af4b578c72909678486477>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // your code goes here\n        List<float>
    lst2 = new List<float>();\n        foreach (float f in lst) {\n            lst2.Add((float)Math.Ceiling(f));\n
    \       }\n        long sum = 0;\n        foreach (float f in lst2) {\n            sum
    += (long)Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long rval = 0;\n        for (int i
    = 0; i < lst.Count; i++) {\n            rval += Convert.ToInt64(Math.Ceiling(lst[i])
    * Math.Ceiling(lst[i]));\n        }\n        return rval;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        var squaredList = lst.Select(x =>
    (long)Math.Ceiling(x)).Select(x => x * x);\n        return squaredList.Sum();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        for (int i
    = 0; i < lst.Count; i++) {\n            sum += (long)Math.Pow(Math.Ceiling(lst[i]),
    2);\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        foreach (float
    f in lst) {\n            sum += Convert.ToInt64(Math.Ceiling(f) * Math.Ceiling(f));\n
    \       }\n        return sum;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        var res = lst.Select(x => (long)Math.Ceiling(x)).Select(x
    => x * x).Sum();\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return (long)lst.Select(x => Math.Ceiling(x)
    * Math.Ceiling(x)).Sum();\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <220c376ddb574784b148e1951f1d72ad>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <220c376ddb574784b148e1951f1d72ad>:0 \n"
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // return sqr(lst.Select(n => Math.Ceiling(n)).Sum());\n
    \       return (long)Math.Pow(lst.Select(n => Math.Ceiling(n)).Sum(), 2);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <717d4d9d9dcf403bbd37b9c6864bdd22>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <717d4d9d9dcf403bbd37b9c6864bdd22>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long s = 0;\n        foreach (float
    f in lst)\n            s += (long)Math.Ceiling(f) * (long)Math.Ceiling(f);\n        return
    s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long ret = 0;\n        foreach (float
    el in lst) {\n            ret += (long)Math.Pow(Math.Ceiling(el), 2);\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // Your code goes here\n        long
    sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),
    2);\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long result = 0;\n        foreach
    (float elem in lst) {\n            result += (long)Math.Pow(Math.Ceiling(elem),
    2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // fill here\n        BigInteger sum
    = BigInteger.Zero;\n        foreach (var f in lst) {\n            sum += (BigInteger)Math.Ceiling(f)
    * (BigInteger)Math.Ceiling(f);\n        }\n        return (long)sum;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // replace this\n        long sum
    = 0;\n        foreach (float fl in lst) {\n            sum += (long)Math.Ceiling(fl)
    * (long)Math.Ceiling(fl);\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // Fill in this method.\n        return
    lst.Select(x => Convert.ToInt64(Math.Ceiling(x))).Sum(x => x * x);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        BigInteger sum = new BigInteger(0);\n
    \       foreach (float f in lst) {\n            BigInteger tmp = BigInteger.Parse(Math.Ceiling(f).ToString());\n
    \           sum += tmp * tmp;\n        }\n        return (long)sum;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long ret = 0;\n        foreach (float
    f in lst) {\n            int i = (int)Math.Ceiling(f);\n            ret += i *
    i;\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        lst = lst.Select(x => x > 0 ? (float)Math.Ceiling(x)
    : (float)Math.Floor(x)).ToList();\n        return lst.Select(x => x * x).Sum();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp480pp_j8.cs(25,16): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return lst.Sum(x => (long)Math.Ceiling(x)
    * (long)Math.Ceiling(x));\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return lst.Select( x => (long)Math.Ceiling(x)).Sum(
    x => x * x);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        float[] arr = lst.ToArray();\n        float
    sum = 0;\n        for (int i = 0; i < arr.Length; i++) {\n            arr[i] =
    Math.Ceiling(arr[i]);\n            sum += arr[i] * arr[i];\n        }\n        return
    (long)sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa_ec62vg.cs(27,22): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return lst.Select(x => Math.Ceiling(x)).Select(x
    => (long)Math.Pow(x, 2)).Sum();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long res = 0;\n        foreach (float
    n in lst) {\n            int nint = (int) Math.Ceiling(n);\n            res +=
    nint * nint;\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // TODO\n        return 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <474a7db798b649edba79193038613fc6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <474a7db798b649edba79193038613fc6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        for (int i
    = 0; i < lst.Count; i++) {\n            sum += (long)Math.Pow(Math.Ceiling(lst[i]),
    2);\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return lst.Select(x => (long)Math.Ceiling(x
    * x)).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7c51db5f2be54801b78c00fdbd9e811f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7c51db5f2be54801b78c00fdbd9e811f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // YOUR CODE HERE\n        long sum
    = 0;\n        foreach (float num in lst)\n        {\n            sum += (long)
    Math.Pow(Math.Ceiling(num), 2);\n        }\n        return sum;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        foreach (float
    x in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(x), 2);\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return lst.Select(x => x*x).Sum();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppi9xsm2d.cs(24,16): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22807d3c6af443b38c9c6d37e6f057f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22807d3c6af443b38c9c6d37e6f057f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        for (int i
    = 0; i < lst.Count; i++) {\n            sum += (long)Math.Pow(Math.Ceiling(lst[i]),
    2);\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long ans = 0;\n        foreach (float
    item in lst) {\n            float f = (float)Math.Ceiling(item);\n            ans
    += (long)f * (long)f;\n        }\n        return ans;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        BigInteger sum = 0;\n        foreach
    (float x in lst) {\n            sum += BigInteger.Pow((int)Math.Ceiling(x), 2);\n
    \       }\n        return (long)sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long result = 0;\n        foreach
    (float e in lst) {\n            result += (long) (Math.Ceiling(e) * Math.Ceiling(e));\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976814
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return SumSquares(lst, x => x);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzw3qcg2_.cs(24,16): error CS1501: No overload for method ''SumSquares''
    takes 2 arguments

    '
  timestamp: 1659976814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // Your code goes here\n        //
    Lst(lst)\n        var l = lst.Select(x => Math.Ceiling(x)).ToList();\n        long
    sum = 0;\n        for (int i = 0; i < l.Count; i++)\n        {\n            sum
    += Convert.ToInt64(Math.Pow(l[i], 2));\n        }\n        return sum;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return lst.Select(x => (long)Math.Ceiling(x)).Select(x
    => x * x).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        var newlst = lst.Select(x => (float)Math.Ceiling(x)).ToList();\n
    \       var sum = newlst.Select(x => (long)Math.Pow(x, 2)).Sum();\n        return
    sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        for (int i
    = 0; i < lst.Count; i++) {\n            lst[i] = (float)Math.Ceiling(lst[i]);\n
    \           sum += (long)Math.Pow(lst[i], 2);\n        }\n        return sum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return lst.Select(n => (long) Math.Ceiling(n)).Select(n
    => n * n).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long ret = 0;\n        foreach (float
    i in lst) {\n            ret += (long) Math.Pow(Math.Ceiling(i), 2);\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long res = 0;\n        for (int i
    = 0; i < lst.Count; i++) {\n            res += (long)Math.Pow(Math.Ceiling(lst[i]),
    2);\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        foreach (float
    f in lst) {\n            sum += ((long)Math.Ceiling(f)) * ((long)Math.Ceiling(f));\n
    \       }\n        return sum;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long s = 0;\n        foreach (float
    i in lst) {\n            int x = (int)Math.Ceiling(i);\n            s += x * x;\n
    \       }\n        return s;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        for (int i
    = 0; i < lst.Count; i++) {\n            sum += Convert.ToInt64(Math.Ceiling(lst[i])
    * Math.Ceiling(lst[i]));\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        BigInteger res = BigInteger.Zero;\n
    \       foreach (float x in lst) {\n            BigInteger mx = (BigInteger)Math.Ceiling(x);\n
    \           res += mx * mx;\n        }\n        return (long)res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // TODO: Implement\n        long result
    = 0;\n        foreach (float item in lst)\n        {\n            result += (long)Math.Ceiling(item)
    * (long)Math.Ceiling(item);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976814
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        foreach (float
    f in lst) {\n            float d = Math.Ceiling(f);\n            sum += (long)Math.Pow(d,
    2);\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzkme9z_g.cs(26,23): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // Write your code here\n        long
    ans = 0;\n        foreach (float f in lst) {\n            ans += (long)Math.Pow(Math.Ceiling(f),
    2);\n        }\n        return ans;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // Your code goes here\n        return
    lst.Select(n => (long)Math.Ceiling(n) * (long)Math.Ceiling(n)).Sum();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return (long)lst.Select(a => Math.Ceiling(a)).Sum(a
    => Math.Pow((double)a, 2));\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        foreach (float
    x in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(x), 2);\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976813
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long res = 0;\n        for (int i
    = 0; i < lst.Count; i++) {\n            float x = lst[i];\n            float y
    = Math.Ceiling(x);\n            res += (long)(y * y);\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ty3ttw3.cs(27,23): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        for (int i
    = 0; i < lst.Count; i++) {\n            sum += (long)Math.Pow(Math.Ceiling(lst[i]),
    2);\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976809
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <220c376ddb574784b148e1951f1d72ad>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <220c376ddb574784b148e1951f1d72ad>:0 \n"
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return lst.Select(f => (long)Math.Ceiling(f)).Sum(f
    => f * f);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976814
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        lst = lst.Select(n => (long)Math.Ceiling(n)).ToList();\n
    \       long sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum
    += lst[i] * lst[i];\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp84bwu2dj.cs(24,15): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''System.Collections.Generic.List<float>''

    /tmp/tmp84bwu2dj.cs(27,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976814
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return Lst(lst);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2fsiuuso.cs(24,16): error CS0103: The name ''Lst'' does not exist in the
    current context

    '
  timestamp: 1659976814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return lst.Select(x => (long)Math.Ceiling(x)).Select(x
    => x * x).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long ret = 0;\n        // Implement
    your solution here\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15a3ea1c65cb4c47bfad64e09a70c59b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15a3ea1c65cb4c47bfad64e09a70c59b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long sum = 0;\n        for (int i
    = 0; i < lst.Count; i++) {\n            lst[i] = (long)Math.Ceiling(lst[i]);\n
    \           sum += (long)Math.Pow(lst[i], 2);\n        }\n        return sum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // Initialize sum with 0\n        long
    sum = 0;\n        // Loop through each element in the list\n        for (int i
    = 0; i < lst.Count; i++) {\n            // Get the element from the list\n            float
    x = lst[i];\n            // Add the square of the element to the sum\n            sum
    += (long)Math.Pow(Math.Ceiling(x), 2);\n        }\n        // Return the sum\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976815
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        lst = lst.Select(x => (float)Math.Ceiling(x)).ToList();\n
    \       long result = 0;\n        foreach (float f in lst) {\n            result
    += (long)Math.Pow(f, 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,
    (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,
    (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976815
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return (long) lst.Select(x => Math.Ceiling(x)).Select(x
    => x * x).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976815
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // Your code here.\n        long output
    = 0;\n        foreach (float i in lst) {\n            output += (long)Math.Pow(Math.Ceiling(i),
    2);\n        }\n        return output;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976815
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        long ret = 0;\n        foreach (float
    x in lst) {\n            ret += ((long)Math.Ceiling(x) * (long)Math.Ceiling(x));\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976815
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22807d3c6af443b38c9c6d37e6f057f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22807d3c6af443b38c9c6d37e6f057f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // Your code goes here.\n        //
    You can also define other methods.\n        long sum = 0;\n        foreach (float
    n in lst)\n        {\n            sum += (long)Math.Pow(Math.Ceiling(n), 2);\n
    \       }\n        return sum;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976815
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <220c376ddb574784b148e1951f1d72ad>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <220c376ddb574784b148e1951f1d72ad>:0 \n"
  stdout: ''
  timestamp: 1659976809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // Method that returns the sum of
    the squares of the list values\n        long sum = 0;\n        // Iterate over
    all the floats in the list\n        foreach (float val in lst) {\n            //
    Convert to int and squared\n            sum += (long)Math.Pow(Math.Ceiling(val),
    2);\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))
    == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))
    == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,
    (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new
    float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))
    == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))
    == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))
    == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,
    (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976815
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a list of numbers.\n    // You need to return
    the sum of squared numbers in the given list,\n    // round each element in the
    list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new
    float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new
    List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n
    \   // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f,
    (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f,
    (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new
    float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static
    long SumSquares(List<float> lst) {\n        // Write your code here\n        long
    sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            var ceil
    = Math.Ceiling(lst[i]);\n            sum += (long)ceil * (long)ceil;\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,
    (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,
    (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-2.4f, (float)1.0f,
    (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f,
    (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n
    \   Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,
    (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f,
    (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)0.0f}))) == (0L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f}))) == (1L));\n    Debug.Assert(SumSquares((new
    List<float>(new float[]{(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976815
