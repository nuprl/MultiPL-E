name: HumanEval_98_count_upper
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string s, count the number of uppercase vowels in even\
  \ indices.\n    // For example:\n    // >>> CountUpper((\"aBCdEf\"))\n    // (1L)\n\
  \    // >>> CountUpper((\"abcdefg\"))\n    // (0L)\n    // >>> CountUpper((\"dBBE\"\
  ))\n    // (0L)\n    public static long CountUpper(string s) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountUpper((\"\
  aBCdEf\")) == (1L));\n    Debug.Assert(CountUpper((\"abcdefg\")) == (0L));\n   \
  \ Debug.Assert(CountUpper((\"dBBE\")) == (0L));\n    Debug.Assert(CountUpper((\"\
  B\")) == (0L));\n    Debug.Assert(CountUpper((\"U\")) == (1L));\n    Debug.Assert(CountUpper((\"\
  \")) == (0L));\n    Debug.Assert(CountUpper((\"EEEE\")) == (2L));\n    }\n\n}\n"
completions: ["        // NOTE: The expected return value is a number, but this is\n\
    \        // not a primitive type on C#. You need to return a value of the primitive\n\
    \        // type `long` instead.\n        // NOTE: Don't forget to give your function\
    \ the correct signature.\n        //       It takes a string parameter, and returns\
    \ a long.\n        return 0L;", '        return 0;', "        long c = 0;\n  \
    \      for (int i = 0; i < s.Length; i += 2) {\n            if (s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n              \
    \  c++;\n            }\n        }\n        return c;", "        int ret = 0;\n\
    \        for (int i = 0; i < s.Length; i += 2) {\n            if (Char.IsUpper(s[i])\
    \ && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'))\
    \ {\n                ret++;\n            }\n        }\n        return ret;", " \
    \       long count = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n   \
    \         if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U') {\n                count++;\n            }\n        }\n        return\
    \ count;", "        long len = s.Length;\n        long sum = 0;\n        for (long\
    \ i = 0; i < len; i++) {\n            if (i % 2 == 0) {\n                if (s[(int)i]\
    \ == 'A' || s[(int)i] == 'E' || s[(int)i] == 'I' || s[(int)i] == 'O' || s[(int)i]\
    \ == 'U') {\n                    sum++;\n                }\n            }\n  \
    \      }\n        return sum;", "        long vowelCount = 0;\n        bool even\
    \ = true;\n        foreach (char letter in s) {\n            if (even) {\n   \
    \             if (letter == 'A' || letter == 'E' || letter == 'I' || letter ==\
    \ 'O' || letter == 'U') {\n                    vowelCount++;\n               \
    \ }\n            }\n            even = !even;\n        }\n        return vowelCount;",
  "        long count = 0;\n        for (int i = 0; i < s.Length; i++) {\n       \
    \     if (i % 2 == 0 && Char.IsUpper(s[i])) {\n                count++;\n    \
    \        }\n        }\n        return count;", "        long result = 0;\n   \
    \     for (int i = 0; i < s.Length; i += 2) {\n            if (Char.IsUpper(s[i])\
    \ && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'))\
    \ {\n                result += 1;\n            }\n        }\n        return result;",
  "        var upper = new HashSet<char> { 'A', 'E', 'I', 'O', 'U' };\n        return\
    \ s.Select((c, i) => upper.Contains(c) && i % 2 == 0).Count(x => x);", "     \
    \   var count = 0L;\n        for (var i = 0; i < s.Length; i++) {\n          \
    \  if (i % 2 == 0 && Char.IsUpper(s[i])) {\n                count++;\n       \
    \     }\n        }\n        return count;", "        var count = 0L;\n       \
    \ for (var i = 0; i < s.Length; i += 2) {\n            if (IsUpper(s[i])) count++;\n\
    \        }\n        return count;", "        int result = 0;\n        for (int\
    \ i = 0; i < s.Length; i += 2) {\n            if (s[i] == 'A' || s[i] == 'E' ||\
    \ s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n                result++;\n  \
    \          }\n        }\n        return result;", '        return (long)s.Where((c,
    i) => "AEIOU".Contains(c) && i % 2 == 0).Count();', "        long sum = 0;\n \
    \       for (long i = 0; i < s.Length; i++) {\n            if (s[(int)i] == 'A'\
    \ || s[(int)i] == 'E' || s[(int)i] == 'I' || s[(int)i] == 'O' || s[(int)i] ==\
    \ 'U') {\n                if (i % 2 == 0) {\n                    sum += 1;\n \
    \               }\n            }\n        }\n        return sum;", "        string\
    \ vowels = \"AEIOU\";\n        return s.Length % 2 == 0 ? s.Where((c, i) => i\
    \ % 2 == 0 && vowels.Contains(c)).Count() : 0;", "        return (from c in s\n\
    \                let ic = (int)c\n                where ic >= 65 && ic <= 90 &&\n\
    \                s.IndexOf(c) % 2 == 0\n                select c).Count();", " \
    \       long counter = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n \
    \           switch (s[i]) {\n                case 'A':\n                case 'E':\n\
    \                case 'I':\n                case 'O':\n                case 'U':\n\
    \                    counter++;\n                    break;\n            }\n \
    \       }\n        return counter;", "        long ret = 0;\n        for (int\
    \ i = 0; i < s.Length; i += 2) {\n            if (s[i] == 'A' || s[i] == 'E' ||\
    \ s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n                ret++;\n     \
    \       }\n        }\n        return ret;", '        return 0;', "        long\
    \ result = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (i\
    \ % 2 == 0 && s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U') {\n                result++;\n            }\n        }\n        return\
    \ result;", '        return 0;', "        // your code here\n        int count\
    \ = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (i % 2 ==\
    \ 0 && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  '        return s.Where((c,i) => i % 2 == 0 && "AEIOU".Contains(c)).Count();', " \
    \       // Iterate through string characters, counting uppercase vowels in even\
    \ indices.\n        long count = 0;\n        for (int i = 0; i < s.Length; i +=\
    \ 2) {\n            switch (s[i]) {\n                case 'A':\n             \
    \   case 'E':\n                case 'I':\n                case 'O':\n        \
    \        case 'U':\n                    count++;\n                    break;\n\
    \            }\n        }\n        return count;", "        long counter = 0;\n\
    \        for (int i = 0; i < s.Length; i++) {\n            if (i % 2 == 0 && IsUpper(s[i]))\
    \ {\n                counter++;\n            }\n        }\n        return counter;",
  "        long count = 0;\n        for (int i = 0; i < s.Length; i++) {\n       \
    \     if (i % 2 == 0 && s[i] >= 'A' && s[i] <= 'Z') {\n                count++;\n\
    \            }\n        }\n        return count;", "        // Fill in your solution\
    \ here.\n        return 0L;", "        // ToDo\n        return 0;", "        int\
    \ count = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (i\
    \ % 2 == 0 && s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U') {\n                count++;\n            }\n        }\n        return\
    \ count;", "        long result = 0;\n        int i = 0;\n        foreach (char\
    \ c in s) {\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U') {\n                if (i % 2 == 0) {\n                    result++;\n\
    \                }\n            }\n            i++;\n        }\n        return\
    \ result;", "        // REPLACE THIS LINE WITH YOUR SOLUTION\n        return 0L;",
  "        long result = 0;\n        int i = 0;\n        while (i < s.Length) {\n\
    \            if (('A' <= s[i]) && (s[i] <= 'Z')) {\n                if ((i % 2)\
    \ == 0) {\n                    result = result + 1;\n                }\n     \
    \       }\n            i = i + 1;\n        }\n        return result;", '        return
    s.Where((c, i) => i % 2 == 0 && "AEIOU".Contains(c)).Count();', "        // TODO:\
    \ Fill in the body of this function\n        return 0L;", "        // TODO: Implement\
    \ me!\n        throw new NotImplementedException();", "        long ans = 0;\n\
    \        for (int i = 0; i < s.Length; i++) {\n            if (i % 2 == 0 && s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n                ans++;\n            }\n        }\n\
    \        return ans;", "        long count = 0;\n        for (int i = 0; i < s.Length;\
    \ i += 2) {\n            if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U') {\n                count++;\n            }\n        }\n\
    \        return count;", "        long count = 0;\n        for (long i = 0; i\
    \ < s.Length; i++) {\n            if (i % 2 == 0 && s[(int)i] > 'A' && s[(int)i]\
    \ < 'Z') {\n                count++;\n            }\n        }\n        return\
    \ count;", "        long count = 0;\n        for (int i = 0; i < s.Length; i++)\
    \ {\n            if (i % 2 == 0 && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I'\
    \ || s[i] == 'O' || s[i] == 'U')) {\n                count++;\n            }\n\
    \        }\n        return count;", "        long count = 0;\n        for (int\
    \ i = 0; i < s.Length; i += 2) {\n            if (\"AEIOU\".Contains(s[i])) {\n\
    \                count++;\n            }\n        }\n        return count;", '        return
    s.Where((x,i) => i % 2 == 0 && isVowel(x)).Where(isUpper).Count();', '        return
    s.Where((c, i) => i % 2 == 0 && "AEIOU".Contains(c)).Count();', "        long\
    \ uppercaseVowels = 0;\n        for (long i = 0; i < s.Length; i++) {\n      \
    \      if (i % 2 == 0 && s[(int)i] == 'A' || s[(int)i] == 'E' || s[(int)i] ==\
    \ 'I' || s[(int)i] == 'O' || s[(int)i] == 'U') {\n                uppercaseVowels++;\n\
    \            }\n        }\n        return uppercaseVowels;", "        // Fill\
    \ in the body of this function.\n        // You may need to add a helper function.\n\
    \        int upperVowels = 0;\n        for (int i = 0; i < s.Length; i++) {\n\
    \            if (i % 2 == 0) {\n                if (s[i] == 'A' || s[i] == 'E'\
    \ || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n                    upperVowels++;\n\
    \                }\n            }\n        }\n        return upperVowels;", " \
    \       long count = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n   \
    \         char c = s[i];\n            if (c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U') {\n                count++;\n            }\n        }\n\
    \        return count;", "        long count = 0;\n        for (int i = 0; i <\
    \ s.Length; i += 2) {\n            if (char.IsUpper(s[i]) && \"AEIOU\".Contains(s[i]))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        int result = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n    \
    \        if (char.IsUpper(s[i]) && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I'\
    \ || s[i] == 'O' || s[i] == 'U')) {\n                result++;\n            }\n\
    \        }\n        return result;", "        // long is a 64-bit integer, i.e.\n\
    \        // 2^^64 - 1 is the largest value that can be stored in it.\n       \
    \ // this value will work\n        long acc = 0;\n        for (int i = 0; i <\
    \ s.Length; i += 2) {\n            // a, e, i, o, u are the only upper case vowels\
    \ in the alphabet.\n            switch (s[i]) {\n                case 'A':\n \
    \               case 'E':\n                case 'I':\n                case 'O':\n\
    \                case 'U':\n                    acc++;\n                    break;\n\
    \            }\n        }\n        return acc;", '        return -1;', "     \
    \   return s.Where((c, i) => i % 2 == 0 && (c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U')).Count();", "        long counter = 0;\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            if (s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U') {\n                if (i % 2 == 0) {\n\
    \                    counter++;\n                }\n            }\n        }\n\
    \        return counter;", "        long cnt = 0;\n        for (int i = 0; i <\
    \ s.Length; i += 2) {\n            if (IsUpperVowel(s[i]))\n                cnt++;\n\
    \        }\n        return cnt;", "        // TODO - add your code here\n    \
    \    return 0;", "        long count = 0;\n        for (int i = 0; i < s.Length;\
    \ i += 2) {\n            if (IsUpper(s[i])) count++;\n        }\n        return\
    \ count;", "        long count = 0;\n        for (int i = 0; i < s.Length; i +=\
    \ 2) {\n            if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O'\
    \ || s[i] == 'U') {\n                count++;\n            }\n        }\n    \
    \    return count;", "        return s.Where((c, i) => (c == 'A' || c == 'E' ||\
    \ c == 'I' || c == 'O' || c == 'U') && i % 2 == 0).Count();", "        long count\
    \ = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n            if (Char.IsUpper(s[i])\
    \ && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        long ans = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n      \
    \      if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] ==\
    \ 'U') {\n                ans++;\n            }\n        }\n        return ans;",
  "        long count = 0;\n        for (int i = 0; i < s.Length; i++) {\n       \
    \     if (i % 2 == 0 && isUpper(s[i])) {\n                count++;\n         \
    \   }\n        }\n        return count;", '        throw new NotImplementedException();',
  '        return s.Where((char c, int i) => "AEIOU".Contains(c) && i % 2 == 0).Count();',
  "        // Your code goes here.\n        return 0L;", "        long count = 0;\n\
    \        int n = s.Length;\n        for (int i = 0; i < n; i++) {\n          \
    \  if (i % 2 == 0 && char.IsUpper(s[i])) {\n                count++;\n       \
    \     }\n        }\n        return count;", "        long sum = 0;\n        for\
    \ (int i = 0; i < s.Length; i += 2) {\n            if (s[i] == 'A' || s[i] ==\
    \ 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n                sum++;\n\
    \            }\n        }\n        return sum;", "        return s.Zip(Enumerable.Range(0,\
    \ s.Length), (v, i) => (i, v))\n            .Where(t => t.i % 2 == 0)\n      \
    \      .Where(t => \"AEIOU\".Contains(t.v))\n            .Count();", "       \
    \ // ADD YOUR CODE HERE\n        long sum = 0;\n        for (int i = 0; i < s.Length;\
    \ i += 2) {\n            if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U') {\n                sum++;\n            }\n        }\n\
    \        return sum;", "        // Your code goes here.\n        return 0L;",
  "        // Fill in your code here.\n        return 0L;", "        long result =\
    \ 0;\n        for (int i = 0; i < s.Length; i += 2) {\n            if (s[i] ==\
    \ 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n       \
    \         result++;\n            }\n        }\n        return result;", "    \
    \    // TODO: Implement me!\n        return s.Where((c, i) => i % 2 == 0 && \"\
    AEIOU\".Contains(c)).Count();", "        // Your code here.\n        return 0L;",
  '        return s.Where((x, i) => x.IsVowel() && i % 2 == 0).Count(x => x.IsUpper());',
  "        long result = 0;\n        for (int i = 0; i < s.Length; i++) {\n      \
    \      if (i % 2 == 0 && char.IsUpper(s[i])) {\n                result++;\n  \
    \          }\n        }\n        return result;", "        long result = 0;\n\
    \        for (int i = 0; i < s.Length; i += 2) {\n            if (\"AEIOU\".Contains(s[i]))\
    \ {\n                result++;\n            }\n        }\n        return result;",
  "        // Your solution goes here\n        long len = s.Length;\n        long\
    \ i = 0;\n        long num = 0;\n        while (i < len) {\n            if (s[(int)i]\
    \ == 'A' || s[(int)i] == 'E' || s[(int)i] == 'I' || s[(int)i] == 'O' || s[(int)i]\
    \ == 'U') {\n                num = num + 1;\n            }\n            i = i\
    \ + 2;\n        }\n        return num;", "        // Your code here.\n       \
    \ throw new NotImplementedException();", "        // TODO: Implement solution\n\
    \        int count = 0;\n        for (int i = 0; i < s.Length; i++) {\n      \
    \      if (IsVowel(s[i]) && i % 2 == 0) {\n                count++;\n        \
    \    }\n        }\n        return count;", '        return 0;', "        long\
    \ count = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n    \
    \            if (i % 2 == 0)\n                    count++;\n            }\n  \
    \      }\n        return count;", "        long result = 0;\n        for (int\
    \ i = 0; i < s.Length; i += 2) {\n            if (\"AEIOU\".Contains(s[i]))\n\
    \                result++;\n        }\n        return result;", '        return
    0;', "        return (from c in s\n                where c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U'\n                where (Array.IndexOf(s.ToCharArray(),\
    \ c) % 2) == 0\n                select c).Count();", '        return s.Count(IsUpperEven);',
  '        return s.Where((c, i) => i % 2 == 0 && "AEIOU".Contains(c)).Count();',
  "        if (s == null) {\n            throw new ArgumentNullException(\"s\");\n\
    \        }\n        long count = 0;\n        int i = 0;\n        foreach (char\
    \ c in s) {\n            if (i % 2 == 0 && char.IsUpper(c) && (c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U')) {\n                count++;\n    \
    \        }\n            i++;\n        }\n        return count;", "        int\
    \ count = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n            char\
    \ c = s[i];\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U') {\n                count++;\n            }\n        }\n        return\
    \ count;", "        long n = 0;\n        for (int i = 0; i < s.Length; i += 2)\
    \ {\n            if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O'\
    \ || s[i] == 'U') {\n                n++;\n            }\n        }\n        return\
    \ n;", "        var sb = new StringBuilder();\n        foreach (var c in s) {\n\
    \            if (c >= 'A' && c <= 'Z') {\n                sb.Append(c);\n    \
    \        }\n        }\n        var ans = 0L;\n        for (var i = 0; i < sb.Length;\
    \ i += 2) {\n            if (sb[i] >= 'A' && sb[i] <= 'Z') {\n               \
    \ ans++;\n            }\n        }\n        return ans;", "        // Your code\
    \ here\n        var count = 0;\n        for (int i = 0; i < s.Length; i++) {\n\
    \            var ch = s[i];\n            if (i % 2 == 0 && 'A' <= ch && ch <=\
    \ 'Z' && (ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U')) {\n\
    \                count++;\n            }\n        }\n        return count;", " \
    \       long count = 0;\n        for (int i = 0; i < s.Length; i++) {\n      \
    \      if (i % 2 == 0 && IsUpper(s[i])) {\n                count++;\n        \
    \    }\n        }\n        return count;", '        throw new NotImplementedException();',
  "        // Your code goes here\n        int count = 0;\n        for (int i = 0;\
    \ i < s.Length; i++) {\n            if (i % 2 == 0 && (s[i] == 'A' || s[i] ==\
    \ 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')) {\n                count++;\n\
    \            }\n        }\n        return count;", "        int count = 0;\n \
    \       for (int i = 0; i < s.Length; i += 2) {\n            if (\"AEIOU\".Contains(s[i]))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        long result = 0;\n        for (int i = 0; i < s.Length; i++) {\n      \
    \      if (i % 2 == 0 && Char.IsUpper(s[i])) {\n                result += 1;\n\
    \            }\n        }\n        return result;", "        long count = 0;\n\
    \        for (int i = 0; i < s.Length; i++) {\n            if (i % 2 == 0 && Char.IsUpper(s[i]))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  '        return 0;', "        // your code here\n        return 0L;", "        char[]\
    \ vowels = { 'A', 'E', 'I', 'O', 'U' };\n        long count = 0;\n        for\
    \ (int i = 0; i < s.Length; i++) {\n            if (i % 2 == 0 && vowels.Contains(s[i]))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        long count = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n    \
    \        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U') {\n                count++;\n            }\n        }\n        return\
    \ count;", "        long ret = 0;\n        for (int i = 0; i < s.Length; i +=\
    \ 2) {\n            char c = s[i];\n            if (c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U')\n                ret++;\n        }\n       \
    \ return ret;", "        // YOUR CODE HERE\n        return 0L;", "        long\
    \ count = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n            if\
    \ (isVowel(s[i]) && isUpper(s[i])) {\n                count++;\n            }\n\
    \        }\n        return count;", '        throw new NotImplementedException();',
  "        var letters = \"AEIOU\";\n        long count = 0;\n        for (var i =\
    \ 0; i < s.Length; i++) {\n            if (i % 2 == 0 && letters.Contains(s[i]))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  '        return s.Where((c, i) => i % 2 == 0 && IsUpper(c)).Count();', "       \
    \ long ans = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n           \
    \ if (\"AEIOU\".Contains(s[i])) ans++;\n        }\n        return ans;", "   \
    \     long res = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n       \
    \     if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] ==\
    \ 'U')\n                res++;\n        }\n        return res;", "        return\
    \ s.Where((x, i) => i % 2 == 0 && (x == 'A' || x == 'E' || x == 'I' || x == 'O'\
    \ || x == 'U')).Count();", "        long cnt = 0;\n        for (long i = 0; i\
    \ < s.Length; i++) {\n            if (s[(int)i] >= 'A' && s[(int)i] <= 'Z' &&\
    \ i % 2 == 0) {\n                cnt++;\n            }\n        }\n        return\
    \ cnt;", "        long count = 0;\n        for (int i = 0; i < s.Length; i++)\
    \ {\n            if (i % 2 == 0 && char.IsUpper(s[i])) {\n                count++;\n\
    \            }\n        }\n        return count;", "        // Your code goes\
    \ here\n        return 0L;", "        var count = 0L;\n        for (var i = 0;\
    \ i < s.Length; i++) {\n            if (i % 2 == 0 && char.IsUpper(s[i])) {\n\
    \                count++;\n            }\n        }\n        return count;", " \
    \       // Your code goes here.\n        return 0L;", '        return ((long)s.Where((x,
    i) => i % 2 == 0 && "AEIOU".Contains(x)).Count());', "        string vowels =\
    \ \"AEIOU\";\n        int count = 0;\n        for (int i = 0; i < s.Length; i++)\
    \ {\n            if (i % 2 == 0 && vowels.Contains(s[i])) {\n                count++;\n\
    \            }\n        }\n        return count;", "        int count = 0;\n \
    \       for (int i = 0; i < s.Length; i += 2) {\n            if (Char.IsUpper(s[i])\
    \ && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        long count = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n    \
    \        switch (s[i]) {\n                case 'A':\n                case 'E':\n\
    \                case 'I':\n                case 'O':\n                case 'U':\n\
    \                    count++;\n                    break;\n            }\n   \
    \     }\n        return count;", "        int count = 0;\n        foreach (char\
    \ c in s) {\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U') {\n                count++;\n            }\n        }\n        return\
    \ count;", "        int n = s.Length;\n        long cnt = 0;\n        for (int\
    \ i = 0; i < n; i += 2) {\n            char c = s[i];\n            if (c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                cnt++;\n\
    \            }\n        }\n        return cnt;", "        long count = 0;\n  \
    \      for (int i = 0; i < s.Length; i++) {\n            if (i % 2 == 0 && char.IsUpper(s[i]))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        long count = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n    \
    \        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U')\n                count++;\n        }\n        return count;", "    \
    \    long result = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n     \
    \       result += is_upper_vowel(s[i]) ? 1 : 0;\n        }\n        return result;",
  "        // Your code goes here.\n        var count = 0;\n        var vowels = new\
    \ HashSet<char> { 'A', 'E', 'I', 'O', 'U' };\n        for (var i = 0; i < s.Length;\
    \ i++) {\n            if (i % 2 == 0 && vowels.Contains(s[i])) {\n           \
    \     count++;\n            }\n        }\n        return count;", "        long\
    \ count = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (i\
    \ % 2 == 0 && s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U') {\n                count += 1;\n            }\n        }\n        return\
    \ count;", "        int cnt = 0;\n        for (int i = 0; i < s.Length; i++) {\n\
    \            if (i % 2 == 0 && s[i] >= 'A' && s[i] <= 'Z')\n                cnt++;\n\
    \        }\n        return cnt;", '        return s.Count(c => c.IsUpper() &&
    (s.IndexOf(c) % 2 == 0));', "        // TODO: Replace the code below with your\
    \ own code\n        return -1L;", "        int count = 0;\n        for (int i\
    \ = 0; i < s.Length; i++) {\n            if (i % 2 == 0 && Char.IsUpper(s[i]))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        int c = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if\
    \ (i % 2 == 0 && Char.IsUpper(s[i]))\n                c++;\n        }\n      \
    \  return c;", "        long count = 0;\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            if (i % 2 == 0 && (s[i] == 'A' || s[i] == 'E' || s[i] ==\
    \ 'I' || s[i] == 'O' || s[i] == 'U')) {\n                count++;\n          \
    \  }\n        }\n        return count;", "        // Fill in the code here.\n\
    \        return 0L;", "        return (\n            // ReSharper disable once\
    \ PossibleNullReferenceException\n            // ReSharper disable once PossibleLossOfFraction\n\
    \            from i in Enumerable.Range(0, s.Length)\n            where s[i] ==\
    \ 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n          \
    \  where i % 2 == 0\n            select 1L\n        ).Sum();", "        long ret\
    \ = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n            ret += (s[i]\
    \ >= 'A' && s[i] <= 'Z' && s[i] != 'Y') ? 1 : 0;\n        }\n        return ret;",
  "        // Implement your code here!\n        return 0L;", '        throw new Exception("Not
    implemented.");', '        throw new NotImplementedException();', "        //\
    \ TODO: Implement me!\n        int count = 0;\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            if (i % 2 == 0 && s[i] == 'A' || s[i] == 'E' || s[i] ==\
    \ 'I' || s[i] == 'O' || s[i] == 'U') {\n                count++;\n           \
    \ }\n        }\n        return count;", "        long uppercase = 0;\n       \
    \ for (int i = 0; i < s.Length; i++) {\n            if (s[i] == 'A' || s[i] ==\
    \ 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n                if (i %\
    \ 2 == 0) {\n                    uppercase++;\n                }\n           \
    \ }\n        }\n        return uppercase;", "        return s.Where((x, i) =>\
    \ i % 2 == 0 && (x == 'A' || x == 'E' || x == 'I' || x == 'O' || x == 'U')).Count();",
  "        long ret = 0;\n        for (int i = 0; i < s.Length; i++) {\n         \
    \   if (s[i] >= 'A' && s[i] <= 'Z' && i % 2 == 0) {\n                ret++;\n\
    \            }\n        }\n        return ret;", '        return (long)s.Count((char
    c) => (s.IndexOf(c) % 2 == 0) && c.IsUpper());', "        long counter = 0;\n\
    \        for (int i = 0; i < s.Length; i += 2) {\n            if (i % 2 == 0 &&\
    \ Char.IsUpper(s[i]))\n                counter++;\n        }\n        return counter;",
  "        long ret = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n      \
    \      if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] ==\
    \ 'U') {\n                ret++;\n            }\n        }\n        return ret;",
  "        long count = 0;\n        int n = s.Length;\n        for (int i = 0; i <\
    \ n; i += 2) {\n            if (IsUpper(s[i])) {\n                count++;\n \
    \           }\n        }\n        return count;", "        var count = 0L;\n \
    \       for (var i = 0; i < s.Length; i++) {\n            if (i % 2 == 0 && \"\
    AEIOU\".Contains(s[i])) {\n                count++;\n            }\n        }\n\
    \        return count;", "        return s.Where((c, i) => c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U' && i % 2 == 0).Count();", "        // TODO:\
    \ Implement me\n        return 0;", "        long c = 0;\n        for (int i =\
    \ 0; i < s.Length; i += 2) {\n            if (s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U') {\n                c++;\n            }\n\
    \        }\n        return c;", "        long total = 0;\n        for (int i =\
    \ 0; i < s.Length; i++) {\n            if (s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U') {\n                if (i % 2 == 0) {\n\
    \                    total += 1;\n                }\n            }\n        }\n\
    \        return total;", "        long sum = 0;\n        for (int i = 0; i < s.Length;\
    \ i += 2) {\n            sum += (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' ||\
    \ s[i] == 'O' || s[i] == 'U') ? 1 : 0;\n        }\n        return sum;", "   \
    \     long count = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n     \
    \       if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] ==\
    \ 'U') {\n                count++;\n            }\n        }\n        return count;",
  "        var evenVowels = from vowel in s\n                         where (vowel\
    \ == 'A' || vowel == 'E' || vowel == 'I' || vowel == 'O' || vowel == 'U')\n  \
    \                       select vowel;\n        return evenVowels.Count();", " \
    \       long counter = 0;\n        for (int i = 0; i < s.Length; i++) {\n    \
    \        if (i % 2 == 0 && s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] ==\
    \ 'O' || s[i] == 'U') {\n                counter++;\n            }\n        }\n\
    \        return counter;", "        long count = 0;\n        for (int i = 0; i\
    \ < s.Length; i += 2) {\n            if (s[i] == 'A' || s[i] == 'E' || s[i] ==\
    \ 'I' || s[i] == 'O' || s[i] == 'U') {\n                count++;\n           \
    \ }\n        }\n        return count;", "        return s.Where((x, i) => i %\
    \ 2 == 0 && 'AEIOU'.Contains(x)).Count();", "        long count = 0;\n       \
    \ for (int i = 0; i < s.Length; i++) {\n            if (i % 2 == 0 && s[i] ==\
    \ 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n       \
    \         count += 1;\n            }\n        }\n        return count;", "   \
    \     int counter = 0;\n        for (int i = 0; i < s.Length; i+=2) {\n      \
    \      if (Char.IsUpper(s[i])) {\n                counter += 1;\n            }\n\
    \        }\n        return counter;", "        int count = 0;\n        char[]\
    \ vowels = new char[] { 'A', 'E', 'I', 'O', 'U' };\n        for (int i = 0; i\
    \ < s.Length; i++) {\n            if (i % 2 == 0 && vowels.Contains(s[i])) {\n\
    \                count++;\n            }\n        }\n        return count;", " \
    \       // *** SOURCE: https://en.wikipedia.org/wiki/Check_digit#Luhn_formula\n\
    \        // *** SOURCE: https://en.wikipedia.org/wiki/Luhn_algorithm\n       \
    \ long ret = 0;\n        for (int i = 0; i < s.Length; i++) {\n            //Console.WriteLine(\"\
    i = {0}, s[i] = {1}\", i, s[i]);\n            if (i % 2 == 0 && s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n                ret++;\n\
    \        }\n        return ret;", "        // Fill in your code here.\n      \
    \  // You may need to edit the line below.\n        return 0L;", '        return
    s.Select((x,i) => (i%2==0 && x.ToString() == x.ToString().ToUpper()) ? 1 : 0).Sum();',
  "        long count = 0;\n        for (long i = 0; i < s.Length; i++) {\n      \
    \      if (s[(int)i] == 'A' || s[(int)i] == 'E' || s[(int)i] == 'I' || s[(int)i)\
    \ == 'O' || s[(int)i] == 'U') {\n                if (i % 2 == 0) {\n         \
    \           count = count + 1;\n                }\n            }\n        }\n\
    \        return count;", "        long num_upper = 0;\n        for (int i = 0;\
    \ i < s.Length; i++) {\n            if (s[i] >= 'A' && s[i] <= 'Z' && i % 2 ==\
    \ 0) {\n                num_upper++;\n            }\n        }\n        return\
    \ num_upper;", "        long cnt = 0;\n        for (int i = 0; i < s.Length; i++)\
    \ {\n            char c = s[i];\n            if (i % 2 == 0 && \"AEIOU\".Contains(c))\
    \ {\n                cnt++;\n            }\n        }\n        return cnt;", " \
    \       long v = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n       \
    \     if (isUpperVowel(s[i])) {\n                v += 1;\n            }\n    \
    \    }\n        return v;", "        return (from c in s.Select((x, i) => new\
    \ {\n            value = x,\n            index = i\n        })\n             \
    \   where \"AEIOU\".Contains(c.value) && c.index % 2 == 0\n                select\
    \ c).Count();", "        long count = 0;\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            if (i % 2 == 0 && isVowel(s[i])) {\n                count++;\n\
    \            }\n        }\n        return count;", "        // Since we need to\
    \ count the number of uppercase vowels in even\n        // indices, we can do\
    \ this in two parts:\n        //\n        // 1. Count all of the upper case vowels.\n\
    \        // 2. Count all of the vowels in even indices.\n        //\n        //\
    \ We can use the \"Where\" LINQ extension to filter the input string\n       \
    \ // for only upper case vowels and then use the \"Count\" LINQ extension\n  \
    \      // to count the number of upper case vowels.\n        // We can use the\
    \ \"Where\" LINQ extension to filter the input string\n        // for only even\
    \ indices (using the \"Index\" LINQ extension to track\n        // the index of\
    \ each character in the string) and then use the \"Count\"\n        // LINQ extension\
    \ to count the number of vowels in even indices.\n        //\n        // Doing\
    \ this in two parts allows us to count both of the parts in\n        // one pass\
    \ over the string.\n        //\n        // We then multiply these two counts together,\
    \ since we only need to\n        // count vowels at even indices that are also\
    \ upper case.\n        return s.Where(Char.IsUpper).Count() * s.Where((x, i) =>\
    \ i % 2 == 0).Count(Char.IsUpper);", "        long count = 0;\n        // Implement\
    \ your solution here\n        return count;", "        int VOWELS = new int[]\
    \ {'A', 'E', 'I', 'O', 'U'}.Length;\n        long[] array = new long[VOWELS];\n\
    \        for (int i = 0; i < s.Length; i++) {\n            if (i % 2 == 0) {\n\
    \                // Upper case\n                if (s[i] == 'A') {\n         \
    \           array[0]++;\n                } else if (s[i] == 'E') {\n         \
    \           array[1]++;\n                } else if (s[i] == 'I') {\n         \
    \           array[2]++;\n                } else if (s[i] == 'O') {\n         \
    \           array[3]++;\n                } else if (s[i] == 'U') {\n         \
    \           array[4]++;\n                }\n            }\n        }\n       \
    \ long result = 0;\n        for (int i = 0; i < VOWELS; i++) {\n            result\
    \ += array[i];\n        }\n        return result;", "        long res = 0;\n \
    \       for (int i = 0; i < s.Length; i++) {\n            if (i % 2 == 0 && \"\
    AEIOU\".Contains(s[i])) {\n                res++;\n            }\n        }\n\
    \        return res;", "        long count = 0;\n        for (int i = 0; i < s.Length;\
    \ i += 2) {\n            if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U') {\n                count++;\n            }\n        }\n\
    \        return count;", "        var cnt = 0L;\n        for (var i = 0; i < s.Length;\
    \ i += 2) {\n            if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U') {\n                cnt++;\n            }\n        }\n\
    \        return cnt;", "        int count = 0;\n        for (int i = 0; i < s.Length;\
    \ i += 2) {\n            if (IsUpper(s[i])) {\n                count++;\n    \
    \        }\n        }\n        return count;", "        int len = s.Length;\n\
    \        long sum = 0;\n        for (int i = 0; i < len; i += 2) {\n         \
    \   if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\
    \ {\n                sum++;\n            }\n        }\n        return sum;", '        return
    CountUpper_Imp1(s);', "        long c = 0;\n        for (int i = 0; i < s.Length;\
    \ i += 2) {\n            if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U') {\n                c++;\n            }\n        }\n \
    \       return c;", '        return s.Where((c, i) => "AEIOU".Contains(c) && i
    % 2 == 0).Count();', "        long count = 0;\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            if (i % 2 == 0 && \"AEIOU\".Contains(s[i])) {\n        \
    \        count++;\n            }\n        }\n        return count;", "       \
    \ int count = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if\
    \ (i % 2 == 0 && IsUpperVowel(s[i])) {\n                count++;\n           \
    \ }\n        }\n        return count;", "        long count = 0;\n        for\
    \ (int i = 0; i < s.Length; i += 2) {\n            if (s[i] == 'A' || s[i] ==\
    \ 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n                count++;\n\
    \            }\n        }\n        return count;", "        // >>> CountUpper((\"\
    aBCdEf\"))\n        long ans = 0;\n        for (int i = 0; i < s.Length; i +=\
    \ 2) {\n            if (isVowel(s[i])) {\n                ans++;\n           \
    \ }\n        }\n        return ans;", "        return (long)s.Select((x, i) =>\
    \ new { x, i })\n                     .Where(p => p.i % 2 == 0 && IsUpper(p.x))\n\
    \                     .Count();", "        long upper = 0;\n        for (int i\
    \ = 0; i < s.Length; i++) {\n            if (i % 2 == 0 && Char.IsUpper(s[i]))\
    \ {\n                upper++;\n            }\n        }\n        return upper;",
  "        long count = 0;\n        for (long i = 0; i < s.Length; i++) {\n      \
    \      if (i % 2 == 0 && IsUpper(s[(int)i])) {\n                count++;\n   \
    \         }\n        }\n        return count;", "        // Your code goes here.\n\
    \        return 0L;", "        long count = 0;\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            if (i % 2 == 0 && Char.IsUpper(s[i])) {\n              \
    \  count++;\n            }\n        }\n        return count;", "        // TODO:\n\
    \        // Insert Code here\n        return -1;", "        long count = 0;\n\
    \        for (int i = 0; i < s.Length; i++) {\n            if (i % 2 == 0 && char.IsUpper(s[i]))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        var count = 0L;\n        foreach (var c in s) {\n            // Check if\
    \ uppercase\n            if (c >= 'A' && c <= 'Z') {\n                // Check\
    \ if even index\n                if (s.IndexOf(c) % 2 == 0) {\n              \
    \      count++;\n                }\n            }\n        }\n        return count;",
  "        long c = 0;\n        for (int i = 0; i < s.Length; i += 2) {\n        \
    \    switch (s[i]) {\n                case 'A':\n                case 'E':\n \
    \               case 'I':\n                case 'O':\n                case 'U':\n\
    \                    c++;\n                    break;\n            }\n       \
    \ }\n        return c;", "        // TODO - Add your code here\n        return\
    \ -1;", "        return s.Where((c, i) => i % 2 == 0 && c >= 'A' && c <= 'Z').Count();",
  "        return Enumerable.Range(0, s.Length)\n            .Where(i => i % 2 ==\
    \ 0)\n            .Where(i => Char.IsUpper(s[i]))\n            .Count();", '        return
    0;', "        int count = 0;\n        for (int i = 0; i < s.Length; i++) {\n \
    \           if (i % 2 == 0 && char.IsUpper(s[i])) {\n                count++;\n\
    \            }\n        }\n        return count;", "        long sum = 0;\n  \
    \      for (int i = 0; i < s.Length; i++) {\n            if (i % 2 == 0 && IsUpper(s[i]))\
    \ {\n                sum += 1;\n            }\n        }\n        return sum;",
  "        // enter your implementation here\n        long ans = 0;\n        for (int\
    \ i = 0; i < s.Length; i += 2) {\n            if (\"AEIOU\".Contains(s[i])) ans++;\n\
    \        }\n        return ans;", "        long count = 0;\n        for (int i\
    \ = 0; i < s.Length; i++) {\n            if (i % 2 == 0 && \"AEIOU\".Contains(s[i]))\
    \ {\n                count++;\n            }\n        }\n        return count;"]
stop_tokens:
- "\n    }\n"
