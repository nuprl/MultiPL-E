name: HumanEval_92_any_int
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that takes 3 numbers.\n    // Returns true\
  \ if one of the numbers is equal to the sum of the other two, and all numbers are\
  \ integers.\n    // Returns false in any other cases.\n    // Examples\n    // >>>\
  \ AnyInt((float)5L, (float)2L, (float)7L)\n    // (true)\n    // >>> AnyInt((float)3L,\
  \ (float)2L, (float)2L)\n    // (false)\n    // >>> AnyInt((float)3L, (float)-2L,\
  \ (float)1L)\n    // (true)\n    // >>> AnyInt((3.6f), (-2.2f), (float)2L)\n   \
  \ // (false)\n    public static bool AnyInt(float x, float y, float z) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AnyInt((float)2L,\
  \ (float)3L, (float)1L) == (true));\n    Debug.Assert(AnyInt((2.5f), (float)2L,\
  \ (float)3L) == (false));\n    Debug.Assert(AnyInt((1.5f), (float)5L, (3.5f)) ==\
  \ (false));\n    Debug.Assert(AnyInt((float)2L, (float)6L, (float)2L) == (false));\n\
  \    Debug.Assert(AnyInt((float)4L, (float)2L, (float)2L) == (true));\n    Debug.Assert(AnyInt((2.2f),\
  \ (2.2f), (2.2f)) == (false));\n    Debug.Assert(AnyInt((float)-4L, (float)6L, (float)2L)\
  \ == (true));\n    Debug.Assert(AnyInt((float)2L, (float)1L, (float)1L) == (true));\n\
  \    Debug.Assert(AnyInt((float)3L, (float)4L, (float)7L) == (true));\n    Debug.Assert(AnyInt((3.0f),\
  \ (float)4L, (float)7L) == (false));\n    }\n\n}\n"
completions: ["        // Implement this function\n        return false;", "     \
    \   // Enter your code here\n        return false;", '        return x == y +
    z || y == x + z || z == x + y;', "        // Convert floats to integers.\n   \
    \     int xn = (int)x;\n        int yn = (int)y;\n        int zn = (int)z;\n \
    \       // Return whether any of the numbers is equal to the sum of the other\
    \ two.\n        return xn == yn + zn || yn == xn + zn || zn == xn + yn;", "  \
    \      if(x == y + z || y == x + z || z == x + y) {\n            if(Math.Floor(x)\
    \ == x && Math.Floor(y) == y && Math.Floor(z) == z) {\n                return\
    \ true;\n            }\n        }\n        return false;", "        // Convert\
    \ all values to Int32\n        int x1 = (int)x;\n        int y1 = (int)y;\n  \
    \      int z1 = (int)z;\n        // Check if any of the values are equal to the\
    \ sum of the other two\n        if (x1 == y1 + z1 || y1 == x1 + z1 || z1 == x1\
    \ + y1)\n            return true;\n        else\n            return false;", '        return
    (x == y + z || y == x + z || z == x + y) && (x % 1 == 0 && y % 1 == 0 && z % 1
    == 0);', '        return ((x == y + z) || (y == x + z) || (z == x + y)) && x %
    1 == 0 && y % 1 == 0 && z % 1 == 0;', '        return (x == (y + z) || y == (x
    + z) || z == (x + y)) && x % 1 == 0 && y % 1 == 0 && z % 1 == 0;', "        if\
    \ (x % 1 == 0 && y % 1 == 0 && z % 1 == 0) {\n            if (x + y == z || x\
    \ + z == y || y + z == x) {\n                return true;\n            }\n   \
    \     }\n        return false;", "        Debug.Assert(x <= y && y <= z);\n  \
    \      return x + y == z || x + z == y || y + z == x;", '        return (int)x
    + (int)y == (int)z || (int)x + (int)z == (int)y || (int)y + (int)z == (int)x;',
  '        return (x % 1 == 0 && y % 1 == 0 && z % 1 == 0) ? (x + y == z || x + z
    == y || y + z == x) : false;', '        return (x + y == z || x + z == y || y
    + z == x) && x == (int)x && y == (int)y && z == (int)z;', '        return (long)x
    + (long)y == (long)z || (long)x + (long)z == (long)y || (long)y + (long)z == (long)x;',
  '        return ((int)x + (int)y == (int)z) || ((int)x + (int)z == (int)y) || ((int)y
    + (int)z == (int)x);', '        return x == y + z || y == x + z || z == x + y;',
  "        // Your code here\n        return false;", "        // TODO: Implement\
    \ this function.\n        // Hint: You can use the `Math.Floor` function.\n  \
    \      return false;", '        return (x == (y + z) || y == (x + z) || z == (x
    + y)) && x == Math.Floor(x) && y == Math.Floor(y) && z == Math.Floor(z);', " \
    \       if (x % 1 == 0 && y % 1 == 0 && z % 1 == 0) {\n            int a = (int)x;\n\
    \            int b = (int)y;\n            int c = (int)z;\n            if (a +\
    \ b == c || a + c == b || b + c == a) {\n                return true;\n      \
    \      }\n        }\n        return false;", "        // Put your code here\n\
    \        // See comments for debugging help\n        return (x + y == z || x +\
    \ z == y || y + z == x) && (int)x == x && (int)y == y && (int)z == z;", '        return
    false;', '        return (((x == (y + z)) || (y == (x + z)) || (z == (x + y)))
    && ((Int32)x == x) && ((Int32)y == y) && ((Int32)z == z));', "        float a\
    \ = Math.Abs(x);\n        float b = Math.Abs(y);\n        float c = Math.Abs(z);\n\
    \        if (a - (int)a == 0 && b - (int)b == 0 && c - (int)c == 0) {\n      \
    \      if (a == b + c || b == a + c || c == a + b) {\n                return true;\n\
    \            }\n        }\n        return false;", "        float[] arr = new\
    \ float[] { x, y, z };\n        for (int i = 0; i < arr.Length; i++) {\n     \
    \       if (arr[i] % 1 != 0) {\n                return false;\n            }\n\
    \        }\n        Array.Sort(arr);\n        if (arr[2] == arr[0] + arr[1]) {\n\
    \            return true;\n        }\n        return false;", '        return
    (int)x + (int)y == (int)z || (int)x + (int)z == (int)y || (int)y + (int)z == (int)x;',
  '        return (int)x + (int)y == (int)z || (int)x + (int)z == (int)y || (int)y
    + (int)z == (int)x;', "        // first check whether all inputs are integers,\
    \ then check whether any equals sum of the others\n        return (x % 1 == 0\
    \ && y % 1 == 0 && z % 1 == 0) ? ((x == y + z) || (y == x + z) || (z == x + y))\
    \ : false;", "        var sum = x + y + z;\n        if ((x == sum - y - z) ||\
    \ (y == sum - x - z) || (z == sum - x - y)) {\n            return true;\n    \
    \    }\n        return false;", '        return (Math.Floor(x) + Math.Floor(y)
    == Math.Floor(z) || Math.Floor(x) + Math.Floor(z) == Math.Floor(y) || Math.Floor(y)
    + Math.Floor(z) == Math.Floor(x));', '        return (x%1==0) && (y%1==0) && (z%1==0)
    && (x+y==z || x+z==y || y+z==x);', "        int xr = (int)x;\n        int yr =\
    \ (int)y;\n        int zr = (int)z;\n        if ((xr != x) || (yr != y) || (zr\
    \ != z)) {\n            return false;\n        }\n        return ((xr == yr +\
    \ zr) || (xr + yr == zr) || (xr + zr == yr));", "        // Write your code here\n\
    \        var xIsInt = isInt(x);\n        var yIsInt = isInt(y);\n        var zIsInt\
    \ = isInt(z);\n        var onlyInts = xIsInt && yIsInt && zIsInt;\n        if\
    \ (onlyInts) {\n            var oneOf = x + y == z || x + z == y || y + z == x;\n\
    \            return oneOf;\n        }\n        return false;", '        return
    (int)x + (int)y == (int)z || (int)x + (int)z == (int)y || (int)y + (int)z == (int)x;',
  "        int[] arr = new int[] { (int)x, (int)y, (int)z };\n        int a = arr[0];\n\
    \        int b = arr[1];\n        int c = arr[2];\n        if (a + b == c || a\
    \ + c == b || b + c == a)\n            return true;\n        return false;", " \
    \       if ((x + y == z) && (IsInteger(x)) && (IsInteger(y)) && (IsInteger(z)))\n\
    \            return true;\n        if ((x + z == y) && (IsInteger(x)) && (IsInteger(y))\
    \ && (IsInteger(z)))\n            return true;\n        if ((y + z == x) && (IsInteger(x))\
    \ && (IsInteger(y)) && (IsInteger(z)))\n            return true;\n        return\
    \ false;", '        return ((x + y == z) || (x + z == y) || (y + z == x)) && x
    % 1 == 0 && y % 1 == 0 && z % 1 == 0;', "        bool[] bs = new bool[3];\n  \
    \      bool[] sum = new bool[3];\n        bs[0] = x == Math.Floor(x);\n      \
    \  bs[1] = y == Math.Floor(y);\n        bs[2] = z == Math.Floor(z);\n        sum[0]\
    \ = x == y + z;\n        sum[1] = y == x + z;\n        sum[2] = z == x + y;\n\
    \        bool b = false;\n        foreach (bool bl in bs) {\n            b = b\
    \ || bl;\n        }\n        bool s = false;\n        foreach (bool bl in sum)\
    \ {\n            s = s || bl;\n        }\n        return b && s;", "        float[]\
    \ a = { x, y, z };\n        Array.Sort(a);\n        return Math.Abs(a[2] - (a[0]\
    \ + a[1])) < 1e-5 && x == (int)x && y == (int)y && z == (int)z;", "        int\
    \ i = (int)x;\n        int j = (int)y;\n        int k = (int)z;\n        return\
    \ x == i && y == j && z == k && (i + j == k || i + k == j || j + k == i);", " \
    \       bool a = (x+y==z) || (x+z==y) || (y+z==x);\n        bool b = x is int\
    \ && y is int && z is int;\n        bool c = (int)x == x && (int)y == y && (int)z\
    \ == z;\n        return a && b && c;", "        int a = Convert.ToInt32(x);\n\
    \        int b = Convert.ToInt32(y);\n        int c = Convert.ToInt32(z);\n  \
    \      return a == b + c || b == a + c || c == a + b;", "        if (Math.Abs(x)\
    \ == Math.Abs(y) + Math.Abs(z)) {\n            return true;\n        }\n     \
    \   if (Math.Abs(y) == Math.Abs(x) + Math.Abs(z)) {\n            return true;\n\
    \        }\n        if (Math.Abs(z) == Math.Abs(x) + Math.Abs(y)) {\n        \
    \    return true;\n        }\n        return false;", "        double[] args =\
    \ new double[] { x, y, z };\n        return !args.Any(x => (int)x != x) && args.Any(x\
    \ => x == args.Sum() - x);", "        float x1 = x;\n        float y1 = y;\n \
    \       float z1 = z;\n        float x2 = x;\n        float y2 = y;\n        float\
    \ z2 = z;\n        float x3 = x;\n        float y3 = y;\n        float z3 = z;\n\
    \        float x4 = x;\n        float y4 = y;\n        float z4 = z;\n       \
    \ float x5 = x;\n        float y5 = y;\n        float z5 = z;\n        float x6\
    \ = x;\n        float y6 = y;\n        float z6 = z;\n        float x7 = x;\n\
    \        float y7 = y;\n        float z7 = z;\n        float x8 = x;\n       \
    \ float y8 = y;\n        float z8 = z;\n        float x9 = x;\n        float y9\
    \ = y;\n        float z9 = z;\n        float x10 = x;\n        float y10 = y;\n\
    \        float z10 = z;\n        float x11 = x;\n        float y11 = y;\n    \
    \    float z11 = z;\n        float x12 = x;\n        float y12 = y;\n        float\
    \ z12 = z;\n        float x13 = x;\n        float y13 = y;\n        float z13\
    \ = z;\n        float x14 = x;\n        float y14 = y;\n        float z14 = z;\n\
    \        float x15 = x;\n        float y15 = y;\n        float z15 = z;\n    \
    \    float x16 = x;\n        float y16 = y;\n        float z16 = z;\n        float\
    \ x17 = x;\n        float y17 = y;\n        float z17 = z;\n        float x18\
    \ = x;\n        float y18 = y;\n        float z18 = z;\n        float x19 = x;\n\
    \        float y19 = y;\n        float z19 = z;\n        float x20 = x;\n    \
    \    float y20 = y;\n        float z20 = z;\n        float x21 = x;\n        float\
    \ y21 = y;\n        float z21 = z;\n        float x22 = x;", '        return (x
    % 1 == 0 && y % 1 == 0 && z % 1 == 0) && ((x + y == z) || (x + z == y) || (y +
    z == x));', '        return ((x+y)==z || (x+z)==y || (y+z)==x) && (x==(int)x &&
    y==(int)y && z==(int)z);', "        if (x + y == z) return true;\n        if (x\
    \ + z == y) return true;\n        if (y + z == x) return true;\n        return\
    \ false;", "        if (Math.Floor(x) == x && Math.Floor(y) == y && Math.Floor(z)\
    \ == z) {\n            if (x == y + z || y == x + z || z == x + y) {\n       \
    \         return true;\n            }\n        }\n        return false;", "  \
    \      // Your code here\n        if ((x % 1 == 0) && (y % 1 == 0) && (z % 1 ==\
    \ 0))\n        {\n            if ((x + y == z) || (x + z == y) || (y + z == x))\n\
    \            {\n                return true;\n            }\n            else\n\
    \            {\n                return false;\n            }\n        }\n    \
    \    else\n        {\n            return false;\n        }", "        // 2/3\n\
    \        var sum = x + y + z;\n        var xs = x + y;\n        var ys = x + z;\n\
    \        var zs = y + z;\n        if (xs == z) {\n            if (IsInt(xs) &&\
    \ IsInt(y) && IsInt(z)) {\n                return true;\n            }\n     \
    \   }\n        if (ys == z) {\n            if (IsInt(ys) && IsInt(x) && IsInt(z))\
    \ {\n                return true;\n            }\n        }\n        if (zs ==\
    \ x) {\n            if (IsInt(zs) && IsInt(y) && IsInt(x)) {\n               \
    \ return true;\n            }\n        }\n        if (zs == y) {\n           \
    \ if (IsInt(zs) && IsInt(x) && IsInt(y)) {\n                return true;\n   \
    \         }\n        }\n        return false;", '        return x == y + z ||
    x == y - z || x == z - y;', '        return x == y + z || y == x + z || z == x
    + y;', '        return x == y + z || y == x + z || z == x + y;', "        if ((int)x\
    \ + (int)y == (int)z) {\n            return true;\n        }\n        if ((int)x\
    \ + (int)z == (int)y) {\n            return true;\n        }\n        if ((int)y\
    \ + (int)z == (int)x) {\n            return true;\n        }\n        return false;",
  '        return ((int)x + (int)y == (int)z) || ((int)x + (int)z == (int)y) || ((int)y
    + (int)z == (int)x);', "        float a = x + y;\n        float b = x + z;\n \
    \       float c = y + z;\n        if (x.GetType() == typeof(int) && y.GetType()\
    \ == typeof(int) && z.GetType() == typeof(int))\n        {\n            if (a\
    \ == z || b == y || c == x)\n            {\n                return true;\n   \
    \         }\n            else\n            {\n                return false;\n\
    \            }\n        }\n        else\n        {\n            return false;\n\
    \        }", '        return false;', '        return Math.Truncate(x) + Math.Truncate(y)
    == Math.Truncate(z) || Math.Truncate(x) + Math.Truncate(z) == Math.Truncate(y)
    || Math.Truncate(y) + Math.Truncate(z) == Math.Truncate(x);', '        return
    (int)x == x && (int)y == y && (int)z == z && (int)x + (int)y == (int)z || (int)x
    + (int)z == (int)y || (int)y + (int)z == (int)x;', '        throw new NotImplementedException();',
  "        if ((float) (((float) x) + ((float) y)) == z) {\n            return true;\n\
    \        }\n        if ((float) (((float) x) + ((float) z)) == y) {\n        \
    \    return true;\n        }\n        if ((float) (((float) y) + ((float) z))\
    \ == x) {\n            return true;\n        }\n        return false;", "    \
    \    if ( (int)x == (int)y + (int)z) {\n            return true;\n        }\n\
    \        if ( (int)y == (int)x + (int)z) {\n            return true;\n       \
    \ }\n        if ( (int)z == (int)x + (int)y) {\n            return true;\n   \
    \     }\n        return false;", '        return ((int)x + (int)y == (int)z) ||
    ((int)x + (int)z == (int)y) || ((int)y + (int)z == (int)x);', "        if (IsInteger(x)\
    \ && IsInteger(y) && IsInteger(z)) {\n            return ((x + y == z) || (x +\
    \ z == y) || (y + z == x));\n        }\n        return false;", "        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\"\
    );\n        if (x != Math.Truncate(x) || y != Math.Truncate(y) || z != Math.Truncate(z))\
    \ {\n            return false;\n        }\n        if (x + y == z || x + z ==\
    \ y || y + z == x) {\n            return true;\n        }\n        return false;",
  "        if(x.Equals(Math.Round(x)) && y.Equals(Math.Round(y)) && z.Equals(Math.Round(z)))\
    \ {\n            if(x + y == z || x + z == y || y + z == x) {\n              \
    \  return true;\n            }\n        }\n        return false;", "        if\
    \ (x == y + z || x == y - z || y == x + z || y == x - z || z == x + y || z ==\
    \ x - y)\n            return true;\n        else return false;", "        // Write\
    \ your code here.\n        throw new NotImplementedException();", "        //\
    \ returns true if x is equal to the sum of y and z and x, y, and z are all integers\n\
    \        // returns false in any other cases\n        return (((int)x == (int)y\
    \ + (int)z) && ((int)x == x) && ((int)y == y) && ((int)z == z));", "        return\
    \ ((x.GetType() == typeof(int)) &&\n                (y.GetType() == typeof(int))\
    \ &&\n                (z.GetType() == typeof(int)) &&\n                ((x + y\
    \ == z) || (x + z == y) || (y + z == x)));", '        return (IsInt(x) && IsInt(y)
    && IsInt(z)) && ((x + y == z) || (x + z == y) || (y + z == x));', "        if\
    \ (x % 1 != 0 || y % 1 != 0 || z % 1 != 0) {\n            return false;\n    \
    \    }\n        if (x + y == z || x + z == y || y + z == x) {\n            return\
    \ true;\n        }\n        return false;", '        return ((int)x + (int)y ==
    (int)z) || ((int)x + (int)z == (int)y) || ((int)y + (int)z == (int)x);', "   \
    \     if (x - (long)x != 0) return false;\n        if (y - (long)y != 0) return\
    \ false;\n        if (z - (long)z != 0) return false;\n        if (x + y == z)\
    \ return true;\n        if (x + z == y) return true;\n        if (y + z == x)\
    \ return true;\n        return false;", "        float[] nums = new float[] {\
    \ x, y, z };\n        int numNonInts = 0;\n        foreach (float num in nums)\
    \ {\n            if (Math.Truncate(num) != num) {\n                numNonInts++;\n\
    \            }\n        }\n        if (numNonInts > 0) {\n            return false;\n\
    \        }\n        float[] sumPossibilities = new float[] {\n            x +\
    \ y,\n            x + z,\n            y + z\n        };\n        foreach (float\
    \ sum in sumPossibilities) {\n            if (x == sum || y == sum || z == sum)\
    \ {\n                return true;\n            }\n        }\n        return false;",
  "        bool a = x % 1 == 0 && y % 1 == 0 && z % 1 == 0;\n        bool b = x ==\
    \ y + z || y == x + z || z == x + y;\n        return a && b;", "        float\
    \ sum = x + y + z;\n        if(x - sum == 0 || y - sum == 0 || z - sum == 0) {\n\
    \            return true;\n        }\n        return false;", "        // throw\
    \ new System.NotImplementedException();\n        if (x == (int)x && y == (int)y\
    \ && z == (int)z) {\n            return true;\n        }\n        else {\n   \
    \         return false;\n        }", "        bool b1 = x == (y + z);\n      \
    \  bool b2 = y == (x + z);\n        bool b3 = z == (x + y);\n        return b1\
    \ || b2 || b3;", "        // This is some pointless code that needs refactoring.\n\
    \        int a = (int)x;\n        int b = (int)y;\n        int c = (int)z;\n \
    \       int sum = a + b;\n        if (c == sum) {\n            return true;\n\
    \        }\n        sum = a + c;\n        if (b == sum) {\n            return\
    \ true;\n        }\n        sum = b + c;\n        if (a == sum) {\n          \
    \  return true;\n        }\n        return false;", '        return (x == (y +
    z) || y == (x + z) || z == (x + y)) && (int)x == x && (int)y == y && (int)z ==
    z;', '        return ((x != Math.Round(x)) || (y != Math.Round(y)) || (z != Math.Round(z)))
    ? false : ((x + y == z) || (x + z == y) || (y + z == x));', "        float sum\
    \ = x + y + z;\n        // try to do a float comparison with a float delta\n \
    \       float delta = 0.000001f;\n        if (Math.Abs(x - sum) < delta) {\n \
    \           return true;\n        }\n        if (Math.Abs(y - sum) < delta) {\n\
    \            return true;\n        }\n        if (Math.Abs(z - sum) < delta) {\n\
    \            return true;\n        }\n        return false;", '        return
    (x % 1 == 0 && y % 1 == 0 && z % 1 == 0) && (x + y == z || x + z == y || y + z
    == x);', '        return (x % 1 == 0) && (y % 1 == 0) && (z % 1 == 0) && (x +
    y == z || x + z == y || y + z == x);', '        return Math.Round(x) + Math.Round(y)
    == Math.Round(z) || Math.Round(x) + Math.Round(z) == Math.Round(y) || Math.Round(y)
    + Math.Round(z) == Math.Round(x);', "        var first = (int)x;\n        var\
    \ second = (int)y;\n        var third = (int)z;\n        if (first == second +\
    \ third || second == first + third || third == first + second)\n            return\
    \ true;\n        return false;", "        long xint = (long)x;\n        long yint\
    \ = (long)y;\n        long zint = (long)z;\n        return x == xint && y == yint\
    \ && z == zint &&\n            (xint == yint + zint || yint == xint + zint ||\
    \ zint == xint + yint);", "        if (x == (y + z) || y == (x + z) || z == (x\
    \ + y)) {\n            return true;\n        }\n        return false;", "    \
    \    float result = x + y;\n        if ((int)result == z) {\n            return\
    \ true;\n        } else {\n            result = y + z;\n            if ((int)result\
    \ == x) {\n                return true;\n            } else {\n              \
    \  result = x + z;\n                if ((int)result == y) {\n                \
    \    return true;\n                } else {\n                    return false;\n\
    \                }\n            }\n        }", '        return Math.Round(x) +
    Math.Round(y) == Math.Round(z) || Math.Round(x) + Math.Round(z) == Math.Round(y)
    || Math.Round(y) + Math.Round(z) == Math.Round(x);', "        if (Math.Abs(Math.Floor(x)\
    \ - x) > 0) {\n            return false;\n        }\n        if (Math.Abs(Math.Floor(y)\
    \ - y) > 0) {\n            return false;\n        }\n        if (Math.Abs(Math.Floor(z)\
    \ - z) > 0) {\n            return false;\n        }\n        if (x == y + z) {\n\
    \            return true;\n        }\n        if (y == x + z) {\n            return\
    \ true;\n        }\n        if (z == x + y) {\n            return true;\n    \
    \    }\n        return false;", "        // your code goes here...\n        return\
    \ false;", '        return !(x % 1 != 0 || y % 1 != 0 || z % 1 != 0) && (x + y
    == z || x + z == y || y + z == x);', "        // write your code here\n      \
    \  return false;", "        // Your code here.\n        return (int)x + (int)y\
    \ == (int)z || (int)x + (int)z == (int)y || (int)y + (int)z == (int)x;", "   \
    \     bool result = false;\n        int[] numbers = new int[] { (int)x, (int)y,\
    \ (int)z };\n        int sum = numbers.Sum();\n        foreach (int i in numbers)\
    \ {\n            if (sum == 2 * i) {\n                result = true;\n       \
    \     }\n        }\n        return result;", "        if ((int)x + (int)y == (int)z)\
    \ {\n            return true;\n        }\n        if ((int)x + (int)z == (int)y)\
    \ {\n            return true;\n        }\n        if ((int)y + (int)z == (int)x)\
    \ {\n            return true;\n        }\n        return false;", '        return
    (x % 1 == 0) && (y % 1 == 0) && (z % 1 == 0) && (x + y == z || x + z == y || y
    + z == x);', "        // Your code\n        throw new NotImplementedException();",
  '        return (x % 1 == 0 && y % 1 == 0 && z % 1 == 0) && (x + y == z || x + z
    == y || y + z == x);', '        return (int)x + (int)y == (int)z || (int)x + (int)z
    == (int)y || (int)y + (int)z == (int)x;', "        var xl = (int)x;\n        var\
    \ yl = (int)y;\n        var zl = (int)z;\n        if ((x - xl != 0.0) || (y -\
    \ yl != 0.0) || (z - zl != 0.0)) {\n            return false;\n        } else\
    \ {\n            return (xl == yl + zl) || (yl == xl + zl) || (zl == xl + yl);\n\
    \        }", "        bool xint = x - Math.Floor(x) == 0;\n        bool yint =\
    \ y - Math.Floor(y) == 0;\n        bool zint = z - Math.Floor(z) == 0;\n     \
    \   bool xy = x + y == z;\n        bool xz = x + z == y;\n        bool yz = y\
    \ + z == x;\n        return xint && yint && zint && (xy || xz || yz);", "    \
    \    // Test for non-integers\n        if (Math.Round(x) != x || Math.Round(y)\
    \ != y || Math.Round(z) != z) {\n            return false;\n        }\n      \
    \  float sum = Math.Abs(x + y);\n        return sum == z || sum == x || sum ==\
    \ y;", "        return \n            x % 1 == 0 && y % 1 == 0 && z % 1 == 0 &&\n\
    \            (x + y == z || x + z == y || y + z == x);", '        return (x %
    1 == 0 && y % 1 == 0 && z % 1 == 0) && (x + y == z || x + z == y || y + z == x);',
  "        float xyz = x + y + z;\n        float xy = x + y;\n        float xz = x\
    \ + z;\n        float yz = y + z;\n        if (x == xy + z || y == x + yz || z\
    \ == xz + y) {\n            return true;\n        }\n        return false;", '        return
    (x == y + z) || (y == x + z) || (z == x + y);', "        if (x < 0) x = -x;\n\
    \        if (y < 0) y = -y;\n        if (z < 0) z = -z;\n        int xFloor =\
    \ (int)x;\n        int yFloor = (int)y;\n        int zFloor = (int)z;\n      \
    \  if (xFloor != x) return false;\n        if (yFloor != y) return false;\n  \
    \      if (zFloor != z) return false;\n        if (xFloor + yFloor == zFloor)\
    \ return true;\n        if (xFloor + zFloor == yFloor) return true;\n        if\
    \ (yFloor + zFloor == xFloor) return true;\n        return false;", '        return
    false;', '        return (((int)x + (int)y == (int)z) || ((int)x + (int)z == (int)y)
    || ((int)y + (int)z == (int)x));', "        var x_r = (float)Math.Round(x);\n\
    \        var y_r = (float)Math.Round(y);\n        var z_r = (float)Math.Round(z);\n\
    \        return (x_r == y_r + z_r) || (y_r == x_r + z_r) || (z_r == x_r + y_r);",
  "        // implement\n        return (x + y == z || x + z == y || y + z == x) &&\
    \ (x == (int)x && y == (int)y && z == (int)z);", "        if(Math.Floor(x) ==\
    \ x && Math.Floor(y) == y && Math.Floor(z) == z) {\n            if(x + y == z\
    \ || x + z == y || y + z == x)\n                return true;\n        }\n    \
    \    return false;", "        var numbers = new [] {x, y, z};\n        return\
    \ numbers.Any(e => numbers.Where(el => el != e).Sum() == e);", "        // Todo:\
    \ implement the function AnyInt(...)\n        if ((x + y == z) || (x + z == y)\
    \ || (y + z == x))\n        {\n            if ((x % 1 == 0) && (y % 1 == 0) &&\
    \ (z % 1 == 0))\n            {\n                return true;\n            }\n\
    \        }\n        return false;", '        return (x % 1 == 0 && y % 1 == 0
    && z % 1 == 0) && ((x == y + z) || (y == x + z) || (z == x + y));', "        if\
    \ (isInt(x) && isInt(y) && isInt(z)) {\n            if (x == y + z || y == x +\
    \ z || z == x + y) {\n                return true;\n            }\n        }\n\
    \        return false;", '        return (int)x + (int)y == (int)z || (int)x +
    (int)z == (int)y || (int)y + (int)z == (int)x;', "        bool result = false;\n\
    \        if ((x % 1) == 0 && (y % 1) == 0 && (z % 1) == 0) {\n            result\
    \ = ((x + y) == z) || ((x + z) == y) || ((y + z) == x);\n        }\n        return\
    \ result;", '        return x == y + z || y == x + z || z == x + y ? true : false;',
  '        return (x.IsInt() && y.IsInt() && z.IsInt() && (x == y + z || y == x +
    z || z == x + y));', "        bool xyz = (x == y + z) || (y == x + z) || (z ==\
    \ x + y);\n        bool ints = (Math.Truncate(x) == x) && (Math.Truncate(y) ==\
    \ y) && (Math.Truncate(z) == z);\n        return xyz && ints;", '        return
    ((int)x + (int)y == (int)z) || ((int)x + (int)z == (int)y) || ((int)y + (int)z
    == (int)x);', "        float sum = x + y + z;\n        return ((int)x + (int)y\
    \ + (int)z == (int)sum) && ((int)x + (int)y == (int)sum || (int)x + (int)z ==\
    \ (int)sum || (int)y + (int)z == (int)sum);", '        return ((x == (y + z))
    || (y == (x + z)) || (z == (x + y))) && (x % 1 == 0) && (y % 1 == 0) && (z % 1
    == 0);', "        int ix = (int)x;\n        int iy = (int)y;\n        int iz =\
    \ (int)z;\n        return ix + iy == iz || ix + iz == iy || iy + iz == ix;", " \
    \       if (Math.Truncate(x) == x && Math.Truncate(y) == y && Math.Truncate(z)\
    \ == z) {\n            float sum = x + y;\n            if (sum == z) {\n     \
    \           return true;\n            }\n            sum = x + z;\n          \
    \  if (sum == y) {\n                return true;\n            }\n            sum\
    \ = y + z;\n            if (sum == x) {\n                return true;\n      \
    \      }\n        }\n        return false;", "        // check if all are integers\n\
    \        if (Convert.ToInt32(x) == x && Convert.ToInt32(y) == y && Convert.ToInt32(z)\
    \ == z) {\n            // check if one is equal to the sum of the other two\n\
    \            if (Convert.ToInt32(x) == Convert.ToInt32(y) + Convert.ToInt32(z)\
    \ || Convert.ToInt32(y) == Convert.ToInt32(x) + Convert.ToInt32(z) || Convert.ToInt32(z)\
    \ == Convert.ToInt32(x) + Convert.ToInt32(y)) {\n                return true;\n\
    \            }\n        }\n        return false;", '        return x == y + z
    || x == y - z || x == z - y;', '        return (Math.Round(x) + Math.Round(y)
    == Math.Round(z)) || (Math.Round(y) + Math.Round(z) == Math.Round(x)) || (Math.Round(z)
    + Math.Round(x) == Math.Round(y));', "        return (x is int && y is int &&\
    \ z is int) &&\n        (x + y == z || x + z == y || y + z == x);", "        float\
    \ a = x+y;\n        float b = x+z;\n        float c = y+z;\n        if ((a%1 ==\
    \ 0) || (b%1 == 0) || (c%1 == 0)){\n            return true;\n        }\n    \
    \    else{\n            return false;\n        }", "        if ((float) Math.Floor(x)\
    \ == x && (float) Math.Floor(y) == y && (float) Math.Floor(z) == z) {\n      \
    \      return (x == y + z || y == x + z || z == x + y);\n        }\n        return\
    \ false;", '        return new[] { x, y, z }.Any(n => !n.Equals((int)n));', '        return
    ((x + y == z) || (x + z == y) || (y + z == x)) && x % 1 == 0 && y % 1 == 0 &&
    z % 1 == 0;', "        return (\n            (int)x + (int)y == (int)z ||\n  \
    \          (int)x + (int)z == (int)y ||\n            (int)y + (int)z == (int)x\n\
    \        );", "        if (x == (y + z) || y == (x + z) || z == (x + y))\n   \
    \         return true;\n        else\n            return false;", "        int\
    \ iX = (int)x;\n        int iY = (int)y;\n        int iZ = (int)z;\n        return\
    \ ((iX == iY + iZ) || (iY == iX + iZ) || (iZ == iX + iY));", "        bool result\
    \ = false;\n        if (x == z + y || x == z - y || x == y - z) {\n          \
    \  result = true;\n        }\n        if (y == z + x || y == z - x || y == x -\
    \ z) {\n            result = true;\n        }\n        if (z == x + y || z ==\
    \ x - y || z == y - x) {\n            result = true;\n        }\n        return\
    \ result;", "        return ((int)x + (int)y == (int)z)\n            || ((int)x\
    \ + (int)z == (int)y)\n            || ((int)y + (int)z == (int)x);", "       \
    \ if (x == y + z) {\n            return true;\n        }\n        if (y == x +\
    \ z) {\n            return true;\n        }\n        if (z == x + y) {\n     \
    \       return true;\n        }\n        return false;", "        var sorted =\
    \ new List<float>() { x, y, z }.OrderBy(n => n).ToList();\n        return sorted[0]\
    \ + sorted[1] == sorted[2] && sorted.All(n => (int)n == n);", '        return
    ((int)x == ((int)y + (int)z)) || ((int)y == ((int)x + (int)z)) || ((int)z == ((int)x
    + (int)y));', "        bool result = false;\n        // Create your code\n   \
    \     return result;", '        return (x == y + z || y == x + z || z == x + y)
    && Math.Truncate(x) == x && Math.Truncate(y) == y && Math.Truncate(z) == z;',
  "        // Type your code here\n        return ((int)x + (int)y == (int)z) || ((int)x\
    \ + (int)z == (int)y) || ((int)y + (int)z == (int)x);", '        return ((int)x
    + (int)y == (int)z) || ((int)x + (int)z == (int)y) || ((int)y + (int)z == (int)x);',
  "        int[] a = new int[] {(int)x, (int)y, (int)z};\n        int sum = a.Sum();\n\
    \        if (sum % 2 == 0) {\n            int halfSum = sum / 2;\n           \
    \ return (halfSum != a[0] && halfSum != a[1] && halfSum != a[2]);\n        }\n\
    \        return false;", "        if ((int)x + (int)y == (int)z) {\n         \
    \   return true;\n        }\n        if ((int)x + (int)z == (int)y) {\n      \
    \      return true;\n        }\n        if ((int)y + (int)z == (int)x) {\n   \
    \         return true;\n        }\n        return false;", '        return x +
    y == z || x + z == y || y + z == x;', "        // Write your code here.\n    \
    \    throw new NotImplementedException();", '        return x == y + z || x ==
    y - z || x == z - y;', "        if (Math.Round(x) == x && Math.Round(y) == y &&\
    \ Math.Round(z) == z) {\n            if (x == y + z || y == x + z || z == x +\
    \ y) {\n                return true;\n            }\n        }\n        return\
    \ false;", "        // put your code here\n        return false;", "        double[]\
    \ arr = new double[] { x, y, z };\n        arr = arr.OrderBy(i => i).ToArray();\n\
    \        if (Math.Floor(arr[0]) == arr[0] && Math.Floor(arr[1]) == arr[1] && Math.Floor(arr[2])\
    \ == arr[2]) {\n            return arr[0] + arr[1] == arr[2];\n        }\n   \
    \     return false;", "        // Your code goes here.\n        return false;",
  '        return (x % 1 == 0 && y % 1 == 0 && z % 1 == 0) && (x + y == z || x + z
    == y || y + z == x);', "        // My code:\n        if (Math.Abs(Math.Truncate(x)\
    \ - x) < 0.00001)\n            if (Math.Abs(Math.Truncate(y) - y) < 0.00001)\n\
    \                if (Math.Abs(Math.Truncate(z) - z) < 0.00001)\n             \
    \       if (x == y + z || y == x + z || z == x + y)\n                        return\
    \ true;\n        return false;", '        return x % 1 == 0 && y % 1 == 0 && z
    % 1 == 0 && (x + y == z || x + z == y || y + z == x);', "        // Your code\
    \ here\n        return false;", '        return x % 1 == 0 && y % 1 == 0 && z
    % 1 == 0 && (x + y == z || x + z == y || y + z == x);', "        var epsilon =\
    \ 0.0001f;\n        var a = Math.Abs(x - (y + z));\n        var b = Math.Abs(y\
    \ - (x + z));\n        var c = Math.Abs(z - (x + y));\n        return (a < epsilon\
    \ || b < epsilon || c < epsilon);", "        if (x % 1 == 0 && y % 1 == 0 && z\
    \ % 1 == 0) {\n            if (x + y == z || x + z == y || y + z == x) {\n   \
    \             return true;\n            }\n        }\n        return false;",
  "        //TODO: improve this to allow for floating point numbers with no decimals\n\
    \        var c = Convert.ToInt32(x);\n        var a = Convert.ToInt32(y);\n  \
    \      var b = Convert.ToInt32(z);\n        var d = a + b;\n        var e = a\
    \ + c;\n        var f = b + c;\n        if ((d == c) || (e == b) || (f == a))\n\
    \            return true;\n        else\n            return false;", "       \
    \ // Your code goes here...\n        if (x.GetType() == typeof(int) && y.GetType()\
    \ == typeof(int) && z.GetType() == typeof(int)) {\n            if (x == y + z\
    \ || x == y - z || x == z - y) {\n                return true;\n            }\n\
    \            else if (y == x + z || y == x - z || y == z - x) {\n            \
    \    return true;\n            }\n            else if (z == x + y || z == x -\
    \ y || z == y - x) {\n                return true;\n            }\n          \
    \  else {\n                return false;\n            }\n        }\n        else\
    \ {\n            return false;\n        }", "        if ((((int)x) + ((int)y))\
    \ == ((int)z)) {\n            return true;\n        }\n        if ((((int)x) +\
    \ ((int)z)) == ((int)y)) {\n            return true;\n        }\n        if ((((int)y)\
    \ + ((int)z)) == ((int)x)) {\n            return true;\n        }\n        return\
    \ false;", "        //Type your code here\n        bool x_bool = x == (int)x;\n\
    \        bool y_bool = y == (int)y;\n        bool z_bool = z == (int)z;\n    \
    \    bool s_bool = x_bool && y_bool && z_bool;\n        float a = Math.Abs(x -\
    \ y - z);\n        float b = Math.Abs(x - z - y);\n        float c = Math.Abs(y\
    \ - x - z);\n        float d = Math.Abs(y - z - x);\n        float e = Math.Abs(z\
    \ - x - y);\n        float f = Math.Abs(z - y - x);\n        float[] list = {\
    \ a, b, c, d, e, f };\n        float min = (float)list.Min();\n        if (min\
    \ == 0 && s_bool)\n            return true;\n        else\n            return\
    \ false;", '        return (z == (x + y)) && (x % 1 == 0) && (y % 1 == 0) && (z
    % 1 == 0);', '        return (x + y == z || x + z == y || y + z == x) && (x %
    1 == 0 && y % 1 == 0 && z % 1 == 0);', "        if ((x == (y + z)) && x == (int)x\
    \ && y == (int)y && z == (int)z)\n            return true;\n        if ((y ==\
    \ (x + z)) && x == (int)x && y == (int)y && z == (int)z)\n            return true;\n\
    \        if ((z == (x + y)) && x == (int)x && y == (int)y && z == (int)z)\n  \
    \          return true;\n        return false;", "        if (x == y + z || y\
    \ == x + z || z == x + y) {\n            return (x % 1 == 0 && y % 1 == 0 && z\
    \ % 1 == 0);\n        }\n        return false;", "        return (((x == y + z)\
    \ || (y == x + z) || (z == x + y)) &&\n            (x == (int)x) && (y == (int)y)\
    \ && (z == (int)z));", '        return true;', "        if (System.Math.Floor(x)\
    \ == x && System.Math.Floor(y) == y && System.Math.Floor(z) == z) {\n        \
    \    if (x == y + z || x + y == z || x + z == y) {\n                return true;\n\
    \            }\n        }\n        return false;", "        if (x == y + z ||\
    \ y == x + z || z == x + y) {\n            return true;\n        }\n        return\
    \ false;", '        return x == (y + z) || y == (x + z) || z == (x + y);', " \
    \       // Your code goes here.\n        return false;", "        // Return true\
    \ if integers and one = sum of other two\n        return (IsInt(x) && IsInt(y)\
    \ && IsInt(z) && OneIsSum(x, y, z));", "        int a = Convert.ToInt32(x);\n\
    \        int b = Convert.ToInt32(y);\n        int c = Convert.ToInt32(z);\n  \
    \      return (x == a && y == b && z == c && (a + b == c || a + c == b || b +\
    \ c == a));", "        float[] inputs = new float[] { x, y, z };\n        float\
    \ value = 0;\n        foreach (float fl in inputs) {\n            if (!IsInteger(fl))\
    \ return false;\n            value += fl;\n        }\n        foreach (float fl\
    \ in inputs) {\n            if (fl == value) return true;\n        }\n       \
    \ return false;", '        return (x + y == z || y + z == x || x + z == y) &&
    (x % 1 == 0 && y % 1 == 0 && z % 1 == 0);', '        return Int32.TryParse(x.ToString(),
    out int a) && Int32.TryParse(y.ToString(), out int b) && Int32.TryParse(z.ToString(),
    out int c) && (a == b + c || b == a + c || c == a + b);', '        return (x%1==0f
    && y%1==0f && z%1==0f && (x==y+z || y==x+z || z==x+y));', "        if (x == y\
    \ + z || y == x + z || z == x + y) {\n            return true;\n        }\n  \
    \      return false;", "        if ((int)x == (int)y + (int)z) return true;\n\
    \        if ((int)y == (int)x + (int)z) return true;\n        if ((int)z == (int)x\
    \ + (int)y) return true;\n        return false;", '        return (x + y == z)
    || (x + z == y) || (y + z == x);', '        return (((int)x + (int)y == (int)z)
    || ((int)x + (int)z == (int)y) || ((int)y + (int)z == (int)x));', "        return\
    \ (x == (y + z) || y == (x + z) || z == (x + y)) && \n               (x == (int)x\
    \ || y == (int)y || z == (int)z);", "        return (x % 1 == 0 && y % 1 == 0\
    \ && z % 1 == 0) &&\n            (x + y == z || x + z == y || y + z == x);", '        return
    x + y == z || y + z == x || x + z == y;', "        if (x % 1 == 0 && y % 1 ==\
    \ 0 && z % 1 == 0) {\n            if (x + y == z || x + z == y || y + z == x)\
    \ {\n                return true;\n            }\n        }\n        return false;",
  "        float a = x;\n        float b = y;\n        float c = z;\n        if (int.Equals(a,\
    \ (int)a) || int.Equals(b, (int)b) || int.Equals(c, (int)c)) {\n            return\
    \ true;\n        }\n        return false;", '        return (IsInt(x) && IsInt(y)
    && IsInt(z)) && (IsInt(x + y) || IsInt(x + z) || IsInt(y + z));', "        //\
    \ your code here\n        return false;", "        if(x % 1 == 0 && y % 1 == 0\
    \ && z % 1 == 0) {\n            return (x + y == z || x + z == y || y + z == x);\n\
    \        } else {\n            return false;\n        }", "        if (((int)x\
    \ + (int)y == (int)z) || ((int)x + (int)z == (int)y) || ((int)y + (int)z == (int)x))\n\
    \            return true;\n        return false;"]
stop_tokens:
- "\n    }\n"
