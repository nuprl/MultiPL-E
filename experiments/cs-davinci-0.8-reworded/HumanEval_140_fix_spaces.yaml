name: HumanEval_140_fix_spaces
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string text, replace all spaces in it with underscores,\
  \ \n    // and if a string has more than 2 consecutive spaces, \n    // then replace\
  \ all consecutive spaces with - \n    // >>> FixSpaces((\" Example\"))\n    // (\"\
  Example\")\n    // >>> FixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n   \
  \ // >>> FixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> FixSpaces((\"\
  \ Example 3\"))\n    // (\"_Example-3\")\n    public static string FixSpaces(string\
  \ text) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FixSpaces((\"\
  Example\")).Equals((\"Example\")));\n    Debug.Assert(FixSpaces((\"Mudasir Hanif\
  \ \")).Equals((\"Mudasir_Hanif_\")));\n    Debug.Assert(FixSpaces((\"Yellow Yellow\
  \  Dirty  Fellow\")).Equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    Debug.Assert(FixSpaces((\"\
  Exa   mple\")).Equals((\"Exa-mple\")));\n    Debug.Assert(FixSpaces((\"   Exa 1\
  \ 2 2 mple\")).Equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
completions: ["        string[] words = text.Split(' ');\n        string newStr =\
    \ \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i]\
    \ != \"\") {\n                newStr += words[i];\n                if (i < words.Length\
    \ - 1) {\n                    newStr += \"_\";\n                }\n          \
    \  }\n        }\n        words = newStr.Split('_');\n        newStr = \"\";\n\
    \        for (int i = 0; i < words.Length; i++) {\n            if (words[i] !=\
    \ \"\") {\n                if (words[i] == \"_\") {\n                    newStr\
    \ += \"-\";\n                } else {\n                    newStr += words[i];\n\
    \                }\n                if (i < words.Length - 1) {\n            \
    \        newStr += \"_\";\n                }\n            }\n        }\n     \
    \   return newStr;", "        // TODO\n        return text;", "        int count\
    \ = 0;\n        for (int i = 0; i < text.Length; i++) {\n            if (text[i]\
    \ == ' ') {\n                count++;\n            } else {\n                count\
    \ = 0;\n            }\n            if (count > 2) {\n                text = text.Replace(\"\
    \ \", \"-\");\n                return text;\n            }\n        }\n      \
    \  text = text.Replace(\" \", \"_\");\n        return text;", '        return
    text.Trim().Replace(" ", "_").Replace("__", "_").Replace("__", "-");', "     \
    \   // Replace all spaces with underscore\n        var len = text.Length;\n  \
    \      var myText = text.Replace(\" \", \"_\");\n        // 'counter' counts the\
    \ number of consecutive spaces\n        var counter = 0;\n        var result =\
    \ \"\";\n        // Check if there is more than one consecutive space\n      \
    \  for (int i = 0; i < len; i++) {\n            if (text[i] == ' ') {\n      \
    \          counter++;\n            } else {\n                counter = 0;\n  \
    \          }\n            // If more than one consecutive space, replace them\
    \ all with '-'\n            if (counter > 1) {\n                result += myText.Substring(0,\
    \ i - counter + 1);\n                result += \"-\";\n                result\
    \ += myText.Substring(i + 1);\n                myText = result;\n            \
    \    result = \"\";\n            }\n        }\n        return myText;", "    \
    \    StringBuilder sb = new StringBuilder();\n        int spaces = 0;\n      \
    \  foreach (char ch in text) {\n            if (ch == ' ') {\n               \
    \ spaces++;\n            } else {\n                if (spaces > 0) {\n       \
    \             if (spaces > 2) {\n                        sb.Append('-');\n   \
    \                 } else {\n                        for (int i = 0; i < spaces;\
    \ i++) {\n                            sb.Append('_');\n                      \
    \  }\n                    }\n                    spaces = 0;\n               \
    \ }\n                sb.Append(ch);\n            }\n        }\n        if (spaces\
    \ > 0) {\n            if (spaces > 2) {\n                sb.Append('-');\n   \
    \         } else {\n                for (int i = 0; i < spaces; i++) {\n     \
    \               sb.Append('_');\n                }\n            }\n        }\n\
    \        return sb.ToString();", "        StringBuilder sb = new StringBuilder();\n\
    \        int last = text.Length - 1;\n        int count = 0;\n        for (int\
    \ i = 0; i < text.Length; i++) {\n            char c = text[i];\n            if\
    \ (c == ' ') {\n                count++;\n                continue;\n        \
    \    }\n            if (count == 1) {\n                sb.Append('_');\n     \
    \       } else if (count >= 2) {\n                sb.Append('-');\n          \
    \  }\n            count = 0;\n            sb.Append(c);\n        }\n        if\
    \ (count == 1) {\n            sb.Append('_');\n        } else if (count >= 2)\
    \ {\n            sb.Append('-');\n        }\n        return sb.ToString();", " \
    \       string result = \"\";\n        int spaces = 0;\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                if (spaces == 0)\
    \ {\n                    result += '_';\n                }\n                else\
    \ if (spaces == 1) {\n                    result += '_';\n                }\n\
    \                else if (spaces == 2) {\n                    result += '-';\n\
    \                }\n                spaces++;\n            }\n            else\
    \ {\n                result += c;\n                spaces = 0;\n            }\n\
    \        }\n        return result;", '        return text.Trim().Replace(" ",
    "_").Replace("_", "__").Replace("__", "-");', "        // TODO\n        return\
    \ text;", "        // Fill In The Blank!\n        return \"\";", "        bool\
    \ isEmpty = true;\n        bool first = true;\n        bool second = true;\n \
    \       string result = \"\";\n        foreach (char letter in text) {\n     \
    \       if (letter == ' ') {\n                if (first) {\n                 \
    \   result += '_';\n                    first = false;\n                    isEmpty\
    \ = false;\n                } else if (second) {\n                    result +=\
    \ '_';\n                    second = false;\n                } else {\n      \
    \              result += '-';\n                }\n            } else {\n     \
    \           result += letter;\n                first = true;\n               \
    \ second = true;\n            }\n        }\n        if (isEmpty) return \"\";\n\
    \        return result;", "        text = text.Replace(\" \", \"_\");\n      \
    \  string[] words = text.Split(new[] { '_' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        StringBuilder sb = new StringBuilder();\n        foreach (string word\
    \ in words) {\n            sb.Append(word);\n            sb.Append(\"_\");\n \
    \       }\n        sb.Remove(sb.Length - 1, 1);\n        string result = sb.ToString();\n\
    \        return result;", "        StringBuilder sb = new StringBuilder();\n \
    \       int lastIsSpace = 0;\n        for (int i = 0; i < text.Length; i++) {\n\
    \            if (text[i] == ' ') {\n                lastIsSpace++;\n         \
    \       if (lastIsSpace < 3)\n                    sb.Append('_');\n          \
    \      else if (lastIsSpace == 3)\n                    sb.Append('-');\n     \
    \       } else {\n                lastIsSpace = 0;\n                sb.Append(text[i]);\n\
    \            }\n        }\n        return sb.ToString();", "        return string.Join('\
    \ ', text.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)).Replace(\"\
    \ \", \"_\").Replace(\"__\", \"-\");", "        int count = 0;\n        for (int\
    \ i = 0; i < text.Length; i++) {\n            if (text[i] == ' ') count++;\n \
    \           else count = 0;\n            if (count == 3) {\n                text\
    \ = text.Substring(0, i) + '-' + text.Substring(i + 1);\n                count\
    \ = 1;\n            }\n        }\n        text = text.Replace(\" \", \"_\");\n\
    \        if (text[0] == '_') text = text.Substring(1);\n        return text;",
  "        var spaces = 0;\n        var res = \"\";\n        foreach (var ch in text)\
    \ {\n            if (ch == ' ') {\n                spaces++;\n               \
    \ if (spaces > 2) {\n                    res += '-';\n                }\n    \
    \        } else {\n                spaces = 0;\n                res += ch;\n \
    \           }\n        }\n        return res;", "        // your code goes here\n\
    \        var lst = text.Split(' ');\n        int n = lst.Length;\n        if (n\
    \ == 0) {\n            return \"\";\n        }\n        if (n == 1) {\n      \
    \      return lst[0];\n        }\n        var res = new List<string>();\n    \
    \    for (int i = 0; i < n; i++) {\n            if (lst[i] == \"\") {\n      \
    \          if (i + 1 < n && lst[i + 1] == \"\") {\n                    if (i +\
    \ 2 < n && lst[i + 2] == \"\") {\n                        res.Add(\"-\");\n  \
    \                      i += 2;\n                    } else {\n               \
    \         res.Add(\"_\");\n                        i += 1;\n                 \
    \   }\n                }\n            } else {\n                res.Add(lst[i]);\n\
    \            }\n        }\n        return string.Join(\"_\", res);", "       \
    \ // TODO: Implement Function\n        string newText = text.Replace(\" \", \"\
    _\");\n        string newText2 = newText.Replace(\"__\", \"_\");\n        string\
    \ newText3 = newText2.Replace(\"___\", \"_\");\n        string newText4 = newText3.Replace(\"\
    ____\", \"_\");\n        string newText5 = newText4.Replace(\"_____\", \"_\");\n\
    \        string newText6 = newText5.Replace(\"______\", \"_\");\n        string\
    \ newText7 = newText6.Replace(\"_______\", \"_\");\n        string newText8 =\
    \ newText7.Replace(\"________\", \"_\");\n        string newText9 = newText8.Replace(\"\
    _________\", \"_\");\n        string newText10 = newText9.Replace(\"__________\"\
    , \"_\");\n        string newText11 = newText10.Replace(\"___________\", \"_\"\
    );\n        string newText12 = newText11.Replace(\"____________\", \"_\");\n \
    \       string newText13 = newText12.Replace(\"_____________\", \"_\");\n    \
    \    string newText14 = newText13.Replace(\"______________\", \"_\");\n      \
    \  string newText15 = newText14.Replace(\"_______________\", \"_\");\n       \
    \ string newText16 = newText15.Replace(\"________________\", \"_\");\n       \
    \ string newText17 = newText16.Replace(\"_________________\", \"_\");\n      \
    \  string newText18 = newText17.Replace(\"__________________\", \"_\");\n    \
    \    string newText19 = newText18.Replace(\"___________________\", \"_\");\n \
    \       string newText20 = newText19.Replace(\"____________________\", \"_\");\n\
    \        string newText21 = newText20.Replace(\"_____________________\", \"_\"\
    );\n        string newText22 = newText21.Replace(\"______________________\", \"\
    _\");\n        string newText23 = newText22.Replace(\"_______________________\"\
    , \"_\");\n        string newText24 = newText23.Replace(\"________________________\"\
    , \"_\");\n        string newText25 = newText24.Replace(\"_________________________\"\
    , \"_\");\n        string newText26 = newText25.Replace(\"__________________________\"\
    , \"_\");\n        string newText27 = newText26.Replace(\"___________________________\"\
    , \"_\");\n        string newText28", "        // TODO: Your code here\n     \
    \   return null;", "        int spaceCount = 0;\n        for (int i = 0; i < text.Length;\
    \ i++) {\n            if (text[i] == ' ') {\n                spaceCount++;\n \
    \           } else {\n                spaceCount = 0;\n            }\n       \
    \     if (spaceCount > 2) {\n                text = text.Remove(i - 2, 1);\n \
    \               text = text.Insert(i - 2, \"-\");\n                spaceCount--;\n\
    \            }\n        }\n        text = text.Replace(\" \", \"_\");\n      \
    \  return text;", "        StringBuilder result = new StringBuilder();\n     \
    \   text = text.Trim();\n        int count = 0;\n        for (int i = 0; i < text.Length;\
    \ i++) {\n            if (text[i] == ' ') {\n                count++;\n      \
    \          if (count >= 2)\n                    continue;\n                result.Append('_');\n\
    \            } else {\n                if (count >= 2) {\n                   \
    \ result.Append('-');\n                    count = 0;\n                }\n   \
    \             result.Append(text[i]);\n            }\n        }\n        return\
    \ result.ToString();", '        return "";', "        int n = text.Length;\n \
    \       int i = 0;\n        int j = 0;\n        int spaces = 0;\n        while\
    \ (i < n) {\n            if (text[i] == ' ') {\n                spaces++;\n  \
    \              while (i < n && text[i] == ' ') {\n                    i++;\n \
    \               }\n            }\n            if (spaces > 2) {\n            \
    \    text = text.Insert(j, \"-\");\n                i++;\n                j++;\n\
    \            } else if (spaces == 2) {\n                text = text.Insert(j,\
    \ \"_\");\n                i++;\n                j++;\n            } else if (spaces\
    \ == 1) {\n                text = text.Insert(j, \"_\");\n                i++;\n\
    \                j++;\n            } else {\n                text = text.Insert(j,\
    \ text[i].ToString());\n                i++;\n                j++;\n         \
    \   }\n            spaces = 0;\n        }\n        return text;", "        StringBuilder\
    \ stringBuilder = new StringBuilder();\n        int spaces = 0;\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                spaces++;\n\
    \                if (spaces > 2) {\n                    stringBuilder.Append('-');\n\
    \                }\n            } else {\n                if (spaces > 0) {\n\
    \                    stringBuilder.Append('_');\n                }\n         \
    \       stringBuilder.Append(c);\n                spaces = 0;\n            }\n\
    \        }\n        return stringBuilder.ToString();", "        var sb = new StringBuilder();\n\
    \        var spaces = 0;\n        foreach (var c in text) {\n            if (c\
    \ == ' ') {\n                spaces++;\n            } else {\n               \
    \ if (spaces == 1) {\n                    sb.Append('_');\n                } else\
    \ if (spaces > 2) {\n                    sb.Append('-');\n                }\n\
    \                sb.Append(c);\n                spaces = 0;\n            }\n \
    \       }\n        return sb.ToString();", "        var result = new StringBuilder();\n\
    \        int spaces = 0;\n        foreach (var c in text) {\n            if (c\
    \ == ' ') {\n                spaces++;\n                if (spaces < 3) {\n  \
    \                  result.Append('_');\n                }\n            } else\
    \ {\n                if (spaces > 2) {\n                    result.Append('-');\n\
    \                }\n                result.Append(c);\n                spaces\
    \ = 0;\n            }\n        }\n        return result.ToString();", "      \
    \  var chars = text.ToCharArray();\n        var index = 0;\n        int last =\
    \ -1;\n        while (index < chars.Length) {\n            var ch = chars[index];\n\
    \            if (ch == ' ') {\n                if (last == -1) {\n           \
    \         chars[index] = '_';\n                } else {\n                    chars[index]\
    \ = '-';\n                    if (last != -1) {\n                        while\
    \ (last != index - 1) {\n                            chars[last++] = '-';\n  \
    \                      }\n                    }\n                }\n         \
    \       last = index;\n            }\n            index++;\n        }\n      \
    \  return new string(chars);", "        string result = \"\";\n        int consecutiveSpace\
    \ = 0;\n        for (int i = 0; i < text.Length; i++) {\n            // replace\
    \ spaces\n            if (text[i] == ' ') {\n                result += \"_\";\n\
    \                consecutiveSpace++;\n            } else {\n                //\
    \ if there are consecutive spaces, replace them\n                if (consecutiveSpace\
    \ > 2) {\n                    result = result.Substring(0, result.Length - consecutiveSpace);\n\
    \                    result += \"-\";\n                }\n                result\
    \ += text[i];\n                consecutiveSpace = 0;\n            }\n        }\n\
    \        // if there are consecutive spaces, replace them\n        if (consecutiveSpace\
    \ > 2) {\n            result = result.Substring(0, result.Length - consecutiveSpace);\n\
    \            result += \"-\";\n        }\n        return result;", "        int\
    \ len = text.Length;\n        int spaces = 0;\n        bool prev = false;\n  \
    \      for (int i = 0; i < len; i++) {\n            if (text[i] == ' ') {\n  \
    \              spaces++;\n                if (prev) {\n                    spaces++;\n\
    \                }\n                prev = true;\n            } else {\n     \
    \           prev = false;\n            }\n        }\n        char[] newText =\
    \ new char[len + spaces];\n        int index = 0;\n        int count = 0;\n  \
    \      prev = false;\n        for (int i = 0; i < len; i++) {\n            if\
    \ (text[i] == ' ') {\n                count++;\n                if (prev) {\n\
    \                    newText[index++] = '-';\n                    count = 0;\n\
    \                }\n                prev = true;\n            } else {\n     \
    \           while (count > 0) {\n                    newText[index++] = '_';\n\
    \                    count--;\n                }\n                newText[index++]\
    \ = text[i];\n                prev = false;\n            }\n        }\n      \
    \  while (count > 0) {\n            newText[index++] = '_';\n            count--;\n\
    \        }\n        return new string(newText);", '        return "";', "    \
    \    int state = 0;\n        StringBuilder sb = new StringBuilder();\n       \
    \ for (int i = 0; i < text.Length; i++) {\n            char c = text[i];\n   \
    \         if (state == 0) {\n                if (c == ' ') {\n               \
    \     state = 1;\n                } else {\n                    sb.Append(c);\n\
    \                }\n            } else if (state == 1) {\n                if (c\
    \ == ' ') {\n                    state = 2;\n                } else {\n      \
    \              sb.Append('_');\n                    sb.Append(c);\n          \
    \          state = 0;\n                }\n            } else if (state == 2) {\n\
    \                if (c == ' ') {\n                    state = 3;\n           \
    \     } else {\n                    sb.Append('_');\n                    sb.Append(c);\n\
    \                    state = 0;\n                }\n            } else if (state\
    \ == 3) {\n                if (c == ' ') {\n                    sb.Append('-');\n\
    \                } else {\n                    sb.Append('_');\n             \
    \       sb.Append(c);\n                    state = 0;\n                }\n   \
    \         }\n        }\n        return sb.ToString();", "        int i = 0;\n\
    \        int countSpace = 0;\n        string result = \"\";\n        while (i\
    \ < text.Length) {\n            if (text[i] == ' ') {\n                if (countSpace\
    \ == 0) {\n                    countSpace++;\n                    result += \"\
    _\";\n                } else if (countSpace == 1) {\n                    countSpace++;\n\
    \                    result += \"_\";\n                } else if (countSpace ==\
    \ 2) {\n                    countSpace++;\n                    result += \"-\"\
    ;\n                } else {\n                    countSpace++;\n             \
    \   }\n            } else {\n                countSpace = 0;\n               \
    \ result += text[i];\n            }\n            i++;\n        }\n        return\
    \ result;", "        var t = text.Trim();\n        var sb = new StringBuilder();\n\
    \        int count = 0;\n        foreach (var c in t) {\n            if (c ==\
    \ ' ') {\n                count++;\n                sb.Append('_');\n        \
    \    } else {\n                if (count > 2) {\n                    sb.Append('-');\n\
    \                }\n                sb.Append(c);\n                count = 0;\n\
    \            }\n        }\n        return sb.ToString();", "        // --- Your\
    \ code here ---\n        StringBuilder result = new StringBuilder();\n       \
    \ int spaceCount = 0;\n        for (int i = 0; i < text.Length; i++) {\n     \
    \       if (text[i] == ' ') {\n                spaceCount++;\n               \
    \ if (spaceCount > 2) {\n                    continue;\n                }\n  \
    \              result.Append('_');\n            } else {\n                if (spaceCount\
    \ > 2) {\n                    result.Append('-');\n                }\n       \
    \         spaceCount = 0;\n                result.Append(text[i]);\n         \
    \   }\n        }\n        return result.ToString();", '        return text.Replace("
    ", "_").Replace("___", "-");', '        throw new NotImplementedException();',
  "        if (text.Length < 3) {\n            return text.Replace(\" \", \"_\");\n\
    \        }\n\n        string result = \"\";\n        for (int i = 0; i < text.Length;\
    \ i++) {\n            if (text[i] == ' ') {\n                // if there is a\
    \ space or more than 2 spaces, replace with '-'\n                if (i == 0 ||\
    \ text[i-1] == ' ' || text[i+1] == ' ') {\n                    result += \"-\"\
    ;\n                } else {\n                    result += \"_\";\n          \
    \      }\n            } else {\n                result += text[i];\n         \
    \   }\n        }\n        return result;", '        return null;', "        text\
    \ = text.Replace(\" \", \"_\");\n        text = text.Replace(\"_ _\", \"  \");\n\
    \        text = text.Replace(\"  \", \"_\");\n        return text;", "       \
    \ string result = \"\";\n        int consecutiveSpaces = 0;\n        for (int\
    \ i = 0; i < text.Length; i++) {\n            if (text[i] == ' ') {\n        \
    \        consecutiveSpaces++;\n                if (consecutiveSpaces > 2) {\n\
    \                    result += '-';\n                } else {\n              \
    \      result += '_';\n                }\n            } else {\n             \
    \   consecutiveSpaces = 0;\n                result += text[i];\n            }\n\
    \        }\n        return result;", "        // ReplaceAll(string input, string\
    \ oldValue, string newValue)\n        return String.Join(' ', text.Split(' ').Select(w\
    \ => w.Replace(' ', '_')));", "        string s = \"\";\n        int count = 0;\n\
    \        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '\
    \ ') {\n                count++;\n                if (count == 2) {\n        \
    \            s += \"-\";\n                }\n            } else {\n          \
    \      count = 0;\n                s += text[i];\n            }\n        }\n \
    \       return s;", "        // Insert Code Here\n        return \"\";", "   \
    \     string output = \"\";\n        int consecSpaces = 0;\n        for (int i\
    \ = 0; i < text.Length; i++) {\n            // if char is not a space\n      \
    \      if (text[i] != ' ') {\n                output += text[i];\n           \
    \     consecSpaces = 0;\n            } else {\n                // else char is\
    \ a space\n                consecSpaces++;\n                if (consecSpaces >\
    \ 2) {\n                    output += '-';\n                } else {\n       \
    \             output += '_';\n                }\n            }\n        }\n  \
    \      return output;", '        return "";', "        int idx = 0;\n        int\
    \ n = text.Length;\n        char[] chars = new char[n];\n        int ndashes =\
    \ 0;\n        for (int i = 0; i < n; i++) {\n            if (text[i] == ' ') {\n\
    \                if (i == 0) {\n                    chars[idx++] = '_';\n    \
    \            } else if (i != n - 1 && text[i + 1] == ' ') {\n                \
    \    if (i + 1 == n - 1) {\n                        if (ndashes == 0) {\n    \
    \                        chars[idx++] = '_';\n                        } else {\n\
    \                            chars[idx++] = '-';\n                        }\n\
    \                    } else {\n                        chars[idx++] = '-';\n \
    \                   }\n                    ndashes++;\n                } else\
    \ {\n                    chars[idx++] = '_';\n                }\n            }\
    \ else {\n                chars[idx++] = text[i];\n                ndashes = 0;\n\
    \            }\n        }\n        return new string(chars, 0, idx);", "     \
    \   StringBuilder sb = new StringBuilder();\n        int current = 0;\n      \
    \  for (int i = 0; i < text.Length; i++) {\n            if (text[i] == ' ') {\n\
    \                current++;\n            } else {\n                if (current\
    \ == 1) {\n                    sb.Append('_');\n                } else if (current\
    \ >= 2) {\n                    sb.Append('-');\n                }\n          \
    \      sb.Append(text[i]);\n                current = 0;\n            }\n    \
    \    }\n        if (current == 1) {\n            sb.Append('_');\n        } else\
    \ if (current >= 2) {\n            sb.Append('-');\n        }\n        return\
    \ sb.ToString();", '        return "";', "        var sb = new StringBuilder();\n\
    \        int lastSpace = -1;\n        for (int i = 0; i < text.Length; i++) {\n\
    \            if (text[i] == ' ') {\n                if (i - lastSpace > 3) {\n\
    \                    sb.Append('-');\n                } else {\n             \
    \       sb.Append('_');\n                }\n                lastSpace = i;\n \
    \           } else {\n                sb.Append(text[i]);\n            }\n   \
    \     }\n        return sb.ToString();", "        StringBuilder res = new StringBuilder();\n\
    \        bool prevSpace = false;\n        int count = 0;\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                if (prevSpace) {\n\
    \                    count++;\n                } else {\n                    prevSpace\
    \ = true;\n                    count = 1;\n                }\n            } else\
    \ {\n                res.Append(GetSpaceChars(count));\n                res.Append(c);\n\
    \                prevSpace = false;\n                count = 0;\n            }\n\
    \        }\n        res.Append(GetSpaceChars(count));\n        return res.ToString();",
  '        return "";', "        // TODO\n        return \"\";", "        if (text\
    \ == null) {\n            return null;\n        }\n        text = text.Replace(\"\
    \ \", \"_\");\n        StringBuilder sb = new StringBuilder();\n        int cnt\
    \ = 0;\n        for (int i = 0; i < text.Length; i++) {\n            if (text[i]\
    \ == '_') {\n                cnt++;\n            } else {\n                cnt\
    \ = 0;\n            }\n            if (cnt == 3) {\n                sb.Append(\"\
    -\");\n                cnt = 0;\n            } else {\n                sb.Append(text[i]);\n\
    \            }\n        }\n        return sb.ToString();", "        string result\
    \ = text.Replace(\" \", \"_\");\n        result = result.Replace(\"__\", \"_\"\
    );\n        result = result.Replace(\"___\", \"-\");\n        return result;",
  '        return "";', "        string result = \"\";\n        int count = 0;\n \
    \       for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '\
    \ ') {\n                if (count == 0) {\n                    result += '_';\n\
    \                }\n                count++;\n            } else {\n         \
    \       if (count > 2) {\n                    result += '-';\n               \
    \ }\n                result += text[i];\n                count = 0;\n        \
    \    }\n        }\n        return result;", '        return text.Replace(" ",
    "_").Replace("__", "_").Replace("___", "-");', "        string result = \"\";\n\
    \        for (int i = 0; i < text.Length; i++) {\n            char c = text[i];\n\
    \            if (c == ' ') {\n                if (i > 0 && text[i - 1] == ' ')\
    \ {\n                    if (i > 1 && text[i - 2] == ' ') {\n                \
    \        result += '-';\n                    } else {\n                      \
    \  result += '_';\n                    }\n                } else {\n         \
    \           result += '_';\n                }\n            } else {\n        \
    \        result += c;\n            }\n        }\n        return result;", "  \
    \      if (text == null) {\n            return null;\n        }\n        int state\
    \ = 0;\n        string output = \"\";\n        for (int i = 0; i < text.Length;\
    \ i++) {\n            if (text[i] == ' ') {\n                if (state == 0) {\n\
    \                    output += '_';\n                    state = 1;\n        \
    \        } else if (state == 1) {\n                    state = 2;\n          \
    \      } else if (state == 2) {\n                    output += '-';\n        \
    \            state = 3;\n                } else if (state == 3) {\n          \
    \          continue;\n                }\n            } else {\n              \
    \  output += text[i];\n                state = 0;\n            }\n        }\n\
    \        return output;", "        string result = text.Replace(\" \", \"_\");\n\
    \        result = result.Replace(\"_ _\", \"_\");\n        result = result.Replace(\"\
    _ _\", \"_\");\n        result = result.Replace(\"__\", \"_\");\n        result\
    \ = result.Replace(\"__\", \"_\");\n        result = result.Replace(\"__\", \"\
    _\");\n        result = result.Replace(\"__\", \"-\");\n        return result;",
  '        return text.Replace(" ", "_").Replace("  ", "_").Replace("   ", "-");',
  '        return text.Replace("  ", "-").Replace(" ", "_");', "        return string.Join(\"\
    \ \", text.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries));",
  "        int prev = -1;\n        StringBuilder res = new StringBuilder();\n    \
    \    for (int i = 0; i < text.Length; i++) {\n            if (text[i] == ' ')\
    \ {\n                if (prev == -1) {\n                    res.Append('_');\n\
    \                } else if (i - prev == 1) {\n                    res.Append('_');\n\
    \                } else if (i - prev == 2) {\n                    res.Append('-');\n\
    \                }\n                prev = i;\n            } else {\n        \
    \        res.Append(text[i]);\n            }\n        }\n        return res.ToString();",
  "        // TODO: implement this method\n        char[] charArray = text.ToCharArray();\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ == ' ') {\n                if (i == 0) {\n                    charArray[i] =\
    \ '_';\n                } else if (charArray[i - 1] == ' ') {\n              \
    \      charArray[i] = '-';\n                } else {\n                    charArray[i]\
    \ = '_';\n                }\n            }\n        }\n        return new string(charArray);",
  "        var length = text.Length;\n        var newtext = new StringBuilder();\n\
    \        var space = ' ';\n        var num = 1;\n        for (int i = 0; i < length;\
    \ i++) {\n            if (text[i] == space) {\n                if (num < 2) {\n\
    \                    newtext.Append('_');\n                    num++;\n      \
    \          } else {\n                    newtext.Append('-');\n              \
    \  }\n            } else {\n                newtext.Append(text[i]);\n       \
    \         num = 1;\n            }\n        }\n        return newtext.ToString();",
  "        if (text.Length == 0) return text;\n        var sb = new StringBuilder();\n\
    \        int spaceLen = 0;\n        for (int i = 0; i < text.Length; i++) {\n\
    \            if (text[i] == ' ') {\n                spaceLen++;\n            }\
    \ else {\n                if (spaceLen == 0) {\n                    sb.Append(text[i]);\n\
    \                } else if (spaceLen == 1) {\n                    sb.Append('_');\n\
    \                    sb.Append(text[i]);\n                } else if (spaceLen\
    \ == 2) {\n                    sb.Append(\"__\");\n                    sb.Append(text[i]);\n\
    \                } else {\n                    sb.Append(\"-\");\n           \
    \         sb.Append(text[i]);\n                }\n                spaceLen = 0;\n\
    \            }\n        }\n        return sb.ToString();", '        return null;',
  "        // your code here\n        return \"\";", "        int s = 0;\n       \
    \ while (s < text.Length && text[s] == ' ') s++;\n        if (s == text.Length)\
    \ return \"\";\n        text = text.Substring(s);\n        s = text.Length - 1;\n\
    \        while (s >= 0 && text[s] == ' ') s--;\n        text = text.Substring(0,\
    \ s + 1);\n        StringBuilder result = new StringBuilder();\n        int i\
    \ = 0;\n        while (i < text.Length) {\n            if (text[i] == ' ') {\n\
    \                result.Append('_');\n                i++;\n                while\
    \ (i < text.Length && text[i] == ' ') i++;\n            } else {\n           \
    \     int j = i;\n                while (j < text.Length && text[j] != ' ') j++;\n\
    \                if (j - i > 2) {\n                    result.Append('-');\n \
    \               } else {\n                    while (i < j) {\n              \
    \          result.Append(text[i]);\n                        i++;\n           \
    \         }\n                }\n            }\n        }\n        return result.ToString();",
  "        string result = \"\";\n        for (int i = 0; i < text.Length; i++) {\n\
    \            if (text[i] == ' ') {\n                if (result.Length == 0 ||\
    \ result[result.Length - 1] != '_') {\n                    result += '_';\n  \
    \              } else if (i < text.Length - 1 && text[i + 1] == ' ') {\n     \
    \               result += '-';\n                }\n            } else {\n    \
    \            result += text[i];\n            }\n        }\n        return result;",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.Length;\
    \ i++) {\n            char ch = text[i];\n            if (ch == ' ') {\n     \
    \           int consecSpaces = 0;\n                while (i < text.Length && text[i]\
    \ == ' ') {\n                    consecSpaces++;\n                    i++;\n \
    \               }\n                sb.Append(consecSpaces > 2 ? '-' : '_');\n\
    \                i--;\n            } else {\n                sb.Append(ch);\n\
    \            }\n        }\n        return sb.ToString();", "        int lastWasSpace\
    \ = 0;\n        int lastSpaces = 0;\n        string res = \"\";\n        for (int\
    \ i = 0; i < text.Length; i++) {\n            if (text[i] == ' ') {\n        \
    \        lastWasSpace = 1;\n                lastSpaces++;\n            } else\
    \ {\n                if (lastWasSpace == 1) {\n                    if (lastSpaces\
    \ == 1) {\n                        res += \"_\";\n                    } else {\n\
    \                        res += \"-\";\n                    }\n              \
    \      lastWasSpace = 0;\n                    lastSpaces = 0;\n              \
    \  }\n                res += text[i];\n            }\n        }\n        return\
    \ res;", "        string result = \"\";\n        if (text == null) {\n       \
    \     return result;\n        }\n        int spaces = 0;\n        for (int i =\
    \ 0; i < text.Length; i++) {\n            if (text[i] == ' ') {\n            \
    \    spaces++;\n            } else {\n                if (spaces == 0) {\n   \
    \                 result += text[i];\n                } else if (spaces == 1)\
    \ {\n                    result += '_';\n                    result += text[i];\n\
    \                } else if (spaces == 2) {\n                    result += \"_\"\
    ;\n                    result += text[i];\n                } else {\n        \
    \            result += \"-\";\n                    result += text[i];\n      \
    \          }\n                spaces = 0;\n            }\n        }\n        return\
    \ result;", "        var ans = new StringBuilder();\n        int count = 0;\n\
    \        foreach (var ch in text) {\n            if (ch == ' ') {\n          \
    \      count++;\n                if (count >= 3) continue;\n            } else\
    \ {\n                count = 0;\n            }\n            ans.Append(ch);\n\
    \        }\n        var s = ans.ToString();\n        return s.Replace(\"   \"\
    , \"-\").Replace(\"  \", \"_\").Replace(\" \", \"_\");", "        //if (text ==\
    \ null) { throw new Exception(\"Input must not be null\"); }\n        //if (text.Length\
    \ == 0) { return \"\"; }\n        //if (text.Length == 1) { return text; }\n \
    \       //if (text.Length == 2) { return text.Replace(\" \", \"_\"); }\n     \
    \   //// if (text.Length == 3) { return text.Replace(\" \", \"_\"); }\n      \
    \  //// if (text.Length > 3) { return text.Replace(\" \", \"_\"); }\n        //if\
    \ (text.Length > 3) { return text.Replace(\" \", \"-\"); }\n        //return text;\n\
    \        if (text == null) { throw new Exception(\"Input must not be null\");\
    \ }\n        if (text.Length == 0) { return \"\"; }\n        if (text.Length ==\
    \ 1) { return text; }\n        if (text.Length == 2) { return text.Replace(\"\
    \ \", \"_\"); }\n        if (text.Length == 3) { return text.Replace(\" \", \"\
    _\"); }\n        if (text.Length > 3) { return text.Replace(\" \", \"-\"); }\n\
    \        return text;", "        int i = 0;\n        while (i < text.Length) {\n\
    \            if (text[i] == ' ') {\n                int spacesCount = 1;\n   \
    \             while (i + spacesCount < text.Length && text[i + spacesCount] ==\
    \ ' ') {\n                    spacesCount++;\n                }\n            \
    \    if (spacesCount == 1) {\n                    text = text.Remove(i, 1).Insert(i,\
    \ \"_\");\n                } else if (spacesCount > 2) {\n                   \
    \ text = text.Remove(i, spacesCount).Insert(i, \"-\");\n                }\n  \
    \          }\n            i++;\n        }\n        return text;", "        var\
    \ sb = new StringBuilder();\n        var count = 0;\n        foreach (var c in\
    \ text) {\n            if (c == ' ') {\n                count++;\n           \
    \     if (count == 2) {\n                    sb.Append('-');\n               \
    \ }\n            } else {\n                if (count > 0) {\n                \
    \    sb.Append('_');\n                }\n                sb.Append(c);\n     \
    \           count = 0;\n            }\n        }\n        return sb.ToString();",
  "        var result = new StringBuilder();\n        var last_char = ' ';\n     \
    \   var space_count = 0;\n        foreach (var c in text) {\n            switch\
    \ (c) {\n                case ' ':\n                    space_count++;\n     \
    \               result.Append('_');\n                    break;\n            \
    \    default:\n                    if (space_count > 2)\n                    \
    \    result.Append('-');\n                    space_count = 0;\n             \
    \       result.Append(c);\n                    break;\n            }\n       \
    \ }\n        return result.ToString();", '        return null;', "        text\
    \ = text.Replace(\" \", \"_\");\n        if (text.Contains(\"_ _\")) {\n     \
    \       text = text.Replace(\"_ _\", \"_\");\n        }\n        if (text.Contains(\"\
    _ _ _\")) {\n            text = text.Replace(\"_ _ _\", \"_\");\n        }\n \
    \       if (text.Contains(\"_ _ _ _\")) {\n            text = text.Replace(\"\
    _ _ _ _\", \"_\");\n        }\n        if (text.Contains(\"_ _ _ _ _\")) {\n \
    \           text = text.Replace(\"_ _ _ _ _\", \"_\");\n        }\n        if\
    \ (text.Contains(\"_ _ _ _ _ _\")) {\n            text = text.Replace(\"_ _ _\
    \ _ _ _\", \"-\");\n        }\n        if (text.Contains(\"_ _ _ _ _ _ _\")) {\n\
    \            text = text.Replace(\"_ _ _ _ _ _ _\", \"-\");\n        }\n     \
    \   if (text.Contains(\"_ _ _ _ _ _ _ _\")) {\n            text = text.Replace(\"\
    _ _ _ _ _ _ _ _\", \"-\");\n        }\n        if (text.Contains(\"_ _ _ _ _ _\
    \ _ _ _\")) {\n            text = text.Replace(\"_ _ _ _ _ _ _ _ _\", \"-\");\n\
    \        }\n        if (text.Contains(\"_ _ _ _ _ _ _ _ _ _\")) {\n          \
    \  text = text.Replace(\"_ _ _ _ _ _ _ _ _ _\", \"-\");\n        }\n        return\
    \ text;", "        // We can write this in two steps\n        // 1. Replace all\
    \ spaces with underscores\n        // 2. Replace all series of 2+ spaces with\
    \ -\n        string str = text.Replace(\" \", \"_\");\n        str = str.Replace(\"\
    __\", \"-\");\n        return str;", "        int spaces = 0;\n        StringBuilder\
    \ sb = new StringBuilder();\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                spaces++;\n                if (spaces >= 3) {\n\
    \                    sb.Append('-');\n                    spaces = 0;\n      \
    \          }\n            } else {\n                sb.Append(c);\n          \
    \      spaces = 0;\n            }\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        int spaces = 0;\n        for (int i = 0;\
    \ i < text.Length; i++) {\n            if (text[i] == ' ') {\n               \
    \ spaces++;\n                if (spaces > 2) {\n                    result +=\
    \ '-';\n                }\n            } else {\n                spaces = 0;\n\
    \                result += text[i];\n            }\n        }\n        return\
    \ result;", "        text = text.Replace(\" \", \"_\");\n        int currentRun\
    \ = 0;\n        for (int i = 0; i < text.Length; i++) {\n            if (text[i]\
    \ == '_') currentRun++;\n            else currentRun = 0;\n            if (currentRun\
    \ == 3) {\n                text = text.Replace(\"___\", \"-\");\n            \
    \    currentRun = 1;\n            }\n        }\n        return text;", "     \
    \   // Our output string\n        string ret = \"\";\n        // Loop through\
    \ the char array of the input string\n        for (int i = 0; i < text.Length;\
    \ i++) {\n            // Check if the current index is a space, and if it is,\
    \ check if the next index is also a space\n            if (text[i] == ' ' && i\
    \ < text.Length - 1 && text[i + 1] == ' ') {\n                // If so, add -\
    \ to the output string\n                ret += \"-\";\n                // And\
    \ step forward 2 spaces\n                i += 2;\n                // Check if\
    \ the current index is a space, and if it is, check if the next index is also\
    \ a space\n            } else if (text[i] == ' ' && i < text.Length - 1 && text[i\
    \ + 1] != ' ') {\n                // If so, add _ to the output string\n     \
    \           ret += \"_\";\n                // Check if the current index is a\
    \ space\n            } else if (text[i] == ' ') {\n                // If so, add\
    \ _ to the output string\n                ret += \"_\";\n                // Otherwise,\
    \ add the character at the current index to the output string\n            } else\
    \ {\n                ret += text[i];\n            }\n        }\n        // Return\
    \ the output string\n        return ret;", '        return null;', "        var\
    \ newText = text.Replace(\" \", \"_\");\n        newText = newText.Replace(\"\
    __\", \"_\");\n        newText = newText.Replace(\"___\", \"-\");\n        return\
    \ newText;", "        bool sp = false;\n        int count = 0;\n        char[]\
    \ arr = text.ToCharArray();\n        for (int i = 0; i < arr.Length; i++) {\n\
    \            if (arr[i] == ' ') {\n                count++;\n                if\
    \ (count == 1) sp = true;\n                else sp = false;\n            }\n \
    \           else {\n                if (sp) {\n                    if (count >\
    \ 2) {\n                        arr[i - count] = '-';\n                    }\n\
    \                    else {\n                        arr[i - count] = '_';\n \
    \                   }\n                }\n                count = 0;\n       \
    \     }\n        }\n        if (count > 2) arr[arr.Length - count] = '-';\n  \
    \      else if (count > 0) arr[arr.Length - count] = '_';\n        return new\
    \ string(arr);", "        text = text.Replace(\" \", \"_\");\n        int count\
    \ = 0;\n        for (int i = 0; i < text.Length; i++) {\n            if (text[i]\
    \ == '_') {\n                count++;\n            } else {\n                count\
    \ = 0;\n            }\n            if (count == 3) {\n                text = text.Replace(\"\
    __\", \"-\");\n                count = 1;\n            }\n        }\n        return\
    \ text;", '        return text.Replace(" ", "_").Replace("__", "-");', '        return
    text.Replace(" ", "_").Replace("___", "").Replace("__", "-");', '        return
    "";', "        int cnt = 0;\n        for (int i = 0; i < text.Length; i++) {\n\
    \            if (text[i] == ' ') {\n                cnt++;\n            } else\
    \ {\n                cnt = 0;\n            }\n            if (cnt == 2) {\n  \
    \              text = text.Substring(0, i) + '-' + text.Substring(i + 1);\n  \
    \              i++;\n                cnt = 0;\n            }\n        }\n    \
    \    text = text.Replace(\" \", \"_\");\n        return text;", "        int n\
    \ = text.Length;\n        string fixedSpacesText = \"\";\n        for (int i =\
    \ 0; i < n; i++) {\n            if (text[i] == ' ') {\n                if (fixedSpacesText\
    \ == \"\") {\n                    fixedSpacesText += '_';\n                } else\
    \ if (fixedSpacesText[fixedSpacesText.Length - 1] == '_') {\n                \
    \    fixedSpacesText += '_';\n                } else if (fixedSpacesText[fixedSpacesText.Length\
    \ - 1] == '_' && fixedSpacesText[fixedSpacesText.Length - 2] == '_') {\n     \
    \               fixedSpacesText = fixedSpacesText.Substring(0, fixedSpacesText.Length\
    \ - 1);\n                    fixedSpacesText += '-';\n                } else {\n\
    \                    fixedSpacesText += '_';\n                }\n            }\
    \ else {\n                fixedSpacesText += text[i];\n            }\n       \
    \ }\n        return fixedSpacesText;", "        // code goes here\n        char[]\
    \ newText = text.ToCharArray();\n        int checkSpaces = 0;\n        for (int\
    \ i = 0; i < newText.Length; i++) {\n            if (newText[i] == ' ') {\n  \
    \              checkSpaces++;\n                if (checkSpaces > 2) {\n      \
    \              newText[i] = '-';\n                } else {\n                 \
    \   newText[i] = '_';\n                }\n            } else {\n             \
    \   checkSpaces = 0;\n            }\n        }\n        string fixedText = new\
    \ string(newText);\n        return fixedText;", "        // TODO: Implement\n\
    \        string text2 = text.Replace(\" \", \"_\");\n        string text3 = text2.Replace(\"\
    \  \", \"-\");\n        return text3;", "        if (text == null) {\n       \
    \     return null;\n        }\n        int state = 0;\n        int count = 0;\n\
    \        StringBuilder sb = new StringBuilder();\n        foreach (char c in text)\
    \ {\n            if (state == 0) {\n                if (c == ' ') {\n        \
    \            state = 1;\n                    count = 1;\n                } else\
    \ {\n                    sb.Append(c);\n                }\n            } else\
    \ if (state == 1) {\n                if (c == ' ') {\n                    state\
    \ = 2;\n                    count = 2;\n                } else {\n           \
    \         sb.Append('_');\n                    sb.Append(c);\n               \
    \     state = 0;\n                }\n            } else if (state == 2) {\n  \
    \              if (c == ' ') {\n                    count++;\n               \
    \ } else {\n                    if (count == 2) {\n                        sb.Append('_');\n\
    \                    } else {\n                        sb.Append('-');\n     \
    \               }\n                    sb.Append(c);\n                    state\
    \ = 0;\n                }\n            }\n        }\n        if (state == 1) {\n\
    \            sb.Append('_');\n        } else if (state == 2) {\n            if\
    \ (count == 2) {\n                sb.Append('_');\n            } else {\n    \
    \            sb.Append('-');\n            }\n        }\n        return sb.ToString();",
  "        var length = text.Length;\n        var spaces = 0;\n        var result\
    \ = new StringBuilder();\n        var wasAtleastTwoSpaces = false;\n        for\
    \ (var i = 0; i < length; i++) {\n            var ch = text[i];\n            if\
    \ (ch == ' ') {\n                spaces++;\n                if (spaces == 2) {\n\
    \                    wasAtleastTwoSpaces = true;\n                }\n        \
    \    } else {\n                if (spaces == 1) {\n                    result.Append('_');\n\
    \                } else if (spaces > 1) {\n                    result.Append('-');\n\
    \                }\n                spaces = 0;\n                result.Append(ch);\n\
    \            }\n        }\n        if (spaces == 1) {\n            result.Append('_');\n\
    \        } else if (spaces > 1) {\n            result.Append('-');\n        }\n\
    \        if (wasAtleastTwoSpaces) {\n            return \"_\" + result.ToString();\n\
    \        }\n        return result.ToString();", '        return text;', "    \
    \    if (text.Length == 0) {\n            return text;\n        }\n        int\
    \ cnt = 0;\n        string res = \"\";\n        foreach (char c in text) {\n \
    \           if (c == ' ') {\n                cnt++;\n                if (cnt ==\
    \ 1) {\n                    res += \"_\";\n                }\n            } else\
    \ {\n                cnt = 0;\n                res += c;\n            }\n    \
    \    }\n        if (cnt >= 2) {\n            res = res.Replace(\"__\", \"-\");\n\
    \        }\n        return res;", "        // First, replace all spaces with underscores\n\
    \        string newText = text.Replace(\" \", \"_\");\n        // Then, replace\
    \ all consecutive underscores with \"-\"\n        newText = newText.Replace(\"\
    __\", \"-\");\n        // Return the new string\n        return newText;", " \
    \       var sb = new StringBuilder();\n        var prev = ' ';\n        var count\
    \ = 0;\n        foreach (var c in text) {\n            if (c == ' ') {\n     \
    \           count++;\n                if (count > 2) continue;\n            }\
    \ else {\n                count = 0;\n            }\n            if (c == ' '\
    \ && prev == ' ') {\n                sb.Append('-');\n            } else {\n \
    \               sb.Append(c);\n            }\n            prev = c;\n        }\n\
    \        return sb.ToString();", '        return "";', "        string result\
    \ = text;\n        result = text.Replace(\" \", \"_\");\n        result = result.Replace(\"\
    __\", \"_\");\n        result = result.Replace(\"___\", \"-\");\n        return\
    \ result;", "        StringBuilder sb = new StringBuilder();\n        int i =\
    \ 0;\n        int count = 0;\n        while (i < text.Length) {\n            if\
    \ (text[i] == ' ') {\n                count++;\n                i++;\n       \
    \     } else {\n                if (count >= 2) {\n                    sb.Append('-');\n\
    \                } else if (count == 1) {\n                    sb.Append('_');\n\
    \                }\n                sb.Append(text[i]);\n                count\
    \ = 0;\n                i++;\n            }\n        }\n        if (count >= 2)\
    \ {\n            sb.Append('-');\n        } else if (count == 1) {\n         \
    \   sb.Append('_');\n        }\n        return sb.ToString();", "        // REPLACE\
    \ WITH YOUR CODE\n        return text;", "        string result = text;\n    \
    \    int count = 0;\n        int len = text.Length;\n        for (int i = 0; i\
    \ < len; i++) {\n            if (text[i] == ' ') {\n                count++;\n\
    \            } else {\n                count = 0;\n            }\n           \
    \ if (count == 1) {\n                result = result.Replace(\" \", \"_\");\n\
    \            } else if (count == 2) {\n                result = result.Replace(\"\
    \  \", \"_\");\n            } else if (count > 2) {\n                result =\
    \ result.Replace(\" \", \"-\");\n            }\n        }\n        return result;",
  "        // Your code goes here.\n        char[] stringToChar = text.ToCharArray();\n\
    \        string result = \"\";\n        int index = 0;\n        foreach (char\
    \ element in stringToChar) {\n            if (element == ' ') {\n            \
    \    if (index >= 2) {\n                    result += '-';\n                }\
    \ else {\n                    result += '_';\n                }\n            }\
    \ else {\n                result += element;\n                index = 0;\n   \
    \         }\n            index++;\n        }\n        return result;", "     \
    \   int count = 0;\n        string result = \"\";\n        for (int i = 0; i <\
    \ text.Length; i++) {\n            if (text[i] == ' ') {\n                count++;\n\
    \                if (count < 3) {\n                    result += \"_\";\n    \
    \            } else {\n                    result += \"-\";\n                }\n\
    \            } else {\n                count = 0;\n                result += text[i];\n\
    \            }\n        }\n        return result;", "        string result = \"\
    \";\n        for (int i = 0; i < text.Length; i++) {\n            if (text[i]\
    \ == ' ') {\n                if (result[result.Length - 1] == ' ') {\n       \
    \             result += \"-\";\n                } else {\n                   \
    \ result += \"_\";\n                }\n            } else {\n                result\
    \ += text[i];\n            }\n        }\n        return result;", "        //\
    \ Your code here\n        return null;", '        return text.Replace("  ", "-").Replace("
    ", "_");', '        throw new NotImplementedException();', "        if (text ==\
    \ null) return null;\n        // Loop through the text and append each character\n\
    \        // to the result string\n        StringBuilder result = new StringBuilder();\n\
    \        bool multiple = false;\n        foreach (char c in text) {\n        \
    \    // This is a space\n            if (c == ' ') {\n                // If there\
    \ are multiple consecutive spaces, we replace them with a -\n                if\
    \ (multiple) {\n                    result.Append('-');\n                } else\
    \ {\n                    // If this is the first space, we replace it with an\
    \ underscore\n                    result.Append('_');\n                    multiple\
    \ = true;\n                }\n            } else {\n                // This is\
    \ not a space\n                result.Append(c);\n                multiple = false;\n\
    \            }\n        }\n        return result.ToString();", "        var sb\
    \ = new StringBuilder();\n        int repeat = 0;\n        foreach (var c in text)\
    \ {\n            if (c == ' ') {\n                repeat++;\n                if\
    \ (repeat == 2)\n                    sb.Append('_');\n                else if\
    \ (repeat == 3)\n                    sb.Append('-');\n            } else {\n \
    \               sb.Append(c);\n                repeat = 0;\n            }\n  \
    \      }\n        return sb.ToString();", "        string res = string.Empty;\n\
    \        int spaces = 0;\n        for (int i = 0; i < text.Length; i++) {\n  \
    \          if (text[i] == ' ') {\n                spaces++;\n                if\
    \ (spaces > 2) {\n                    res += '-';\n                    spaces\
    \ = 0;\n                }\n            } else {\n                if (spaces >\
    \ 0) {\n                    res += '_';\n                    spaces = 0;\n   \
    \             }\n                res += text[i];\n            }\n        }\n \
    \       return res;", "        // iterate over the string\n        var output\
    \ = \"\";\n        int spaceCount = 0;\n        for (int i = 0; i < text.Length;\
    \ i++) {\n            if (text[i] == ' ') {\n                spaceCount++;\n \
    \               if (spaceCount > 2) {\n                    continue;\n       \
    \         }\n                else {\n                    output += '_';\n    \
    \            }\n            }\n            else {\n                output += text[i];\n\
    \                spaceCount = 0;\n            }\n        }\n        return output;",
  "        // int my_space_count = 0;\n        // string my_fixed_text = text;\n \
    \       // for (int i = 0; i < text.Length; i++) {\n        //     char c = text[i];\n\
    \        //     if (c == ' ') {\n        //         my_space_count++;\n      \
    \  //         if (my_space_count == 2) {\n        //             my_fixed_text\
    \ = my_fixed_text.Replace(' ', '-');\n        //         }\n        //     } else\
    \ {\n        //         my_space_count = 0;\n        //     }\n        // }\n\
    \        // return my_fixed_text.Replace(' ', '_');\n        return Regex.Replace(text,\
    \ @\"( )+\", (match) => match.Value.Length > 2 ? \"-\" : \"_\");", "        //\
    \ var result = \"\"\n        // for each letter in text:\n        //     if letter\
    \ is \" \" and result ends with \" \"\n        //         result = result + \"\
    -\"\n        //     else if letter is \" \"\n        //         result = result\
    \ + \"_\"\n        //     else\n        //         result = result + letter\n\
    \        // return result\n        throw new NotImplementedException();", "  \
    \      int len = text.Length;\n        string res = \"\";\n        bool sp = false;\n\
    \        for (int i = 0; i < len; i++) {\n            if (text[i] == ' ') {\n\
    \                if (sp) res += \"-\";\n                else res += \"_\";\n \
    \               sp = true;\n            } else {\n                res += text[i];\n\
    \                sp = false;\n            }\n        }\n        return res;",
  "        int length = text.Length;\n        int prev = 0;\n        int count = 0;\n\
    \        for (int i = 0; i < length; i++) {\n            if (text[i] == ' ') {\n\
    \                count++;\n            } else {\n                prev = i;\n \
    \               count = 0;\n            }\n            if (count > 1) {\n    \
    \            text = text.Substring(0, prev) + \"_\" + text.Substring(prev + 1);\n\
    \            }\n        }\n        return text.Replace(\" \", \"_\");", "    \
    \    StringBuilder builder = new StringBuilder();\n        for (int i = 0; i <\
    \ text.Length; i++) {\n            if (text[i] == ' ') {\n                builder.Append('_');\n\
    \                int count = 1;\n                while (i < text.Length - 1 &&\
    \ text[i + 1] == ' ') {\n                    count++;\n                    i++;\n\
    \                }\n                if (count > 2) {\n                    builder.Append('-');\n\
    \                }\n            } else {\n                builder.Append(text[i]);\n\
    \            }\n        }\n        return builder.ToString();", "        var res\
    \ = text.Replace(\" \", \"_\");\n        res = res.Replace(\"__\", \"-\");\n \
    \       return res;", '        return text;', "        // todo\n        if (text.Length\
    \ < 1) return text;\n        int spaces = 0;\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '\
    \ ') {\n                spaces++;\n                if (spaces < 3) sb.Append('_');\n\
    \                else if (spaces == 3) sb.Append('-');\n            } else {\n\
    \                spaces = 0;\n                sb.Append(text[i]);\n          \
    \  }\n        }\n        return sb.ToString();", "        // TODO: implement\n\
    \        return null;", "        var count = 0;\n        var result = new StringBuilder();\n\
    \        foreach (var c in text) {\n            if (c == ' ') {\n            \
    \    count++;\n                if (count == 2) {\n                    result.Append('-');\n\
    \                }\n            } else {\n                count = 0;\n       \
    \         result.Append(c);\n            }\n        }\n        return result.ToString();",
  "        string res = \"\";\n        int counter = 0;\n        for (int i = 0; i\
    \ < text.Length; i++) {\n            if (text[i] == ' ') {\n                counter++;\n\
    \                if (counter == 2) {\n                    res += '-';\n      \
    \          }\n            } else {\n                counter = 0;\n           \
    \     res += text[i];\n            }\n        }\n        return res;", "     \
    \   text = text.Replace(\" \", \"_\");\n        text = text.Replace(\"__\", \"\
    _\");\n        text = text.Replace(\"___\", \"-\");\n        return text;", '        return
    text.Replace(" ", "_").Replace(" ", "_").Replace(" ", "-");', "        // your\
    \ code here\n        return \"\";", "        var spaces = text.Count(c => c ==\
    \ ' ');\n        if (spaces == 0) {\n            return text;\n        } else\
    \ if (spaces == 1) {\n            return text.Replace(' ', '_');\n        } else\
    \ if (spaces == 2) {\n            return $\"_{text.Replace(' ', '_')}\";\n   \
    \     } else {\n            return $\"_{text.Replace(\"  \", \"-\")}\";\n    \
    \    }", "        // your code here\n        return text;", "        int count\
    \ = 0;\n        string t = \"\";\n        foreach (char c in text) {\n       \
    \     if (c == ' ') {\n                count++;\n                t += count >\
    \ 2 ? \"-\" : \"_\";\n            } else {\n                count = 0;\n     \
    \           t += c;\n            }\n        }\n        return t;", "        //\
    \ Go through each character in the text\n        var sb = new StringBuilder();\n\
    \        // var count = 0;\n        foreach (var character in text) {\n      \
    \      if (character == ' ') {\n                //count++;\n                //\
    \ if it's a space and the last character was a space, \n                // continue\n\
    \                if (sb.Length == 0 || sb[sb.Length - 1] == ' ') {\n         \
    \           continue;\n                }\n                // if it's a space and\
    \ the last character was not a space, \n                // replace it with an\
    \ underscore\n                // if it's a space and the last two characters were\
    \ spaces, \n                // replace the last two characters with a dash\n \
    \               else if (sb.Length >= 2 && sb[sb.Length - 1] == ' ' && sb[sb.Length\
    \ - 2] == ' ') {\n                    sb[sb.Length - 2] = '-';\n             \
    \       sb.Remove(sb.Length - 1, 1);\n                }\n                else\
    \ {\n                    sb.Append('_');\n                }\n            }\n \
    \           else {\n                // if it's not a space, just append it\n \
    \               sb.Append(character);\n            }\n        }\n        return\
    \ sb.ToString();", "        char last = '\\0';\n        int count = 0;\n     \
    \   var sb = new StringBuilder();\n        foreach (char c in text) {\n      \
    \      if (c == ' ') {\n                count++;\n                if (count ==\
    \ 1) {\n                    sb.Append('_');\n                } else if (count\
    \ == 2) {\n                    sb.Append('_');\n                } else if (count\
    \ == 3) {\n                    sb.Append('-');\n                }\n          \
    \  } else {\n                count = 0;\n                sb.Append(c);\n     \
    \       }\n        }\n        return sb.ToString();", "        // Write your code\
    \ here!\n        string[] words = text.Split(' ');\n        string result = \"\
    \";\n        if (words.Length == 1)\n            return text;\n        int cnt\
    \ = 0;\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i]\
    \ == \"\") {\n                cnt++;\n                if (cnt >= 2)\n        \
    \            result += \"-\";\n                else\n                    result\
    \ += \"_\";\n            }\n            else {\n                cnt = 0;\n   \
    \             result += words[i];\n            }\n            if (i != words.Length\
    \ - 1)\n                result += \"_\";\n        }\n        return result;",
  "        StringBuilder sb = new StringBuilder();\n        int consecutive = 0;\n\
    \        for (int i = 0; i < text.Length; i++) {\n            char current = text[i];\n\
    \            char next = ' ';\n            if (i + 1 < text.Length) {\n      \
    \          next = text[i + 1];\n            }\n            if (current == ' ')\
    \ {\n                consecutive++;\n                if (next == ' ') {\n    \
    \                continue;\n                }\n                else {\n      \
    \              if (consecutive == 1) {\n                        sb.Append('_');\n\
    \                    }\n                    else {\n                        sb.Append('-');\n\
    \                    }\n                    consecutive = 0;\n               \
    \ }\n            }\n            else {\n                sb.Append(current);\n\
    \            }\n        }\n        return sb.ToString();", "        // Write your\
    \ code here\n        return null;", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '\
    \ ') {\n                if (i == 0) {\n                    sb.Append('_');\n \
    \               } else if (text[i - 1] == ' ') {\n                    int consecutiveSpaces\
    \ = 0;\n                    for (int j = i; j < text.Length; j++) {\n        \
    \                if (text[j] == ' ') {\n                            consecutiveSpaces++;\n\
    \                        } else {\n                            break;\n      \
    \                  }\n                    }\n                    if (consecutiveSpaces\
    \ > 2) {\n                        sb.Append('-');\n                    } else\
    \ {\n                        sb.Append('_');\n                    }\n        \
    \        } else {\n                    sb.Append('_');\n                }\n  \
    \          } else {\n                sb.Append(text[i]);\n            }\n    \
    \    }\n        return sb.ToString();", "        string result = text.Replace(\"\
    \ \", \"_\");\n        for (int i = 0; i < text.Length - 2; i++) {\n         \
    \   if (text[i] == ' ' && text[i + 1] == ' ' && text[i + 2] == ' ') {\n      \
    \          result = result.Replace(\"_\", \"-\");\n            }\n        }\n\
    \        return result;", "        string result = \"\";\n        int cnt = 0;\n\
    \        foreach (char c in text) {\n            if (c == ' ') {\n           \
    \     cnt++;\n                if (cnt > 2) {\n                    result += '-';\n\
    \                } else {\n                    result += '_';\n              \
    \  }\n            } else {\n                result += c;\n                cnt\
    \ = 0;\n            }\n        }\n        return result;", "        // When a\
    \ space is encountered, scan the rest of the string\n        // to determine the\
    \ number of consecutive spaces\n        // Look for a non-space character to determine\
    \ the end of the string\n        // Replace the spaces with underscores\n    \
    \    // If more than two consecutive spaces, replace the spaces with a dash\n\
    \        string output = \"\";\n        int count = 0;\n        for (int i = 0;\
    \ i < text.Length; i++) {\n            if (text[i] == ' ') {\n               \
    \ count++;\n                while (i < text.Length && text[i] == ' ') {\n    \
    \                i++;\n                }\n                if (count > 2) {\n \
    \                   output += \"-\";\n                } else {\n             \
    \       output += \"_\";\n                }\n                i--;\n          \
    \      count = 0;\n            } else {\n                output += text[i];\n\
    \            }\n        }\n        return output;", "        if (text.Length <=\
    \ 2) {\n            return text.Replace(\" \", \"_\");\n        }\n\n        int\
    \ spaces = 0;\n        for (int i = 0; i < text.Length; i++) {\n            if\
    \ (text[i] == ' ') {\n                spaces++;\n            }\n        }\n\n\
    \        if (spaces <= 2) {\n            return text.Replace(\" \", \"_\");\n\
    \        }\n\n        text = text.Replace(\" \", \"_\");\n        return text.Replace(\"\
    __\", \"-\");", "        if (text.Length <= 2) {\n            return text.Replace(\"\
    \ \", \"_\");\n        }\n        else {\n            int count = 0;\n       \
    \     for (int i = 0; i < text.Length; i++) {\n                if (text[i] ==\
    \ ' ') {\n                    count++;\n                }\n                else\
    \ {\n                    count = 0;\n                }\n                if (count\
    \ > 2) {\n                    text = text.Substring(0, i - 2) + \"-\" + text.Substring(i\
    \ - 1);\n                    i--;\n                    count = 0;\n          \
    \      }\n            }\n            return text.Replace(\" \", \"_\");\n    \
    \    }", '        return text;', '        return text;', "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < text.Length; i++) {\n\
    \            if (text[i] == ' ') {\n                if (sb.Length == 0 || sb[sb.Length\
    \ - 1] != '_') {\n                    sb.Append('_');\n                } else\
    \ {\n                    int count = 0;\n                    while (i < text.Length\
    \ && text[i] == ' ') {\n                        count++;\n                   \
    \     i++;\n                    }\n                    i--;\n                \
    \    if (count >= 2) {\n                        sb.Append('-');\n            \
    \        } else {\n                        sb.Append('_');\n                 \
    \   }\n                }\n            } else {\n                sb.Append(text[i]);\n\
    \            }\n        }\n        return sb.ToString();", "        // TODO: Implement\
    \ this method such that it passes the tests.\n        string result = text;\n\
    \        int resultLength = result.Length;\n        for (int i = 0; i < resultLength;\
    \ i++) {\n            if (result[i] == ' ') {\n                if (i + 1 < resultLength\
    \ && result[i + 1] == ' ') {\n                    result = result.Substring(0,\
    \ i) + \"-\" + result.Substring(i + 1);\n                    resultLength++;\n\
    \                } else {\n                    result = result.Substring(0, i)\
    \ + \"_\" + result.Substring(i + 1);\n                }\n            }\n     \
    \   }\n        return result;", "        // special case for empty strings\n \
    \       if (text.Length == 0) return text;\n        // start from the first character\n\
    \        int counter = 0;\n        var sb = new StringBuilder();\n        // iterate\
    \ over each character in the string\n        foreach (char c in text) {\n    \
    \        // if we find a space then increase the counter\n            if (c ==\
    \ ' ') counter++;\n            // if we find a character that is not a space\n\
    \            // then reset the counter\n            else counter = 0;\n      \
    \      // if we find a space, if counter == 1\n            // then replace the\
    \ space with an underscore\n            // if counter > 1 then replace the space\
    \ with a dash\n            // if counter == 0 then write the character\n     \
    \       if (c == ' ') {\n                if (counter == 1) sb.Append('_');\n \
    \               else if (counter > 1) sb.Append('-');\n            } else sb.Append(c);\n\
    \        }\n        return sb.ToString();", "        text = text.Replace(\" \"\
    , \"_\");\n        return text;", "        string spaces = \"\";\n        for\
    \ (int i = 0; i < text.Length; i++) {\n            if (text[i] == ' ') spaces\
    \ += ' ';\n            else break;\n        }\n        text = text.TrimStart();\n\
    \        while (text.Contains(\"  \")) text = text.Replace(\"  \", \" \");\n \
    \       while (text.Contains(\"  \")) text = text.Replace(\"  \", \" \");\n  \
    \      while (text.Contains(\"  \")) text = text.Replace(\"  \", \" \");\n   \
    \     while (text.Contains(\"  \")) text = text.Replace(\"  \", \" \");\n    \
    \    while (text.Contains(\"  \")) text = text.Replace(\"  \", \" \");\n     \
    \   while (text.Contains(\"  \")) text = text.Replace(\"  \", \" \");\n      \
    \  while (text.Contains(\"  \")) text = text.Replace(\"  \", \" \");\n       \
    \ while (text.Contains(\"  \")) text = text.Replace(\"  \", \" \");\n        while\
    \ (text.Contains(\"  \")) text = text.Replace(\"  \", \" \");\n        while (text.Contains(\"\
    \  \")) text = text.Replace(\"  \", \" \");\n        if (text.Contains(\"  \"\
    )) return spaces + text.Replace(\" \", \"-\");\n        return spaces + text.Replace(\"\
    \ \", \"_\");", '        return text.Replace(" ", "_").Replace("__", "_").Replace("___",
    "-");', "        // Your code goes here\n        //FixSpaces(\"Coding is fun\"\
    );\n        StringBuilder solution = new StringBuilder();\n        int spaceCount\
    \ = 0;\n        for (int i = 0; i < text.Length; i++) {\n            if (text[i]\
    \ == ' ') {\n                spaceCount++;\n                if (spaceCount ==\
    \ 1) {\n                    solution.Append(\"_\");\n                }\n     \
    \           else if (spaceCount == 2) {\n                    solution.Append(\"\
    _\");\n                }\n                else if (spaceCount > 2) {\n       \
    \             solution.Append(\"-\");\n                }\n            }\n    \
    \        else {\n                spaceCount = 0;\n                solution.Append(text[i]);\n\
    \            }\n        }\n        return solution.ToString();", '        return
    text.Replace(" ", "_").Replace("__", "_").Replace("___", "-");', "        var\
    \ result = text.Trim().Replace(\" \", \"_\");\n        var index = result.IndexOf(\"\
    __\");\n        while (index >= 0) {\n            result = result.Replace(\"__\"\
    , \"-\");\n            index = result.IndexOf(\"__\");\n        }\n        return\
    \ result;", "        if (text == null) return null;\n        bool didSpace = false;\n\
    \        bool didSpaceAgain = false;\n        var sb = new StringBuilder();\n\
    \        foreach (var c in text) {\n            if (c == ' ') {\n            \
    \    if (didSpace) {\n                    didSpaceAgain = true;\n            \
    \    }\n                didSpace = true;\n                sb.Append('_');\n  \
    \          } else {\n                if (didSpaceAgain) {\n                  \
    \  sb.Append('-');\n                }\n                didSpace = false;\n   \
    \             didSpaceAgain = false;\n                sb.Append(c);\n        \
    \    }\n        }\n        return sb.ToString();", "        if (string.IsNullOrEmpty(text))\
    \ {\n            return \"\";\n        }\n        var spaces = 0;\n        var\
    \ result = new StringBuilder();\n        for (var i = 0; i < text.Length; i++)\
    \ {\n            if (text[i] == ' ') {\n                spaces++;\n          \
    \  } else {\n                spaces = 0;\n            }\n            if (spaces\
    \ == 1) {\n                result.Append('_');\n            } else if (spaces\
    \ == 2) {\n                result.Append('-');\n            } else if (spaces\
    \ > 2) {\n                // do nothing\n            } else {\n              \
    \  result.Append(text[i]);\n            }\n        }\n        return result.ToString();",
  "        // TODO: Implement\n        return string.Empty;", "        // Write your\
    \ code here\n        int prevSpace = 0;\n        char[] c = text.ToCharArray();\n\
    \        for (int i = 0; i < c.Length; i++) {\n            if (c[i] == ' ') {\n\
    \                if (i - prevSpace > 2) {\n                    c[i] = '-';\n \
    \               } else {\n                    c[i] = '_';\n                }\n\
    \                prevSpace = i;\n            }\n        }\n        return new\
    \ string(c);", "        string t = text.Replace(\" \", \"_\");\n        int l\
    \ = t.Length;\n        string r = \"\";\n        for (int i = 0; i < l; i++) {\n\
    \            r += t[i];\n            if (i < l - 1 && t[i] == '_' && t[i + 1]\
    \ == '_') {\n                r += '-';\n                i++;\n            }\n\
    \        }\n        return r;", "        text = text.Replace(\" \", \"_\");\n\
    \        text = text.Replace(\"___\", \"-\");\n        return text;", "      \
    \  // Version 1\n        // text = text.Replace(\" \", \"_\");\n        // text\
    \ = text.Replace(\"_ _\", \"_\");\n        // text = text.Replace(\"_ _\", \"\
    -\");\n        // return text;\n\n        // Version 2\n        string fixedText\
    \ = \"\";\n        int count = 0;\n        foreach (char c in text) {\n      \
    \      if (c == ' ') {\n                count++;\n                if (count ==\
    \ 1) {\n                    fixedText += \"_\";\n                } else if (count\
    \ == 2) {\n                    fixedText += \"_\";\n                } else {\n\
    \                    fixedText += \"-\";\n                }\n            } else\
    \ {\n                count = 0;\n                fixedText += c;\n           \
    \ }\n        }\n        return fixedText;", '        return null;', "        var\
    \ sb = new StringBuilder();\n        var spaces = 0;\n        foreach (var ch\
    \ in text) {\n            if (ch == ' ') {\n                spaces++;\n      \
    \      } else {\n                for (int i = 0; i < spaces; i++) {\n        \
    \            if (i == 0) {\n                        sb.Append('_');\n        \
    \            } else if (i == 1) {\n                        sb.Append('_');\n \
    \                   } else {\n                        sb.Append('-');\n      \
    \              }\n                }\n                spaces = 0;\n           \
    \     sb.Append(ch);\n            }\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        int consecutiveSpaceCount = 0;\n       \
    \ for (int i = 0; i < text.Length; i++) {\n            char letter = text[i];\n\
    \            if (letter == ' ') {\n                consecutiveSpaceCount++;\n\
    \                if (consecutiveSpaceCount > 2) {\n                    result\
    \ += '-';\n                } else {\n                    result += '_';\n    \
    \            }\n            } else {\n                consecutiveSpaceCount =\
    \ 0;\n                result += letter;\n            }\n        }\n        return\
    \ result;", "        text = text.Replace(\" \", \"_\");\n        text = text.Replace(\"\
    __\", \"_\");\n        text = text.Replace(\"___\", \"-\");\n        return text;",
  "        // replace all spaces with \"_\"\n        string text_ = text.Replace(\"\
    \ \", \"_\");\n        // replace all consecutive spaces with \"-\"\n        int\
    \ count = 0;\n        StringBuilder sb = new StringBuilder();\n        foreach\
    \ (char c in text_) {\n            if (c == '_') {\n                count++;\n\
    \            } else {\n                count = 0;\n            }\n           \
    \ if (count == 2) {\n                sb.Append(\"-\");\n                count\
    \ = 0;\n            } else {\n                sb.Append(c);\n            }\n \
    \       }\n        return sb.ToString();", '        throw new NotImplementedException();',
  '        return text;', "        string newText = text.Replace(\" \", \"_\");\n\
    \        newText = newText.Replace(\"_ _\", \"__\");\n        newText = newText.Replace(\"\
    _ _ _\", \"_Example-3\");\n        return newText;", '        throw new NotImplementedException();',
  "        // your code goes here\n        return \"\";", "        string replaced\
    \ = text.Replace(\" \", \"_\");\n        int count = 0;\n        char underscore\
    \ = '_';\n        for (int i = 0; i < replaced.Length; i++) {\n            if\
    \ (replaced[i] == underscore) {\n                count++;\n            } else\
    \ {\n                count = 0;\n            }\n            if (count == 3) {\n\
    \                return replaced.Replace(\"___\", \"-\");\n            }\n   \
    \     }\n        return replaced;", "        // TODO: Implement FixSpaces\n  \
    \      return \"\";", '        return text;', "        string result = \"\";\n\
    \        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '\
    \ ') {\n                result += '_';\n            } else {\n               \
    \ result += text[i];\n            }\n        }\n        return result;", "   \
    \     var result = new StringBuilder();\n        var length = text.Length;\n \
    \       var count = 0;\n        for (var i = 0; i < length; i++) {\n         \
    \   var ch = text[i];\n            if (ch == ' ') {\n                count++;\n\
    \                if (count == 2) {\n                    result.Append('-');\n\
    \                }\n            } else {\n                result.Append(ch);\n\
    \                count = 0;\n            }\n        }\n        return result.ToString();",
  "        StringBuilder sb = new StringBuilder();\n        int spaces = 0;\n    \
    \    for (int i = 0; i < text.Length; i++) {\n            if (text[i] == ' ')\
    \ {\n                spaces++;\n                if (spaces > 2) {\n          \
    \          sb.Append('-');\n                    spaces = 0;\n                }\n\
    \            } else {\n                if (spaces == 0) {\n                  \
    \  sb.Append(text[i]);\n                } else if (spaces == 1) {\n          \
    \          sb.Append('_');\n                    sb.Append(text[i]);\n        \
    \            spaces = 0;\n                } else {\n                    sb.Append('_');\n\
    \                    sb.Append(text[i]);\n                    spaces = 0;\n  \
    \              }\n            }\n        }\n        return sb.ToString();", '        return
    text.Replace("  ", "-").Replace(" ", "_");', "        int f = 0;\n        int\
    \ c = 0;\n        string result = \"\";\n        while (f < text.Length) {\n \
    \           c = 0;\n            while (f < text.Length && text[f] == ' ') {\n\
    \                f++;\n                c++;\n            }\n            if (c\
    \ >= 2) {\n                result += \"-\";\n            } else if (c == 1) {\n\
    \                result += \"_\";\n            }\n            if (f < text.Length)\
    \ {\n                result += text[f];\n                f++;\n            }\n\
    \        }\n        return result;", "        char[] charArray = text.ToCharArray();\n\
    \        string result = \"\";\n        char space = ' ';\n        int count =\
    \ 0;\n        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ == space) {\n                if (count < 2) {\n                    result +=\
    \ '_';\n                    count++;\n                } else {\n             \
    \       result += '-';\n                }\n            } else {\n            \
    \    result += charArray[i];\n                count = 0;\n            }\n    \
    \    }\n        return result;", "        // your code here...\n        return\
    \ null;", "        string buffer = \"\";\n        char[] textChars = text.ToCharArray();\n\
    \        int i = 0;\n        while (i < textChars.Length) {\n            char\
    \ c = textChars[i];\n            if (c == ' ') {\n                int count =\
    \ 0;\n                while (i < textChars.Length && textChars[i] == ' ') {\n\
    \                    count++;\n                    i++;\n                }\n \
    \               if (count > 2) {\n                    buffer += \"-\";\n     \
    \           } else {\n                    buffer += \"_\";\n                }\n\
    \            } else {\n                buffer += c;\n                i++;\n  \
    \          }\n        }\n        return buffer;", "        var newString = \"\"\
    ;\n        var spacesCount = 0;\n        for (int i = 0; i < text.Length; i++)\
    \ {\n            if (text[i] == ' ') {\n                spacesCount++;\n     \
    \           continue;\n            }\n            else {\n                if (spacesCount\
    \ == 1) {\n                    newString += \"_\";\n                }\n      \
    \          else if (spacesCount > 1) {\n                    newString += \"-\"\
    ;\n                }\n                newString += text[i];\n                spacesCount\
    \ = 0;\n            }\n        }\n        return newString;", "        string\
    \ res = \"\";\n        int spaceCnt = 0;\n        int prevSpaceCnt = 0;\n    \
    \    for (int i = 0; i < text.Length; i++) {\n            if (text[i] == ' ')\
    \ {\n                spaceCnt++;\n            } else {\n                if (spaceCnt\
    \ == 1) {\n                    res += \"_\";\n                } else if (spaceCnt\
    \ == 2) {\n                    res += \"__\";\n                } else if (spaceCnt\
    \ > 2) {\n                    res += \"-\" + text[i];\n                } else\
    \ {\n                    res += text[i];\n                }\n                spaceCnt\
    \ = 0;\n            }\n        }\n        return res;", "        string ans =\
    \ \"\";\n        int spaceNum = 0;\n        for (int i = 0; i < text.Length; i++)\
    \ {\n            if (text[i] == ' ') {\n                spaceNum++;\n        \
    \        if (spaceNum == 1) {\n                    ans += \"_\";\n           \
    \     }\n                else if (spaceNum > 2) {\n                    ans +=\
    \ \"-\";\n                }\n            }\n            else {\n             \
    \   ans += text[i];\n                spaceNum = 0;\n            }\n        }\n\
    \        return ans;", "        if (string.IsNullOrEmpty(text)) {\n          \
    \  return text;\n        }\n        string result = \"\";\n        int space_count\
    \ = 0;\n        foreach (char c in text) {\n            if (c == ' ') {\n    \
    \            space_count++;\n            } else {\n                if (space_count\
    \ == 1) {\n                    result += \"_\";\n                } else if (space_count\
    \ > 2) {\n                    result += \"-\";\n                }\n          \
    \      space_count = 0;\n                result += c;\n            }\n       \
    \ }\n        if (space_count == 1) {\n            result += \"_\";\n        }\
    \ else if (space_count > 2) {\n            result += \"-\";\n        }\n     \
    \   return result;", "        // Replace all spaces with underscores\n       \
    \ text = text.Replace(\" \", \"_\");\n        // Replace all 2+ consecutive underscores\
    \ with -\n        text = text.Replace(\"__\", \"-\");\n        return text;",
  "        StringBuilder sb = new StringBuilder();\n        int prevIdx = 0;\n   \
    \     int startIdx = 0;\n        while (startIdx < text.Length) {\n          \
    \  while (startIdx < text.Length && text[startIdx] == ' ') {\n               \
    \ startIdx++;\n            }\n            int idx = startIdx;\n            while\
    \ (idx < text.Length && text[idx] != ' ') {\n                idx++;\n        \
    \    }\n            int len = idx - startIdx;\n            if (len > 2) {\n  \
    \              sb.Append('-');\n            } else {\n                for (int\
    \ i = prevIdx; i < startIdx; i++) {\n                    sb.Append('_');\n   \
    \             }\n            }\n            for (int i = startIdx; i < idx; i++)\
    \ {\n                sb.Append(text[i]);\n            }\n            prevIdx =\
    \ idx;\n            startIdx = idx;\n        }\n        return sb.ToString();",
  "        var result = new StringBuilder();\n        var chars = text.ToCharArray();\n\
    \        var spacesCount = 0;\n        foreach (var c in chars) {\n          \
    \  if (c == ' ') spacesCount++;\n            else spacesCount = 0;\n         \
    \   if (spacesCount < 3) {\n                result.Append(c == ' ' ? '_' : c);\n\
    \            } else {\n                result.Append('-');\n            }\n  \
    \      }\n        return result.ToString();", "        StringBuilder sb = new\
    \ StringBuilder();\n        int spaces = 0;\n        foreach (char c in text)\
    \ {\n            if (c == ' ') {\n                spaces++;\n                if\
    \ (spaces > 2) {\n                    sb.Append('-');\n                }\n   \
    \         } else {\n                spaces = 0;\n                if (c == ' ')\
    \ {\n                    sb.Append('_');\n                } else {\n         \
    \           sb.Append(c);\n                }\n            }\n        }\n     \
    \   return sb.ToString();", "        var list = new List<char>();\n        var\
    \ spaceCount = 0;\n        foreach (var c in text) {\n            if (c == ' ')\
    \ {\n                spaceCount++;\n                if (spaceCount == 1) {\n \
    \                   list.Add('_');\n                }\n            } else {\n\
    \                if (spaceCount > 2) {\n                    list.Add('-');\n \
    \               }\n                spaceCount = 0;\n                list.Add(c);\n\
    \            }\n        }\n        if (spaceCount > 2) {\n            list.Add('-');\n\
    \        }\n        return new string(list.ToArray());", "        bool consecutive\
    \ = false;\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < text.Length; i++) {\n            char c = text[i];\n            if\
    \ (c == ' ') {\n                if (i > 0 && text[i - 1] == ' ') {\n         \
    \           consecutive = true;\n                }\n                if (i < text.Length\
    \ - 1 && text[i + 1] == ' ') {\n                    consecutive = true;\n    \
    \            }\n                if (consecutive) {\n                    sb.Append('-');\n\
    \                } else {\n                    sb.Append('_');\n             \
    \   }\n            } else {\n                sb.Append(c);\n            }\n  \
    \      }\n        return sb.ToString();", "        if (text.Length <= 1) return\
    \ text;\n        string newText = \"\";\n        int count = 0;\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                if (count >=\
    \ 2) {\n                    newText += '-';\n                    count = 0;\n\
    \                } else {\n                    newText += '_';\n             \
    \       count += 1;\n                }\n            } else {\n               \
    \ newText += c;\n                count = 0;\n            }\n        }\n      \
    \  return newText;", "        string regex = \"\\\\s{2,}\";\n        string replacement\
    \ = \"-\";\n        Regex rgx = new Regex(regex);\n        string result = rgx.Replace(text,\
    \ replacement);\n        regex = \"\\\\s\";\n        replacement = \"_\";\n  \
    \      rgx = new Regex(regex);\n        result = rgx.Replace(result, replacement);\n\
    \        return result;", '        return "";', "        string text1 = new string(text.ToCharArray().Select(c\
    \ => { if (c == ' ') return '_'; else return c; }).ToArray());\n        string\
    \ text2 = new string(text1.ToCharArray().Select((c, i) => {\n            if (i\
    \ < text1.Length - 2 && text1[i] == '_' && text1[i + 1] == '_' && text1[i + 2]\
    \ == '_') return '-';\n            else return c;\n        }).ToArray());\n  \
    \      return text2;"]
stop_tokens:
- "\n    }\n"
