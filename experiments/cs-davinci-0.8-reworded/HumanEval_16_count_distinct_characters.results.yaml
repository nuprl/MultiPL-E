language: cs
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // SOLUTION\n        return
    str.Distinct().Count();\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <393a55bee1aa4f31950b5628b718c3be>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <393a55bee1aa4f31950b5628b718c3be>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        if (str == null) {\n
    \           throw new ArgumentNullException(\"str\");\n        }\n        return
    str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // TODO: implement
    this\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d109722f78b42fe81d6b624ff69c423>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d109722f78b42fe81d6b624ff69c423>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // replace as per your
    needs\n        return str.Distinct().Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <42b6d6463e2347a384a420d8b022d655>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <42b6d6463e2347a384a420d8b022d655>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        long res = 0;\n        string
    s = str.ToLower();\n        for (int i = 0; i < s.Length; i++) {\n            if
    (!s.Substring(0, i).Contains(s[i]))\n                res++;\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        string lowerStr = str.ToLower();\n
    \       long distinct = 0;\n        for (int i = 0; i < lowerStr.Length; i++)
    {\n            if (lowerStr.LastIndexOf(lowerStr[i]) == i) {\n                distinct++;\n
    \           }\n        }\n        return distinct;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n
    \   Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Your code here\n
    \       char[] separated = str.ToCharArray();\n        char[] result = separated.Distinct().ToArray();\n
    \       return result.Length;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6642af663b484751abcb90ebafdfc768>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6642af663b484751abcb90ebafdfc768>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var charSet = new HashSet<char>();\n
    \       foreach (var ch in str) {\n            charSet.Add(char.ToLower(ch));\n
    \       }\n        return charSet.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Fill in the code
    here\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10e8ea910309411097f63845a4692a0e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10e8ea910309411097f63845a4692a0e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        HashSet<char> tmp =
    new HashSet<char>();\n        foreach (char c in str) {\n            tmp.Add(c);\n
    \       }\n        return tmp.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2752452abcc4eb095d125c8d06a6662>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2752452abcc4eb095d125c8d06a6662>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // BASE CASE: empty
    string, distinct count is 0\n        if (str.Length == 0) return 0;\n        //
    INDUCTIVE CASE: We split the string into its first and rest, count the distinct
    \n        // characters in the rest, and return the distinct count of the rest
    with the first \n        // character added only if it is not a repeat.\n        return
    CountDistinctCharacters(str.Substring(1)) + \n               (str.Substring(1).ToLower().Contains(str[0].ToString().ToLower())
    ? 0 : 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b544efb4a614cf0aa257e36d0ec29ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b544efb4a614cf0aa257e36d0ec29ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var distinctChars =
    new HashSet<char>();\n        foreach (var c in str) {\n            distinctChars.Add(char.ToLower(c));\n
    \       }\n        return distinctChars.Count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n
    \   Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        HashSet<char> seen
    = new HashSet<char>();\n        foreach (char c in str)\n            seen.Add(char.ToLower(c));\n
    \       return seen.Count;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var distinctCharacters
    = str.ToLower().Distinct();\n        return distinctCharacters.Count();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // raise an exception
    if str is not a string\n        Debug.Assert(typeof(str) == typeof(string));\n
    \       // convert str to lower case\n        // use a HashSet to keep track of
    distinct characters\n        // iterate through each character in str\n        //
    if the character is not in the HashSet, add it to the HashSet\n        // return
    the number of distinct characters\n        return str.ToLower().ToCharArray().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpny1dwu59.cs(16,29): error CS0118: ''str'' is a variable but is used like
    a type

    '
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var s = new HashSet<char>();\n
    \       foreach (var c in str)\n            s.Add(char.ToLower(c));\n        return
    s.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        HashSet<char> uniqueChars
    = new HashSet<char>();\n        foreach (char ch in str) {\n            uniqueChars.Add(Char.ToLower(ch));\n
    \       }\n        return uniqueChars.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Implement your solution
    here\n\n        // HINT: You need to implement your own hash table for this problem\n
    \       // HINT: You need to implement your own chaining scheme for this problem\n
    \       // HINT: You need to consider the case of collision in this problem\n\n
    \       List<char> distinctChars = new List<char>();\n        foreach (char c
    in str) {\n            if (!distinctChars.Contains(char.ToLower(c)))\n                distinctChars.Add(char.ToLower(c));\n
    \       }\n        return distinctChars.Count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n
    \   Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Insert your code
    here\n        return str.Distinct().Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <43096d5943cc4be1926b8ca27a711ffa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <43096d5943cc4be1926b8ca27a711ffa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Create a set to
    store distinct values\n        HashSet<Char> set = new HashSet<Char>();\n        //
    Iterate over characters in the string\n        foreach (Char ch in str) {\n            //
    Add each character to the set\n            set.Add(ch);\n        }\n        //
    Now we count elements in the set\n        return set.Count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <440537a570264089997f7c5e6343ebea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <440537a570264089997f7c5e6343ebea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // YOUR CODE HERE\n
    \       var temp = new HashSet<char>();\n        foreach (var item in str)\n        {\n
    \           temp.Add(char.ToLower(item));\n        }\n        return temp.Count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        HashSet<char> set =
    new HashSet<char>();\n        foreach (char c in str) {\n            set.Add(char.ToLower(c));\n
    \       }\n        return set.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var lower = str.ToLower();\n
    \       var chars = lower.Distinct();\n        return chars.Count();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var m = new HashSet<char>();\n
    \       foreach (var ch in str)\n            m.Add(ch);\n        return m.Count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c5caf845c294b53b0669506bf6d03a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c5caf845c294b53b0669506bf6d03a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        Dictionary<char, bool>
    dict = new Dictionary<char, bool>();\n        foreach (char c in str) {\n            dict[char.ToLower(c)]
    = true;\n        }\n        return dict.Count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n
    \   Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Initialize the result
    to an empty set\n        HashSet<char> result = new HashSet<char>();\n        //
    Iterate over the string to populate the result\n        foreach (char character
    in str) {\n            // Invariant: result contains all the distinct characters
    of str seen thus far\n            result.Add(char.ToLower(character));\n        }\n
    \       // Return the result\n        return result.Count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToUpper().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977190
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        long ans = 0;\n        bool[]
    count = new bool[26];\n        str = str.ToLower();\n        foreach (char c in
    str) {\n            if (!count[c - 'a']) {\n                count[c - 'a'] = true;\n
    \               ans++;\n            }\n        }\n        return ans;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.CountDistinctCharacters (System.String
    str) [0x00025] in <b022e3e323cd421cb91054615e710701>:0 \n  at Problem.Main (System.String[]
    args) [0x00051] in <b022e3e323cd421cb91054615e710701>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.CountDistinctCharacters (System.String str) [0x00025] in
    <b022e3e323cd421cb91054615e710701>:0 \n  at Problem.Main (System.String[] args)
    [0x00051] in <b022e3e323cd421cb91054615e710701>:0 \n"
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // TODO: return the
    number of distinct characters (regardless of case)\n        // in the string.\n
    \       string lower = str.ToLower();\n        HashSet<char> chars = new HashSet<char>();\n
    \       foreach (char c in lower) {\n            chars.Add(c);\n        }\n        return
    chars.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return 1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eaeaceee77ee43a390ed08fd948203fe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eaeaceee77ee43a390ed08fd948203fe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Fill this stub.\n
    \       if (str == null) {\n            return 0;\n        }\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // INSERT YOUR CODE
    HERE\n        return str.Distinct().Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20e65312e27240178177e636b13f9e98>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20e65312e27240178177e636b13f9e98>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        HashSet<char> set =
    new HashSet<char>();\n        foreach (char c in str) {\n            set.Add(char.ToLower(c));\n
    \       }\n        return set.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        HashSet<char> s = new
    HashSet<char>();\n        foreach (char c in str) {\n            s.Add(char.ToLower(c));\n
    \       }\n        return s.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977190
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <0416b555896e4d8ab7df1a94f507b65f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <0416b555896e4d8ab7df1a94f507b65f>:0 \n"
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a571e6988da4120892cc87c506a556d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a571e6988da4120892cc87c506a556d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // TODO: implement
    this function\n        // >> return 0L;\n        if (str == null) {\n            return
    0L;\n        }\n        var characters = new HashSet<char>();\n        foreach
    (var character in str) {\n            if (characters.Contains(character)) {\n
    \               continue;\n            }\n            characters.Add(character);\n
    \       }\n        return characters.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <33b224be37804df194607c075eb69b8b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <33b224be37804df194607c075eb69b8b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977190
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // >>> dict((l, 0)
    for l in \"abcdefghijklmnopqrstuvwxyz\")\n        // {'a': 0, 'c': 0, 'b': 0,
    'e': 0, 'd': 0, 'g': 0, 'f': 0, 'i': 0, 'h': 0, 'k': 0, 'j': 0, 'm': 0, 'l': 0,
    'o': 0, 'n': 0, 'q': 0, 'p': 0, 's': 0, 'r': 0, 'u': 0, 't': 0, 'w': 0, 'v': 0,
    'y': 0, 'x': 0, 'z': 0}\n        // >>> set(s.lower() for s in \"Jerry\")\n        //
    set(['e', 'j', 'r', 'y'])\n        // >>> len(set(s.lower() for s in \"Jerry\"))\n
    \       // 4\n        // >>> len(set(s.lower() for s in \"Jerry\"))\n        //
    4\n        // >>> len(set(s.lower() for s in \"Jerry\"))\n        // 4\n        //
    >>> len(set(s.lower() for s in \"Jerry\"))\n        // 4\n        // >>> len(set(s.lower()
    for s in \"Jerry\"))\n        // 4\n        // >>> len(set(s.lower() for s in
    \"Jerry\"))\n        // 4\n        // >>> len(set(s.lower() for s in \"Jerry\"))\n
    \       // 4\n        // >>> len(set(s.lower() for s in \"Jerry\"))\n        //
    4\n        // >>> len(set(s.lower() for s in \"Jerry\"))\n        // 4\n        //
    >>> len(set(s.lower() for s in \"Jerry\"))\n        // 4\n        // >>> len(set(s.lower()
    for s in \"Jerry\"))\n        // 4\n        // >>> len(set(s.lower() for s in
    \"Jerry\"))\n        // 4\n        // >>> len(set(s.lower() for s in \"Jerry\"))\n
    \       // 4\n        // >>> len(set(s.lower() for s in \"Jerry\"))\n        //
    4\n        // >>> len(set\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpywt4hysl.cs(14,24): error CS0161: ''Problem.CountDistinctCharacters(string)'':
    not all code paths return a value

    '
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // TODO: replace with
    your implementation\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebb4427566fc4695b11da2269cf47449>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebb4427566fc4695b11da2269cf47449>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.Select(c
    => Char.ToLower(c)).Distinct().Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var set = new HashSet<char>();\n
    \       foreach (var ch in str) {\n            if (!set.Contains(ch)) {\n                set.Add(ch);\n
    \           }\n        }\n        return set.Count;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) ==
    (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44c75f9d66824130be88b183b8337100>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44c75f9d66824130be88b183b8337100>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Change all characters
    to lowercase\n        var strLower = str.ToLower();\n        // Create a dictionary
    with the characters as keys and their count as value\n        var charCount =
    new Dictionary<char, long>();\n        foreach (var c in strLower) {\n            if
    (charCount.ContainsKey(c)) {\n                charCount[c] += 1;\n            }
    else {\n                charCount[c] = 1;\n            }\n        }\n        //
    Count the number of elements with count greater than 0\n        return charCount.Values.Count(x
    => x > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToUpper().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // YOUR CODE HERE\n
    \       return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <015b986226254814ab08605b7baaa25d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <015b986226254814ab08605b7baaa25d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var chSet = new HashSet<char>();\n
    \       foreach (var ch in str) {\n            chSet.Add(char.ToLower(ch));\n
    \       }\n        return chSet.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        HashSet<char> set =
    new HashSet<char>();\n        foreach (char ch in str)\n            set.Add(char.ToLower(ch));\n
    \       return set.Count;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        long res = 0;\n        string
    s = str.ToLower();\n        for (int i = 0; i < s.Length; i++) {\n            if
    (!s.Substring(0, i).Contains(s[i])) {\n                res++;\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977191
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Insert your code
    here.\n        char[] chars = str.ToLower().ToCharArray();\n        Array.Sort(chars);\n
    \       char last = chars[0];\n        int count = 1;\n        for (int i = 1;
    i < chars.Length; i++) {\n            if (chars[i] != last) {\n                count++;\n
    \               last = chars[i];\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.CountDistinctCharacters (System.String
    str) [0x00014] in <67a7710a29604786be65cc1e5b42d13c>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <67a7710a29604786be65cc1e5b42d13c>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.CountDistinctCharacters (System.String str) [0x00014] in
    <67a7710a29604786be65cc1e5b42d13c>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <67a7710a29604786be65cc1e5b42d13c>:0 \n"
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var chars = new HashSet<char>();\n
    \       foreach (var c in str) {\n            chars.Add(char.ToLower(c));\n        }\n
    \       return chars.Count;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        HashSet<char> s = new
    HashSet<char>();\n        foreach (char c in str) {\n            s.Add(c);\n        }\n
    \       return s.Count;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4b7134f93bc432e94c797e3f76834e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4b7134f93bc432e94c797e3f76834e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a571e6988da4120892cc87c506a556d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a571e6988da4120892cc87c506a556d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var set = new HashSet<char>();\n
    \       foreach (var ch in str)\n            set.Add(char.ToLower(ch));\n        return
    set.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var distinct = str.ToLower().Distinct();\n
    \       var hashset = new HashSet<char>(distinct);\n        return hashset.Count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        HashSet<char> set =
    new HashSet<char>();\n        foreach (char c in str) {\n            set.Add(char.ToLower(c));\n
    \       }\n        return set.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        HashSet<char> set =
    new HashSet<char>();\n        foreach (char c in str) {\n            set.Add(c);\n
    \       }\n        return set.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06533fb9ba9644a0b8f2ac3287d1b84d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06533fb9ba9644a0b8f2ac3287d1b84d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.Select(ch
    => char.ToLower(ch)).Distinct().Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Exception handling\n
    \       if (str == null) {\n            throw new ArgumentNullException();\n        }\n\n
    \       // Base case\n        if (str.Length == 0) {\n            return 0;\n
    \       }\n\n        // CountDistinctCharacters of str[1:]\n        long count
    = CountDistinctCharacters(str.Substring(1));\n\n        // Check if the last character
    is already counted by previous recursive call\n        for (int i = 0; i < str.Length
    - 1; i++) {\n            if (str[i] == str[str.Length - 1] ||\n                char.ToLower(str[i])
    == char.ToLower(str[str.Length - 1])) {\n                return count;\n            }\n
    \       }\n\n        // The last character is not yet counted\n        return
    count + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c7efae7ee274b428d4bf3d21a65edc7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c7efae7ee274b428d4bf3d21a65edc7>:0
    \n"
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var result = new HashSet<char>();\n
    \       foreach (var c in str) {\n            result.Add(char.ToLower(c));\n        }\n
    \       return result.Count;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        string res = \"\";\n
    \       for (int i = 0; i < str.Length; i++) {\n            string c = str[i].ToString().ToLower();\n
    \           if (!res.Contains(c))\n                res += c;\n        }\n        return
    res.Length;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977191
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        //\n        // YOUR
    CODE GOES HERE\n        //\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5huhf6jg.cs(14,24): error CS0161: ''Problem.CountDistinctCharacters(string)'':
    not all code paths return a value

    '
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        HashSet<char> distChars
    = new HashSet<char>();\n        for (int i = 0; i < str.Length; i++) {\n            distChars.Add(str[i]);\n
    \       }\n        return distChars.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53dab991ec8a45c1bf4d46016a73b9e3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53dab991ec8a45c1bf4d46016a73b9e3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // YOUR CODE HERE\n
    \       char[] distinct = str.ToLower().Distinct().ToArray();\n        return
    distinct.Length;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToLower().ToCharArray().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToUpper().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Your code goes here\n
    \       return str.Distinct().Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19b857f238664d9d93131acac25cf813>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19b857f238664d9d93131acac25cf813>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Count the number
    of distinct characters in a string\n        return 1;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) ==
    (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf942a5458a94d619202fdbb46c1bb6c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf942a5458a94d619202fdbb46c1bb6c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Implement this placeholder.\n
    \       return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <93ab71b705f043ba8a1529c6095f357e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <93ab71b705f043ba8a1529c6095f357e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.Select(c
    => char.ToLower(c)).Distinct().Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var result = new HashSet<char>();\n
    \       foreach (var c in str) {\n            result.Add(char.ToLower(c));\n        }\n
    \       return result.Count;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        List<char> list = new
    List<char>();\n        for (int i = 0; i < str.Length; i++) {\n            if
    (!list.Contains(str[i])) {\n                list.Add(str[i]);\n            }\n
    \       }\n        return list.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <995be4de086643c8a6b9b379514902bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <995be4de086643c8a6b9b379514902bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // YOUR CODE HERE\n
    \       return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <015b986226254814ab08605b7baaa25d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <015b986226254814ab08605b7baaa25d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Use a dictionary
    to count the number of occurences of each character in the string\n        Dictionary<char,
    int> charCount = new Dictionary<char, int>();\n        foreach (char c in str)
    {\n            if (charCount.ContainsKey(c)) {\n                charCount[c]++;\n
    \           } else {\n                charCount[c] = 1;\n            }\n        }\n
    \       return charCount.Count;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84b8fa8a040948b88d270283b4bb5e83>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84b8fa8a040948b88d270283b4bb5e83>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Fill in your code
    here!\n        var chars = new HashSet<char>();\n        foreach (var c in str)\n
    \           chars.Add(c);\n        return chars.Count;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) ==
    (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ce83ad516c54379800e9d33b1d946cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ce83ad516c54379800e9d33b1d946cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Convert the string
    to lower case\n        string strLower = str.ToLower();\n        // Convert the
    string to a hashset.\n        // A hashset is like a set, but we can use its .Count
    property\n        HashSet<char> strHash = new HashSet<char>(strLower);\n        //
    Return the number of distinct characters\n        return strHash.Count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Your code starts
    here\n        int count = 0;\n        foreach (char c in str)\n        {\n            if
    (str.IndexOf(c) == str.LastIndexOf(c))\n            {\n                count++;\n
    \           }\n        }\n        return count;\n        // Your code ends here\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc3ffc8bb4f54875b5abf0adca332920>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc3ffc8bb4f54875b5abf0adca332920>:0
    \n"
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        long result = 0;\n
    \       foreach (char x in str) {\n            if (str.IndexOf(char.ToLower(x))
    != -1 && str.IndexOf(char.ToUpper(x)) != -1) {\n                result++;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <58d3d9d445be4891ab6d4d65c46ff7d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <58d3d9d445be4891ab6d4d65c46ff7d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977192
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <0416b555896e4d8ab7df1a94f507b65f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <0416b555896e4d8ab7df1a94f507b65f>:0 \n"
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // use string.Join
    to convert a list of characters to a string\n        return new HashSet<char>(str.ToLower().ToCharArray()).Count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Your code goes here\n
    \       return str.ToLower().Distinct().Count();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n
    \   Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.Distinct().LongCount();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b38655bc67a74e4e9e55f7ab2f428322>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b38655bc67a74e4e9e55f7ab2f428322>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        Dictionary<char,bool>
    d = new Dictionary<char,bool>();\n        for (int i = 0; i < str.Length; i++)
    {\n            d[Char.ToLower(str[i])] = true;\n        }\n        return d.Count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // 1. Set up the variables\n
    \       var distinct = new HashSet<char>();\n        // 2. Loop over the characters\n
    \       foreach (var c in str) {\n            distinct.Add(c);\n        }\n        //
    3. Convert from a set to the count\n        return distinct.Count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2f0d968cd534784a95d5507e1416db3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2f0d968cd534784a95d5507e1416db3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var sets = new HashSet<char>();\n
    \       foreach (var item in str) {\n            sets.Add(item);\n        }\n
    \       return sets.Count;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70539f14e0b14bceb97ba8edd6ce98db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70539f14e0b14bceb97ba8edd6ce98db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var set = new HashSet<char>();\n
    \       for (int i = 0; i < str.Length; i++) {\n            set.Add(char.ToLower(str[i]));\n
    \       }\n        return set.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a571e6988da4120892cc87c506a556d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a571e6988da4120892cc87c506a556d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        str = str.ToLower();\n
    \       int[] count = new int[26];\n        int n = str.Length;\n        for (int
    i = 0; i < n; i++) {\n            count[str[i] - 'a']++;\n        }\n        int
    cnt = 0;\n        for (int i = 0; i < 26; i++) {\n            if (count[i] > 0)
    {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.CountDistinctCharacters (System.String
    str) [0x00025] in <5a2d88b3b0964171b0423594ca2a9e84>:0 \n  at Problem.Main (System.String[]
    args) [0x00051] in <5a2d88b3b0964171b0423594ca2a9e84>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.CountDistinctCharacters (System.String str) [0x00025] in
    <5a2d88b3b0964171b0423594ca2a9e84>:0 \n  at Problem.Main (System.String[] args)
    [0x00051] in <5a2d88b3b0964171b0423594ca2a9e84>:0 \n"
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.Distinct().LongCount();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b38655bc67a74e4e9e55f7ab2f428322>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b38655bc67a74e4e9e55f7ab2f428322>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var set = new HashSet<char>();\n
    \       foreach (var ch in str) {\n            set.Add(Char.ToLower(ch));\n        }\n
    \       return set.Count;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToUpper().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // FIXME: Add code
    here\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <280a87d9cdd444778a73793c974e01b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <280a87d9cdd444778a73793c974e01b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var s = new HashSet<char>();\n
    \       foreach (var c in str) {\n            s.Add(char.ToLower(c));\n        }\n
    \       return s.Count;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a571e6988da4120892cc87c506a556d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a571e6988da4120892cc87c506a556d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var distinctChars =
    new HashSet<char>();\n        foreach (var c in str) {\n            distinctChars.Add(Char.ToLower(c));\n
    \       }\n        return distinctChars.Count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n
    \   Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // We use char as a
    key because of nice characters to numbers mapping\n        var d = new Dictionary<char,
    char>();\n        foreach (var c in str) {\n            // We don't need to store
    anything. Just add the key to the dictionary\n            d[char.ToLower(c)] =
    c;\n        }\n        return d.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var chars = new HashSet<char>();\n
    \       foreach (var c in str) {\n            chars.Add(char.ToLower(c));\n        }\n
    \       return chars.Count;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToUpper().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var chars = new HashSet<char>();\n
    \       foreach (var ch in str) {\n            chars.Add(char.ToLower(ch));\n
    \       }\n        return chars.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // TODO: implement
    this function\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bc3ecd9c0984895880a35efd235f81a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bc3ecd9c0984895880a35efd235f81a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        string l = str.ToLower();\n
    \       return l.Distinct().Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        if (str == null)\n
    \           throw new ArgumentNullException();\n        if (str.Length == 0)\n
    \           return 0;\n        List<char> charSet = new List<char>();\n        foreach
    (char c in str) {\n            if (!charSet.Contains(char.ToLower(c)))\n                charSet.Add(char.ToLower(c));\n
    \       }\n        return charSet.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.Length;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa5a1a9572f547c38237bad62fdaabde>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa5a1a9572f547c38237bad62fdaabde>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        HashSet<char> h = new
    HashSet<char>();\n        foreach (char c in str) {\n            h.Add(c);\n        }\n
    \       return h.Count;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da039982f18b4dec8ea7f4003d7e5131>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da039982f18b4dec8ea7f4003d7e5131>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return (long)str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        HashSet<Char> hs =
    new HashSet<Char>();\n        for (int i = 0; i < str.Length; i++) {\n            hs.Add(Char.ToLower(str[i]));\n
    \       }\n        return hs.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var list = new List<char>();\n
    \       for (int i = 0; i < str.Length; i++) {\n            if (!list.Contains(str[i]))
    {\n                list.Add(str[i]);\n            }\n        }\n        return
    list.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e492555c76754438bf8c579ae8eb31e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e492555c76754438bf8c579ae8eb31e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        if (str == null) {\n
    \           throw new ArgumentNullException(\"str\");\n        }\n        var
    lowerCase = new HashSet<char>();\n        var upperCase = new HashSet<char>();\n
    \       foreach (var c in str) {\n            if (Char.IsLower(c)) {\n                lowerCase.Add(c);\n
    \           } else if (Char.IsUpper(c)) {\n                upperCase.Add(c);\n
    \           }\n        }\n        return lowerCase.Count + upperCase.Count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <71dd0a05378f4e068f09118559dd9c6b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <71dd0a05378f4e068f09118559dd9c6b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // TODO implement this
    function\n        return -1;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69b430ea50542d689bcd2721645b143>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69b430ea50542d689bcd2721645b143>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a571e6988da4120892cc87c506a556d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a571e6988da4120892cc87c506a556d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // TODO: Replace the
    following line with your code\n        var d = new Dictionary<char, bool>();\n
    \       foreach (var c in str) {\n            d[char.ToLower(c)] = true;\n        }\n
    \       return d.Count;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var distinctChars =
    new HashSet<char>();\n        foreach (var c in str) {\n            distinctChars.Add(char.ToLower(c));\n
    \       }\n        return distinctChars.Count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n
    \   Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        char[] charArray =
    str.ToCharArray();\n        HashSet<char> hs = new HashSet<char>();\n        foreach
    (char ch in charArray) {\n            hs.Add(ch);\n        }\n        return hs.Count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a96000d3cd34418385eba91d3323ed50>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a96000d3cd34418385eba91d3323ed50>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977193
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <0416b555896e4d8ab7df1a94f507b65f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <0416b555896e4d8ab7df1a94f507b65f>:0 \n"
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return (long)str.ToUpper().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        //return str.Select(c
    => Char.ToLower(c)).Distinct().Count();\n        //string lower = str.ToLower();\n
    \       //var d = new HashSet<char>();\n        //foreach (char c in lower) {\n
    \       //    d.Add(c);\n        //}\n        //return d.Count;\n        var d
    = new Dictionary<char, bool>();\n        foreach (char c in str) {\n            d[Char.ToLower(c)]
    = true;\n        }\n        return d.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // return (long)str.Distinct().Count();\n
    \       HashSet<char> h = new HashSet<char>();\n        foreach (char c in str)
    {\n            h.Add(c);\n        }\n        return h.Count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b3f80f89af0c49e2bb31ced4548b5196>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b3f80f89af0c49e2bb31ced4548b5196>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var mapping = new Dictionary<char,
    bool>();\n        for (int i = 0; i < str.Length; i++) {\n            mapping[Char.ToLower(str[i])]
    = true;\n        }\n        return mapping.Count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n
    \   Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // return str.ToLower().Distinct().Count();\n
    \       return str.ToLower().GroupBy(x => x).Count();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) ==
    (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // STUB: Replace with
    your code\n        long distinct_chars = 0;\n        return distinct_chars;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a80790f4b40f453c8e265f7a0562a7c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a80790f4b40f453c8e265f7a0562a7c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Your code goes here\n
    \       return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd3a38a2d4474b10b46da20b2881f288>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd3a38a2d4474b10b46da20b2881f288>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var nums = str.Select(x
    => x.ToString().ToLower().ToCharArray()[0]).Distinct().Count();\n        return
    nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var distinctChars =
    new HashSet<char>();\n        foreach (var c in str) {\n            if (c >= 'a'
    && c <= 'z') {\n                distinctChars.Add(c);\n            } else if (c
    >= 'A' && c <= 'Z') {\n                distinctChars.Add((char)(c - 'A' + 'a'));\n
    \           }\n        }\n        return distinctChars.Count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d3723a90a16424b9b2e527422e37ae4>:0
    \n"
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        long distinct = 0;\n
    \       HashSet<char> set = new HashSet<char>();\n        foreach (char ch in
    str) {\n            set.Add(ch);\n        }\n        distinct = set.Count;\n        return
    distinct;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0adc72a8dd694f97a56a3bc128f87741>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0adc72a8dd694f97a56a3bc128f87741>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a571e6988da4120892cc87c506a556d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a571e6988da4120892cc87c506a556d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        //  Insert Code Here
    ...\n        int count = 0;\n        int size = str.Length;\n        int flag
    = 0;\n        string lower = str.ToLower();\n        for (int i = 0; i < size;
    i++)\n        {\n            if (i == 0)\n            {\n                count++;\n
    \           }\n            else\n            {\n                for (int j = 0;
    j < i; j++)\n                {\n                    if (lower[i] == lower[j])\n
    \                   {\n                        flag = 1;\n                        break;\n
    \                   }\n                }\n                if (flag == 0)\n                {\n
    \                   count++;\n                }\n                flag = 0;\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var c = str.ToLower().ToCharArray();\n
    \       var s = c.Distinct();\n        var res = s.Count();\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        HashSet<char> chars
    = new HashSet<char>();\n        foreach (char c in str) {\n            chars.Add(c);\n
    \       }\n        return chars.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5458be9f8e2847afa7312e41855318e3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5458be9f8e2847afa7312e41855318e3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var hashset = new HashSet<char>();\n
    \       for (int i = 0; i < str.Length; i++) {\n            hashset.Add(char.ToLower(str[i]));\n
    \       }\n        return hashset.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a571e6988da4120892cc87c506a556d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a571e6988da4120892cc87c506a556d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return (long) str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var set = new HashSet<char>();\n
    \       foreach (var s in str) {\n            set.Add(s);\n        }\n        return
    set.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1e9a188a815f433690b30aba14a57be9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1e9a188a815f433690b30aba14a57be9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        //return str.Distinct().Count();\n
    \       return str.ToLower().Distinct().Count();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n
    \   Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Your code goes here\n
    \       return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd3a38a2d4474b10b46da20b2881f288>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd3a38a2d4474b10b46da20b2881f288>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return new HashSet<char>(str.ToLower().ToCharArray()).Count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // TODO: write your
    implementation here\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b896fa89c974ac7ad212d525f994f58>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b896fa89c974ac7ad212d525f994f58>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // your code here\n
    \       return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2e8128e45314397ae60afb20d7970ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2e8128e45314397ae60afb20d7970ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // HashSet maintains
    a hash table of its elements.\n\n        // Dictionary<TKey, TValue> Class\n        //
    Represents a collection of keys and values.\n        // Only one value can be
    added to the dictionary for each key.\n\n        // HashSet<T> Class\n        //
    Represents a set of values.\n        // Provides high-performance set operations.\n
    \       // A hash set is a set that contains no duplicate elements, and whose
    elements are in no particular order.\n        HashSet<char> hashSet = new HashSet<char>();\n
    \       foreach (char c in str) {\n            hashSet.Add(c);\n        }\n        return
    hashSet.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <541ba9e245294cef9839d18beeca3584>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <541ba9e245294cef9839d18beeca3584>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        HashSet<char> h = new
    HashSet<char>();\n        foreach (char c in str)\n            h.Add(char.ToLower(c));\n
    \       return h.Count;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977193
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <0416b555896e4d8ab7df1a94f507b65f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <0416b555896e4d8ab7df1a94f507b65f>:0 \n"
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.Select(c
    => char.ToLower(c)).Distinct().Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        HashSet<char> characters
    = new HashSet<char>();\n        foreach (char character in str) {\n            characters.Add(char.ToLower(character));\n
    \       }\n        return characters.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        HashSet<char> distinctChars
    = new HashSet<char>();\n        foreach (char c in str) {\n            distinctChars.Add(Char.ToLower(c));\n
    \       }\n        return distinctChars.Count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n
    \   Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Insert your code
    here\n        string x = str.ToLower();\n        var newList = x.Distinct().ToList();\n
    \       return newList.Count;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        if (str == null) throw
    new ArgumentNullException();\n        return str.Distinct().Count();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <944aacc94d174ea4b5aa72070762bba9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <944aacc94d174ea4b5aa72070762bba9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToUpper().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // \u5275\u9020a~z\u7684\u9663\u5217\n
    \       char[] lower_list = new char[26];\n        char[] upper_list = new char[26];\n
    \       for (int i = 0; i < 26; i++) {\n            lower_list[i] = (char)(i +
    97);\n            upper_list[i] = (char)(i + 65);\n        }\n        long ans
    = 0;\n        char[] dic = new char[52];\n        for (int i = 0; i < 52; i++)
    {\n            dic[i] = '?';\n        }\n        for (int i = 0; i < str.Length;
    i++) {\n            bool exist = false;\n            for (int j = 0; j < 52; j++)
    {\n                if (str[i] == dic[j]) {\n                    exist = true;\n
    \                   break;\n                }\n            }\n            if (!exist)
    {\n                dic[ans] = str[i];\n                ans++;\n            }\n
    \       }\n        return ans;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e1272fe76c54740945d1024115b662a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e1272fe76c54740945d1024115b662a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        str = str.ToLower();\n
    \       SortedSet<char> r = new SortedSet<char>();\n        foreach (char c in
    str) {\n            r.Add(c);\n        }\n        return r.Count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var d = new Dictionary<char,int>();\n
    \       for (int i = 0; i < str.Length; i++) {\n            char c = str[i];\n
    \           d[c] = 1;\n        }\n        return d.Count;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) ==
    (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef6fce44136240d2afdd0f5a2cbdb576>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef6fce44136240d2afdd0f5a2cbdb576>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        str = str.ToLower();\n
    \       var hash = new HashSet<char>();\n        foreach (var ch in str) {\n            hash.Add(ch);\n
    \       }\n        return hash.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // sieve of eratosthenes\n
    \       return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10354a839e694b75b1a4cbdfd7d97722>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10354a839e694b75b1a4cbdfd7d97722>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b544efb4a614cf0aa257e36d0ec29ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b544efb4a614cf0aa257e36d0ec29ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        long c = 0;\n        var
    se = new HashSet<char>();\n        foreach (var ch in str) {\n            if (!se.Contains(char.ToLower(ch)))
    {\n                se.Add(char.ToLower(ch));\n                c++;\n            }\n
    \       }\n        return c;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var result = new HashSet<char>();\n
    \       for (int i = 0; i < str.Length; i++) {\n            result.Add(char.ToLower(str[i]));\n
    \       }\n        return result.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return (long) str.GroupBy(c
    => c).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <42d50021d61e40aeae52e15c36c266bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <42d50021d61e40aeae52e15c36c266bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Your code here\n
    \       return str.ToUpper().Distinct().Count();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n
    \   Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        HashSet<char> chars
    = new HashSet<char>();\n        foreach (char c in str) {\n            chars.Add(char.ToLower(c));\n
    \       }\n        return chars.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Remove any duplicate
    characters from the string\n        string filteredStr = new string(str.Distinct().ToArray());\n
    \       // Dictionary to keep count of the distinct characters\n        Dictionary<char,
    int> characterCount = new Dictionary<char, int>();\n        // Add each character
    from the filtered string to the dictionary\n        foreach (char c in filteredStr)
    {\n            characterCount.Add(c, 0);\n        }\n        // Count the number
    of times a character appears in the original string\n        foreach (char c in
    str) {\n            if (characterCount.ContainsKey(c)) {\n                characterCount[c]++;\n
    \           }\n        }\n        return characterCount.Count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b17f90a9eef84a8b82dbcd87f14afe9e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b17f90a9eef84a8b82dbcd87f14afe9e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        str = str.ToLower();\n
    \       List<char> my_list = new List<char>();\n        foreach (char c in str)
    {\n            if (!my_list.Contains(c)) {\n                my_list.Add(c);\n
    \           }\n        }\n        return my_list.Count;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) ==
    (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        HashSet<char> distinct
    = new HashSet<char>();\n        foreach (char c in str)\n            distinct.Add(char.ToLower(c));\n
    \       return distinct.Count;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var set = new HashSet<Char>();\n
    \       foreach (char c in str) {\n            set.Add(Char.ToLower(c));\n        }\n
    \       return set.Count;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var hashSet = new HashSet<char>();\n
    \       foreach (var letter in str) {\n            hashSet.Add(char.ToLower(letter));\n
    \       }\n        return hashSet.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977193
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.Select(c
    => char.ToLower(c)).Distinct().Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977191
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        //TODO: Write your
    code here\n        return -1;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe24471f768042dc8b6463eab6868aad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe24471f768042dc8b6463eab6868aad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // We must remove duplicates
    after conversion, otherwise we'd run into issues with\n        // cases and counts.\n
    \       string low = str.ToLower();\n        var distinct = low.Distinct();\n
    \       return distinct.Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Finds out how many
    distinct characters (regardless of case) does a string consist of\n        var
    list = str.ToLower().Distinct().ToList();\n        long output = list.Count();\n
    \       return output;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        long result = 0;\n
    \       char[] strarray = str.ToCharArray();\n        int length = strarray.Length;\n
    \       HashSet<char> hash = new HashSet<char>();\n        for (int i = 0; i <
    length; i++) {\n            hash.Add(strarray[i]);\n        }\n        result
    = hash.Count;\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3228741197814acfb8d478cb678e4679>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3228741197814acfb8d478cb678e4679>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // YOUR CODE HERE\n
    \       HashSet<char> set = new HashSet<char>();\n        for (int i = 0; i <
    str.Length; i++) {\n            set.Add(char.ToLower(str[i]));\n        }\n        return
    set.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        if (str == null) {\n
    \           throw new ArgumentNullException();\n        }\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <0416b555896e4d8ab7df1a94f507b65f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <0416b555896e4d8ab7df1a94f507b65f>:0 \n"
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var seen = new HashSet<char>();\n
    \       foreach (var ch in str) {\n            if (Char.IsLetter(ch)) {\n                seen.Add(Char.ToLower(ch));\n
    \           }\n        }\n        return seen.Count;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) ==
    (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <edc3d87914954d5eb1658f60b0767a1b>:0
    \n"
  stdout: ''
  timestamp: 1659977194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // J: Use HashSet instead
    of a dictionary, since we're just counting\n        var set = new HashSet<char>();\n
    \       foreach (var c in str) {\n            set.Add(c);\n        }\n        return
    set.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84c43dc8206c4e2fa1b5dcc505f364e0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84c43dc8206c4e2fa1b5dcc505f364e0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var map = new HashSet<char>();\n
    \       foreach (var c in str) {\n            map.Add(char.ToLower(c));\n        }\n
    \       return map.Count;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // >>> type(str)\n
    \       // <type 'str'>\n        // >>> type(set(str))\n        // <type 'set'>\n
    \       // >>> type(len(set(str)))\n        // <type 'int'>\n        return len(set(str));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkpiurqea.cs(21,16): error CS0103: The name ''len'' does not exist in the
    current context

    /tmp/tmpkpiurqea.cs(21,20): error CS0103: The name ''set'' does not exist in the
    current context

    '
  timestamp: 1659977194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        return str.Distinct().Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a571e6988da4120892cc87c506a556d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a571e6988da4120892cc87c506a556d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        // Write your code
    here\n        Dictionary<char, int> distinctChars = new Dictionary<char, int>();\n
    \       foreach (char c in str) {\n            if (!distinctChars.ContainsKey(c))
    {\n                distinctChars.Add(c, 0);\n            }\n        }\n        return
    distinctChars.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6412631be074477b80d692d8bc00a5ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6412631be074477b80d692d8bc00a5ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <0416b555896e4d8ab7df1a94f507b65f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <0416b555896e4d8ab7df1a94f507b65f>:0 \n"
  stdout: ''
  timestamp: 1659977190
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        char[] charstr = str.ToCharArray();\n
    \       char[] distinct = charstr.Distinct().ToArray();\n        return distinct.Length;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e60b9afb1daa422482e679e93016562e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e60b9afb1daa422482e679e93016562e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977194
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        var charInStr = new
    HashSet<char>();\n        foreach (var item in str) {\n            charInStr.Add(item);\n
    \       }\n        return charInStr.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n
    \   Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry
    jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <067590a9406c47b3baf76addb772601a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <067590a9406c47b3baf76addb772601a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977194
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string, find out how many distinct characters (regardless
    of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n
    \   // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public
    static long CountDistinctCharacters(string str) {\n        ///////////////////////////////////////////\n
    \       // DO NOT MODIFY THIS FUNCTION\n        ///////////////////////////////////////////\n
    \       if (str == null) {\n            throw new ArgumentNullException(\"str\");\n
    \       }\n        return str.GroupBy(c => c, StringComparer.InvariantCultureIgnoreCase).Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))
    == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"))
    == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n
    \   Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdha8hjf1.cs(21,20): error CS0411: The type arguments for method ''Enumerable.GroupBy<TSource,
    TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)'' cannot
    be inferred from the usage. Try specifying the type arguments explicitly.

    '
  timestamp: 1659977194
