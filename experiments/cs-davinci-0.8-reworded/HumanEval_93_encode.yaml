name: HumanEval_93_encode
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that takes a message, and encodes in such a\
  \ \n    // way that it swaps case of all letters, replaces all vowels in \n    //\
  \ the message with the letter that appears 2 places ahead of that \n    // vowel\
  \ in the english alphabet. \n    // Assume only letters. \n    // Examples:\n  \
  \  // >>> Encode((\"test\"))\n    // (\"TGST\")\n    // >>> Encode((\"This is a\
  \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static string Encode(string\
  \ message) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
  TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
  mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
  This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
  I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
  \n}\n"
completions: ['        return "";', "        string encode = \"\";\n        foreach\
    \ (char c in message) {\n            int x = Vowel(c);\n            if (x == -1)\
    \ {\n                if (Char.IsUpper(c)) {\n                    encode += Char.ToLower(c);\n\
    \                } else {\n                    encode += Char.ToUpper(c);\n  \
    \              }\n            } else {\n                if (x + 2 == 10) {\n \
    \                   encode += \"a\";\n                } else if (x + 2 == 11)\
    \ {\n                    encode += \"e\";\n                } else if (x + 2 ==\
    \ 12) {\n                    encode += \"i\";\n                } else if (x +\
    \ 2 == 13) {\n                    encode += \"o\";\n                } else if\
    \ (x + 2 == 14) {\n                    encode += \"u\";\n                } else\
    \ {\n                    encode += Char.ToLower((char)(x + 97 + 2));\n       \
    \         }\n            }\n        }\n        return encode;", "        string\
    \ vowels = \"aeiou\";\n        string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        string encoded = \"\";\n        // iterate over the message\n     \
    \   foreach (char c in message) {\n            // check to see if c is in the\
    \ alphabet\n            if (alphabet.Contains(c)) {\n                // check\
    \ to see if c is upper or lower case\n                if (char.IsUpper(c)) {\n\
    \                    // if c is a vowel, find the index of the vowel and add 2\
    \ to it\n                    if (vowels.Contains(char.ToLower(c))) {\n       \
    \                 int index = (vowels.IndexOf(char.ToLower(c)) + 2) % vowels.Length;\n\
    \                        encoded += vowels[index].ToString().ToUpper();\n    \
    \                }\n                    // if c is not a vowel, encode it by making\
    \ it lowercase\n                    else {\n                        encoded +=\
    \ char.ToLower(c);\n                    }\n                }\n               \
    \ // if c is not uppercase\n                else {\n                    // if\
    \ c is a vowel, find the index of the vowel and add 2 to it\n                \
    \    if (vowels.Contains(c)) {\n                        int index = (vowels.IndexOf(c)\
    \ + 2) % vowels.Length;\n                        encoded += vowels[index];\n \
    \                   }\n                    // if c is not a vowel, encode it by\
    \ making it uppercase\n                    else {\n                        encoded\
    \ += char.ToUpper(c);\n                    }\n                }\n            }\n\
    \            // if c is not in the alphabet, just append it to the encoded string\n\
    \            else {\n                encoded += c;\n            }\n        }\n\
    \        return encoded;", "        char[] messageChars = message.ToCharArray();\n\
    \        char[] vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        int\
    \ vowelsIndex = 0;\n        int vowelIndex = 0;\n        string alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n        int alphabetIndex = 0;\n        for (int\
    \ i = 0; i < messageChars.Length; i++) {\n            if (messageChars[i] >= 'a'\
    \ && messageChars[i] <= 'z') {\n                messageChars[i] = (char)(messageChars[i]\
    \ - 32);\n            }\n            else if (messageChars[i] >= 'A' && messageChars[i]\
    \ <= 'Z') {\n                messageChars[i] = (char)(messageChars[i] + 32);\n\
    \            }\n            for (vowelsIndex = 0; vowelsIndex < vowels.Length;\
    \ vowelsIndex++) {\n                if (messageChars[i] == vowels[vowelsIndex])\
    \ {\n                    vowelIndex = alphabet.IndexOf(vowels[vowelsIndex]);\n\
    \                    alphabetIndex = (vowelIndex + 2) % 26;\n                \
    \    messageChars[i] = alphabet[alphabetIndex];\n                }\n         \
    \   }\n        }\n        return new string(messageChars);", '        return "";',
  '        return "";', "        // TODO: Implement\n        message = message.ToUpper();\n\
    \        string result = \"\";\n        foreach (char c in message) {\n      \
    \      char r = (char)(c + 2);\n            if (r == 'A' || r == 'E' || r == 'I'\
    \ || r == 'O' || r == 'U') {\n                r = (char)(r + 2);\n           \
    \ }\n            if (r > 'Z') {\n                r = (char)(r - 26);\n       \
    \     }\n            result += r;\n        }\n        return result;", "     \
    \   int c = 0;\n        string enc = \"\";\n        while (c < message.Length)\
    \ {\n            int code = (int)message[c];\n            if (code > 96 && code\
    \ < 123) {\n                enc += (char)(code - 32);\n            } else if (code\
    \ > 64 && code < 91) {\n                enc += (char)(code + 32);\n          \
    \  } else if (code == 97) {\n                enc += 'c';\n            } else if\
    \ (code == 101) {\n                enc += 'g';\n            } else if (code ==\
    \ 105) {\n                enc += 'k';\n            } else if (code == 111) {\n\
    \                enc += 'q';\n            } else if (code == 117) {\n        \
    \        enc += 'u';\n            } else {\n                enc += message[c];\n\
    \            }\n            c++;\n        }\n        return enc;", "        string\
    \ result = \"\";\n        for (int i = 0; i < message.Length; i++) {\n       \
    \     if (message[i] >= 'a' && message[i] <= 'z') {\n                result +=\
    \ (char)(message[i] - 'a' + 'A');\n            } else if (message[i] >= 'A' &&\
    \ message[i] <= 'Z') {\n                result += (char)(message[i] - 'A' + 'a');\n\
    \            } else {\n                result += message[i];\n            }\n\
    \        }\n        return result;", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < message.Length; i++) {\n            if (Char.IsUpper(message[i]))\
    \ {\n                sb.Append(Char.ToLower(message[i]));\n            } else\
    \ if (Char.IsLower(message[i])) {\n                sb.Append(Char.ToUpper(message[i]));\n\
    \            } else {\n                sb.Append(message[i]);\n            }\n\
    \        }\n        StringBuilder sb2 = new StringBuilder();\n        String vowels\
    \ = \"aeiou\";\n        String new_vowels = \"cfilor\";\n        for (int i =\
    \ 0; i < sb.Length; i++) {\n            char letter = sb[i];\n            if (vowels.Contains(letter))\
    \ {\n                int index = vowels.IndexOf(letter);\n                if (index\
    \ >= 3) {\n                    sb2.Append(new_vowels[index - 3]);\n          \
    \      } else {\n                    sb2.Append(new_vowels[new_vowels.Length -\
    \ (3 - index)]);\n                }\n            } else {\n                sb2.Append(letter);\n\
    \            }\n        }\n        return sb2.ToString();", '        return null;',
  "        string encoded = \"\";\n        for (int i = 0; i < message.Length; i++)\
    \ {\n            char c = message[i];\n            char swap = char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c);\n            char letter = (char)(c + 2);\n\
    \            char add = char.IsLetter(letter) ? letter : (char)(letter - 26);\n\
    \            char vowel = \"aeiou\".Contains(swap) ? add : swap;\n           \
    \ encoded += vowel;\n        }\n        return encoded;", '        return null;',
  "        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n        StringBuilder sb\
    \ = new StringBuilder();\n        foreach (char c in message) {\n            if\
    \ (c >= 'a' && c <= 'z') {\n                sb.Append((char)(c - 'a' + 'A'));\n\
    \            } else if (c >= 'A' && c <= 'Z') {\n                sb.Append((char)(c\
    \ - 'A' + 'a'));\n            } else {\n                sb.Append(c);\n      \
    \      }\n        }\n        message = sb.ToString();\n        foreach (char c\
    \ in vowels) {\n            string t = \"\";\n            if (c == 'u') {\n  \
    \              t = \"a\";\n            } else {\n                t = ((char)(c\
    \ + 2)).ToString();\n            }\n            message = message.Replace(c.ToString(),\
    \ t);\n            message = message.Replace(c.ToString().ToUpper(), t.ToUpper());\n\
    \        }\n        return message;", "        // DONE\n        return null;",
  '        return null;', "        string ans = \"\";\n        for (int i = 0; i <\
    \ message.Length; i++) {\n            char c = message[i];\n            if (char.IsLetter(c))\
    \ {\n                if (char.IsUpper(c)) {\n                    ans += char.ToLower(c);\n\
    \                } else {\n                    ans += char.ToUpper(c);\n     \
    \           }\n            } else {\n                ans += c;\n            }\n\
    \        }\n        return ans;", "        message = message.ToUpper();\n    \
    \    var vowels = new HashSet<char>() { 'A', 'E', 'I', 'O', 'U' };\n        var\
    \ output = new StringBuilder();\n        for (int i = 0; i < message.Length; i++)\
    \ {\n            if (vowels.Contains(message[i])) {\n                output.Append((char)(((message[i]\
    \ - 'A' + 2) % 5) + 'A'));\n            } else {\n                output.Append(message[i]);\n\
    \            }\n        }\n        return output.ToString();", "        string[]\
    \ Vowels = new string[] {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        string encoded\
    \ = \"\";\n        foreach (char c in message) {\n            string charStr =\
    \ c.ToString();\n            if (c >= 'a' && c <= 'z') {\n                charStr\
    \ = charStr.ToUpper();\n            } else if (c >= 'A' && c <= 'Z') {\n     \
    \           charStr = charStr.ToLower();\n            } else {\n             \
    \   encoded += charStr;\n                continue;\n            }\n          \
    \  if (Vowels.Contains(charStr.ToLower())) {\n                int index = Array.IndexOf(Vowels,\
    \ charStr.ToLower());\n                index = (index + 2) % 5;\n            \
    \    encoded += Vowels[index];\n            } else {\n                encoded\
    \ += charStr;\n            }\n        }\n        return encoded;", "        string\
    \ answer = \"\";\n        for (int i = 0; i < message.Length; i++) {\n       \
    \     char current = message[i];\n            char before = message[i];\n    \
    \        switch (message[i]) {\n                case 'a':\n                  \
    \  answer += 'c';\n                    break;\n                case 'e':\n   \
    \                 answer += 'g';\n                    break;\n               \
    \ case 'i':\n                    answer += 'k';\n                    break;\n\
    \                case 'o':\n                    answer += 'q';\n             \
    \       break;\n                case 'u':\n                    answer += 'y';\n\
    \                    break;\n                case 'A':\n                    answer\
    \ += 'C';\n                    break;\n                case 'E':\n           \
    \         answer += 'G';\n                    break;\n                case 'I':\n\
    \                    answer += 'K';\n                    break;\n            \
    \    case 'O':\n                    answer += 'Q';\n                    break;\n\
    \                case 'U':\n                    answer += 'Y';\n             \
    \       break;\n                default:\n                    answer += Char.ToUpper(message[i]);\n\
    \                    break;\n            }\n        }\n        return answer;",
  '        return new string(message.Select(EncodeCharacter).ToArray());', "     \
    \   // create the alphabet array \n        char[] alphabet = new char[26];\n \
    \       int index = 0;\n        for (char c = 'a'; c <= 'z'; c++) {\n        \
    \    alphabet[index] = c;\n            index++;\n        }\n        string encoded_message\
    \ = \"\";\n        // loop through the message\n        foreach (char character\
    \ in message) {\n            // check if the character is a letter\n         \
    \   if (Char.IsLetter(character)) {\n                // find index of character\n\
    \                int character_index = (int)character - 97;\n                //\
    \ check if the character is a capital letter\n                if (Char.IsUpper(character))\
    \ {\n                    // encode the character\n                    encoded_message\
    \ += (char)((character_index + 13) % 26 + 65);\n                } else {\n   \
    \                 // encode the character\n                    encoded_message\
    \ += (char)((character_index + 13) % 26 + 97);\n                }\n          \
    \  } else {\n                // add the character to the string\n            \
    \    encoded_message += character;\n            }\n        }\n        return encoded_message;",
  '        return "";', "        string vowels = \"AEIOU\";\n        string newMessage\
    \ = \"\";\n        char encodedLetter;\n        for (int i = 0; i < message.Length;\
    \ i++) {\n            if (Char.IsLetter(message[i])) {\n                if (Char.IsUpper(message[i]))\
    \ {\n                    encodedLetter = Char.ToLower(message[i]);\n         \
    \       } else {\n                    encodedLetter = Char.ToUpper(message[i]);\n\
    \                }\n                if (vowels.Contains(encodedLetter)) {\n  \
    \                  int vowelIndex = vowels.IndexOf(encodedLetter);\n         \
    \           int newIndex = (vowelIndex + 2) % 5;\n                    newMessage\
    \ += vowels[newIndex];\n                } else {\n                    newMessage\
    \ += encodedLetter;\n                }\n            } else {\n               \
    \ newMessage += message[i];\n            }\n        }\n        return newMessage;",
  "        string vowel = \"aeiou\";\n        string result = \"\";\n        foreach\
    \ (char c in message) {\n            int index = vowel.IndexOf(c);\n         \
    \   if (index != -1) {\n                result += vowel[(index + 2) % 5];\n  \
    \          } else {\n                result += c;\n            }\n        }\n\
    \        return result;", "        string result = string.Empty;\n        foreach\
    \ (char c in message) {\n            if (c >= 'a' && c <= 'z') {\n           \
    \     result += (char)(c - 32);\n            } else if (c >= 'A' && c <= 'Z')\
    \ {\n                result += (char)(c + 32);\n            } else {\n       \
    \         result += c;\n            }\n        }\n        return result;", " \
    \       //throw new NotImplementedException();\n        StringBuilder encodedStr\
    \ = new StringBuilder();\n        for (int i = 0; i < message.Length; i++) {\n\
    \            int code = (int)message[i];\n            if (code > 64 && code <\
    \ 91) {\n                code += 32;\n            } else if (code > 96 && code\
    \ < 123) {\n                code -= 32;\n            }\n            switch (code)\
    \ {\n                case 97:\n                    code = 100;\n             \
    \       break;\n                case 101:\n                    code = 103;\n \
    \                   break;\n                case 105:\n                    code\
    \ = 108;\n                    break;\n                case 111:\n            \
    \        code = 114;\n                    break;\n                case 117:\n\
    \                    code = 119;\n                    break;\n               \
    \ default:\n                    break;\n            }\n            encodedStr.Append((char)code);\n\
    \        }\n        return encodedStr.ToString();", '        return null;', " \
    \       // Solution\n        // Replace all vowels with the letter that appears\
    \ 2 places ahead of that vowel in the english alphabet\n        // Swap the case\
    \ of the letters in the message\n        // examples\n        // i = y\n     \
    \   // e = g\n        // o = q\n        var encoded = \"\";\n        foreach (var\
    \ letter in message) {\n            // check if it is upper case\n           \
    \ if (char.IsUpper(letter)) {\n                // swap to lower case and add to\
    \ encoded string\n                encoded += char.ToLower(letter);\n         \
    \   } else {\n                // swap to upper case and add to encoded string\n\
    \                encoded += char.ToUpper(letter);\n            }\n        }\n\
    \        // get the vowels into a string array\n        // also add a y to the\
    \ vowels to be able to append the last vowel to the end of the string\n      \
    \  var vowels = new string[] {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"};\n   \
    \     // iterate through the vowels and replace each letter with the letter two\
    \ ahead\n        // use loop starting at 1 because the letters will be one ahead\
    \ of the index\n        for (var i = 1; i < vowels.Length; i++) {\n          \
    \  encoded = encoded.Replace(vowels[i], vowels[i + 1]);\n        }\n        //\
    \ append the last vowel to the end of the encoded string\n        encoded += vowels[0];\n\
    \        return encoded;", "        if (message == null) return null;\n      \
    \  string answer = \"\";\n        for (int i = 0; i < message.Length; i++) {\n\
    \            int ascii = (int)message[i];\n            if (ascii > 64 && ascii\
    \ < 91) {\n                answer += (char)(ascii + 32);\n            } else if\
    \ (ascii > 96 && ascii < 123) {\n                answer += (char)(ascii - 32);\n\
    \            } else {\n                answer += message[i];\n            }\n\
    \        }\n        string vowel = \"aeiou\";\n        for (int i = 0; i < answer.Length;\
    \ i++) {\n            if (vowel.Contains(answer[i])) {\n                int index\
    \ = vowel.IndexOf(answer[i]);\n                index = (index + 2) % 5;\n    \
    \            answer = answer.Remove(i, 1);\n                answer = answer.Insert(i,\
    \ vowel[index].ToString());\n            }\n        }\n        return answer;",
  "        string str = \"\";\n        for (int i = 0; i < message.Length; i++) {\n\
    \            if (Char.IsUpper(message[i])) {\n                if (Char.IsLetter(message[i]))\
    \ {\n                    str += Char.ToLower(message[i]);\n                }\n\
    \            } else {\n                if (Char.IsLetter(message[i])) {\n    \
    \                str += Char.ToUpper(message[i]);\n                }\n       \
    \     }\n        }\n        return str;", "        message = message.ToUpper();\n\
    \        string cipher_text = \"\";\n        foreach (char c in message) {\n \
    \           if (!Char.IsLetter(c)) {\n                cipher_text += c;\n    \
    \            continue;\n            }\n            char curr_char = c;\n     \
    \       if (c == 'Z') {\n                curr_char = 'B';\n            } else\
    \ if (c == 'Y') {\n                curr_char = 'A';\n            } else {\n  \
    \              curr_char = (char)((int)c + 2);\n            }\n            switch\
    \ (curr_char) {\n                case 'A':\n                case 'E':\n      \
    \          case 'I':\n                case 'O':\n                case 'U':\n \
    \                   cipher_text += curr_char;\n                    break;\n  \
    \              default:\n                    cipher_text += (char)((int)curr_char\
    \ - 32);\n                    break;\n            }\n        }\n        return\
    \ cipher_text;", '        return "";', "        StringBuilder builder = new StringBuilder();\n\
    \        Dictionary<char, char> dict = new Dictionary<char, char>();\n       \
    \ dict.Add('a', 'c');\n        dict.Add('e', 'g');\n        dict.Add('i', 'k');\n\
    \        dict.Add('o', 'q');\n        dict.Add('u', 'y');\n        foreach (char\
    \ c in message) {\n            char letter = Char.ToLower(c);\n            if\
    \ (dict.ContainsKey(letter)) {\n                builder.Append(dict[letter]);\n\
    \            } else {\n                builder.Append(c);\n            }\n   \
    \     }\n        return builder.ToString();", "        char[] chars = message.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            char c = chars[i];\n\
    \            if (c == 'a') {\n                chars[i] = 'c';\n            } else\
    \ if (c == 'e') {\n                chars[i] = 'g';\n            } else if (c ==\
    \ 'i') {\n                chars[i] = 'k';\n            } else if (c == 'o') {\n\
    \                chars[i] = 'q';\n            } else if (c == 'u') {\n       \
    \         chars[i] = 'y';\n            } else if (char.IsUpper(c)) {\n       \
    \         chars[i] = char.ToLower(c);\n            } else if (char.IsLower(c))\
    \ {\n                chars[i] = char.ToUpper(c);\n            }\n        }\n \
    \       return new string(chars);", "        string ret = \"\";\n        foreach\
    \ (char c in message) {\n            if (c.ToString().ToLower() == \"a\") {\n\
    \                ret += \"c\";\n            } else if (c.ToString().ToLower()\
    \ == \"e\") {\n                ret += \"g\";\n            } else if (c.ToString().ToLower()\
    \ == \"i\") {\n                ret += \"k\";\n            } else if (c.ToString().ToLower()\
    \ == \"o\") {\n                ret += \"q\";\n            } else if (c.ToString().ToLower()\
    \ == \"u\") {\n                ret += \"y\";\n            } else if (c.ToString().ToLower()\
    \ == \"y\") {\n                ret += \"A\";\n            } else if (c.ToString().ToLower()\
    \ == \"z\") {\n                ret += \"B\";\n            } else if (c.ToString().ToLower()\
    \ == \" \") {\n                ret += \" \";\n            } else {\n         \
    \       ret += (char)((int)c + 2);\n            }\n        }\n        return ret;",
  "        char[] vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        char[]\
    \ encoded = new char[message.Length];\n        for (int i = 0; i < message.Length;\
    \ i++) {\n            char c = message[i];\n            if (vowels.Contains(c))\
    \ {\n                int index = Array.IndexOf(vowels, c);\n                int\
    \ newIndex = (index + 2) % vowels.Length;\n                encoded[i] = vowels[newIndex];\n\
    \            } else {\n                encoded[i] = c;\n            }\n      \
    \  }\n        return new string(encoded);", "        string newMessage = \"\"\
    ;\n        foreach (char c in message) {\n            if (c >= 65 && c <= 90)\
    \ {\n                newMessage += (char)(c + 32);\n            } else if (c >=\
    \ 97 && c <= 122) {\n                newMessage += (char)(c - 32);\n         \
    \   } else {\n                newMessage += c;\n            }\n        }\n   \
    \     return newMessage;", "        char[] vowels = { 'a', 'e', 'i', 'o', 'u'\
    \ };\n        char[] result = new char[message.Length];\n        for (int i =\
    \ 0; i < message.Length; i++) {\n            int index = Array.IndexOf(vowels,\
    \ char.ToLower(message[i]));\n            if (index == -1) {\n               \
    \ result[i] = char.IsUpper(message[i]) ? char.ToLower(message[i]) : char.ToUpper(message[i]);\n\
    \            } else {\n                char nextVowel = vowels[(index + 2) % vowels.Length];\n\
    \                result[i] = char.IsUpper(message[i]) ? char.ToUpper(nextVowel)\
    \ : nextVowel;\n            }\n        }\n        return new string(result);",
  '        return "";', "        // Write your code here\n        return message;",
  "        StringBuilder sb = new StringBuilder();\n        var vowels = new HashSet<char>()\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        var alphabet = new HashSet<char>();\n\
    \        for (int i = 0; i < 26; i++) {\n            alphabet.Add((char)('a' +\
    \ i));\n        }\n        for (int i = 0; i < message.Length; i++) {\n      \
    \      char c = message[i];\n            if (alphabet.Contains(c)) {\n       \
    \         char c1 = (char)(c ^ 32);\n                if (vowels.Contains(c1))\
    \ {\n                    c1 = (char)((c1 - 'a' + 2) % 26 + 'a');\n           \
    \     }\n                sb.Append(c1);\n            } else {\n              \
    \  sb.Append(c);\n            }\n        }\n        return sb.ToString();", " \
    \       string result = \"\";\n        int offset = 2;\n        foreach (char\
    \ c in message) {\n            if (!char.IsLetter(c)) {\n                result\
    \ += c;\n                continue;\n            }\n            char offsetLetter\
    \ = c;\n            if (char.IsUpper(c)) {\n                offsetLetter = char.ToLower(c);\n\
    \            }\n            if (isVowel(offsetLetter)) {\n                result\
    \ += getOffsetChar(offsetLetter, offset);\n            } else {\n            \
    \    result += char.IsUpper(c) ? char.ToUpper(offsetLetter) : offsetLetter;\n\
    \            }\n        }\n        return result;", "        // TODO: Implement\
    \ this function.\n        return \"\";", '        throw new NotImplementedException();',
  "        char[] newMessage = new char[message.Length];\n        for (int i = 0;\
    \ i < message.Length; i++) {\n            char ch = message[i];\n            if\
    \ (ch == 'u') {\n                newMessage[i] = 'w';\n            } else if (ch\
    \ == 'e') {\n                newMessage[i] = 'g';\n            } else if (ch ==\
    \ 'i') {\n                newMessage[i] = 'k';\n            } else if (ch == 'o')\
    \ {\n                newMessage[i] = 'q';\n            } else if (ch == 'a') {\n\
    \                newMessage[i] = 'c';\n            } else if (ch == 'U') {\n \
    \               newMessage[i] = 'W';\n            } else if (ch == 'E') {\n  \
    \              newMessage[i] = 'G';\n            } else if (ch == 'I') {\n   \
    \             newMessage[i] = 'K';\n            } else if (ch == 'O') {\n    \
    \            newMessage[i] = 'Q';\n            } else if (ch == 'A') {\n     \
    \           newMessage[i] = 'C';\n            } else if (ch >= 'a' && ch <= 'z')\
    \ {\n                newMessage[i] = (char)(ch - 32);\n            } else if (ch\
    \ >= 'A' && ch <= 'Z') {\n                newMessage[i] = (char)(ch + 32);\n \
    \           } else {\n                newMessage[i] = ch;\n            }\n   \
    \     }\n        return new string(newMessage);", "        // \n        var vowels\
    \ = new List<char> { 'a', 'e', 'i', 'o', 'u' };\n        var encoded = new StringBuilder();\n\
    \        foreach (var c in message) {\n            encoded.Append(vowels.Contains(c)\
    \ ? (char)(c + 2) : c);\n        }\n        return encoded.ToString();", "   \
    \     // TODO\n        // 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',\
    \ 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\n\
    \        // 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n        string newMessage\
    \ = \"\";\n        foreach (char c in message) {\n            if (c >= 'A' &&\
    \ c <= 'Z') {\n                newMessage += Convert.ToChar(c + 32);\n       \
    \     } else if (c >= 'a' && c <= 'z') {\n                newMessage += Convert.ToChar(c\
    \ - 32);\n            } else {\n                newMessage += c;\n           \
    \ }\n        }\n        string finalMessage = \"\";\n        foreach (char c in\
    \ newMessage) {\n            if (c == 'A' || c == 'a') {\n                finalMessage\
    \ += 'C';\n            } else if (c == 'E' || c == 'e') {\n                finalMessage\
    \ += 'G';\n            } else if (c == 'I' || c == 'i') {\n                finalMessage\
    \ += 'K';\n            } else if (c == 'O' || c == 'o') {\n                finalMessage\
    \ += 'Q';\n            } else if (c == 'U' || c == 'u') {\n                finalMessage\
    \ += 'Y';\n            } else {\n                finalMessage += c;\n        \
    \    }\n        }\n        return finalMessage;", "        string encodedMessage\
    \ = \"\";\n        string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n       \
    \ string alphabetLowerCase = alphabet.ToLower();\n        string alphabetUpperCase\
    \ = alphabet.ToUpper();\n        string vowels = \"aeiou\";\n        string vowelsLowerCase\
    \ = vowels.ToLower();\n        string vowelsUpperCase = vowels.ToUpper();\n  \
    \      for (int i = 0; i < message.Length; i++) {\n            char letter = message[i];\n\
    \            if (vowelsLowerCase.Contains(letter)) {\n                encodedMessage\
    \ += vowelsLowerCase[(vowelsLowerCase.IndexOf(letter) + 2) % 5];\n           \
    \ } else if (vowelsUpperCase.Contains(letter)) {\n                encodedMessage\
    \ += vowelsUpperCase[(vowelsUpperCase.IndexOf(letter) + 2) % 5];\n           \
    \ } else if (alphabetLowerCase.Contains(letter)) {\n                encodedMessage\
    \ += alphabetLowerCase[(alphabetLowerCase.IndexOf(letter) + 2) % 26];\n      \
    \      } else if (alphabetUpperCase.Contains(letter)) {\n                encodedMessage\
    \ += alphabetUpperCase[(alphabetUpperCase.IndexOf(letter) + 2) % 26];\n      \
    \      } else {\n                encodedMessage += letter;\n            }\n  \
    \      }\n        return encodedMessage;", "        // ASCII:\n        // 97 -\
    \ 122 a - z\n        // 65 - 90 A - Z\n        // vowels are 97, 101, 105, 111,\
    \ 117, 121\n        // using ascii, we don't need a case statement in our switch\n\
    \        // var ascii = (int)ch;\n\n        // for ascii, ch - 97 = i, ch - 65\
    \ = j\n        // cipher[i] = ch(i+2) - 97, cipher[j] = ch(j+2) - 65\n       \
    \ // ch(i+2) = cipher[i] + 97, ch(j+2) = cipher[j] + 65\n        string cipher\
    \ = \"cdefghijklmnopqrstuvwxyzab\";\n        string encoded = \"\";\n        for\
    \ (int i = 0; i < message.Length; i++) {\n            if (97 <= message[i] &&\
    \ message[i] <= 122) {\n                encoded += cipher[message[i] - 97];\n\
    \            } else if (65 <= message[i] && message[i] <= 90) {\n            \
    \    encoded += cipher[message[i] - 65].ToString().ToUpper();\n            } else\
    \ {\n                encoded += message[i];\n            }\n        }\n      \
    \  return encoded;", "        string result = \"\";\n        string vowels = \"\
    AEIOUaeiou\";\n        foreach (char c in message) {\n            char d = Char.ToLower(c);\n\
    \            if (Char.IsLetter(c)) {\n                int index = vowels.IndexOf(d);\n\
    \                if (index != -1) {\n                    result += Char.ToUpper(vowels[(index\
    \ + 2) % 10]);\n                } else {\n                    result += c;\n \
    \               }\n            } else {\n                result += c;\n      \
    \      }\n        }\n        return result;", "        // O(n)\n        // Replace\
    \ any Vowels with character two ahead in alphabet (If it's not a vowel just keep\
    \ what you have).\n        // Swap the case of the original letter.\n\n      \
    \  return \"\";", "        string encoded = \"\";\n        message = message.ToUpper();\n\
    \        foreach (char c in message) {\n            encoded += EncodeChar(c);\n\
    \        }\n        return encoded;", "        string encode = \"\";\n       \
    \ char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n        foreach (char c in message)\
    \ {\n            char newChar = c;\n            if (char.IsUpper(c)) {\n     \
    \           newChar = char.ToLower(c);\n            } else if (char.IsLower(c))\
    \ {\n                newChar = char.ToUpper(c);\n            }\n            if\
    \ (vowels.Contains(newChar)) {\n                int index = Array.IndexOf(vowels,\
    \ newChar);\n                if (index < 3) {\n                    newChar = vowels[index\
    \ + 2];\n                } else {\n                    newChar = vowels[index\
    \ - 3];\n                }\n            }\n            encode += newChar;\n  \
    \      }\n        return encode;", "        message = message.ToUpper();\n   \
    \     char[] encryptedMessage = new char[message.Length];\n        string vowels\
    \ = \"AEIOU\";\n        for (int i = 0; i < message.Length; i++) {\n         \
    \   if (message[i] >= 'A' && message[i] <= 'Z') {\n                char currentChar\
    \ = message[i];\n                if (vowels.Contains(currentChar)) {\n       \
    \             char nextVowel = NextVowel(currentChar);\n                    encryptedMessage[i]\
    \ = nextVowel;\n                } else {\n                    encryptedMessage[i]\
    \ = currentChar;\n                }\n            } else {\n                encryptedMessage[i]\
    \ = message[i];\n            }\n        }\n        return String.Join(\"\", encryptedMessage);",
  '        return "";', "        char[] messageArr = message.ToCharArray();\n    \
    \    StringBuilder result = new StringBuilder();\n        foreach (char c in messageArr)\
    \ {\n            switch (c) {\n                case 'a':\n                   \
    \ result.Append('c');\n                    break;\n                case 'e':\n\
    \                    result.Append('g');\n                    break;\n       \
    \         case 'i':\n                    result.Append('k');\n               \
    \     break;\n                case 'o':\n                    result.Append('q');\n\
    \                    break;\n                case 'u':\n                    result.Append('y');\n\
    \                    break;\n                case 'A':\n                    result.Append('C');\n\
    \                    break;\n                case 'E':\n                    result.Append('G');\n\
    \                    break;\n                case 'I':\n                    result.Append('K');\n\
    \                    break;\n                case 'O':\n                    result.Append('Q');\n\
    \                    break;\n                case 'U':\n                    result.Append('Y');\n\
    \                    break;\n                default:\n                    if\
    \ (c >= 'a' && c <= 'z') {\n                        result.Append((char)(c - 32));\n\
    \                    } else if (c >= 'A' && c <= 'Z') {\n                    \
    \    result.Append((char)(c + 32));\n                    } else {\n          \
    \              result.Append(c);\n                    }\n                    break;\n\
    \            }\n        }\n        return result.ToString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        foreach (char letter in message) {\n    \
    \        sb.Append(letter);\n        }\n        string str = sb.ToString();\n\
    \        return str;", "        \n        // Create a dictionary with all possible\
    \ vowels\n        Dictionary<char, char> dic_vowels = new Dictionary<char, char>();\n\
    \        dic_vowels.Add('a', 'c');\n        dic_vowels.Add('e', 'g');\n      \
    \  dic_vowels.Add('i', 'k');\n        dic_vowels.Add('o', 'q');\n        dic_vowels.Add('u',\
    \ 'y');\n        dic_vowels.Add('A', 'C');\n        dic_vowels.Add('E', 'G');\n\
    \        dic_vowels.Add('I', 'K');\n        dic_vowels.Add('O', 'Q');\n      \
    \  dic_vowels.Add('U', 'Y');\n\n        // Create a string with all the possible\
    \ vowels\n        string vowels = \"aeiouAEIOU\";\n\n        // Create the encoded\
    \ message\n        StringBuilder encoded_message = new StringBuilder();\n\n  \
    \      // Loop through the message\n        for (int i = 0; i < message.Length;\
    \ i++) {\n            // Swap upper case for lower case, and lower case for upper\
    \ case\n            if (char.IsUpper(message[i])) {\n                encoded_message.Append(char.ToLower(message[i]));\n\
    \            } else if (char.IsLower(message[i])) {\n                encoded_message.Append(char.ToUpper(message[i]));\n\
    \            } else {\n                encoded_message.Append(message[i]);\n \
    \           }\n\n            // Replace all vowels in the message with the letter\
    \ that appears 2 places ahead of that vowel in the english alphabet\n        \
    \    if (vowels.Contains(message[i])) {\n                if (dic_vowels.ContainsKey(message[i]))\
    \ {\n                    encoded_message[i] = dic_vowels[message[i]];\n      \
    \          }\n            }\n        }\n\n        return encoded_message.ToString();",
  "        string output = \"\";\n        // Write implementation here\n        return\
    \ output;", "        string[] vowels = { \"a\", \"e\", \"i\", \"o\", \"u\" };\n\
    \        StringBuilder sb = new StringBuilder();\n        foreach (char c in message)\
    \ {\n            if (vowels.Contains(c.ToString().ToLower())) {\n            \
    \    int next = (Array.IndexOf(vowels, c.ToString().ToLower()) + 2) % 5;\n   \
    \             char replacement = Char.ToLower(vowels[next][0]);\n            \
    \    if (Char.IsUpper(c)) {\n                    replacement = Char.ToUpper(replacement);\n\
    \                }\n                sb.Append(replacement);\n            } else\
    \ {\n                if (Char.IsUpper(c)) {\n                    sb.Append(Char.ToLower(c));\n\
    \                } else {\n                    sb.Append(Char.ToUpper(c));\n \
    \               }\n            }\n        }\n        return sb.ToString();", " \
    \       string result = \"\";\n        string[] words = message.Split(' ');\n\
    \        foreach (string word in words) {\n            string encodedWord = EncodeWord(word);\n\
    \            result += encodedWord + \" \";\n        }\n        return result.Trim();",
  "        string result = \"\";\n        char[] vowels = { 'a', 'e', 'i', 'o', 'u'\
    \ };\n        string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        for (int\
    \ i = 0; i < message.Length; i++) {\n            if (vowels.Contains(message[i]))\
    \ {\n                int index = alphabet.IndexOf(message[i]);\n             \
    \   result += alphabet[(index + 2) % 26];\n            } else {\n            \
    \    char c = Char.ToUpper(message[i]);\n                if (message[i] == c)\
    \ {\n                    result += Char.ToLower(message[i]);\n               \
    \ } else {\n                    result += c;\n                }\n            }\n\
    \        }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in message) {\n            if (Char.IsUpper(c)) {\n                result\
    \ += Char.ToLower(c);\n            } else if (Char.IsLower(c)) {\n           \
    \     result += Char.ToUpper(c);\n            } else {\n                result\
    \ += c;\n            }\n        }\n        return result;", '        return "";',
  "        if (message == null) {\n            return message;\n        }\n      \
    \  string result = \"\";\n        foreach (char c in message) {\n            if\
    \ (!Char.IsLetter(c)) {\n                result += c;\n                continue;\n\
    \            }\n            if (Char.IsUpper(c)) {\n                result +=\
    \ Char.ToLower(c);\n            } else {\n                result += Char.ToUpper(c);\n\
    \            }\n        }\n        return result;", "        char[] encoded =\
    \ new char[message.Length];\n        for (int i = 0; i < message.Length; i++)\
    \ {\n            char current = message[i];\n            //swap case \n      \
    \      if (char.IsUpper(current)) {\n                encoded[i] = char.ToLower(current);\n\
    \            } else {\n                encoded[i] = char.ToUpper(current);\n \
    \           }\n            //convert vowels to next 2 vowels\n            if (IsVowel(encoded[i]))\
    \ {\n                encoded[i] = NextVowel(encoded[i]);\n            }\n    \
    \    }\n        return new string(encoded);", "        string result = \"\";\n\
    \        foreach (char c in message) {\n            if (Char.IsLetter(c)) {\n\
    \                result += Char.IsUpper(c) ? Char.ToLower(c) : Char.ToUpper(c);\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        char[] alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n\
    \        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] resultArray\
    \ = result.ToCharArray();\n        for (int i = 0; i < resultArray.Length; i++)\
    \ {\n            for (int j = 0; j < vowels.Length; j++) {\n                if\
    \ (resultArray[i] == vowels[j]) {\n                    resultArray[i] = alphabet[(j\
    \ + 2) % 26];\n                }\n            }\n        }\n        return new\
    \ string(resultArray);", "        // throw new NotImplementedException();\n  \
    \      return \"\";", "        string result = \"\";\n        for (int i = 0;\
    \ i < message.Length; i++) {\n            result += ModuloSwap(message[i]);\n\
    \        }\n        return result;", '        return "";', "        string res\
    \ = \"\";\n        int diff = 0;\n        for (int i = 0; i < message.Length;\
    \ i++) {\n            if (Char.IsUpper(message[i])) {\n                res +=\
    \ Char.ToLower(message[i]);\n            } else {\n                res += Char.ToUpper(message[i]);\n\
    \            }\n            if (message[i] == 'a' || message[i] == 'e' || message[i]\
    \ == 'i' || message[i] == 'o' || message[i] == 'u') {\n                switch\
    \ (message[i]) {\n                    case 'a':\n                        diff\
    \ = 0;\n                        break;\n                    case 'e':\n      \
    \                  diff = 1;\n                        break;\n               \
    \     case 'i':\n                        diff = 2;\n                        break;\n\
    \                    case 'o':\n                        diff = 3;\n          \
    \              break;\n                    case 'u':\n                       \
    \ diff = 4;\n                        break;\n                }\n             \
    \   res = res.Remove(res.Length - 1, 1);\n                res += (char)(message[i]\
    \ + diff + 2);\n            }\n        }\n        return res;", "        var encodedMessage\
    \ = \"\";\n        for (int i = 0; i < message.Length; i++) {\n            var\
    \ letter = message[i];\n            var encoding = \"\";\n            if (letter\
    \ == ' ')\n                encoding = \" \";\n            else {\n           \
    \     if (char.IsLower(letter))\n                    encoding = char.ToUpper(letter).ToString();\n\
    \                else\n                    encoding = char.ToLower(letter).ToString();\n\
    \                switch (encoding) {\n                    case \"A\":\n      \
    \                  encoding = \"C\";\n                        break;\n       \
    \             case \"E\":\n                        encoding = \"G\";\n       \
    \                 break;\n                    case \"I\":\n                  \
    \      encoding = \"K\";\n                        break;\n                   \
    \ case \"O\":\n                        encoding = \"Q\";\n                   \
    \     break;\n                    case \"U\":\n                        encoding\
    \ = \"S\";\n                        break;\n                    case \"Y\":\n\
    \                        encoding = \"A\";\n                        break;\n \
    \                   case \"C\":\n                        encoding = \"E\";\n \
    \                       break;\n                    case \"G\":\n            \
    \            encoding = \"I\";\n                        break;\n             \
    \       case \"K\":\n                        encoding = \"M\";\n             \
    \           break;\n                    case \"Q\":\n                        encoding\
    \ = \"O\";\n                        break;\n                    case \"S\":\n\
    \                        encoding = \"U\";\n                        break;\n \
    \                   case \"W\":\n                        encoding = \"Y\";\n \
    \                       break;\n                }\n            }\n           \
    \ encodedMessage += encoding;\n        }\n        return encodedMessage;", " \
    \       var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        var alphabetLookup\
    \ = new Dictionary<char, int>();\n        for (int i = 0; i < alphabet.Length;\
    \ i++) {\n            alphabetLookup[alphabet[i]] = i;\n        }\n        var\
    \ result = \"\";\n        foreach (var letter in message) {\n            if (char.IsLetter(letter))\
    \ {\n                var lowerLetter = char.ToLower(letter);\n               \
    \ var index = alphabetLookup[lowerLetter];\n                var encodedIndex =\
    \ (index + 2) % alphabet.Length;\n                var encodedLetter = char.IsUpper(letter)\n\
    \                                    ? char.ToUpper(alphabet[encodedIndex])\n\
    \                                    : alphabet[encodedIndex];\n             \
    \   result += encodedLetter;\n            } else {\n                result +=\
    \ letter;\n            }\n        }\n        return result;", "        var sb\
    \ = new StringBuilder();\n        foreach (var c in message) {\n            var\
    \ cn = (int)c;\n            if (cn >= 97 && cn <= 122) {\n                cn -=\
    \ 32;\n            } else if (cn >= 65 && cn <= 90) {\n                cn += 32;\n\
    \            } else if (cn == 97) {\n                cn = 101;\n            }\
    \ else if (cn == 101) {\n                cn = 105;\n            } else if (cn\
    \ == 105) {\n                cn = 111;\n            } else if (cn == 111) {\n\
    \                cn = 117;\n            } else if (cn == 117) {\n            \
    \    cn = 97;\n            } else if (cn == 65) {\n                cn = 69;\n\
    \            } else if (cn == 69) {\n                cn = 73;\n            } else\
    \ if (cn == 73) {\n                cn = 79;\n            } else if (cn == 79)\
    \ {\n                cn = 85;\n            } else if (cn == 85) {\n          \
    \      cn = 65;\n            }\n            sb.Append((char)cn);\n        }\n\
    \        return sb.ToString();", "        // Step 1: Swap the case of the letters\n\
    \        string swapped = \"\";\n        for (int i = 0; i < message.Length; i++)\
    \ {\n            char c = message[i];\n            if (Char.IsUpper(c)) {\n  \
    \              swapped += Char.ToLower(c);\n            } else {\n           \
    \     swapped += Char.ToUpper(c);\n            }\n        }\n        // Step 2:\
    \ Replace all vowels with the letter 2 letters ahead\n        // vowelList is\
    \ a list of all the vowels\n        List<string> vowelList = new List<string>\
    \ {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        string encoded = \"\";\n     \
    \   for (int i = 0; i < swapped.Length; i++) {\n            // We're going to\
    \ loop through all the vowels and see if the\n            // character is a vowel;\
    \ if it is we'll replace it\n            for (int v = 0; v < vowelList.Count;\
    \ v++) {\n                if (swapped[i].ToString() == vowelList[v]) {\n     \
    \               if (v + 2 <= 4) {\n                        encoded += vowelList[v\
    \ + 2];\n                    } else {\n                        encoded += vowelList[(v\
    \ + 2) - 5];\n                    }\n                }\n            }\n      \
    \      // If the character wasn't a vowel, we'll keep it the same\n          \
    \  if (encoded.Length < i + 1) {\n                encoded += swapped[i];\n   \
    \         }\n        }\n        return encoded;", "        string text = message.ToUpper();\n\
    \        char[] a = text.ToCharArray();\n        Dictionary<char, char> map =\
    \ new Dictionary<char, char>();\n        map.Add('A', 'C');\n        map.Add('E',\
    \ 'G');\n        map.Add('I', 'K');\n        map.Add('O', 'Q');\n        map.Add('U',\
    \ 'S');\n        map.Add('Y', 'A');\n        for (int i = 0; i < a.Length; i++)\
    \ {\n            if (map.ContainsKey(a[i])) {\n                a[i] = map[a[i]];\n\
    \            }\n        }\n        return new string(a);", "        StringBuilder\
    \ sb = new StringBuilder();\n        foreach (char c in message) {\n         \
    \   if (Char.IsLetter(c)) {\n                int code = c;\n                if\
    \ (Char.IsUpper(c)) {\n                    code += 2;\n                    if\
    \ (code > 'Z') code -= 26;\n                } else {\n                    code\
    \ += 2;\n                    if (code > 'z') code -= 26;\n                }\n\
    \                sb.Append((char)code);\n            } else {\n              \
    \  sb.Append(c);\n            }\n        }\n        return sb.ToString();", " \
    \       if (message == null) return null;\n        string result = \"\";\n   \
    \     for (int i = 0; i < message.Length; i++) {\n            if (Char.IsLetter(message[i]))\
    \ {\n                if (Char.IsUpper(message[i])) {\n                    result\
    \ += (char)((message[i] - 'A' + 13) % 26 + 'A');\n                } else {\n \
    \                   result += (char)((message[i] - 'a' + 13) % 26 + 'a');\n  \
    \              }\n            } else {\n                result += message[i];\n\
    \            }\n        }\n        return result;", "        string encoded =\
    \ \"\";\n        string tempVowel = \"\";\n        string letter = \"\";\n   \
    \     int letterVal = 0;\n        int tempVal = 0;\n        char vowel = ' ';\n\
    \        string upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        string lower\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n        int i = 0;\n        int j = 0;\n\
    \        for (i = 0; i < message.Length; i++) {\n            letter = message[i].ToString();\n\
    \            letterVal = (int)message[i];\n            if ((letterVal >= 65 &&\
    \ letterVal <= 90) || (letterVal >= 97 && letterVal <= 122)) {\n             \
    \   // Check if letter is a vowel\n                for (j = 0; j < 5; j++) {\n\
    \                    vowel = message[i];\n                    if (upper.Contains(vowel)\
    \ || lower.Contains(vowel)) {\n                        // Check if uppercase or\
    \ lowercase\n                        if (upper.Contains(vowel)) {\n          \
    \                  tempVowel = upper[((upper.IndexOf(vowel) + 2) % 26)].ToString();\n\
    \                        } else {\n                            tempVowel = lower[((lower.IndexOf(vowel)\
    \ + 2) % 26)].ToString();\n                        }\n                       \
    \ break;\n                    }\n                }\n                // Check if\
    \ letter is uppercase or lowercase\n                if (letterVal >= 65 && letterVal\
    \ <= 90) {\n                    // Uppercase \n                    if (j == 5)\
    \ {\n                        // Letter is not a vowel\n                      \
    \  tempVal = ((letterVal + 32) % 256);\n                        encoded += ((char)tempVal).ToString();\n\
    \                    } else {\n                        // Letter is a vowel\n\
    \                        encoded += tempVowel;\n                    }\n      \
    \          } else {\n                    // Lowercase\n                    if\
    \ (j == 5) {\n                        // Letter is not a vowel\n             \
    \           tempVal = ((letterVal - 32) % 256);\n                        encoded\
    \ += ((char)tempVal).ToString();\n                    } else {\n             \
    \           // Letter is a vowel\n                        encoded += tempVowel;\n\
    \                    }\n               ", "        var sb = new StringBuilder();\n\
    \        foreach (var c in message) {\n            sb.Append(Encode(c));\n   \
    \     }\n        return sb.ToString();", "        // message = message.ToUpper();\n\
    \        char[] alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".ToCharArray();\n   \
    \     char[] encoded = message.ToCharArray();\n        for (int i = 0; i < encoded.Length;\
    \ i++) {\n            encoded[i] = Char.ToUpper(encoded[i]);\n            if (Char.IsLetter(encoded[i]))\
    \ {\n                int letterVal = Array.IndexOf(alphabet, encoded[i]);\n  \
    \              if (Char.IsLower(message[i])) {\n                    letterVal\
    \ = (letterVal + 2) % 26;\n                    encoded[i] = Char.ToLower(alphabet[letterVal]);\n\
    \                } else {\n                    letterVal = (letterVal + 2) % 26;\n\
    \                    encoded[i] = alphabet[letterVal];\n                }\n  \
    \          }\n        }\n        return String.Join(\"\", encoded);", "      \
    \  StringBuilder sb = new StringBuilder();\n        foreach (char c in message)\
    \ {\n            sb.Append(Convert.ToChar(GetEncodedCharacter(c)));\n        }\n\
    \        return sb.ToString();", "        string[] vowels = new string[] {\"a\"\
    , \"e\", \"i\", \"o\", \"u\"};\n        string[] upperVowels = new string[] {\"\
    A\", \"E\", \"I\", \"O\", \"U\"};\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in message) {\n            if (vowels.Contains(c.ToString()))\
    \ {\n                int i = Array.IndexOf(vowels, c.ToString());\n          \
    \      int j = (i + 2) % 5;\n                sb.Append(vowels[j]);\n         \
    \   } else if (upperVowels.Contains(c.ToString())) {\n                int i =\
    \ Array.IndexOf(upperVowels, c.ToString());\n                int j = (i + 2) %\
    \ 5;\n                sb.Append(upperVowels[j]);\n            } else {\n     \
    \           sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        // array of vowels to iterate through\n        char[] vowels = {'a', 'e',\
    \ 'i', 'o', 'u'};\n        StringBuilder encoded = new StringBuilder();\n    \
    \    // iterate through message\n        for (int i = 0; i < message.Length; i++)\
    \ {\n            // if the letter is uppercase\n            if (char.IsUpper(message[i]))\
    \ {\n                // check if it is a vowel and replace it\n              \
    \  for (int j = 0; j < vowels.Length; j++) {\n                    if (message[i]\
    \ == char.ToUpper(vowels[j])) {\n                        // get the value from\
    \ the item in the array and subtract 32 to get the lowercase value\n         \
    \               encoded.Append((char)(vowels[(j + 2) % vowels.Length] - 32));\n\
    \                        // break out of the loop\n                        break;\n\
    \                    }\n                    // if it is not a vowel, then just\
    \ convert it to lowercase\n                    else if (j == vowels.Length - 1)\
    \ {\n                        encoded.Append(char.ToLower(message[i]));\n     \
    \               }\n                }\n            }\n            // if the letter\
    \ is lowercase\n            else if (char.IsLower(message[i])) {\n           \
    \     // check if it is a vowel and replace it\n                for (int j = 0;\
    \ j < vowels.Length; j++) {\n                    if (message[i] == vowels[j])\
    \ {\n                        // get the value from the item in the array and subtract\
    \ 32 to get the lowercase value\n                        encoded.Append(vowels[(j\
    \ + 2) % vowels.Length]);\n                        // break out of the loop\n\
    \                        break;\n                    }\n                    //\
    \ if it is not a vowel, then just convert it to uppercase\n                  \
    \  else if (j == vowels.Length - 1) {\n                        encoded.Append(char.ToUpper(message[i]));\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ encoded.ToString();", "        var charList = new List<char>();\n        foreach\
    \ (var c in message) {\n            charList.Add(c);\n        }\n        for (int\
    \ i = 0; i < charList.Count; i++) {\n            var c = charList[i];\n      \
    \      charList[i] = (char)(c ^ 32);\n            if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n                charList[i] = (char)(c\
    \ ^ 32);\n                charList[i] = (char)(c + 2);\n            }\n      \
    \  }\n        return new string(charList.ToArray());", "        var vowels = new\
    \ Dictionary<char, char>();\n        vowels.Add('a', 'c');\n        vowels.Add('e',\
    \ 'g');\n        vowels.Add('i', 'k');\n        vowels.Add('o', 'q');\n      \
    \  vowels.Add('u', 'y');\n        var sb = new StringBuilder();\n        foreach\
    \ (var ch in message) {\n            if (vowels.ContainsKey(ch)) {\n         \
    \       sb.Append(vowels[ch]);\n            } else {\n                sb.Append(ch);\n\
    \            }\n        }\n        return sb.ToString();", "        Dictionary<char,\
    \ char> dict = new Dictionary<char, char>() {\n            {'a', 'c'},\n     \
    \       {'e', 'g'},\n            {'i', 'k'},\n            {'o', 'q'},\n      \
    \      {'u', 'w'},\n            {'y', 'a'},\n            {'b', 'd'},\n       \
    \     {'c', 'e'},\n            {'d', 'f'},\n            {'f', 'h'},\n        \
    \    {'g', 'i'},\n            {'h', 'j'},\n            {'j', 'l'},\n         \
    \   {'k', 'm'},\n            {'l', 'n'},\n            {'m', 'o'},\n          \
    \  {'n', 'p'},\n            {'p', 'r'},\n            {'q', 's'},\n           \
    \ {'r', 't'},\n            {'s', 'u'},\n            {'t', 'v'},\n            {'v',\
    \ 'x'},\n            {'w', 'y'},\n            {'x', 'z'},\n            {'z', 'b'}\n\
    \        };\n        char[] messageArray = message.ToCharArray();\n        for\
    \ (int i = 0; i < messageArray.Length; i++) {\n            if (dict.ContainsKey(messageArray[i]))\
    \ {\n                messageArray[i] = dict[messageArray[i]];\n            }\n\
    \            messageArray[i] = char.IsUpper(messageArray[i]) ? char.ToLower(messageArray[i])\
    \ : char.ToUpper(messageArray[i]);\n        }\n        return string.Join(\"\"\
    , messageArray);", '        return null;', "        string alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n        int index = 0;\n        int shift = 2;\n        string word = \"\"\
    ;\n        var vowels = new HashSet<char>() { 'A', 'E', 'I', 'O', 'U' };\n   \
    \     while (index < message.Length) {\n            if (!vowels.Contains(char.ToUpper(message[index])))\
    \ {\n                if (Char.IsUpper(message[index])) {\n                   \
    \ word += Char.ToLower(message[index]);\n                } else {\n          \
    \          word += Char.ToUpper(message[index]);\n                }\n        \
    \    } else {\n                if (Char.IsUpper(message[index])) {\n         \
    \           if (alphabet.IndexOf(message[index]) + shift < alphabet.Length) {\n\
    \                        word += alphabet[alphabet.IndexOf(message[index]) + shift];\n\
    \                    } else {\n                        word += alphabet[(alphabet.IndexOf(message[index])\
    \ + shift) - alphabet.Length];\n                    }\n                } else\
    \ {\n                    if (alphabet.IndexOf(char.ToUpper(message[index])) +\
    \ shift < alphabet.Length) {\n                        word += char.ToLower(alphabet[alphabet.IndexOf(char.ToUpper(message[index]))\
    \ + shift]);\n                    } else {\n                        word += char.ToLower(alphabet[(alphabet.IndexOf(char.ToUpper(message[index]))\
    \ + shift) - alphabet.Length]);\n                    }\n                }\n  \
    \          }\n            index++;\n        }\n        return word;", "      \
    \  string encoded = \"\";\n        foreach (char c in message) {\n           \
    \ if (Char.IsLetter(c)) {\n                if (Char.IsUpper(c)) {\n          \
    \          encoded += Char.ToLower(c);\n                } else {\n           \
    \         encoded += Char.ToUpper(c);\n                }\n            } else {\n\
    \                encoded += c;\n            }\n        }\n        string encoded2\
    \ = \"\";\n        foreach (char c in encoded) {\n            if (Char.IsLetter(c))\
    \ {\n                if (Char.IsUpper(c)) {\n                    encoded2 += Char.ToLower(c);\n\
    \                } else {\n                    encoded2 += Char.ToUpper(c);\n\
    \                }\n            } else {\n                encoded2 += c;\n   \
    \         }\n        }\n        return encoded2;", "        // soln 1, uses ASCII\
    \ codes of letters\n        return null;\n        // soln 2, uses modulus to keep\
    \ indices in range\n        return null;", '        return null;', "        //\
    \ remove spaces from the message\n        StringBuilder message_no_spaces = new\
    \ StringBuilder();\n        for (int i = 0; i < message.Length; i++) {\n     \
    \       if (message[i] != ' ') {\n                message_no_spaces.Append(message[i]);\n\
    \            }\n        }\n        // encode using Caesar's Cipher\n        StringBuilder\
    \ encoded_message = new StringBuilder();\n        for (int i = 0; i < message_no_spaces.Length;\
    \ i++) {\n            char curr_char = message_no_spaces[i];\n            char\
    \ encoded_char = (char)(curr_char + 2);\n            if (char.IsUpper(curr_char))\
    \ {\n                if (encoded_char > 'Z') {\n                    encoded_char\
    \ = (char)(encoded_char - 26);\n                }\n            } else {\n    \
    \            if (encoded_char > 'z') {\n                    encoded_char = (char)(encoded_char\
    \ - 26);\n                }\n            }\n            encoded_message.Append(encoded_char);\n\
    \        }\n        // replace vowels with the vowel that comes 2 places in front\
    \ of that in the alphabet\n        for (int i = 0; i < encoded_message.Length;\
    \ i++) {\n            char curr_char = encoded_message[i];\n            if (curr_char\
    \ == 'b' || curr_char == 'B') {\n                encoded_message[i] = 'a';\n \
    \           } else if (curr_char == 'd' || curr_char == 'D') {\n             \
    \   encoded_message[i] = 'e';\n            } else if (curr_char == 'f' || curr_char\
    \ == 'F') {\n                encoded_message[i] = 'i';\n            } else if\
    \ (curr_char == 'h' || curr_char == 'H') {\n                encoded_message[i]\
    \ = 'o';\n            } else if (curr_char == 'j' || curr_char == 'J') {\n   \
    \             encoded_message[i] = 'u';\n            } else if (curr_char == 'l'\
    \ || curr_char == 'L", "        int diff = 2;\n        //Vowels are A, E, I, O,\
    \ U\n        //vowels in message\n        //if (message.Contains(\"a\")) {\n \
    \       //    return message.Replace(\"a\", \"c\");\n        //}\n        //else\
    \ if (message.Contains(\"e\")) {\n        //    return message.Replace(\"e\",\
    \ \"g\");\n        //}\n        //else if (message.Contains(\"i\")) {\n      \
    \  //    return message.Replace(\"i\", \"k\");\n        //}\n        //else if\
    \ (message.Contains(\"o\")) {\n        //    return message.Replace(\"o\", \"\
    q\");\n        //}\n        //else if (message.Contains(\"u\")) {\n        //\
    \    return message.Replace(\"u\", \"w\");\n        //}\n        //else {\n  \
    \      //    return message;\n        //}\n        char[] encoded = new char[message.Length];\n\
    \        for (int i = 0; i < message.Length; i++) {\n            char c = message[i];\n\
    \            if (char.IsLetter(c)) {\n                if (char.IsUpper(c)) {\n\
    \                    encoded[i] = char.ToLower(c);\n                }\n      \
    \          else {\n                    encoded[i] = char.ToUpper(c);\n       \
    \         }\n            }\n            else {\n                encoded[i] = c;\n\
    \            }\n        }\n        return new string(encoded);", "        var\
    \ result = new StringBuilder();\n        var vowels = new List<char>() { 'a',\
    \ 'e', 'i', 'o', 'u' };\n        var consonants = new List<char>() { 'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z' };\n        foreach (var letter in message) {\n            if\
    \ (char.IsUpper(letter)) {\n                if (vowels.Contains(char.ToLower(letter)))\
    \ {\n                    if (letter == 'U') {\n                        result.Append('a');\n\
    \                    } else if (letter == 'V') {\n                        result.Append('b');\n\
    \                    } else {\n                        var vowelIndex = vowels.IndexOf(char.ToLower(letter));\n\
    \                        result.Append(char.ToUpper(vowels[vowelIndex + 2]));\n\
    \                    }\n                } else if (consonants.Contains(char.ToLower(letter)))\
    \ {\n                    if (letter == 'Z') {\n                        result.Append('b');\n\
    \                    } else {\n                        var consonantIndex = consonants.IndexOf(char.ToLower(letter));\n\
    \                        result.Append(char.ToUpper(consonants[consonantIndex\
    \ + 1]));\n                    }\n                }\n            } else if (char.IsLower(letter))\
    \ {\n                if (vowels.Contains(letter)) {\n                    if (letter\
    \ == 'u') {\n                        result.Append('a');\n                   \
    \ } else if (letter == 'v') {\n                        result.Append('b');\n \
    \                   } else {\n                        var vowelIndex = vowels.IndexOf(letter);\n\
    \                        result.Append(vowels[vowelIndex + 2]);\n            \
    \        }\n                } else if (consonants.Contains(letter)) {\n      \
    \              if (letter == 'z') {\n                        result.Append('b');\n\
    \                    } else {\n                        var consonantIndex = consonants.IndexOf(letter);\n\
    \                        result", '        // Your code goes here', "        //\
    \ Get letter positions from key-val lookup table\n        Dictionary<char, int>\
    \ letterToNumber = GetLetterPositions(message);\n        // Encode each letter\n\
    \        StringBuilder encoded = new StringBuilder();\n        foreach (char letter\
    \ in message) {\n            int letterNumber = letterToNumber[letter];\n    \
    \        encoded.Append(TransformLetter(letterNumber));\n        }\n        return\
    \ encoded.ToString();", "        // Logic here\n        return \"\";", "     \
    \   char[] messageToChar = message.ToCharArray();\n        for (int i = 0; i <\
    \ messageToChar.Length; i++) {\n            char ch = messageToChar[i];\n    \
    \        if (Char.IsLetter(ch)) {\n                if (Char.IsUpper(ch)) {\n \
    \                   messageToChar[i] = Char.ToLower(ch);\n                } else\
    \ {\n                    messageToChar[i] = Char.ToUpper(ch);\n              \
    \  }\n            }\n        }\n        string mes = new string(messageToChar);\n\
    \        mes = mes.Replace(\"a\", \"c\");\n        mes = mes.Replace(\"e\", \"\
    g\");\n        mes = mes.Replace(\"i\", \"k\");\n        mes = mes.Replace(\"\
    o\", \"q\");\n        mes = mes.Replace(\"u\", \"w\");\n        return mes;",
  "        Dictionary<char, char> vowelMapping = \n            new Dictionary<char,\
    \ char> {\n                {'a', 'c'},\n                {'e', 'g'},\n        \
    \        {'i', 'k'},\n                {'o', 'q'},\n                {'u', 'w'}\n\
    \            };\n        var encoded = new StringBuilder();\n        foreach (var\
    \ letter in message) {\n            if (char.IsUpper(letter)) {\n            \
    \    encoded.Append(char.ToLower(letter));\n            } else if (char.IsLower(letter))\
    \ {\n                encoded.Append(char.ToUpper(letter));\n            } else\
    \ {\n                encoded.Append(letter);\n            }\n        }\n     \
    \   var mappedEncoded = new StringBuilder();\n        foreach (var letter in encoded.ToString())\
    \ {\n            if (vowelMapping.ContainsKey(letter)) {\n                mappedEncoded.Append(vowelMapping[letter]);\n\
    \            } else {\n                mappedEncoded.Append(letter);\n       \
    \     }\n        }\n        return mappedEncoded.ToString();", "        // \n\
    \        // Throw all the letters into a list and operate on them\n        //\
    \   Why not use a stack?\n        //     There's nothing to be gained by doing\
    \ so, and it will \n        //     result in more lines of code.\n        // Why\
    \ not use a stack?\n        //   There's nothing to be gained by doing so, and\
    \ it will \n        //   result in more lines of code.\n        // Why not use\
    \ a string as a stack?\n        //   In this case, it's not possible to remove\
    \ the last letter\n        //   from a string, so if the vowels are stored in\
    \ a string, a\n        //   second string must be used to store the message.\n\
    \        //\n        var vowels = new List<char>();\n        for (int i = 0; i\
    \ < message.Length; i++) {\n            //\n            // NOTE(Jovan): All this\
    \ can be done in one pass\n            //              (at the end of the loop).\n\
    \            //\n            char current = char.ToUpper(message[i]);\n      \
    \      if (Vowel(current)) {\n                vowels.Add(current);\n         \
    \   }\n        }\n        var result = new List<char>();\n        for (int i =\
    \ 0; i < message.Length; i++) {\n            char current = message[i];\n    \
    \        if (Vowel(current)) {\n                result.Add(vowels[0]);\n     \
    \           vowels.RemoveAt(0);\n            } else {\n                result.Add(current);\n\
    \            }\n        }\n        return new string(result.ToArray());", "  \
    \      var result = new StringBuilder();\n        foreach (var c in message) {\n\
    \            if (c.IsUpper()) {\n                result.Append(c.ToLower());\n\
    \            } else if (c.IsLower()) {\n                result.Append(c.ToUpper());\n\
    \            } else {\n                result.Append(c);\n            }\n    \
    \    }\n        return result.ToString();", "        var vowels = new HashSet<char>()\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        var encoded = new StringBuilder();\n \
    \       foreach (var letter in message) {\n            var upper = char.IsUpper(letter);\n\
    \            var upperStr = (upper) ? \"A\" : \"a\";\n            var letterStr\
    \ = letter.ToString().ToLower();\n            if (vowels.Contains(letter)) {\n\
    \                var currentVowel = \"abcdefghijklmnopqrstuvwxyz\".IndexOf(letterStr);\n\
    \                encoded.Append(Char.ToUpper(Convert.ToChar(upperStr + currentVowel\
    \ + 2)));\n            } else {\n                encoded.Append(Char.ToUpper(Convert.ToChar(upperStr\
    \ + letterStr)));\n            }\n        }\n        return encoded.ToString();",
  "        Dictionary<char, char> mapping = new Dictionary<char, char>();\n      \
    \  for (int i = 0; i < 26; i++) {\n            mapping[(char)('a' + i)] = (char)('a'\
    \ + (i + 2) % 26);\n            mapping[(char)('A' + i)] = (char)('A' + (i + 2)\
    \ % 26);\n        }\n        StringBuilder sb = new StringBuilder();\n       \
    \ foreach (char c in message) {\n            if (char.IsUpper(c)) {\n        \
    \        sb.Append(mapping[c]);\n            } else if (char.IsLower(c)) {\n \
    \               sb.Append(mapping[c]);\n            } else {\n               \
    \ sb.Append(c);\n            }\n        }\n        return sb.ToString();", " \
    \       // TODO: implement me!\n        string[] temp = { \"A\", \"B\", \"C\"\
    , \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\"\
    , \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\"\
    , \"Z\" };\n        string[] temp2 = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\n        string\
    \ tempa = \"\";\n        string tempa2 = \"\";\n        string tempb = \"\";\n\
    \        string tempb2 = \"\";\n        string[] vowels = { \"a\", \"e\", \"i\"\
    , \"o\", \"u\" };\n        string[] vowels2 = { \"A\", \"E\", \"I\", \"O\", \"\
    U\" };\n        string[] vowels3 = { \"C\", \"D\", \"F\", \"G\", \"H\", \"J\"\
    , \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\"\
    , \"X\", \"Y\", \"Z\" };\n        string[] vowels4 = { \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\" };\n        string[] vowels5 = { \"B\"\
    , \"E\", \"H\", \"K\", \"N\", \"Q\", \"T\", \"W\", \"Z\" };\n        string[]\
    \ vowels6 = { \"b\", \"e\", \"h\", \"k\", \"n\", \"q\", \"t\", \"w\", \"z\" };\n\
    \        string[] vowels7 = { \"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\"\
    , \"K\",", "        var vowels = new HashSet<char>() { 'a', 'e', 'i', 'o', 'u'\
    \ };\n        var encoded = new StringBuilder();\n        foreach (var c in message)\
    \ {\n            var encodedC = c;\n            if (vowels.Contains(char.ToLower(c)))\
    \ {\n                encodedC = EncodeVowel(c);\n            }\n            encoded.Append(SwapCase(encodedC));\n\
    \        }\n        return encoded.ToString();", "        StringBuilder output\
    \ = new StringBuilder();\n        foreach (char c in message) {\n            if\
    \ (c >= 'a' && c <= 'z') {\n                output.Append((char)(c - 'a' + 'A'));\n\
    \            } else if (c >= 'A' && c <= 'Z') {\n                output.Append((char)(c\
    \ - 'A' + 'a'));\n            } else {\n                output.Append(c);\n  \
    \          }\n        }\n        StringBuilder encoding = new StringBuilder();\n\
    \        foreach (char c in output.ToString()) {\n            if (c == 'A' ||\
    \ c == 'a') {\n                encoding.Append('C');\n            } else if (c\
    \ == 'E' || c == 'e') {\n                encoding.Append('G');\n            }\
    \ else if (c == 'I' || c == 'i') {\n                encoding.Append('K');\n  \
    \          } else if (c == 'O' || c == 'o') {\n                encoding.Append('M');\n\
    \            } else if (c == 'U' || c == 'u') {\n                encoding.Append('O');\n\
    \            } else {\n                encoding.Append(c);\n            }\n  \
    \      }\n        return encoding.ToString();", "        message = message.ToUpper();\n\
    \        string enc = \"\";\n        var vowels = new char[] { 'A', 'E', 'I',\
    \ 'O', 'U' };\n        var vowelOffset = 2;\n        foreach (char c in message)\
    \ {\n            if (vowels.Contains(c)) {\n                int vIndex = Array.IndexOf(vowels,\
    \ c);\n                if (vIndex + vowelOffset >= vowels.Length) {\n        \
    \            enc += vowels[vIndex + vowelOffset - vowels.Length];\n          \
    \      } else {\n                    enc += vowels[vIndex + vowelOffset];\n  \
    \              }\n            } else {\n                enc += c;\n          \
    \  }\n        }\n        return enc;", "        // Base cases?\n        if (message\
    \ == null) {\n            return null;\n        }\n        if (message.Length\
    \ == 0) {\n            return \"\";\n        }\n        // Create array of vowels\
    \ and define them to a variable\n        char[] vowels = { 'a', 'e', 'i', 'o',\
    \ 'u' };\n        // Define a list of vowels\n        List<char> vowelList = new\
    \ List<char>();\n        // Create an array of letters and define them to a variable\n\
    \        char[] letters = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        // Define a list of letters\n        List<char> letterList = new\
    \ List<char>();\n        // Add vowels to the vowel list\n        foreach (char\
    \ c in vowels) {\n            vowelList.Add(c);\n        }\n        // Add letters\
    \ to the letter list\n        foreach (char c in letters) {\n            letterList.Add(c);\n\
    \        }\n        // Create a list to hold the encoded message\n        List<char>\
    \ result = new List<char>();\n        // Loop through the message\n        for\
    \ (int i = 0; i < message.Length; i++) {\n            // Get the current letter\
    \ in the message\n            char c = message[i];\n            // Check if it\
    \ is a vowel or not\n            if (vowelList.Contains(c)) {\n              \
    \  // Get the index of the current letter and add 2 to it\n                int\
    \ idx = letterList.IndexOf(c) + 2;\n                // Check if the index of the\
    \ letter is greater than 25, if so, wrap around to the start of the alphabet\n\
    \                if (idx > 25) {\n                    idx = idx - 26;\n      \
    \          }\n                // Add the letter to the result list\n         \
    \       result.Add(letterList[idx]);\n            } else {\n                //\
    \ If it's not a vowel, add it to the", "        string encodedMessage = \"\";\n\
    \        string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        int alphabetIndex\
    \ = 0;\n        char currentChar;\n        char currentCharEncoded;\n        int\
    \ indexAfterVowel;\n        bool isVowel;\n        foreach (char c in message)\
    \ {\n            currentChar = c;\n            isVowel = false;\n            if\
    \ (char.IsLower(currentChar)) {\n                for (int i = 0; i < alphabet.Length;\
    \ i++) {\n                    if (currentChar == alphabet[i]) {\n            \
    \            alphabetIndex = i;\n                        isVowel = true;\n   \
    \                     break;\n                    }\n                }\n     \
    \           if (isVowel) {\n                    if (alphabetIndex >= 24) {\n \
    \                       indexAfterVowel = alphabetIndex - 24;\n              \
    \      } else {\n                        indexAfterVowel = alphabetIndex + 2;\n\
    \                    }\n                    currentCharEncoded = alphabet[indexAfterVowel];\n\
    \                } else {\n                    currentCharEncoded = currentChar;\n\
    \                }\n            } else {\n                for (int i = 0; i <\
    \ alphabet.Length; i++) {\n                    if (currentChar == char.ToUpper(alphabet[i]))\
    \ {\n                        alphabetIndex = i;\n                        isVowel\
    \ = true;\n                        break;\n                    }\n           \
    \     }\n                if (isVowel) {\n                    if (alphabetIndex\
    \ >= 24) {\n                        indexAfterVowel = alphabetIndex - 24;\n  \
    \                  } else {\n                        indexAfterVowel = alphabetIndex\
    \ + 2;\n                    }\n                    currentCharEncoded = char.ToUpper(alphabet[indexAfterVowel]);\n\
    \                } else {\n                    currentCharEncoded = currentChar;\n\
    \                }\n            }\n            encodedMessage += currentCharEncoded;\n\
    \        }\n        return encodedMessage;", "        char[] chars = message.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            int offset = (chars[i]\
    \ >= 'a' && chars[i] <= 'z') ? 'a' : 'A';\n            chars[i] = (char)((chars[i]\
    \ - offset + 13) % 26 + offset);\n            switch (chars[i]) {\n          \
    \      case 'a': case 'e': case 'i': case 'o': case 'u':\n                   \
    \ chars[i] = (char)(chars[i] + 2);\n                    break;\n            }\n\
    \        }\n        return new string(chars);", "        string result = \"\"\
    ;\n        for (int i = 0; i < message.Length; i++) {\n            if (i % 2 ==\
    \ 0) {\n                result += char.ToUpper(message[i]);\n            } else\
    \ {\n                result += char.ToLower(message[i]);\n            }\n    \
    \    }\n        return result;", "        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in message) {\n            if (c >= 'a' && c <= 'z')\
    \ {\n                sb.Append((char)('A' + (c - 'a')));\n            } else if\
    \ (c >= 'A' && c <= 'Z') {\n                sb.Append((char)('a' + (c - 'A')));\n\
    \            } else {\n                sb.Append(c);\n            }\n        }\n\
    \        message = sb.ToString();\n        StringBuilder output = new StringBuilder();\n\
    \        int last = 0;\n        for (int i = 0; i < message.Length; i++) {\n \
    \           char c = message[i];\n            if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n                output.Append(message.Substring(last,\
    \ i - last));\n                if (c >= 'a' && c <= 'z') {\n                 \
    \   if (c == 'u') {\n                        output.Append('a');\n           \
    \         } else {\n                        output.Append((char)(c + 2));\n  \
    \                  }\n                } else {\n                    if (c == 'U')\
    \ {\n                        output.Append('A');\n                    } else {\n\
    \                        output.Append((char)(c + 2));\n                    }\n\
    \                }\n                last = i + 1;\n            }\n        }\n\
    \        output.Append(message.Substring(last));\n        return output.ToString();",
  "        string vowels = \"aeiou\";\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in message) {\n            char n = c;\n            if\
    \ (char.IsUpper(c)) {\n                n = char.ToLower(c);\n            } else\
    \ if (char.IsLower(c)) {\n                n = char.ToUpper(c);\n            }\n\
    \            if (vowels.Contains(n)) {\n                int index = vowels.IndexOf(n);\n\
    \                index = (index + 2) % vowels.Length;\n                n = vowels[index];\n\
    \            }\n            sb.Append(n);\n        }\n        return sb.ToString();",
  '        return "";', "        // Write your code here.\n        return \"\";",
  "        string result = \"\";\n        for (int i = 0; i < message.Length; i++)\
    \ {\n            var ch = message[i];\n            if (ch >= 'a' && ch <= 'z')\
    \ {\n                ch = (char)(ch - 'a' + 'A');\n            } else if (ch >=\
    \ 'A' && ch <= 'Z') {\n                ch = (char)(ch - 'A' + 'a');\n        \
    \    }\n            if (ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch\
    \ == 'U') {\n                ch = (char)((ch - 'A' + 2) % 26 + 'A');\n       \
    \     }\n            result += ch;\n        }\n        return result;", "    \
    \    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string vowels\
    \ = \"aeiou\";\n        string newMessage = \"\";\n        for (int i = 0; i <\
    \ message.Length; i++) {\n            int vowelIndex = vowels.IndexOf(message[i]);\n\
    \            int charIndex = alphabet.IndexOf(message[i]);\n            if (vowelIndex\
    \ != -1) {\n                newMessage += message[i] == 'u' ? 'a' : vowels[vowelIndex\
    \ + 2];\n            } else if (charIndex != -1) {\n                newMessage\
    \ += message[i] == 'z' ? 'A' : (char)(alphabet[charIndex] - 32);\n           \
    \ } else {\n                newMessage += message[i];\n            }\n       \
    \ }\n        return newMessage;", "        // Do your thing here.\n        return\
    \ \"\";", '        return null;', "        return string.Join(\"\", message.Select(x\
    \ => {\n            var c = char.ToUpper(x);\n            switch (c) {\n     \
    \           case 'A': return 'C';\n                case 'E': return 'G';\n   \
    \             case 'I': return 'K';\n                case 'O': return 'Q';\n \
    \               case 'U': return 'S';\n                default: return c;\n  \
    \          }\n        }));", '        return null;', "        char[] letters =\
    \ message.ToCharArray();\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n\
    \        for (int i = 0; i < letters.Length; i++) {\n            if (Char.IsLetter(letters[i]))\
    \ {\n                if (Char.IsUpper(letters[i])) {\n                    letters[i]\
    \ = Char.ToLower(letters[i]);\n                } else {\n                    letters[i]\
    \ = Char.ToUpper(letters[i]);\n                }\n                if (vowels.Contains(letters[i]))\
    \ {\n                    char a = (char)((int)letters[i] + 2);\n             \
    \       if (a > 'z') {\n                        letters[i] = (char)('a' + (a -\
    \ 'z') - 1);\n                    } else {\n                        letters[i]\
    \ = a;\n                    }\n                }\n            }\n        }\n \
    \       return new string(letters);", "        // TODO: Implement method.\n  \
    \      return message;", "        // implements the above\n        char[] c =\
    \ message.ToCharArray();\n        for (int i = 0; i < c.Length; i++) {\n     \
    \       if (Char.IsLetter(c[i])) {\n                if (Char.IsUpper(c[i])) {\n\
    \                    c[i] = Char.ToLower(c[i]);\n                } else {\n  \
    \                  c[i] = Char.ToUpper(c[i]);\n                }\n           \
    \ }\n            switch (c[i]) {\n                case 'a':\n                \
    \    c[i] = 'c';\n                    break;\n                case 'e':\n    \
    \                c[i] = 'g';\n                    break;\n                case\
    \ 'i':\n                    c[i] = 'k';\n                    break;\n        \
    \        case 'o':\n                    c[i] = 'q';\n                    break;\n\
    \                case 'u':\n                    c[i] = 'y';\n                \
    \    break;\n                case 'A':\n                    c[i] = 'C';\n    \
    \                break;\n                case 'E':\n                    c[i] =\
    \ 'G';\n                    break;\n                case 'I':\n              \
    \      c[i] = 'K';\n                    break;\n                case 'O':\n  \
    \                  c[i] = 'Q';\n                    break;\n                case\
    \ 'U':\n                    c[i] = 'Y';\n                    break;\n        \
    \    }\n        }\n        return new string(c);", "        var sb = new StringBuilder();\n\
    \        foreach (var letter in message) {\n            if (char.IsLetter(letter))\
    \ {\n                sb.Append(char.IsUpper(letter) ? char.ToLower(letter) : char.ToUpper(letter));\n\
    \            } else {\n                sb.Append(letter);\n            }\n   \
    \     }\n        return sb.ToString();", '        return null;', "        // TODO:\
    \ your code here\n        return \"\";", '        return null;', "        return\
    \ string.Join(\"\", message.Select(c => {\n            // Swap case.\n       \
    \     if (char.IsUpper(c)) {\n                c = char.ToLower(c);\n         \
    \   } else if (char.IsLower(c)) {\n                c = char.ToUpper(c);\n    \
    \        }\n            // If a vowel, replace with the next one.\n          \
    \  if (c == 'a') {\n                c = 'c';\n            } else if (c == 'e')\
    \ {\n                c = 'g';\n            } else if (c == 'i') {\n          \
    \      c = 'k';\n            } else if (c == 'o') {\n                c = 'q';\n\
    \            } else if (c == 'u') {\n                c = 'y';\n            }\n\
    \            return c;\n        }));", "        StringBuilder encodedMessage =\
    \ new StringBuilder();\n        StringBuilder lowerCaseAlphabet = new StringBuilder(\"\
    abcdefghijklmnopqrstuvwxyz\");\n        StringBuilder upperCaseAlphabet = new\
    \ StringBuilder(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n        string vowels = \"aeiou\"\
    ;\n        char[] messageArray = message.ToCharArray();\n        for (int i =\
    \ 0; i < messageArray.Length; i++) {\n            if (Char.IsLetter(messageArray[i]))\
    \ {\n                if (Char.IsUpper(messageArray[i])) {\n                  \
    \  // Encrypt Capital Letters\n                    if (vowels.Contains(Char.ToLower(messageArray[i])))\
    \ {\n                        int vowelPosition = lowerCaseAlphabet.ToString().IndexOf(Char.ToLower(messageArray[i]));\n\
    \                        if (vowelPosition > 22) {\n                         \
    \   vowelPosition = vowelPosition - 5;\n                        } else {\n   \
    \                         vowelPosition = vowelPosition + 2;\n               \
    \         }\n                        char encryptedLetter = upperCaseAlphabet[vowelPosition];\n\
    \                        encodedMessage.Append(encryptedLetter);\n           \
    \         } else {\n                        encodedMessage.Append(Char.ToUpper(messageArray[i]));\n\
    \                    }\n                } else {\n                    // Encrypt\
    \ Lower Case Letters\n                    if (vowels.Contains(messageArray[i]))\
    \ {\n                        int vowelPosition = lowerCaseAlphabet.ToString().IndexOf(messageArray[i]);\n\
    \                        if (vowelPosition > 22) {\n                         \
    \   vowelPosition = vowelPosition - 5;\n                        } else {\n   \
    \                         vowelPosition = vowelPosition + 2;\n               \
    \         }\n                        char encryptedLetter = lowerCaseAlphabet[vowelPosition];\n\
    \                        encodedMessage.Append(encryptedLetter);\n           \
    \         } else {\n                        encodedMessage.Append(messageArray[i]);\n\
    \                    }\n                }\n            } else {\n            \
    \    encodedMessage.Append(messageArray[i]);\n            }\n        }\n     \
    \   return encodedMessage.ToString();", '        return null;', "        string\
    \ swapped = \"\";\n        string encoded = \"\";\n        foreach (char c in\
    \ message) {\n            if (Char.IsUpper(c)) {\n                swapped += Char.ToLower(c);\n\
    \            } else {\n                swapped += Char.ToUpper(c);\n         \
    \   }\n        }\n        int x = 0;\n        while (x < swapped.Length) {\n \
    \           if (Char.IsLetter(swapped[x])) {\n                if (swapped[x] ==\
    \ 'z') {\n                    encoded += 'b';\n                } else if (swapped[x]\
    \ == 'y') {\n                    encoded += 'a';\n                } else {\n \
    \                   encoded += (char)(swapped[x] + 2);\n                }\n  \
    \          } else {\n                encoded += swapped[x];\n            }\n \
    \           x++;\n        }\n        return encoded;", "        string result\
    \ = \"\";\n        for (int i = 0; i < message.Length; i++) {\n            if\
    \ (IsLowerCase(message[i])) {\n                result += Char.ToUpper(message[i]);\n\
    \            } else if (IsUpperCase(message[i])) {\n                result +=\
    \ Char.ToLower(message[i]);\n            } else if (IsVowel(message[i])) {\n \
    \               result += GetNthVowel(2, message[i]);\n            } else {\n\
    \                result += message[i];\n            }\n        }\n        return\
    \ result;", "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u'\
    \ };\n        var offset = 2;\n        var sb = new StringBuilder();\n       \
    \ var chars = message.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            var character = chars[i];\n            if (char.IsUpper(character))\
    \ {\n                sb.Append(char.ToLower(character));\n            } else if\
    \ (char.IsLower(character)) {\n                sb.Append(char.ToUpper(character));\n\
    \            } else {\n                sb.Append(character);\n            }\n\
    \        }\n        sb.Replace('a', 'p');\n        sb.Replace('e', 'r');\n   \
    \     sb.Replace('i', 't');\n        sb.Replace('o', 'v');\n        sb.Replace('u',\
    \ 'x');\n        return sb.ToString();", "        // put your code here\n    \
    \    return \"\";", "        // TODO: Start coding here.\n        return null;",
  "        // return new string(message.Select(c =>\n        //     \"aeiou\".Contains(c)\
    \ ? 'a'[c] :\n        //     char.IsLower(c) ? char.ToUpper(c) :\n        // \
    \    char.IsUpper(c) ? char.ToLower(c) :\n        //     c\n        // ).ToArray());\n\
    \        throw new NotImplementedException();", "        var vowels = new List<char>\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        var encoded = new List<char>();\n    \
    \    var indexOfVowel = -1;\n        for (int i = 0; i < message.Length; i++)\
    \ {\n            var encodedChar = char.IsUpper(message[i]) ? char.ToLower(message[i])\
    \ : char.ToUpper(message[i]);\n            if (vowels.Contains(encodedChar)) {\n\
    \                indexOfVowel = vowels.IndexOf(encodedChar);\n               \
    \ encodedChar = ' ';\n            }\n            if (indexOfVowel >= 0) {\n  \
    \              var temp = vowels[indexOfVowel];\n                vowels[indexOfVowel]\
    \ = encodedChar;\n                encodedChar = temp;\n                indexOfVowel\
    \ = -1;\n            }\n            encoded.Add(encodedChar);\n        }\n   \
    \     return string.Join(\"\", encoded);", "        StringBuilder output = new\
    \ StringBuilder();\n        // TODO:\n        return output.ToString();", "  \
    \      string vowels = \"aeiou\";\n        string result = \"\";\n        foreach\
    \ (char c in message) {\n            if (Char.IsLetter(c)) {\n               \
    \ char upper = Char.ToUpper(c);\n                int index = vowels.IndexOf(upper);\n\
    \                if (index == -1) {\n                    char alternate = (Char.IsUpper(c))\
    \ ? Char.ToLower(c) : Char.ToUpper(c);\n                    result += alternate;\n\
    \                } else {\n                    char replacement = vowels[(index\
    \ + 2) % 5];\n                    if (Char.IsLower(c)) {\n                   \
    \     replacement = Char.ToLower(replacement);\n                    }\n      \
    \              result += replacement;\n                }\n            } else {\n\
    \                result += c;\n            }\n        }\n        return result;",
  "        string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encryptedMessage\
    \ = \"\";\n        foreach (char c in message) {\n            int index = alphabet.IndexOf(c.ToString().ToLower());\n\
    \            if (index == -1) {\n                encryptedMessage += c;\n    \
    \        } else {\n                index += 2;\n                if (c == c.ToString().ToUpper())\
    \ {\n                    encryptedMessage += alphabet[index].ToString().ToUpper();\n\
    \                } else {\n                    encryptedMessage += alphabet[index];\n\
    \                }\n            }\n        }\n        return encryptedMessage;",
  "        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n        char[] swap_message\
    \ = message.ToLower().ToCharArray();\n        char[] final_message = new char[message.Length];\n\
    \        int index = 0;\n        foreach (char c in swap_message) {\n        \
    \    if (Char.IsLetter(c)) {\n                if (c == 'z') {\n              \
    \      final_message[index] = 'b';\n                } else if (c == 'y') {\n \
    \                   final_message[index] = 'a';\n                } else if (vowels.Contains(c))\
    \ {\n                    final_message[index] = vowels[Array.IndexOf(vowels, c)\
    \ + 2];\n                } else {\n                    final_message[index] =\
    \ c;\n                }\n                if (Char.IsUpper(message[index])) {\n\
    \                    final_message[index] = Char.ToUpper(final_message[index]);\n\
    \                }\n                index++;\n            }\n        }\n     \
    \   return new string(final_message);", "        // TODO: Implement this method.\n\
    \        return message;", "        string ret = \"\";\n        Dictionary<char,\
    \ char> encoder = new Dictionary<char, char> {\n            {'a', 'c'},\n    \
    \        {'e', 'g'},\n            {'i', 'k'},\n            {'o', 'q'},\n     \
    \       {'u', 'w'},\n            {'y', 'a'},\n            {'A', 'C'},\n      \
    \      {'E', 'G'},\n            {'I', 'K'},\n            {'O', 'Q'},\n       \
    \     {'U', 'W'},\n            {'Y', 'A'}\n        };\n        for (int i = 0;\
    \ i < message.Length; i++) {\n            if (encoder.ContainsKey(message[i]))\
    \ {\n                ret += encoder[message[i]];\n            } else {\n     \
    \           ret += message[i];\n            }\n        }\n        return ret;",
  '        return string.Empty;', "        // `a` is 97 and `A` is 65\n        //\
    \ `e` is 101 and `E` is 69\n        // `i` is 105 and `I` is 73\n        // `o`\
    \ is 111 and `O` is 79\n        // `u` is 117 and `U` is 85\n        // numFrom\
    \ = 97 - 65 = 32\n        string encoded = \"\";\n        string vowels = \"aeiou\"\
    ;\n        foreach (char c in message) {\n            if (c >= 'a' && c <= 'z')\
    \ {\n                if (vowels.Contains(c)) {\n                    encoded +=\
    \ (char)((c + 2 - 97) % 26 + 97);\n                } else {\n                \
    \    encoded += (char)(c - 32);\n                }\n            } else if (c >=\
    \ 'A' && c <= 'Z') {\n                if (vowels.Contains((char)(c + 32))) {\n\
    \                    encoded += (char)((c + 2 - 65) % 26 + 65);\n            \
    \    } else {\n                    encoded += (char)(c + 32);\n              \
    \  }\n            } else {\n                encoded += c;\n            }\n   \
    \     }\n        return encoded;", "        // const string vowels = \"aeiou\"\
    ;\n        // const string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n      \
    \  // Dictionary<char, char> cipher = new Dictionary<char, char>();\n        //\
    \ for (int i = 0; i < vowels.Length; i++) {\n        //     cipher[vowels[i]]\
    \ = alphabet[(i + 2) % 26];\n        // }\n        // StringBuilder sb = new StringBuilder();\n\
    \        // foreach (char c in message) {\n        //     if (vowels.Contains(c))\
    \ {\n        //         sb.Append(cipher[c]);\n        //     } else {\n     \
    \   //         sb.Append(char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c));\n\
    \        //     }\n        // }\n        // return sb.ToString();\n        //\
    \ \n        return null;", '        return message;', "        // Code here\n\
    \        throw new NotImplementedException();", "        StringBuilder sb = new\
    \ StringBuilder();\n        foreach (char c in message) {\n            if (c >=\
    \ 'a' && c <= 'z') {\n                sb.Append((char)('A' + (c - 'a')));\n  \
    \          } else if (c >= 'A' && c <= 'Z') {\n                sb.Append((char)('a'\
    \ + (c - 'A')));\n            } else {\n                sb.Append(c);\n      \
    \      }\n        }\n        StringBuilder result = new StringBuilder();\n   \
    \     foreach (char c in sb.ToString()) {\n            if (c == 'a') {\n     \
    \           result.Append('c');\n            } else if (c == 'e') {\n        \
    \        result.Append('g');\n            } else if (c == 'i') {\n           \
    \     result.Append('k');\n            } else if (c == 'o') {\n              \
    \  result.Append('q');\n            } else if (c == 'u') {\n                result.Append('y');\n\
    \            } else {\n                result.Append(c);\n            }\n    \
    \    }\n        return result.ToString();", '        return null;', "        //\
    \ Place your solution here\n        return \"\";", '        return null;', '        throw
    new NotImplementedException();', '        return "TGST";', '        throw new
    NotImplementedException();', "        string [] vowels = {\"a\", \"e\", \"i\"\
    , \"o\", \"u\"};\n        var sb = new StringBuilder();\n        string shift\
    \ = \"\";\n        foreach (char c in message) {\n            if (vowels.Contains(c.ToString()))\
    \ {\n                int val = (int) c;\n                val = val + 2;\n    \
    \            sb.Append((char) val);\n            } else {\n                sb.Append(c);\n\
    \            }\n        }\n        return sb.ToString();", "        StringBuilder\
    \ result = new StringBuilder();\n        Dictionary<char, char> myDictionary =\
    \ new Dictionary<char, char>();\n        myDictionary.Add('a', 'c');\n       \
    \ myDictionary.Add('e', 'g');\n        myDictionary.Add('i', 'k');\n        myDictionary.Add('o',\
    \ 'q');\n        myDictionary.Add('u', 'y');\n        myDictionary.Add('A', 'C');\n\
    \        myDictionary.Add('E', 'G');\n        myDictionary.Add('I', 'K');\n  \
    \      myDictionary.Add('O', 'Q');\n        myDictionary.Add('U', 'Y');\n    \
    \    foreach (char character in message) {\n            if (myDictionary.ContainsKey(character))\
    \ {\n                result.Append(myDictionary[character]);\n            } else\
    \ {\n                result.Append(character);\n            }\n        }\n   \
    \     return result.ToString();", "        \n        string result = \"\";\n \
    \       var dict = new Dictionary<char, char>()\n        {\n            {'a',\
    \ 'c'},\n            {'e', 'g'},\n            {'i', 'k'},\n            {'o', 'q'},\n\
    \            {'u', 'w'},\n            {'A', 'C'},\n            {'E', 'G'},\n \
    \           {'I', 'K'},\n            {'O', 'Q'},\n            {'U', 'W'}\n   \
    \     };\n        for (int i = 0; i < message.Length; i++) {\n            if (dict.ContainsKey(message[i]))\
    \ {\n                result += dict[message[i]];\n            } else {\n     \
    \           result += char.IsUpper(message[i]) ? char.ToLower(message[i]) : char.ToUpper(message[i]);\n\
    \            }\n        }\n        return result;", "        int displace = 2;\n\
    \        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n        string result =\
    \ \"\";\n        for (int i = 0; i < message.Length; i++) {\n            char\
    \ letter = message[i];\n            if (vowels.Contains(letter)) {\n         \
    \       //char vowel = Char.ToLower(letter);\n                int index = Array.IndexOf(vowels,\
    \ letter);\n                char nextLetter = vowels[(index + displace) % vowels.Length];\n\
    \                result += nextLetter;\n            } else {\n               \
    \ result += Char.ToUpper(letter);\n            }\n        }\n        return result;",
  "        // TODO: Implement solution here.\n        return \"\";", "        string\
    \ encoded = \"\";\n        message = message.ToUpper();\n        for (int i =\
    \ 0; i < message.Length; i++) {\n            char c = message[i];\n          \
    \  char encoded_char = ' ';\n            switch (c) {\n                case 'A':\n\
    \                    encoded_char = 'C';\n                    break;\n       \
    \         case 'E':\n                    encoded_char = 'G';\n               \
    \     break;\n                case 'I':\n                    encoded_char = 'K';\n\
    \                    break;\n                case 'O':\n                    encoded_char\
    \ = 'Q';\n                    break;\n                case 'U':\n            \
    \        encoded_char = 'S';\n                    break;\n                default:\n\
    \                    if ((c >= 'A' && c <= 'M') || (c >= 'P' && c <= 'Z')) {\n\
    \                        encoded_char = (char)(c - 2);\n                    }\
    \ else if ((c >= 'N' && c <= 'Z')) {\n                        encoded_char = (char)(c\
    \ + 2);\n                    }\n                    break;\n            }\n  \
    \          encoded += encoded_char;\n        }\n        return encoded;", "  \
    \      // we need an array of letters in the alphabet\n        // we need an array\
    \ of the vowels\n        // we need a way to determine if a letter is a vowel\
    \ or not\n        // we need to swap case\n        // we need to decide if we\
    \ want a lower case or upper case\n        // we need to know if the letter is\
    \ lower case or upper case\n\n        return message;", '        throw new NotImplementedException();',
  '        return message;', "        char[] msgChars = message.ToCharArray();\n \
    \       for (int i = 0; i < msgChars.Length; i++) {\n            if (msgChars[i]\
    \ == ' ') continue;\n\n            int asciiDiff = (int)msgChars[i] - 65;\n  \
    \          int asciiCode = 65 + (asciiDiff + 13) % 26;\n            msgChars[i]\
    \ = (char)asciiCode;\n        }\n        return new string(msgChars);", "    \
    \    StringBuilder sb = new StringBuilder();\n        char[] vowels = new char[]\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        char[] letters = new char[] { 'a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n        for (int i = 0; i < message.Length;\
    \ i++) {\n            char c = message[i];\n            char ch = Char.ToLower(c);\n\
    \            if (ch >= 'a' && ch <= 'z') {\n                if (vowels.Contains(ch))\
    \ {\n                    int index = Array.IndexOf(vowels, ch);\n            \
    \        ch = vowels[(index + 2) % vowels.Length];\n                } else {\n\
    \                    int index = Array.IndexOf(letters, ch);\n               \
    \     ch = letters[(index + 2) % letters.Length];\n                }\n       \
    \     }\n\n            if (Char.IsUpper(c)) {\n                ch = Char.ToUpper(ch);\n\
    \            }\n            sb.Append(ch);\n        }\n        return sb.ToString();",
  "        StringBuilder result = new StringBuilder();\n        foreach (char c in\
    \ message) {\n            if (char.IsUpper(c)) {\n                result.Append(char.ToLower(c));\n\
    \            } else if (char.IsLower(c)) {\n                result.Append(char.ToUpper(c));\n\
    \            } else {\n                result.Append(c);\n            }\n    \
    \    }\n        message = result.ToString();\n        result.Clear();\n      \
    \  char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n        char[] vowelsUp = { 'A',\
    \ 'E', 'I', 'O', 'U' };\n        for (int i = 0; i < message.Length; i++) {\n\
    \            char current = message[i];\n            if (vowels.Contains(current))\
    \ {\n                int vowelPosition = Array.IndexOf(vowels, current);\n   \
    \             result.Append(vowels[(vowelPosition + 2) % 5]);\n            } else\
    \ if (vowelsUp.Contains(current)) {\n                int vowelPosition = Array.IndexOf(vowelsUp,\
    \ current);\n                result.Append(vowelsUp[(vowelPosition + 2) % 5]);\n\
    \            } else {\n                result.Append(current);\n            }\n\
    \        }\n        return result.ToString();", "        char[] alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\".ToCharArray();\n        char[] result = new char[message.Length];\n\
    \        for (int i = 0; i < message.Length; i++) {\n            char letter =\
    \ message[i];\n            char encoded;\n            if (letter == ' ') {\n \
    \               encoded = ' ';\n            } else if (Char.IsUpper(letter)) {\n\
    \                int index = Array.IndexOf(alphabet, Char.ToLower(letter));\n\
    \                int nextIndex = (index + 2) % alphabet.Length;\n            \
    \    encoded = Char.ToUpper(alphabet[nextIndex]);\n            } else {\n    \
    \            int index = Array.IndexOf(alphabet, letter);\n                int\
    \ nextIndex = (index + 2) % alphabet.Length;\n                encoded = alphabet[nextIndex];\n\
    \            }\n            result[i] = encoded;\n        }\n        return new\
    \ string(result);", "        StringBuilder builder = new StringBuilder();\n  \
    \      foreach (char c in message) {\n            char encoded = c;\n        \
    \    encoded = Char.IsLower(c) ? Char.ToUpper(c) : Char.ToLower(c);\n        \
    \    if (c == 'a') {\n                encoded = 'C';\n            } else if (c\
    \ == 'e') {\n                encoded = 'G';\n            } else if (c == 'i')\
    \ {\n                encoded = 'K';\n            } else if (c == 'o') {\n    \
    \            encoded = 'M';\n            } else if (c == 'u') {\n            \
    \    encoded = 'S';\n            }\n            builder.Append(encoded);\n   \
    \     }\n        return builder.ToString();", "        Dictionary<char, char>\
    \ encodeDict = new Dictionary<char, char>();\n        foreach (char c in \"aAeEiIoOuU\"\
    ) {\n            int i = c == 'U' ? 'A' : c + 2;\n            encodeDict.Add(c,\
    \ (char)i);\n        }\n        foreach (char c in \"cCdDfFgGhHjJkKlLmMnNpPqQrRsStTvVwWxXyYzZ\"\
    ) {\n            int i = c == 'Z' ? 'A' : c + 2;\n            encodeDict.Add(c,\
    \ (char)i);\n        }\n        StringBuilder sb = new StringBuilder();\n    \
    \    foreach (char c in message) {\n            if (encodeDict.ContainsKey(c))\
    \ {\n                sb.Append(encodeDict[c]);\n            } else {\n       \
    \         sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        string encoded = \"\";\n        foreach (char ch in message) {\n      \
    \      if (ch == ' ') {\n                encoded += ' ';\n            } else if\
    \ (char.IsLower(ch)) {\n                if (ch == 'x') {\n                   \
    \ encoded += 'a';\n                } else if (ch == 'y') {\n                 \
    \   encoded += 'b';\n                } else if (ch == 'z') {\n               \
    \     encoded += 'c';\n                } else {\n                    encoded +=\
    \ (char)((int)ch + 2);\n                }\n            } else if (char.IsUpper(ch))\
    \ {\n                if (ch == 'X') {\n                    encoded += 'A';\n \
    \               } else if (ch == 'Y') {\n                    encoded += 'B';\n\
    \                } else if (ch == 'Z') {\n                    encoded += 'C';\n\
    \                } else {\n                    encoded += (char)((int)ch + 2);\n\
    \                }\n            }\n        }\n        return encoded;", "    \
    \    var result = new StringBuilder();\n        var lookup = new Dictionary<char,\
    \ char>();\n        var count = 0;\n        var vowels = new char[] { 'a', 'e',\
    \ 'i', 'o', 'u' };\n        for (char letter = 'a'; letter <= 'z'; letter++) {\n\
    \            lookup[letter] = letter;\n            count++;\n            if (vowels.Contains(letter))\
    \ {\n                var dif = letter - 'a';\n                var val = (dif +\
    \ 2) % 26;\n                lookup[letter] = (char)('a' + val);\n            }\n\
    \        }\n        foreach (var letter in message) {\n            var upper =\
    \ char.IsUpper(letter);\n            var lower = char.ToLower(letter);\n     \
    \       var encoded = lookup[lower];\n            result.Append(upper ? char.ToUpper(encoded)\
    \ : encoded);\n        }\n        return result.ToString();", '        throw new
    NotImplementedException();', "        Dictionary<char, char> encodeMap = new Dictionary<char,\
    \ char>() {\n            {'a', 'c'}, {'e', 'g'}, {'i', 'k'}, {'o', 'q'}, {'u',\
    \ 'w'},\n            {'A', 'C'}, {'E', 'G'}, {'I', 'K'}, {'O', 'Q'}, {'U', 'W'}\n\
    \        };\n        Dictionary<char, char> decodeMap = new Dictionary<char, char>()\
    \ {\n            {'c', 'a'}, {'g', 'e'}, {'k', 'i'}, {'q', 'o'}, {'w', 'u'},\n\
    \            {'C', 'A'}, {'G', 'E'}, {'K', 'I'}, {'Q', 'O'}, {'W', 'U'}\n    \
    \    };\n        StringBuilder encoded = new StringBuilder();\n        foreach\
    \ (char letter in message) {\n            if (Char.IsLetter(letter)) {\n     \
    \           encoded.Append(encodeMap.ContainsKey(letter) ? encodeMap[letter] :\
    \ Char.ToUpper(letter));\n            } else {\n                encoded.Append(letter);\n\
    \            }\n        }\n        return encoded.ToString();", "        var charArray\
    \ = message.ToCharArray();\n        string newMessage = \"\";\n        for (int\
    \ i = 0; i < charArray.Length; i++) {\n            if (charArray[i] == 'a') {\n\
    \                newMessage += 'c';\n            } else if (charArray[i] == 'e')\
    \ {\n                newMessage += 'g';\n            } else if (charArray[i] ==\
    \ 'i') {\n                newMessage += 'k';\n            } else if (charArray[i]\
    \ == 'o') {\n                newMessage += 'q';\n            } else if (charArray[i]\
    \ == 'u') {\n                newMessage += 'y';\n            } else if (charArray[i]\
    \ == 'A') {\n                newMessage += 'C';\n            } else if (charArray[i]\
    \ == 'E') {\n                newMessage += 'G';\n            } else if (charArray[i]\
    \ == 'I') {\n                newMessage += 'K';\n            } else if (charArray[i]\
    \ == 'O') {\n                newMessage += 'Q';\n            } else if (charArray[i]\
    \ == 'U') {\n                newMessage += 'Y';\n            } else if (charArray[i]\
    \ == ' ') {\n                newMessage += ' ';\n            } else {\n      \
    \          newMessage += charArray[i];\n            }\n        }\n        return\
    \ newMessage;", "        string encoded = \"\";\n        char[] vowels = { 'a',\
    \ 'e', 'i', 'o', 'u' };\n        foreach (char c in message) {\n            if\
    \ (vowels.Contains(char.ToLower(c))) {\n                encoded += (char)(c +\
    \ 2);\n            } else {\n                encoded += c;\n            }\n  \
    \      }\n        return encoded;", "        string output = \"\";\n        string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string reverse = \"zyxwvutsrqponmlkjihgfedcba\"\
    ;\n        Dictionary<char, char> shift = new Dictionary<char, char>();\n    \
    \    foreach (char c in alphabet) {\n            shift.Add(c, reverse[alphabet.IndexOf(c)\
    \ + 2]);\n        }\n        for (int i = 0; i < message.Length; i++) {\n    \
    \        if (alphabet.Contains(message[i].ToString().ToLower())) {\n         \
    \       if (alphabet.Contains(message[i].ToString().ToLower())) {\n          \
    \          output += message[i].ToString().ToUpper();\n                } else\
    \ {\n                    output += message[i].ToString().ToLower();\n        \
    \        }\n            } else {\n                output += message[i];\n    \
    \        }\n        }\n        output = string.Join(\"\", output.Select(c => shift.ContainsKey(c)\
    \ ? shift[c] : c));\n        return output;", "        // TODO: Add your code\
    \ here\n        return null;", '        return "";', "        // Create a dictionary\
    \ of vowels and the vowel that comes \n        // 2 places ahead of it in the\
    \ alphabet\n        var VowelDict = new Dictionary<char, char>();\n        VowelDict.Add('a',\
    \ 'c');\n        VowelDict.Add('e', 'g');\n        VowelDict.Add('i', 'k');\n\
    \        VowelDict.Add('o', 'q');\n        VowelDict.Add('u', 'y');\n        VowelDict.Add('A',\
    \ 'C');\n        VowelDict.Add('E', 'G');\n        VowelDict.Add('I', 'K');\n\
    \        VowelDict.Add('O', 'Q');\n        VowelDict.Add('U', 'Y');\n        //\
    \ Convert message to char array\n        char[] messageArray = message.ToCharArray();\n\
    \        // Iterate through the char array and swap case and \n        // replace\
    \ vowels with the vowel that comes 2 places ahead\n        for (int i = 0; i <\
    \ messageArray.Length; i++) {\n            char letter = messageArray[i];\n  \
    \          if (char.IsUpper(letter)) {\n                messageArray[i] = char.ToLower(letter);\n\
    \            } else if (char.IsLower(letter)) {\n                messageArray[i]\
    \ = char.ToUpper(letter);\n            }\n            if (VowelDict.ContainsKey(letter))\
    \ {\n                messageArray[i] = VowelDict[letter];\n            }\n   \
    \     }\n        return new string(messageArray);", "        string result = string.Empty;\n\
    \        string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        int i;\n \
    \       foreach (char c in message) {\n            i = alphabet.IndexOf(c);\n\
    \            if (i == -1) {\n                i = alphabet.IndexOf(c.ToString().ToLower());\n\
    \                result += c.ToString().ToUpper();\n            } else {\n   \
    \             result += c.ToString().ToLower();\n            }\n            if\
    \ (i != -1) {\n                if (i > 21) {\n                    result = result.Substring(0,\
    \ result.Length - 1) + alphabet[i - 21];\n                } else {\n         \
    \           result = result.Substring(0, result.Length - 1) + alphabet[i + 5];\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   // Check if message is just one character\n        if (message.Length == 1)\
    \ {\n            // Check if message is a letter\n            if (Char.IsLetter(message[0]))\
    \ {\n                // Check if message is lowercase\n                if (Char.IsLower(message[0]))\
    \ {\n                    // Convert to uppercase\n                    message\
    \ = message.ToUpper();\n                } else {\n                    // Convert\
    \ to lowercase\n                    message = message.ToLower();\n           \
    \     }\n            }\n            // Return encoded message\n            return\
    \ message;\n        }\n        // Build string from message\n        StringBuilder\
    \ encoded = new StringBuilder();\n        // Check each character in message\n\
    \        for (int i = 0; i < message.Length; i++) {\n            // Check if character\
    \ is letter\n            if (Char.IsLetter(message[i])) {\n                //\
    \ Check if character is lowercase\n                if (Char.IsLower(message[i]))\
    \ {\n                    // Convert to uppercase\n                    encoded.Append(message[i].ToString().ToUpper());\n\
    \                } else {\n                    // Convert to lowercase\n     \
    \               encoded.Append(message[i].ToString().ToLower());\n           \
    \     }\n            } else {\n                // Add character to encoded string\n\
    \                encoded.Append(message[i]);\n            }\n        }\n     \
    \   // Convert to string\n        string encodedString = encoded.ToString();\n\
    \        // Build string from encoded string\n        StringBuilder stringBuilder\
    \ = new StringBuilder();\n        // Check each character in encoded string\n\
    \        for (int i = 0; i < encodedString.Length; i++) {\n            // Get\
    \ the character two places ahead\n            char twoAhead = (char)(encodedString[i]\
    \ + 2);\n            // Check if vowel\n            if (encodedString[i] == 'a'\
    \ || encodedString[i] == 'e' || encodedString[i] == 'i' || encodedString[i] ==\
    \ 'o' || encodedString[i] == 'u') {\n                // Add character to string\
    \ builder\n                stringBuilder.Append(twoAhead);\n            } else\
    \ {\n                // Add character to string builder\n                stringBuilder.Append(encodedString[i]);\n\
    \            }\n        }", "        var encoded = new StringBuilder();\n    \
    \    var vowelMap = new Dictionary<char, char> {\n            {'a', 'c'},\n  \
    \          {'e', 'g'},\n            {'i', 'k'},\n            {'o', 'q'},\n   \
    \         {'u', 'w'},\n            {'y', 'a'}\n        };\n        var alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n        foreach (var c in message) {\n  \
    \          if (vowelMap.ContainsKey(c)) {\n                encoded.Append(vowelMap[c]);\n\
    \            } else if (alphabet.Contains(c)) {\n                var newChar =\
    \ char.IsUpper(c)\n                    ? char.ToUpper(alphabet[alphabet.IndexOf(char.ToLower(c))\
    \ + 2])\n                    : alphabet[alphabet.IndexOf(c) + 2];\n          \
    \      encoded.Append(newChar);\n            } else {\n                encoded.Append(c);\n\
    \            }\n        }\n        return encoded.ToString();", "        string\
    \ encoded = \"\";\n        // Encode in place\n        for (int i = 0; i < message.Length;\
    \ i++) {\n            char character = message[i];\n            if (Char.IsLetter(character))\
    \ {\n                encoded += Char.IsUpper(character) ? Char.ToLower(character)\
    \ : Char.ToUpper(character);\n            } else {\n                encoded +=\
    \ character;\n            }\n        }\n        return encoded;", "        //\
    \ You'll need to write your own tests\n        // Or, use TestSwapper\n      \
    \  return null;", "        StringBuilder sb = new StringBuilder();\n        foreach\
    \ (char c in message) {\n            if ('a' <= c && c <= 'z') {\n           \
    \     sb.Append((char)(c - 'a' + 'A'));\n            } else if ('A' <= c && c\
    \ <= 'Z') {\n                sb.Append((char)(c - 'A' + 'a'));\n            }\
    \ else {\n                sb.Append(c);\n            }\n        }\n        return\
    \ sb.ToString();", '        return null;', "        int spaceCounter = 0;\n  \
    \      string newMessage = \"\";\n        foreach (char c in message) {\n    \
    \        if(c == ' ') {\n                spaceCounter++;\n                newMessage\
    \ += c;\n            }\n            else {\n                newMessage += GetEncoded(c);\n\
    \            }\n        }\n        return newMessage;", "        string result\
    \ = \"\";\n        for (int i = 0; i < message.Length; i++) {\n            char\
    \ current = message[i];\n            if (char.IsUpper(current)) {\n          \
    \      current = char.ToLower(current);\n            } else {\n              \
    \  current = char.ToUpper(current);\n            }\n            switch (current)\
    \ {\n                case 'a':\n                    result += 'c';\n         \
    \           break;\n                case 'e':\n                    result += 'g';\n\
    \                    break;\n                case 'i':\n                    result\
    \ += 'k';\n                    break;\n                case 'o':\n           \
    \         result += 'q';\n                    break;\n                case 'u':\n\
    \                    result += 'y';\n                    break;\n            \
    \    default:\n                    result += current;\n                    break;\n\
    \            }\n        }\n        return result;", "        string newMessage\
    \ = \"\";\n        char letter;\n        char nextLetter;\n        string vowels\
    \ = \"aeiou\";\n        string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  \
    \      for (int i = 0; i < message.Length; i++) {\n            letter = message[i];\n\
    \            if (Char.IsUpper(letter)) {\n                letter = Char.ToLower(letter);\n\
    \            }\n            else if (Char.IsLower(letter)) {\n               \
    \ letter = Char.ToUpper(letter);\n            }\n            if (vowels.Contains(letter))\
    \ {\n                nextLetter = alphabet[alphabet.IndexOf(letter) + 2];\n  \
    \              newMessage += nextLetter;\n            }\n            else {\n\
    \                newMessage += letter;\n            }\n        }\n        return\
    \ newMessage;", "        char[] alpha = \"abcdefghijklmnopqrstuvwxyz\".ToCharArray();\n\
    \        char[] alphaup = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".ToCharArray();\n    \
    \    char[] vowels = \"aeiou\".ToCharArray();\n        StringBuilder sb = new\
    \ StringBuilder();\n        foreach (char c in message) {\n            if (c ==\
    \ ' ') {\n                sb.Append(c);\n                continue;\n         \
    \   }\n            int dex = Array.IndexOf(alpha, c);\n            if (dex > -1)\
    \ {\n                if (dex > 22) {\n                    sb.Append(alpha[dex\
    \ - 3]);\n                } else {\n                    sb.Append(alpha[dex +\
    \ 3]);\n                }\n            } else {\n                int dexup = Array.IndexOf(alphaup,\
    \ c);\n                if (dexup > 22) {\n                    sb.Append(alphaup[dexup\
    \ - 3]);\n                } else {\n                    sb.Append(alphaup[dexup\
    \ + 3]);\n                }\n            }\n        }\n        return sb.ToString();",
  "        if (message == null) {\n            return null;\n        }\n        if\
    \ (message.Length == 0) {\n            return \"\";\n        }\n        char[]\
    \ result = new char[message.Length];\n        for (int i = 0; i < message.Length;\
    \ i++) {\n            char value = message[i];\n            char newValue = value;\n\
    \            if (value >= 'a' && value <= 'z') {\n                newValue = (char)(value\
    \ - 'a' + 'A');\n            } else if (value >= 'A' && value <= 'Z') {\n    \
    \            newValue = (char)(value - 'A' + 'a');\n            } else if (value\
    \ == 'a' || value == 'e' || value == 'i' ||\n                       value == 'o'\
    \ || value == 'u') {\n                newValue = (char)(value + 2);\n        \
    \    } else if (value == 'A' || value == 'E' || value == 'I' ||\n            \
    \           value == 'O' || value == 'U') {\n                newValue = (char)(value\
    \ + 2);\n            }\n            result[i] = newValue;\n        }\n       \
    \ return new string(result);", '        return "";', "        string vowels =\
    \ \"aAeEiIoOuU\";\n        char[] res = new char[message.Length];\n        for\
    \ (int i = 0; i < message.Length; i++) {\n            if (vowels.Contains(message[i]))\
    \ {\n                res[i] = (char)(message[i] + 2);\n            } else {\n\
    \                res[i] = (char)(message[i] ^ 32);\n            }\n        }\n\
    \        return new string(res);", "        if (message == null) {\n         \
    \   return null;\n        }\n        StringBuilder ret = new StringBuilder();\n\
    \        foreach (char c in message) {\n            char e = c;\n            if\
    \ (c >= 'a' && c <= 'z') {\n                e = (char)(c - 'a' + 'A');\n     \
    \       } else if (c >= 'A' && c <= 'Z') {\n                e = (char)(c - 'A'\
    \ + 'a');\n            }\n            if (e == 'a') {\n                e = 'c';\n\
    \            } else if (e == 'e') {\n                e = 'g';\n            } else\
    \ if (e == 'i') {\n                e = 'k';\n            } else if (e == 'o')\
    \ {\n                e = 'q';\n            } else if (e == 'u') {\n          \
    \      e = 'y';\n            } else if (e == 'A') {\n                e = 'C';\n\
    \            } else if (e == 'E') {\n                e = 'G';\n            } else\
    \ if (e == 'I') {\n                e = 'K';\n            } else if (e == 'O')\
    \ {\n                e = 'Q';\n            } else if (e == 'U') {\n          \
    \      e = 'Y';\n            }\n            ret.Append(e);\n        }\n      \
    \  return ret.ToString();", '        throw new NotImplementedException();', " \
    \       //Code goes here\n        return \"\";"]
stop_tokens:
- "\n    }\n"
