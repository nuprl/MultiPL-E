name: HumanEval_141_file_name_check
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function which takes a string representing a file's\
  \ name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
  \ otherwise.\n    // A file's name is considered to be valid if and only if all\
  \ the following conditions \n    // are met:\n    // - There should not be more\
  \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
  \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
  \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
  \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
  \    // Examples:\n    // >>> FileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
  )\n    // >>> FileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    public static\
  \ string FileNameCheck(string file_name) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
  example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
  MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\"\
  )));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
  /this_is_valid.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"\
  Yes\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
  \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
  Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
  )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n\
  \    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
  final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_f4indsartal132.\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\"\
  )));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
completions: ["        if(file_name.Length == 0) {\n            return \"No\";\n \
    \       }\n        string[] dll = {\"txt\", \"exe\", \"dll\"};\n        bool isDot\
    \ = false;\n        int countOfDot = 0;\n        int countOfDigits = 0;\n    \
    \    int countOfDll = 0;\n        string subBeforeDot = \"\";\n        string\
    \ subAfterDot = \"\";\n        for(int i = 0; i < file_name.Length; i++) {\n \
    \           if(file_name[i] == '.') {\n                isDot = true;\n       \
    \         countOfDot++;\n            }\n            if(isDot) {\n            \
    \    subAfterDot += file_name[i];\n            } else {\n                subBeforeDot\
    \ += file_name[i];\n            }\n            if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n                countOfDigits++;\n            }\n        }\n    \
    \    if(countOfDot != 1) {\n            return \"No\";\n        }\n        if(countOfDigits\
    \ > 3) {\n            return \"No\";\n        }\n        if(countOfDot > 1) {\n\
    \            return \"No\";\n        }\n        if(subBeforeDot.Length == 0) {\n\
    \            return \"No\";\n        }\n        if(!(subBeforeDot[0] >= 'a' &&\
    \ subBeforeDot[0] <= 'z') && !(subBeforeDot[0] >= 'A' && subBeforeDot[0] <= 'Z'))\
    \ {\n            return \"No\";\n        }\n        for(int i = 0; i < dll.Length;\
    \ i++) {\n            if(subAfterDot == \".\" + dll[i]) {\n                countOfDll++;\n\
    \            }\n        }\n        if(countOfDll != 1) {\n            return \"\
    No\";\n        }\n        return \"Yes\";", "        if (System.Text.RegularExpressions.Regex.IsMatch(file_name,\
    \ @\"[0-9]{4,}\")) {\n            return \"No\";\n        }\n        if (!file_name.Contains(\"\
    .\")) {\n            return \"No\";\n        }\n        string[] parts = file_name.Split('.');\n\
    \        if (parts.Length != 2) {\n            return \"No\";\n        }\n   \
    \     if (!parts[0].Any(Char.IsLetter)) {\n            return \"No\";\n      \
    \  }\n        if (parts[1] != \"txt\" && parts[1] != \"exe\" && parts[1] != \"\
    dll\") {\n            return \"No\";\n        }\n        return \"Yes\";", " \
    \       var splitted = file_name.Split('.');\n        string name = splitted[0];\n\
    \        string extension = splitted[1];\n        if (name.Length == 0) {\n  \
    \          return \"No\";\n        }\n        int count = 0;\n        foreach\
    \ (char c in name) {\n            if (c >= '0' && c <= '9') {\n              \
    \  count++;\n            }\n        }\n        if (count > 3) {\n            return\
    \ \"No\";\n        }\n        if (!(name[0] >= 'a' && name[0] <= 'z') && !(name[0]\
    \ >= 'A' && name[0] <= 'Z')) {\n            return \"No\";\n        }\n      \
    \  if (!(extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    )) {\n            return \"No\";\n        }\n        return \"Yes\";", "     \
    \   if (file_name.Length <= 3) return \"No\";\n        var count = 0;\n      \
    \  var split = file_name.Split('.');\n        if (split.Length != 2) return \"\
    No\";\n        if (Char.IsDigit(split[0][0])) return \"No\";\n        if (split[1]\
    \ != \"txt\" && split[1] != \"exe\" && split[1] != \"dll\") return \"No\";\n \
    \       foreach (var c in split[0]) {\n            if (Char.IsDigit(c)) count++;\n\
    \        }\n        if (count > 3) return \"No\";\n        return \"Yes\";", " \
    \       // Check if there are more than three digits\n        if (file_name.IndexOfAny(\"\
    0123456789\".ToCharArray()) > -1) {\n            int count = 0;\n            for\
    \ (int i = 0; i < file_name.Length; i++) {\n                if (file_name[i] >=\
    \ '0' && file_name[i] <= '9') {\n                    count++;\n              \
    \  }\n            }\n            if (count > 3) {\n                return \"No\"\
    ;\n            }\n        }\n        string ext = file_name.Substring(file_name.LastIndexOf('.')\
    \ + 1, 3);\n        if (!(ext == \"txt\" || ext == \"exe\" || ext == \"dll\"))\
    \ {\n            return \"No\";\n        }\n        if (file_name.IndexOfAny(\"\
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".ToCharArray()) != 0) {\n\
    \            return \"No\";\n        }\n        return \"Yes\";", "        int\
    \ idx = file_name.IndexOf('.');\n        if (idx == -1) {\n            return\
    \ \"No\";\n        }\n        if (file_name.Length - idx - 1 > 3) {\n        \
    \    return \"No\";\n        }\n        if (file_name.Substring(idx + 1).ToLower()\
    \ != \"txt\" &&\n            file_name.Substring(idx + 1).ToLower() != \"exe\"\
    \ &&\n            file_name.Substring(idx + 1).ToLower() != \"dll\") {\n     \
    \       return \"No\";\n        }\n        int digits = 0;\n        foreach (char\
    \ c in file_name) {\n            if (c >= '0' && c <= '9') {\n               \
    \ digits++;\n            }\n        }\n        if (digits > 3) {\n           \
    \ return \"No\";\n        }\n        for (int i = 0; i < idx; i++) {\n       \
    \     if (file_name[i] >= '0' && file_name[i] <= '9') {\n                return\
    \ \"No\";\n            }\n        }\n        return \"Yes\";", "        if (file_name.Length\
    \ == 0) {\n            return \"No\";\n        }\n        int n_digits = 0;\n\
    \        int n_dots = 0;\n        int i = 0;\n        while (i < file_name.Length)\
    \ {\n            if (file_name[i] == '.') {\n                n_dots += 1;\n  \
    \          } else if (file_name[i] >= '0' && file_name[i] <= '9') {\n        \
    \        n_digits += 1;\n            }\n            i += 1;\n        }\n     \
    \   if (n_dots != 1 || n_digits > 3) {\n            return \"No\";\n        }\n\
    \        int dot_index = file_name.IndexOf('.');\n        string ext = file_name.Substring(dot_index\
    \ + 1);\n        if (ext == \"txt\" || ext == \"exe\" || ext == \"dll\") {\n \
    \           return \"Yes\";\n        }\n        return \"No\";", "        // your\
    \ code goes here\n        if (file_name.Length > 1) {\n            var parts =\
    \ file_name.Split('.');\n            // we expect exactly one dot in the file\
    \ name\n            if (parts.Length == 2) {\n                // we expect exactly\
    \ one letter (can be upper or lower case) \n                // followed by zero\
    \ or more letters and numbers \n                // followed by the file extension\
    \ (only lower case)\n                var first_part = parts[0];\n            \
    \    var last_part = parts[1];\n                var letters = first_part.Where(c\
    \ => char.IsLetter(c));\n                var numbers = first_part.Where(c => char.IsNumber(c));\n\
    \                var digits = first_part.Where(c => char.IsDigit(c));\n      \
    \          var file_extension = last_part.ToLower();\n                if (letters.Count()\
    \ == 1\n                    && (file_extension == \"txt\"\n                  \
    \      || file_extension == \"exe\"\n                        || file_extension\
    \ == \"dll\")\n                    && digits.Count() <= 3) {\n               \
    \     return \"Yes\";\n                }\n            }\n        }\n        return\
    \ \"No\";", "        // Type your solution here\n        if(file_name.Count(f\
    \ => char.IsDigit(f)) > 3) return \"No\";\n        var res = file_name.Split('.');\n\
    \        if(res.Length != 2) return \"No\";\n        if(res[0].Length == 0 ||\
    \ !char.IsLetter(res[0][0])) return \"No\";\n        if(res[1] != \"txt\" && res[1]\
    \ != \"exe\" && res[1] != \"dll\") return \"No\";\n        return \"Yes\";", '        return
    "No";', "        string[] digits = file_name.Split('.');\n        int count =\
    \ 0;\n        for (int i = 0; i < digits[0].Length; i++) {\n            if (digits[0][i]\
    \ >= '0' && digits[0][i] <= '9') {\n                count++;\n            }\n\
    \        }\n        if (count > 3) {\n            return \"No\";\n        }\n\
    \        if (digits[0].Length > 0 && ((digits[0][0] >= 'a' && digits[0][0] <=\
    \ 'z') || (digits[0][0] >= 'A' && digits[0][0] <= 'Z'))) {\n            if (digits[1]\
    \ == \"txt\" || digits[1] == \"exe\" || digits[1] == \"dll\") {\n            \
    \    return \"Yes\";\n            }\n        }\n        return \"No\";", "   \
    \     // Your code here ...\n        return \"No\";", "        // Implement this\
    \ function\n        return \"\";", "        bool InvalidName = false;\n      \
    \  bool ValidName = false;\n        //checks if there are more than 3 digits\n\
    \        var containDigits = file_name.Where(c => char.IsDigit(c)).Take(4).Count();\n\
    \        //Checks if it contains one dot\n        var containDot = file_name.Split('.').Count();\n\
    \        //check if the left of the dot is not empty and contains only letters\n\
    \        var containLetters = Regex.IsMatch(file_name.Split('.')[0], @\"^[a-zA-Z]+$\"\
    );\n        //check if the right side contains only one of the 3 substrings\n\
    \        var left = file_name.Split('.')[1];\n        var containValid = false;\n\
    \        if (left == \"txt\" || left == \"exe\" || left == \"dll\")\n        {\n\
    \            containValid = true;\n        }\n        if (containDot == 2 && containDigits\
    \ < 4 && containLetters && containValid)\n        {\n            ValidName = true;\n\
    \        }\n        else\n        {\n            InvalidName = true;\n       \
    \ }\n        if (ValidName)\n        {\n            return \"Yes\";\n        }\n\
    \        else\n        {\n            return \"No\";\n        }", "        var\
    \ seg = file_name.Split('.');\n        if (seg.Length != 2) {\n            return\
    \ \"No\";\n        }\n        if (seg[0].Count(char.IsDigit) > 3) {\n        \
    \    return \"No\";\n        }\n        var allowed_extensions = new string[]\
    \ {\"txt\", \"exe\", \"dll\"};\n        if (!allowed_extensions.Contains(seg[1]))\
    \ {\n            return \"No\";\n        }\n        if (!char.IsLetter(seg[0][0]))\
    \ {\n            return \"No\";\n        }\n        return \"Yes\";", "      \
    \  var digits = 0;\n        var dot = 0;\n        foreach (var ch in file_name)\
    \ {\n            if (ch >= '0' && ch <= '9') {\n                digits++;\n  \
    \          }\n            if (ch == '.') {\n                dot++;\n         \
    \   }\n        }\n        if (digits > 3 || dot != 1) {\n            return \"\
    No\";\n        }\n        var parts = file_name.Split('.');\n        if (parts.Length\
    \ != 2) {\n            return \"No\";\n        }\n        if (parts[0].Length\
    \ == 0 || parts[0][0] < 'A' || parts[0][0] > 'z') {\n            return \"No\"\
    ;\n        }\n        if (parts[1] != \"txt\" && parts[1] != \"exe\" && parts[1]\
    \ != \"dll\") {\n            return \"No\";\n        }\n        return \"Yes\"\
    ;", "        // Write your code here\n        string[] validSubstrings = new string[]\
    \ {\"txt\", \"exe\", \"dll\"};\n        int count = 0;\n        bool hasDot =\
    \ false;\n        string fileName = file_name.Substring(0, file_name.LastIndexOf('.'));\n\
    \        string extension = file_name.Substring(file_name.LastIndexOf('.') + 1);\n\
    \        foreach (char c in fileName) {\n            if (!Char.IsLetter(c)) {\n\
    \                if (Char.IsDigit(c)) {\n                    count++;\n      \
    \          } else {\n                    return \"No\";\n                }\n \
    \           }\n        }\n        if (count > 3) {\n            return \"No\"\
    ;\n        }\n        if (fileName.Length == 0) {\n            return \"No\";\n\
    \        }\n        if (!validSubstrings.Contains(extension)) {\n            return\
    \ \"No\";\n        }\n        return \"Yes\";", "        // Implement your solution\
    \ here\n        throw new NotImplementedException();", '        return "";', '        throw
    new NotImplementedException();', "        // Check if file_name contains more\
    \ than three digits\n        string[] file_name_arr = file_name.Split('.');\n\
    \        int dot_count = 0;\n        int digit_count = 0;\n        for (int i\
    \ = 0; i < file_name.Length; i++) {\n            if (file_name[i] == '.') {\n\
    \                dot_count++;\n            }\n            if (file_name[i] ==\
    \ '0' || file_name[i] == '1' || file_name[i] == '2' || file_name[i] == '3' ||\
    \ file_name[i] == '4' || file_name[i] == '5' || file_name[i] == '6' || file_name[i]\
    \ == '7' || file_name[i] == '8' || file_name[i] == '9') {\n                digit_count++;\n\
    \            }\n        }\n        if (dot_count != 1 || digit_count > 3) {\n\
    \            return \"No\";\n        }\n        if (file_name_arr[0] == \"\" ||\
    \ (file_name_arr[0][0] != 'a' && file_name_arr[0][0] != 'b' && file_name_arr[0][0]\
    \ != 'c' && file_name_arr[0][0] != 'd' && file_name_arr[0][0] != 'e' && file_name_arr[0][0]\
    \ != 'f' && file_name_arr[0][0] != 'g' && file_name_arr[0][0] != 'h' && file_name_arr[0][0]\
    \ != 'i' && file_name_arr[0][0] != 'j' && file_name_arr[0][0] != 'k' && file_name_arr[0][0]\
    \ != 'l' && file_name_arr[0][0] != 'm' && file_name_arr[0][0] != 'n' && file_name_arr[0][0]\
    \ != 'o' && file_name_arr[0][0] != 'p' && file_name_arr[0][0] !=", "        string[]\
    \ dotIndex = file_name.Split('.');\n        string beforeDot = dotIndex[0];\n\
    \        string afterDot = dotIndex[1];\n        int countDigits = beforeDot.Count(Char.IsDigit);\n\
    \        bool isCorrectDotNumber = beforeDot.Length > 0 && \n            beforeDot.Any(char.IsLetter)\
    \ && \n            (afterDot == \"txt\" || afterDot == \"exe\" || afterDot ==\
    \ \"dll\") && \n            countDigits <= 3;\n        return isCorrectDotNumber\
    \ ? \"Yes\" : \"No\";", "        var dot_count = file_name.Count(c => c == '.');\n\
    \        var num_count = file_name.Count(c => '0' <= c && c <= '9');\n       \
    \ if (dot_count == 1 && num_count <= 3) {\n            var pos = file_name.IndexOf('.');\n\
    \            if (pos > 0) {\n                var prefix = file_name.Substring(0,\
    \ pos);\n                var suffix = file_name.Substring(pos + 1);\n        \
    \        if (new [] {\"txt\", \"exe\", \"dll\"}.Contains(suffix)) {\n        \
    \            return \"Yes\";\n                }\n            }\n        }\n  \
    \      return \"No\";", '        return "";', '        return "Yes";', '        return
    "";', '        throw new NotImplementedException();', "        int digits = 0;\n\
    \        int dots = 0;\n        bool beginWithLetter = false;\n        string\
    \ ext = \"\";\n        string result = \"Yes\";\n        for (int i = 0; i < file_name.Length;\
    \ i++) {\n            if (file_name[i] == '.') {\n                dots++;\n  \
    \              ext = file_name.Substring(i + 1);\n            }\n            if\
    \ (dots > 1) {\n                result = \"No\";\n                break;\n   \
    \         }\n            if (char.IsLetter(file_name[i])) {\n                beginWithLetter\
    \ = true;\n            }\n            if (char.IsDigit(file_name[i])) {\n    \
    \            digits++;\n            }\n            if (digits > 3) {\n       \
    \         result = \"No\";\n                break;\n            }\n        }\n\
    \        if (dots == 0 || !beginWithLetter || (ext != \"txt\" && ext != \"exe\"\
    \ && ext != \"dll\")) {\n            result = \"No\";\n        }\n        return\
    \ result;", "        var name = file_name.Split('.');\n        if (name.Length\
    \ != 2) {\n            return \"No\";\n        }\n        var ext = name[1];\n\
    \        if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\") {\n         \
    \   return \"No\";\n        }\n        var digitCount = 0;\n        foreach (var\
    \ c in name[0]) {\n            if (c == '.') {\n                return \"No\"\
    ;\n            }\n            if (c >= '0' && c <= '9') {\n                digitCount++;\n\
    \            }\n        }\n        if (digitCount > 3) {\n            return \"\
    No\";\n        }\n        return \"Yes\";", "        // Enter your code here\n\
    \        return \"\";", "        // Make sure there is 1 dot, and it is not the\
    \ first or last character in the string\n        if(file_name.Length<3 || file_name.Count(x=>x=='.')!=1\
    \ || file_name[0]=='.' || file_name[file_name.Length-1]=='.') {\n            return\
    \ \"No\";\n        }\n        string[] parts = file_name.Split('.');\n       \
    \ if(parts.Length!=2) {\n            return \"No\";\n        }\n        // Make\
    \ sure the first part of the string is valid (no more than 3 digits, starts with\
    \ a letter)\n        if(parts[0].Count(x=>x>='0' && x<='9')>3 || parts[0].Length<1\
    \ || !(parts[0][0]>='a' && parts[0][0]<='z' || parts[0][0]>='A' && parts[0][0]<='Z'))\
    \ {\n            return \"No\";\n        }\n        // Make sure the second part\
    \ of the string is valid (one of 'txt', 'exe', 'dll')\n        if(parts[1]!=\"\
    txt\" && parts[1]!=\"exe\" && parts[1]!=\"dll\") {\n            return \"No\"\
    ;\n        }\n        return \"Yes\";", "        if (file_name.Count(x => x ==\
    \ '.') != 1) {\n            return \"No\";\n        }\n        string[] parts\
    \ = file_name.Split('.');\n        string first = parts[0];\n        string second\
    \ = parts[1];\n        if (first.Count(x => char.IsDigit(x)) > 3) {\n        \
    \    return \"No\";\n        }\n        if (!char.IsLetter(first[0])) {\n    \
    \        return \"No\";\n        }\n        if (second != \"txt\" && second !=\
    \ \"exe\" && second != \"dll\") {\n            return \"No\";\n        }\n   \
    \     return \"Yes\";", "        const int valid_name_length = 4;\n        string[]\
    \ file_name_parts = file_name.Split('.');\n        int file_name_parts_length\
    \ = file_name_parts.Length;\n        if (file_name_parts_length != 2) {\n    \
    \        return \"No\";\n        }\n        int digits_count = 0;\n        for\
    \ (int i = 0; i < file_name_parts[0].Length; i++) {\n            if (char.IsDigit(file_name_parts[0][i]))\
    \ {\n                digits_count++;\n            }\n        }\n        if (digits_count\
    \ > 3) {\n            return \"No\";\n        }\n        if (file_name_parts[0].Length\
    \ < valid_name_length) {\n            return \"No\";\n        }\n        if (!char.IsLetter(file_name_parts[0][0]))\
    \ {\n            return \"No\";\n        }\n        bool is_valid_extension =\
    \ false;\n        string[] valid_extensions = new string[] {\"txt\", \"exe\",\
    \ \"dll\"};\n        for (int i = 0; i < valid_extensions.Length; i++) {\n   \
    \         if (file_name_parts[1] == valid_extensions[i]) {\n                is_valid_extension\
    \ = true;\n            }\n        }\n        if (!is_valid_extension) {\n    \
    \        return \"No\";\n        }\n        return \"Yes\";", '        throw new
    NotImplementedException();', '        throw new NotImplementedException();', '        //
    Write your code here.', "        // Your code goes here.\n        return \"\";",
  '        // Write your code here.', "        // Your code goes here\n        //\
    \ If you need to allocate some extra space\n        // You can use a new list\
    \ to store some temporary data\n        // Example:\n        // List<int> list\
    \ = new List<int>();\n        // list.Add(1);\n        // list.Add(2);\n     \
    \   // list.Add(3);\n        // If you want to return multiple values, use Lists\n\
    \        // Example:\n        // List<int> res = new List<int>();\n        //\
    \ res.Add(list.Count);\n        // res.Add(list.Sum());\n        // res.Add(list.Min());\n\
    \        // res.Add(list.Max());\n        // return res;\n        // The return\
    \ type is a list of ints\n        // return new List<int> {0, 1, 2, 3};\n    \
    \    // The return type is a list of strings\n        // return new List<string>\
    \ {\"Hello\", \"World\"};\n        // The return type is a list of lists of ints\n\
    \        // return new List<List<int>> {new List<int> {1, 2, 3}, new List<int>\
    \ {4, 5, 6}};\n        // The return type is a list of lists of strings\n    \
    \    // return new List<List<string>> {new List<string> {\"H\", \"E\", \"L\",\
    \ \"L\", \"O\"}, new List<string> {\"W\", \"O\", \"R\", \"L\", \"D\"}};\n    \
    \    // The return type is a list of lists of lists of ints\n        // return\
    \ new List<List<List<int>>> {new List<List<int>> {new List<int> {1, 2, 3}, new\
    \ List<int> {4, 5, 6}}, new List<List<int>> {new List<int> {7, 8, 9}, new List<int>\
    \ {10, 11, 12}}};\n        // The return type is a list of lists of lists of strings\n\
    \        // return new List<List<List<string>>> {new List<List<string>> {new List<string>\
    \ {\"H\", \"E\", \"L\", \"L\", \"O\"}, new List<string> {\"W\", \"O\", \"R\",\
    \ \"L\", \"D\"}}, new", "        string[] parts = file_name.Split('.');\n    \
    \    if (parts.Length != 2) {\n            return \"No\";\n        }\n       \
    \ if (parts[0].Length == 0 || parts[1].Length == 0) {\n            return \"No\"\
    ;\n        }\n        if (parts[0].Count(c => c >= '0' && c <= '9') > 3) {\n \
    \           return \"No\";\n        }\n        if (parts[0][0] < 'a' || parts[0][0]\
    \ > 'z') {\n            return \"No\";\n        }\n        if (parts[1] != \"\
    txt\" && parts[1] != \"exe\" && parts[1] != \"dll\") {\n            return \"\
    No\";\n        }\n        return \"Yes\";", "        string result = \"Yes\";\n\
    \        if (file_name.Count(c => Char.IsDigit(c)) > 3) result = \"No\";\n   \
    \     string[] fileNameParts = file_name.Split('.');\n        if (fileNameParts.Length\
    \ != 2) result = \"No\";\n        if (fileNameParts[0].Length < 1 || !Char.IsLetter(fileNameParts[0][0]))\
    \ result = \"No\";\n        if (fileNameParts[1] != \"txt\" && fileNameParts[1]\
    \ != \"exe\" && fileNameParts[1] != \"dll\") result = \"No\";\n        return\
    \ result;", "        // Write your code here\n        if (file_name.Count(x =>\
    \ x == '.') != 1) return \"No\";\n        var parts = file_name.Split('.');\n\
    \        var ext = parts[1];\n        if (ext != \"txt\" && ext != \"exe\" &&\
    \ ext != \"dll\") return \"No\";\n        if (parts[0].Count(char.IsDigit) > 3)\
    \ return \"No\";\n        if (char.IsDigit(parts[0][0])) return \"No\";\n    \
    \    return \"Yes\";", "        // TODO: implement the function\n        return\
    \ \"No\";", '        return "";', "        int dot_index = file_name.IndexOf('.');\n\
    \        int digits_count = 0;\n        for (int i = 0; i < file_name.Length;\
    \ i++) {\n            if (file_name[i] >= '0' && file_name[i] <= '9') {\n    \
    \            digits_count++;\n            }\n        }\n        bool correct_file_name\
    \ = (digits_count <= 3) && (dot_index != -1) &&\n                            \
    \    (dot_index != 0) && (dot_index != file_name.Length - 1) &&\n            \
    \                    ((file_name[dot_index + 1] == 't' && file_name[dot_index\
    \ + 2] == 'x' && file_name[dot_index + 3] == 't') ||\n                       \
    \         (file_name[dot_index + 1] == 'e' && file_name[dot_index + 2] == 'x'\
    \ && file_name[dot_index + 3] == 'e') ||\n                                (file_name[dot_index\
    \ + 1] == 'd' && file_name[dot_index + 2] == 'l' && file_name[dot_index + 3] ==\
    \ 'l'));\n        if (correct_file_name) {\n            return \"Yes\";\n    \
    \    }\n        return \"No\";", "        string answer = \"No\";\n        //String[]\
    \ alpha = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"\
    L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"\
    Y\",\"Z\"};\n        //bool has3 = false;\n        //int count = 0;\n        //List<char>\
    \ digs = new List<char>();\n        //for (int i = 0; i < file_name.Length; i++)\
    \ {\n        //    char a = file_name[i];\n        //    if (a >= '0' && a <=\
    \ '9') {\n        //        digs.Add(a);\n        //        count++;\n       \
    \ //    }\n        //}\n        //if (count > 3) {\n        //    has3 = true;\n\
    \        //}\n        //bool dot = false;\n        //List<char> word = new List<char>();\n\
    \        //bool hasLetter = false;\n        //for (int i = 0; i < file_name.Length;\
    \ i++) {\n        //    char a = file_name[i];\n        //    if (a == '.') {\n\
    \        //        dot = true;\n        //    }\n        //    if (a >= 'a' &&\
    \ a <= 'z' || a >= 'A' && a <= 'Z') {\n        //        hasLetter = true;\n \
    \       //    }\n        //}\n        //List<string> fileTypes = new List<string>();\n\
    \        //fileTypes.Add(\"txt\");\n        //fileTypes.Add(\"exe\");\n      \
    \  //fileTypes.Add(\"dll\");\n        //for (int i = 0; i < fileTypes.Count; i++)\
    \ {\n        //    string b = fileTypes[i];\n        //    if (b == file_name.Substring(file_name.Length\
    \ - 3)) {\n        //        fileTypes.Remove(b);\n        //    }\n       ",
  "        string[] ext = new string[] { \"txt\", \"exe\", \"dll\" };\n        string[]\
    \ name = file_name.Split('.');\n        int digits = 0;\n        foreach (char\
    \ c in name[0]) {\n            if (c >= '0' && c <= '9') {\n                digits++;\n\
    \            }\n        }\n        if (digits > 3) {\n            return \"No\"\
    ;\n        }\n        if (name.Length != 2) {\n            return \"No\";\n  \
    \      }\n        if (name[0].Length == 0) {\n            return \"No\";\n   \
    \     }\n        if (name[0][0] < 'A' || name[0][0] > 'z' || (name[0][0] > 'Z'\
    \ && name[0][0] < 'a')) {\n            return \"No\";\n        }\n        if (!ext.Contains(name[1]))\
    \ {\n            return \"No\";\n        }\n        return \"Yes\";", "      \
    \  // Write your code here\n        return \"\";", '        return "";', "   \
    \     var file = file_name.Split('.');\n        return file.Length == 2 && (file[1]\
    \ == \"txt\" || file[1] == \"exe\" || file[1] == \"dll\") && file[0].Count(char.IsDigit)\
    \ <= 3 && file[0].Length > 0 && char.IsLetter(file[0][0]) ? \"Yes\" : \"No\";",
  "        bool has_more_than_three_digits = false;\n        bool contains_exactly_one_dot\
    \ = false;\n        bool substring_before_dot_valid = false;\n        bool substring_after_dot_valid\
    \ = false;\n        int digit_counter = 0;\n        int dot_counter = 0;\n   \
    \     for (int i = 0; i < file_name.Length; i++) {\n            if (file_name[i]\
    \ == '.') {\n                dot_counter++;\n            }\n            if (Char.IsDigit(file_name[i]))\
    \ {\n                digit_counter++;\n            }\n        }\n        if (dot_counter\
    \ == 1) {\n            contains_exactly_one_dot = true;\n        }\n        if\
    \ (digit_counter <= 3) {\n            has_more_than_three_digits = true;\n   \
    \     }\n        string extension = file_name.Substring(file_name.IndexOf('.')\
    \ + 1);\n        if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n            substring_after_dot_valid = true;\n        }\n  \
    \      string name = file_name.Substring(0, file_name.IndexOf('.'));\n       \
    \ if (Char.IsLetter(name[0])) {\n            substring_before_dot_valid = true;\n\
    \        }\n        if (has_more_than_three_digits && contains_exactly_one_dot\
    \ && substring_before_dot_valid && substring_after_dot_valid) {\n            return\
    \ \"Yes\";\n        }\n        return \"No\";", "        if(file_name.Count(char.IsDigit)\
    \ > 3)\n            return \"No\";\n        string[] names = file_name.Split('.');\n\
    \        if(names.Length != 2)\n            return \"No\";\n        string[] allowedTypes\
    \ = {\"txt\", \"exe\", \"dll\"};\n        if(!allowedTypes.Contains(names[1]))\n\
    \            return \"No\";\n        if(!char.IsLetter(names[0][0]))\n       \
    \     return \"No\";\n        return \"Yes\";", '        // Please, write your
    code here', "        // Write your code here!\n        return \"\";", "      \
    \  // Get valid file extensions \n        List<string> valid_extensions = new\
    \ List<string> { \"txt\", \"exe\", \"dll\" };\n        // Split file name into\
    \ two parts: extension and name (before dot)\n        string[] file_parts = file_name.Split('.');\n\
    \        // Check if there are at least two parts in the file name\n        if\
    \ (file_parts.Length < 2) {\n            return \"No\";\n        }\n        //\
    \ Check if the file name contains more than three digits\n        foreach (char\
    \ c in file_parts[0]) {\n            if (Char.IsDigit(c)) {\n                if\
    \ (file_parts[0].Count(x => x == c) > 3) {\n                    return \"No\"\
    ;\n                }\n            }\n        }\n        // Check if the file name\
    \ ends with valid extension\n        if (!valid_extensions.Contains(file_parts[1]))\
    \ {\n            return \"No\";\n        }\n        // Check if the file name\
    \ starts with latin letter\n        if (!Char.IsLetter(file_parts[0][0])) {\n\
    \            return \"No\";\n        }\n        // If all the above conditions\
    \ are met, the file name is valid\n        return \"Yes\";", "        var digits\
    \ = new HashSet<char> { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };\n\
    \        var valid_extensions = new HashSet<string> { \"txt\", \"exe\", \"dll\"\
    \ };\n        var extension_parts = file_name.Split('.');\n        if (extension_parts.Length\
    \ == 2) {\n            var extension = extension_parts[1];\n            var name\
    \ = extension_parts[0];\n            var digit_count = name.Count(c => digits.Contains(c));\n\
    \            if (digit_count > 3) {\n                return \"No\";\n        \
    \    }\n            var first_letter = name[0];\n            if (first_letter\
    \ < 'a' || first_letter > 'z') {\n                if (first_letter < 'A' || first_letter\
    \ > 'Z') {\n                    return \"No\";\n                }\n          \
    \  }\n            if (valid_extensions.Contains(extension)) {\n              \
    \  return \"Yes\";\n            }\n        }\n        return \"No\";", '        return
    "";', "        if (file_name.Count(x => char.IsDigit(x)) > 3)\n            return\
    \ \"No\";\n        if (file_name.Count(x => x == '.') != 1)\n            return\
    \ \"No\";\n        if (file_name.IndexOf('.') == 0)\n            return \"No\"\
    ;\n        if (!(char.IsLetter(file_name[0]) || char.IsLetter(file_name[0])))\n\
    \            return \"No\";\n        if (!(file_name.Substring(file_name.IndexOf('.')\
    \ + 1) == \"txt\" ||\n            file_name.Substring(file_name.IndexOf('.') +\
    \ 1) == \"exe\" ||\n            file_name.Substring(file_name.IndexOf('.') + 1)\
    \ == \"dll\"))\n            return \"No\";\n        return \"Yes\";", "      \
    \  // Implement your solution here\n        return \"\";", "        // Write your\
    \ code here.\n        string[] split_name = file_name.Split('.');\n        if\
    \ (split_name.Length != 2) {\n            return \"No\";\n        }\n        int\
    \ digits = 0;\n        for (int i = 0; i < split_name[0].Length; i++) {\n    \
    \        if (split_name[0][i] >= '0' && split_name[0][i] <= '9') {\n         \
    \       digits++;\n            }\n        }\n        if (digits > 3) {\n     \
    \       return \"No\";\n        }\n        if (split_name[0].Length == 0) {\n\
    \            return \"No\";\n        }\n        if (!((split_name[0][0] >= 'a'\
    \ && split_name[0][0] <= 'z') ||\n              (split_name[0][0] >= 'A' && split_name[0][0]\
    \ <= 'Z'))) {\n            return \"No\";\n        }\n        if (split_name[1]\
    \ != \"txt\" && split_name[1] != \"exe\" && split_name[1] != \"dll\") {\n    \
    \        return \"No\";\n        }\n        return \"Yes\";", "        // Examples:\n\
    \        // >>> FileNameCheck((\"example.txt\"))\n        // (\"Yes\")\n     \
    \   // >>> FileNameCheck((\"1example.dll\"))\n        // (\"No\")\n        \n\
    \        int count = 0;\n        bool dotIncluded = false;\n        bool dotAfterLetter\
    \ = false;\n        bool txt = false;\n        bool exe = false;\n        bool\
    \ dll = false;\n        bool noDigits = true;\n        bool firstLetter = false;\n\
    \        bool firstLetterIncluded = false;\n        bool beforeDotNoDigits = true;\n\
    \        bool allDigits = true;\n        int dotPosition = 0;\n        string\
    \ beforeDot = \"\";\n        string afterDot = \"\";\n        string fileName\
    \ = file_name;\n        string[] file = fileName.Split('.');\n        beforeDot\
    \ = file[0];\n        afterDot = file[1];\n        for (int i = 0; i < fileName.Length;\
    \ i++) {\n            if (fileName[i] == '.') {\n                dotIncluded =\
    \ true;\n                dotPosition = i;\n            }\n            if (fileName[i]\
    \ == '1' || fileName[i] == '2' || fileName[i] == '3' || fileName[i] == '4' ||\
    \ fileName[i] == '5' || fileName[i] == '6' || fileName[i] == '7' || fileName[i]\
    \ == '8' || fileName[i] == '9' || fileName[i] == '0') {\n                count++;\n\
    \                noDigits = false;\n            }\n            if (fileName[i]\
    \ == 'a' || fileName[i] == 'b' || fileName[i] == 'c' || fileName[i] == 'd' ||\
    \ fileName[i] == 'e' || fileName[i] == 'f' || fileName[i] == 'g' || fileName[i]\
    \ == 'h' || fileName[i] == 'i' || fileName[i] == 'j' || fileName[i] == 'k' ||\
    \ fileName[i] == 'l' || fileName[i] ==", '        return "No";', '        throw
    new NotImplementedException();', "        var regex = new System.Text.RegularExpressions.Regex(@\"\
    ^[a-zA-Z]{1}[a-zA-Z1-9]{0,2}\\.[a-zA-Z]{3}$\");\n        bool result = regex.IsMatch(file_name);\n\
    \        return result ? \"Yes\" : \"No\";", "        // Write your code here.\n\
    \        string result = \"Yes\";\n        int i = 0;\n        int count = 0;\n\
    \        string substring1 = \"\";\n        string substring2 = \"\";\n      \
    \  while (i < file_name.Length) {\n            if (Char.IsDigit(file_name[i]))\
    \ {\n                count++;\n            }\n            if (file_name[i] ==\
    \ '.') {\n                substring1 = file_name.Substring(0, i);\n          \
    \      substring2 = file_name.Substring(i + 1);\n            }\n            i++;\n\
    \        }\n        if (count > 3 || count < 0) {\n            result = \"No\"\
    ;\n        }\n        else if (substring1 == \"\" || !Char.IsLetter(substring1[0]))\
    \ {\n            result = \"No\";\n        }\n        else if (substring2 != \"\
    txt\" && substring2 != \"exe\" && substring2 != \"dll\") {\n            result\
    \ = \"No\";\n        }\n        return result;", "        int numOfDigits = 0;\n\
    \        int dotIdx = -1;\n        for (int i = 0; i < file_name.Length; i++)\
    \ {\n            if (char.IsDigit(file_name[i])) {\n                numOfDigits++;\n\
    \            }\n            if (file_name[i] == '.') {\n                dotIdx\
    \ = i;\n            }\n        }\n        if (numOfDigits > 3 || dotIdx == -1\
    \ || dotIdx == 0 || dotIdx == file_name.Length - 1) {\n            return \"No\"\
    ;\n        }\n        string firstPart = file_name.Substring(0, dotIdx);\n   \
    \     string secondPart = file_name.Substring(dotIdx + 1);\n        bool isFirstPartValid\
    \ = (char.IsLetter(firstPart[0]) || char.IsLetter(firstPart[firstPart.Length -\
    \ 1]));\n        bool isSecondPartValid = (secondPart == \"txt\" || secondPart\
    \ == \"exe\" || secondPart == \"dll\");\n        if (isFirstPartValid && isSecondPartValid)\
    \ {\n            return \"Yes\";\n        }\n        return \"No\";", "      \
    \  if (file_name.Count(c => c >= '0' && c <= '9') > 3)\n            return \"\
    No\";\n        if (file_name.Count(c => c == '.') != 1)\n            return \"\
    No\";\n        var parts = file_name.Split('.');\n        if (parts[0].Length\
    \ == 0 || !(parts[0][0] >= 'a' && parts[0][0] <= 'z' || parts[0][0] >= 'A' &&\
    \ parts[0][0] <= 'Z'))\n            return \"No\";\n        if (parts[1] != \"\
    txt\" && parts[1] != \"exe\" && parts[1] != \"dll\")\n            return \"No\"\
    ;\n        return \"Yes\";", "        // ...\n        return null;", "       \
    \ // -----------------------------------------------\n        // You should write\
    \ your code before this line.\n        // -----------------------------------------------\n\
    \        throw new NotImplementedException();", "        // SOLUTION\n       \
    \ //\n        // Naming convention:\n        //      str - string variable\n \
    \       //      num - number variable\n        //      arr - array variable\n\
    \        //      obj - object variable\n        //      i, j, k - counter variable\n\
    \        //      x, y, z - value variable\n        //\n        // Initialize empty\
    \ variables\n        int num_digits = 0;\n        int num_dots = 0;\n        int\
    \ str_length = file_name.Length;\n        // Iterate through the string and count\
    \ digits, dots, letters and length of the string\n        for (int i = 0; i <\
    \ str_length; i++) {\n            // Get current character\n            char x\
    \ = file_name[i];\n            // Count digits, dots and length\n            if\
    \ (Char.IsDigit(x)) {\n                num_digits++;\n            } else if (x\
    \ == '.') {\n                num_dots++;\n            }\n        }\n        //\
    \ Check if number of digits is smaller than 4\n        if (num_digits > 3) {\n\
    \            return \"No\";\n        }\n        // Check if number of dots is\
    \ 1\n        if (num_dots != 1) {\n            return \"No\";\n        }\n   \
    \     // Split string at dot and convert to char arrays\n        string[] str_split\
    \ = file_name.Split('.');\n        char[] arr_start = str_split[0].ToCharArray();\n\
    \        char[] arr_end = str_split[1].ToCharArray();\n        // Check if the\
    \ first character is a letter\n        if (!Char.IsLetter(arr_start[0])) {\n \
    \           return \"No\";\n        }\n        // Check if the ending is one of\
    \ these ['txt', 'exe', 'dll']\n        if (arr_end.Length == 3) {\n          \
    \  if (arr_end[0] == 't' && arr_end[1] == 'x' && arr_end[2] == 't') {\n      \
    \          return \"Yes\";\n            } else if (arr_end[0] == 'e' && arr_end[1]\
    \ == 'x' && arr_end[2] == 'e') {\n                return \"Yes\";\n          \
    \  }", "        // >>> Your code here\n        return \"\";", '        return
    file_name;', '        return null;', "        int dots = 0;\n        int alph\
    \ = 0;\n        int nums = 0;\n        int parts = 0;\n        int size = file_name.Length;\n\
    \        if (size < 5) {\n            return \"No\";\n        }\n        string\
    \ current = \"\";\n        for (int i = 0; i < size; i++) {\n            if (file_name[i]\
    \ == '.') {\n                if (dots > 0) {\n                    return \"No\"\
    ;\n                }\n                else {\n                    if (alph ==\
    \ 0) {\n                        return \"No\";\n                    }\n      \
    \              if (parts == 1) {\n                        current = \"\";\n  \
    \                  }\n                    else {\n                        parts\
    \ = 1;\n                    }\n                    dots++;\n                }\n\
    \            }\n            else if (file_name[i] >= 'a' && file_name[i] <= 'z')\
    \ {\n                if (parts == 1) {\n                    return \"No\";\n \
    \               }\n                else {\n                    parts = 0;\n  \
    \              }\n                alph++;\n                current += file_name[i];\n\
    \            }\n            else if (file_name[i] >= 'A' && file_name[i] <= 'Z')\
    \ {\n                if (parts == 1) {\n                    return \"No\";\n \
    \               }\n                else {\n                    parts = 0;\n  \
    \              }\n                alph++;\n                current += file_name[i];\n\
    \            }\n            else if (file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n                if (parts == 1) {\n                    return \"No\";\n \
    \               }\n                else {\n                    parts = 0;\n  \
    \              }\n                nums++;\n                current += file_name[i];\n\
    \            }\n            else {\n                return \"No\";\n         \
    \   }\n        }\n        if (dots != 1) {\n            return \"No\";\n     \
    \   }\n        if (nums > 3) {\n            return \"No\";\n        }\n      \
    \  if (current == \"exe\" || current == \"txt\" || current == \"dll\") {\n   \
    \         return \"Yes\";\n        }\n        return \"No\";", "        // Write\
    \ your code here.\n        return null;", "        // \u2193\u2193\u2193\u2193\
    \ your code goes here \u2193\u2193\u2193\u2193\n        return \"\";\n       \
    \ // \u2191\u2191\u2191\u2191 end of your code \u2191\u2191\u2191\u2191", "  \
    \      int dot = 0;\n        int digits = 0;\n        string[] array = new string[file_name.Length];\n\
    \        for (int i = 0; i < file_name.Length; i++) {\n            array[i] =\
    \ file_name[i].ToString();\n            if (array[i] == \".\")\n             \
    \   dot++;\n            if (array[i] == \"0\" || array[i] == \"1\" || array[i]\
    \ == \"2\" || array[i] == \"3\" || array[i] == \"4\" || array[i] == \"5\" || array[i]\
    \ == \"6\" || array[i] == \"7\" || array[i] == \"8\" || array[i] == \"9\")\n \
    \               digits++;\n        }\n        string[] substrings = file_name.Split('.');\n\
    \        if (digits > 3 || dot != 1 || substrings[0] == \"\" || substrings[1]\
    \ != \"txt\" && substrings[1] != \"exe\" && substrings[1] != \"dll\")\n      \
    \      return \"No\";\n        else\n            return \"Yes\";", "        bool\
    \ is_valid = true;\n        var name_and_ext = file_name.Split('.');\n       \
    \ if (name_and_ext.Length != 2) {\n            is_valid = false;\n        }\n\
    \        else {\n            var name = name_and_ext[0];\n            var ext\
    \ = name_and_ext[1];\n            if (!name.Any(c => c >= 'a' && c <= 'z') &&\
    \ !name.Any(c => c >= 'A' && c <= 'Z')) {\n                is_valid = false;\n\
    \            }\n            if (name.Length - name.Replace(\"0\", \"\").Length\
    \ > 3) {\n                is_valid = false;\n            }\n            if (ext\
    \ != \"txt\" && ext != \"exe\" && ext != \"dll\") {\n                is_valid\
    \ = false;\n            }\n        }\n        return is_valid ? \"Yes\" : \"No\"\
    ;", '        // Write your code here.', "        if (file_name.Count(x => char.IsDigit(x))\
    \ > 3)\n            return \"No\";\n        if (file_name.Count(x => x == '.')\
    \ != 1)\n            return \"No\";\n        if (string.IsNullOrEmpty(file_name.Split('.')[0]))\n\
    \            return \"No\";\n        if (!char.IsLetter(file_name.Split('.')[0][0]))\n\
    \            return \"No\";\n        if (file_name.Split('.')[1] != \"txt\" &&\
    \ file_name.Split('.')[1] != \"exe\" && file_name.Split('.')[1] != \"dll\")\n\
    \            return \"No\";\n        return \"Yes\";", "        // Your code comes\
    \ here.\n        int count_of_numbers = 0;\n        string[] words = file_name.Split('.');\n\
    \        bool has_dot = file_name.Contains('.');\n        bool extension_in_list\
    \ = false;\n        bool first_letter_is_letter = false;\n        bool has_more_than_three_numbers\
    \ = false;\n        bool has_more_than_one_dot = false;\n        bool empty_substring_before_dot\
    \ = false;\n        List<string> extensions = new List<string>();\n        extensions.Add(\"\
    txt\");\n        extensions.Add(\"exe\");\n        extensions.Add(\"dll\");\n\
    \        foreach (char c in file_name) {\n            if (Char.IsNumber(c)) {\n\
    \                count_of_numbers += 1;\n            }\n        }\n        if\
    \ (count_of_numbers > 3) {\n            has_more_than_three_numbers = true;\n\
    \        }\n        if (has_dot) {\n            if (file_name.Split('.').Length\
    \ > 2) {\n                has_more_than_one_dot = true;\n            }\n     \
    \       if (words[0] == \"\") {\n                empty_substring_before_dot =\
    \ true;\n            }\n            if (extensions.Contains(words[1])) {\n   \
    \             extension_in_list = true;\n            }\n        }\n        if\
    \ (Char.IsLetter(file_name[0])) {\n            first_letter_is_letter = true;\n\
    \        }\n        if (has_more_than_three_numbers || has_more_than_one_dot ||\
    \ !extension_in_list || empty_substring_before_dot || !first_letter_is_letter)\
    \ {\n            return \"No\";\n        }\n        return \"Yes\";", "      \
    \  var file_name_array = file_name.Split('.');\n        if (file_name_array.Length\
    \ != 2) {\n            return \"No\";\n        }\n        var first_part = file_name_array[0];\n\
    \        var second_part = file_name_array[1];\n        int number_count = 0;\n\
    \        foreach (var c in first_part) {\n            if (c >= '0' && c <= '9')\
    \ {\n                number_count++;\n            }\n        }\n        if (number_count\
    \ > 3) {\n            return \"No\";\n        }\n        if (!((first_part[0]\
    \ >= 'a' && first_part[0] <= 'z') || (first_part[0] >= 'A' && first_part[0] <=\
    \ 'Z'))) {\n            return \"No\";\n        }\n        if (second_part !=\
    \ \"txt\" && second_part != \"exe\" && second_part != \"dll\") {\n           \
    \ return \"No\";\n        }\n        return \"Yes\";", "        // your code here\n\
    \        return \"\";", "        if (file_name.Count(x => char.IsDigit(x)) > 3)\
    \ return \"No\";\n        if (file_name.Count(x => x == '.') != 1) return \"No\"\
    ;\n        var parts = file_name.Split('.');\n        if (parts[0].Length == 0\
    \ || !(parts[0][0] >= 'a' && parts[0][0] <= 'z' || parts[0][0] >= 'A' && parts[0][0]\
    \ <= 'Z')) return \"No\";\n        var validExtensions = new HashSet<string> {\
    \ \"txt\", \"exe\", \"dll\" };\n        if (!validExtensions.Contains(parts[1]))\
    \ return \"No\";\n        return \"Yes\";", "        if (file_name.Count(char.IsDigit)\
    \ > 3) return \"No\";\n        var parts = file_name.Split('.');\n        if (parts.Length\
    \ != 2) return \"No\";\n        if (parts[0].Length == 0 || !char.IsLetter(parts[0][0]))\
    \ return \"No\";\n        if (parts[1] != \"txt\" && parts[1] != \"exe\" && parts[1]\
    \ != \"dll\") return \"No\";\n        return \"Yes\";", "        // ASSUME LOWERCASE,\
    \ NO MORE THAN 3 DIGITS, NO SPACES\n        string[] extension = { \"txt\", \"\
    exe\", \"dll\" };\n        int dot_index = file_name.IndexOf('.');\n        string\
    \ pre_dot = file_name.Substring(0, dot_index);\n        string post_dot = file_name.Substring(dot_index\
    \ + 1);\n        int digit_count = 0;\n        bool is_extension = false;\n  \
    \      // Check if extension is valid\n        foreach (string ext in extension)\
    \ {\n            if (post_dot == ext) {\n                is_extension = true;\n\
    \                break;\n            }\n        }\n        // Check if pre-dot\
    \ is valid\n        if (!(pre_dot.Length >= 1 && Char.IsLetter(pre_dot[0])))\n\
    \            return \"No\";\n        // Count all digits in pre-dot\n        foreach\
    \ (char c in pre_dot) {\n            if (Char.IsDigit(c))\n                digit_count++;\n\
    \        }\n        // Compare digit count to maximum allowed\n        if (digit_count\
    \ > 3)\n            return \"No\";\n        if (is_extension)\n            return\
    \ \"Yes\";\n        return \"No\";", "        var parts = file_name.Split('.');\n\
    \        if (parts.Length != 2) return \"No\";\n        var left = parts[0];\n\
    \        var right = parts[1];\n        if (right == \"exe\" || right == \"txt\"\
    \ || right == \"dll\") {\n            if (left.Length > 0 && char.IsLetter(left[0]))\
    \ {\n                var digits = 0;\n                foreach (var ch in left)\
    \ {\n                    if (char.IsDigit(ch)) digits++;\n                }\n\
    \                if (digits <= 3) return \"Yes\";\n            }\n        }\n\
    \        return \"No\";", "        var digits = 0;\n        var has_dot = false;\n\
    \        var prefix = \"\";\n        var suffix = \"\";\n        for (var i =\
    \ 0; i < file_name.Length; i++) {\n            var c = file_name[i];\n       \
    \     if (c >= '0' && c <= '9') {\n                digits++;\n            } else\
    \ if (c == '.') {\n                has_dot = true;\n            } else if (i <\
    \ file_name.Length - 1) {\n                prefix += c;\n            } else {\n\
    \                suffix += c;\n            }\n        }\n        return digits\
    \ > 3 || !has_dot || !IsLatinLetter(prefix[0]) || prefix.Length == 0 || suffix\
    \ != \"txt\" && suffix != \"exe\" && suffix != \"dll\" ? \"No\" : \"Yes\";", " \
    \       // Your code here.\n        throw new NotImplementedException();", " \
    \       int dot_pos = file_name.IndexOf('.');\n        if (dot_pos == -1) return\
    \ \"No\";\n        string ext = file_name.Substring(dot_pos + 1);\n        if\
    \ (ext != \"txt\" && ext != \"exe\" && ext != \"dll\") return \"No\";\n      \
    \  if (dot_pos == 0) return \"No\";\n        string name = file_name.Substring(0,\
    \ dot_pos);\n        int count = 0;\n        for (int i = 0; i < name.Length;\
    \ i++) {\n            if (name[i] >= '0' && name[i] <= '9') count++;\n       \
    \     if (count > 3) return \"No\";\n        }\n        if (count == 0) return\
    \ \"No\";\n        if (name[0] < 'A' || name[0] > 'z' || (name[0] > 'Z' && name[0]\
    \ < 'a')) return \"No\";\n        return \"Yes\";", "        if (file_name.Length\
    \ - file_name.Replace(\".\", \"\").Length != 1)\n            return \"No\";\n\
    \        string[] strings = file_name.Split('.');\n        string first = strings[0];\n\
    \        string last = strings[1];\n        if (first.Length == 0 || !(Char.IsLetter(first[0])))\n\
    \            return \"No\";\n        if (first.Length - first.Replace(\"0\", \"\
    \").Length > 3)\n            return \"No\";\n        if (last != \"txt\" && last\
    \ != \"exe\" && last != \"dll\")\n            return \"No\";\n        return \"\
    Yes\";", '        return "";', '        throw new NotImplementedException();',
  "        int numDigits = 0;\n        string extension = \"\";\n        string name\
    \ = \"\";\n        foreach (char c in file_name) {\n            if (c >= '0' &&\
    \ c <= '9') {\n                numDigits++;\n            }\n            if (c\
    \ == '.') {\n                name = file_name.Substring(0, file_name.IndexOf('.'));\n\
    \                extension = file_name.Substring(file_name.IndexOf('.') + 1);\n\
    \            }\n        }\n        // Debug.WriteLine(numDigits);\n        //\
    \ Debug.WriteLine(name);\n        // Debug.WriteLine(extension);\n        return\
    \ (numDigits <= 3 && (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") && (name[0] >= 'a' && name[0] <= 'z' || name[0] >= 'A' && name[0]\
    \ <= 'Z')) ? \"Yes\" : \"No\";", '        return "YOUR CODE HERE";', "       \
    \ var r = new Regex(@\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\.(txt|exe|dll)$\");\n      \
    \  return r.IsMatch(file_name) ? \"Yes\" : \"No\";", "        // Your solution\
    \ here\n        return \"\";", "        string[] supported_extensions = new string[]\
    \ { \"txt\", \"exe\", \"dll\" };\n        string extension = file_name.Split('.')[1];\n\
    \        if (supported_extensions.Contains(extension)) {\n            string basename\
    \ = file_name.Split('.')[0];\n            string digits = \"0123456789\";\n  \
    \          int num_digits = 0;\n            for (int i = 0; i < basename.Length;\
    \ i++) {\n                if (digits.Contains(basename[i])) {\n              \
    \      num_digits++;\n                }\n            }\n            if (num_digits\
    \ > 3) {\n                return \"No\";\n            }\n            string latin_letters\
    \ = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n            if\
    \ (latin_letters.Contains(basename[0])) {\n                return \"Yes\";\n \
    \           }\n        }\n        return \"No\";", "        int number_of_digits\
    \ = 0;\n        int number_of_dots = 0;\n        bool alpha_before_dot = false;\n\
    \        string post_dot = \"\";\n        for (int i = 0; i < file_name.Length;\
    \ i++) {\n            char current_char = file_name[i];\n            if (current_char\
    \ == '.') {\n                number_of_dots++;\n            } else if (current_char\
    \ >= '0' && current_char <= '9') {\n                number_of_digits++;\n    \
    \        } else if (current_char >= 'a' && current_char <= 'z') {\n          \
    \      alpha_before_dot = true;\n            } else if (current_char >= 'A' &&\
    \ current_char <= 'Z') {\n                alpha_before_dot = true;\n         \
    \   }\n        }\n        if (number_of_digits > 3 || number_of_dots != 1 || !alpha_before_dot)\
    \ {\n            return \"No\";\n        }\n        string[] file_substrings =\
    \ file_name.Split('.');\n        if (file_substrings.Length != 2) {\n        \
    \    return \"No\";\n        }\n        if (file_substrings[0] == \"\") {\n  \
    \          return \"No\";\n        }\n        post_dot = file_substrings[1];\n\
    \        if (post_dot == \"txt\" || post_dot == \"exe\" || post_dot == \"dll\"\
    ) {\n            return \"Yes\";\n        }\n        return \"No\";", "      \
    \  // REPLACE THE BODY OF THIS METHOD WITH YOUR SOLUTION\n        return \"\";",
  "        // Write your code here.\n        return \"\";", "        // YOUR CODE\
    \ HERE\n        bool isValid = true;\n        bool hasInvalidNumber = false;\n\
    \        bool hasNoDot = false;\n        bool hasInvalidSubString = false;\n \
    \       bool hasInvalidExtension = false;\n        int numOfDots = 0;\n      \
    \  int numOfNums = 0;\n        char[] stringArray = file_name.ToCharArray();\n\
    \        char[] subString = new char[stringArray.Length];\n        char[] extension\
    \ = new char[stringArray.Length];\n        string[] validExtension = { \"txt\"\
    , \"exe\", \"dll\" };\n        string[] subStringArray = file_name.Split('.');\n\
    \        subString = subStringArray[0].ToCharArray();\n        extension = subStringArray[1].ToCharArray();\n\
    \        foreach (char s in subString)\n        {\n            if (s >= '0' &&\
    \ s <= '9')\n            {\n                numOfNums++;\n            }\n    \
    \    }\n        foreach (char e in extension)\n        {\n            foreach\
    \ (string v in validExtension)\n            {\n                if (e != v[0])\n\
    \                {\n                    hasInvalidExtension = true;\n        \
    \        }\n            }\n        }\n        if (numOfNums > 3)\n        {\n\
    \            hasInvalidNumber = true;\n        }\n        foreach (char c in stringArray)\n\
    \        {\n            if (c == '.')\n            {\n                numOfDots++;\n\
    \            }\n        }\n        if (numOfDots > 1)\n        {\n           \
    \ hasNoDot = true;\n        }\n        if (hasInvalidNumber == true || hasNoDot\
    \ == true || hasInvalidExtension == true)\n        {\n            isValid = false;\n\
    \        }\n        if (isValid == true)\n        {\n            return \"Yes\"\
    ;\n        }\n        else\n        {\n            return \"No\";\n        }",
  "        // your code here\n        return \"Yes\";", "        int count = 0;\n\
    \        bool has_dot = false;\n        bool ok = true;\n        string[] valid_extensions\
    \ = {\"txt\", \"exe\", \"dll\"};\n        string before = \"\";\n        string\
    \ after = \"\";\n        for (int i = 0; i < file_name.Length; i++) {\n      \
    \      if (file_name[i] == '.') {\n                has_dot = true;\n         \
    \       before = file_name.Substring(0, i);\n                after = file_name.Substring(i\
    \ + 1);\n            }\n            if (file_name[i] == '0' || file_name[i] ==\
    \ '1' || file_name[i] == '2' ||\n                file_name[i] == '3' || file_name[i]\
    \ == '4' || file_name[i] == '5' ||\n                file_name[i] == '6' || file_name[i]\
    \ == '7' || file_name[i] == '8' ||\n                file_name[i] == '9') {\n \
    \               count++;\n            }\n        }\n        if (count > 3) {\n\
    \            ok = false;\n        }\n        if (!has_dot) {\n            ok =\
    \ false;\n        }\n        if (before.Length == 0) {\n            ok = false;\n\
    \        }\n        if (before[0] != 'a' && before[0] != 'b' && before[0] != 'c'\
    \ && before[0] != 'd' &&\n            before[0] != 'e' && before[0] != 'f' &&\
    \ before[0] != 'g' && before[0] != 'h' &&\n            before[0] != 'i' && before[0]\
    \ != 'j' && before[0] != 'k' && before[0] != 'l' &&\n            before[0] !=\
    \ 'm' && before[0] != 'n' && before[0] != 'o' && before[0] != 'p' &&\n       \
    \     before[0] != 'q' && before[0] != 'r' && before[0] != 's' && before[0] !=\
    \ 't' &&\n           ", "        if (file_name.Count(c => c >= '0' && c <= '9')\
    \ > 3) return \"No\";\n        if (file_name.Count(c => c == '.') != 1) return\
    \ \"No\";\n        var dotIndex = file_name.IndexOf('.');\n        var prefix\
    \ = file_name.Substring(0, dotIndex);\n        var suffix = file_name.Substring(dotIndex\
    \ + 1);\n        if (prefix.Length == 0 || prefix[0] < 'A' || (prefix[0] > 'Z'\
    \ && prefix[0] < 'a') || prefix[0] > 'z') return \"No\";\n        if (suffix !=\
    \ \"txt\" && suffix != \"exe\" && suffix != \"dll\") return \"No\";\n        return\
    \ \"Yes\";", "        int cnt = 0;\n        int cnt2 = 0;\n        bool num =\
    \ false;\n        bool correct = false;\n        for (int i = 0; i < file_name.Length;\
    \ i++) {\n            char c = file_name[i];\n            if (c == '.') {\n  \
    \              cnt++;\n                continue;\n            }\n            if\
    \ (cnt == 0) {\n                if (cnt2 > 3) {\n                    num = true;\n\
    \                    break;\n                }\n                if (c >= '0' &&\
    \ c <= '9') {\n                    cnt2++;\n                }\n              \
    \  if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z')) {\n                    correct\
    \ = true;\n                    break;\n                }\n            } else {\n\
    \                if (cnt2 > 3) {\n                    num = true;\n          \
    \          break;\n                }\n                if (c >= '0' && c <= '9')\
    \ {\n                    cnt2++;\n                }\n            }\n        }\n\
    \        if (cnt != 1 || num || correct) {\n            return \"No\";\n     \
    \   }\n        string[] suffix = { \"txt\", \"exe\", \"dll\" };\n        for (int\
    \ i = 0; i < suffix.Length; i++) {\n            if (file_name.Substring(file_name.Length\
    \ - suffix[i].Length) == suffix[i]) {\n                return \"Yes\";\n     \
    \       }\n        }\n        return \"No\";", "        var valid = false;\n \
    \       var string_num = \"\";\n        var first_ch = ' ';\n        var valid_num\
    \ = 0;\n        var after_dot = \"\";\n        var allowed_ext = new[] {\"txt\"\
    , \"exe\", \"dll\"};\n        var dot_index = file_name.IndexOf('.');\n      \
    \  var before_dot = file_name.Substring(0, dot_index);\n        var after_dot\
    \ = file_name.Substring(dot_index+1);\n        if (!allowed_ext.Contains(after_dot))\
    \ {\n            return \"No\";\n        }\n\n        if (before_dot.Length ==\
    \ 0) {\n            return \"No\";\n        }\n\n        foreach (var ch in before_dot)\
    \ {\n            if (first_ch == ' ') {\n                first_ch = ch;\n    \
    \        }\n\n            if (char.IsDigit(ch)) {\n                string_num\
    \ += ch;\n            }\n        }\n\n        if (string_num.Length > 3) {\n \
    \           return \"No\";\n        }\n\n        foreach (var ch in string_num)\
    \ {\n            valid_num = valid_num * 10 + int.Parse(ch.ToString());\n    \
    \    }\n\n        if (valid_num >= 128 || !(char.IsLetter(first_ch) || char.IsUpper(first_ch)))\
    \ {\n            return \"No\";\n        }\n\n        return \"Yes\";", "    \
    \    int index = file_name.IndexOf('.');\n        if (index == -1) {\n       \
    \     return \"No\";\n        }\n        string sub1 = file_name.Substring(0,\
    \ index);\n        string sub2 = file_name.Substring(index + 1);\n        int\
    \ count = 0;\n        bool valid = false;\n        if (sub1.Length == 0) {\n \
    \           return \"No\";\n        }\n        for (int i = 0; i < sub1.Length;\
    \ i++) {\n            if (sub1[i] >= '0' && sub1[i] <= '9') {\n              \
    \  count++;\n            }\n            if (count > 3) {\n                return\
    \ \"No\";\n            }\n            if (sub1[i] >= 'a' && sub1[i] <= 'z') {\n\
    \                valid = true;\n            }\n            if (sub1[i] >= 'A'\
    \ && sub1[i] <= 'Z') {\n                valid = true;\n            }\n       \
    \ }\n        if (!valid) {\n            return \"No\";\n        }\n        if\
    \ (sub2 == \"txt\" || sub2 == \"exe\" || sub2 == \"dll\") {\n            return\
    \ \"Yes\";\n        }\n        return \"No\";", '        return "";', "      \
    \  if (file_name.Length == 0) return \"No\";\n        if (file_name.Length > 20)\
    \ return \"No\";\n        if (file_name.Count(x => x >= '0' && x <= '9') > 3)\
    \ return \"No\";\n        if (file_name.Count(x => x == '.') != 1) return \"No\"\
    ;\n        var dot_index = file_name.IndexOf('.');\n        if (dot_index == 0)\
    \ return \"No\";\n        if (file_name[dot_index - 1] < 'a' || file_name[dot_index\
    \ - 1] > 'z') {\n            if (file_name[dot_index - 1] < 'A' || file_name[dot_index\
    \ - 1] > 'Z') {\n                return \"No\";\n            }\n        }\n  \
    \      var extension = file_name.Substring(dot_index + 1);\n        if (extension\
    \ != \"txt\" && extension != \"exe\" && extension != \"dll\") {\n            return\
    \ \"No\";\n        }\n        return \"Yes\";", "        string str = file_name;\n\
    \        int count = 0;\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        if (str[i] >= '0' && str[i] <= '9')\n                count++;\n     \
    \   }\n        string[] str2 = file_name.Split('.');\n        if (count <= 3 &&\
    \ (str2[1] == \"txt\" || str2[1] == \"exe\" || str2[1] == \"dll\") &&\n      \
    \      str.IndexOf('.') != -1 && str2[0].Length != 0 && str2[0][0] >= 'a' && str2[0][0]\
    \ <= 'z'\n            || str2[0][0] >= 'A' && str2[0][0] <= 'Z')\n           \
    \ return \"Yes\";\n        else\n            return \"No\";", '        return
    "";', "        // your code here\n        return \"\";", "        // ...\n   \
    \     return \"\";", "        int i = 0;\n        int count = 0;\n        string\
    \ substr = \"\";\n        string res = \"No\";\n        while (i < file_name.Length\
    \ && file_name[i] != '.') {\n            if (count < 3 && (file_name[i] >= '0'\
    \ && file_name[i] <= '9')) {\n                count++;\n            }\n      \
    \      if ((file_name[i] >= 'a' && file_name[i] <= 'z') || (file_name[i] >= 'A'\
    \ && file_name[i] <= 'Z')) {\n                substr += file_name[i];\n      \
    \      }\n            i++;\n        }\n        if (i == file_name.Length || count\
    \ > 3 || substr == \"\") {\n            return res;\n        }\n        res =\
    \ \"Yes\";\n        substr = \"\";\n        i++;\n        while (i < file_name.Length)\
    \ {\n            substr += file_name[i];\n            i++;\n        }\n      \
    \  if (substr != \"txt\" && substr != \"exe\" && substr != \"dll\") {\n      \
    \      res = \"No\";\n        }\n        return res;", "        string[] arr =\
    \ file_name.Split('.');\n        if (arr.Length != 2) return \"No\";\n       \
    \ char[] left = arr[0].ToCharArray();\n        char[] right = arr[1].ToCharArray();\n\
    \        if (!Char.IsLetter(left[0])) return \"No\";\n        foreach (char c\
    \ in left) if (Char.IsDigit(c)) return \"No\";\n        if (right.Length != 3)\
    \ return \"No\";\n        if (!(right[0] == 't' && right[1] == 'x' && right[2]\
    \ == 't' ||\n            right[0] == 'e' && right[1] == 'x' && right[2] == 'e'\
    \ ||\n            right[0] == 'd' && right[1] == 'l' && right[2] == 'l')) return\
    \ \"No\";\n        return \"Yes\";", "        // YOUR CODE GOES HERE\n       \
    \ int digits = 0;\n        int dot = 0;\n        int len = file_name.Length;\n\
    \        if (Char.IsDigit(file_name[0])) return \"No\";\n        for (int i =\
    \ 0; i < len; i++) {\n            if (Char.IsDigit(file_name[i])) digits++;\n\
    \            if (file_name[i] == '.') dot++;\n        }\n        if (digits >\
    \ 3 || dot != 1) return \"No\";\n        string[] names = file_name.Split('.');\n\
    \        if (names[0] == \"\" || names[1] == \"\") return \"No\";\n        if\
    \ (names[1] != \"txt\" && names[1] != \"exe\" && names[1] != \"dll\") return \"\
    No\";\n        return \"Yes\";", '        return file_name.Length <= 3 && file_name.Contains(".")
    && file_name.Substring(0, file_name.IndexOf(".")).Length > 0 && file_name.Substring(file_name.IndexOf(".")
    + 1).Length > 0 && file_name.IndexOf(".") == file_name.LastIndexOf(".") && file_name.Substring(file_name.IndexOf(".")
    + 1) == "txt" || file_name.Substring(file_name.IndexOf(".") + 1) == "exe" || file_name.Substring(file_name.IndexOf(".")
    + 1) == "dll" ? "Yes" : "No";', "        // TODO\n        return \"\";", "   \
    \     // Calculate the result using the required conditions\n        // ...\n\
    \        // return the result\n        string[] parts = file_name.Split('.');\n\
    \        int len = file_name.Length;\n        int count = 0;\n        for (int\
    \ i = 0; i < len; i++) {\n            if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n                count++;\n            }\n        }\n        if (count\
    \ > 3) {\n            return \"No\";\n        }\n        if (parts.Length != 2)\
    \ {\n            return \"No\";\n        }\n        if (parts[0] == \"\") {\n\
    \            return \"No\";\n        }\n        if (parts[0][0] < 'A' || parts[0][0]\
    \ > 'z') {\n            return \"No\";\n        }\n        if (parts[1] != \"\
    txt\" && parts[1] != \"exe\" && parts[1] != \"dll\") {\n            return \"\
    No\";\n        }\n        return \"Yes\";", "        bool pass = false;\n    \
    \    string[] tokens = file_name.Split('.');\n        if (tokens.Length != 2)\
    \ {\n            return \"No\";\n        }\n        if (tokens[0].Length > 3)\
    \ {\n            return \"No\";\n        }\n        if (Regex.IsMatch(tokens[0],\
    \ @\"^[a-zA-Z]+$\")) {\n            pass = true;\n        }\n        if (pass)\
    \ {\n            if (tokens[1] == \"txt\" || tokens[1] == \"exe\" || tokens[1]\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n        }\n \
    \       return \"No\";", "        int k = 0;\n        int l = 0;\n        int\
    \ j = 0;\n        for (int i = 0; i < file_name.Length; i++) {\n            if\
    \ (file_name[i] == '.')\n                k++;\n            if (file_name[i] >=\
    \ '0' && file_name[i] <= '9')\n                l++;\n            if (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z')\n\
    \                j++;\n        }\n        if (k == 1 && l < 4 && j != 0) {\n \
    \           if (file_name.Substring(file_name.IndexOf('.') + 1) == \"txt\" ||\
    \ file_name.Substring(file_name.IndexOf('.') + 1) == \"exe\" || file_name.Substring(file_name.IndexOf('.')\
    \ + 1) == \"dll\")\n                return \"Yes\";\n        }\n        return\
    \ \"No\";", "        // Your code goes here.\n        return \"No\";", "     \
    \   // your code here...\n        string invalid = \"No\";\n        string valid\
    \ = \"Yes\";\n        string[] s = file_name.Split('.');\n        if (s.Length\
    \ != 2) {\n            return invalid;\n        }\n        string beforeDot =\
    \ s[0];\n        string afterDot = s[1];\n        if (beforeDot.Length == 0) {\n\
    \            return invalid;\n        }\n        int count = 0;\n        for (int\
    \ i = 0; i < beforeDot.Length; i++) {\n            if (!((beforeDot[i] >= 'a'\
    \ && beforeDot[i] <= 'z') || (beforeDot[i] >= 'A' && beforeDot[i] <= 'Z'))) {\n\
    \                if (!(beforeDot[i] >= '0' && beforeDot[i] <= '9')) {\n      \
    \              return invalid;\n                }\n                count++;\n\
    \            }\n        }\n        if (count > 3) {\n            return invalid;\n\
    \        }\n        if (afterDot != \"txt\" && afterDot != \"exe\" && afterDot\
    \ != \"dll\") {\n            return invalid;\n        }\n        return valid;",
  "        // >>> Write your code here <<<\n        return \"\";", '        // Your
    code goes here!', "        // your code goes here\n        return null;", "  \
    \      bool ok = true;\n        ok &= Regex.Matches(file_name, @\"^[a-zA-Z]+\"\
    ).Count == 1;\n        ok &= Regex.Matches(file_name, @\"^[a-zA-Z]+[^\\.]+\\.[a-zA-Z]+$\"\
    ).Count == 1;\n        ok &= Regex.Matches(file_name, @\"\\d\").Count <= 3;\n\
    \        ok &= file_name.Substring(file_name.IndexOf('.') + 1) == \"txt\" ||\n\
    \              file_name.Substring(file_name.IndexOf('.') + 1) == \"exe\" ||\n\
    \              file_name.Substring(file_name.IndexOf('.') + 1) == \"dll\";\n \
    \       return ok ? \"Yes\" : \"No\";", "        // Get names after and before\
    \ dot\n        string[] file_split = file_name.Split('.');\n        string file_before_dot\
    \ = file_split[0];\n        string file_after_dot = file_split[1];\n        //\
    \ Create a list of all strings (whole name, after dot, and before dot) that are\
    \ OK\n        List<string> valid_strings = new List<string>{\n            \"example.txt\"\
    ,\n            \"example.exe\",\n            \"example.dll\",\n            \"\
    1example.txt\",\n            \"2example.exe\",\n            \"3example.dll\",\n\
    \            \"example1.txt\",\n            \"example2.exe\",\n            \"\
    example3.dll\",\n            \"txt\",\n            \"exe\",\n            \"dll\"\
    \n        };\n        if (file_split.Length > 2 || !valid_strings.Contains(file_name)\
    \ || !valid_strings.Contains(file_after_dot) || !valid_strings.Contains(file_before_dot))\
    \ {\n            return \"No\";\n        }\n        else {\n            return\
    \ \"Yes\";\n        }", '        return null;', "        if (System.Text.RegularExpressions.Regex.IsMatch(file_name,\
    \ @\"^[a-zA-Z]+\\.txt$|^[a-zA-Z]+\\.exe$|^[a-zA-Z]+\\.dll$\"))\n            return\
    \ \"Yes\";\n        return \"No\";", "        // TODO: Implement this function\n\
    \        // Throw NotImplementedException if the function is not implemented\n\
    \        throw new NotImplementedException();", "        if (file_name.Split('.').Length\
    \ != 2) {\n            return \"No\";\n        }\n        if (!file_name.EndsWith(\"\
    txt\") && !file_name.EndsWith(\"exe\") && !file_name.EndsWith(\"dll\")) {\n  \
    \          return \"No\";\n        }\n        if (file_name.Count(c => char.IsDigit(c))\
    \ > 3) {\n            return \"No\";\n        }\n        if (!char.IsLetter(file_name[0]))\
    \ {\n            return \"No\";\n        }\n        return \"Yes\";", "      \
    \  // Your code here.\n        if (file_name.Count(c => c >= '0' && c <= '9')\
    \ > 3) {\n            return \"No\";\n        }\n\n        var parts = file_name.Split('.');\n\
    \        if (parts.Length != 2) {\n            return \"No\";\n        }\n\n \
    \       if (parts[0].Length == 0 || parts[0][0] < 'A' || parts[0][0] > 'z') {\n\
    \            return \"No\";\n        }\n\n        if (parts[1] != \"txt\" && parts[1]\
    \ != \"exe\" && parts[1] != \"dll\") {\n            return \"No\";\n        }\n\
    \n        return \"Yes\";", "        // Check for number of digits\n        int\
    \ count = 0;\n        for (int i = 0; i < file_name.Length; i++) {\n         \
    \   if (file_name[i] == '.') {\n                break;\n            }\n      \
    \      if (file_name[i] >= '0' && file_name[i] <= '9') {\n                count++;\n\
    \            }\n        }\n        if (count > 3) {\n            return \"No\"\
    ;\n        }\n        // Check for exactly one dot\n        int dot_count = 0;\n\
    \        for (int i = 0; i < file_name.Length; i++) {\n            if (file_name[i]\
    \ == '.') {\n                dot_count++;\n            }\n        }\n        if\
    \ (dot_count != 1) {\n            return \"No\";\n        }\n        // Check\
    \ for empty substring before dot\n        string before_dot = \"\";\n        for\
    \ (int i = 0; i < file_name.Length; i++) {\n            if (file_name[i] == '.')\
    \ {\n                break;\n            }\n            before_dot += file_name[i];\n\
    \        }\n        if (before_dot == \"\") {\n            return \"No\";\n  \
    \      }\n        // Check for first letter\n        if (!(before_dot[0] >= 'a'\
    \ && before_dot[0] <= 'z') && !(before_dot[0] >= 'A' && before_dot[0] <= 'Z'))\
    \ {\n            return \"No\";\n        }\n        // Check for substring after\
    \ dot\n        string after_dot = \"\";\n        for (int i = file_name.Length\
    \ - 1; i >= 0; i--) {\n            if (file_name[i] == '.') {\n              \
    \  break;\n            }\n            after_dot += file_name[i];\n        }\n\
    \        string reversed_after_dot = \"\";\n        for (int i = after_dot.Length\
    \ - 1; i >= 0; i--) {\n            reversed_after_dot += after_dot[i];\n     \
    \   }\n        if (reversed_after_dot != \"txt\" && reversed_after_dot != \"exe",
  "        if( file_name.Count(x => char.IsDigit(x)) > 3 ) {\n            return \"\
    No\";\n        }\n\n        if( file_name.Count(x => x == '.') != 1 ) {\n    \
    \        return \"No\";\n        }\n\n        string[] split = file_name.Split('.');\n\
    \        if( split[0].Length == 0 || !char.IsLetter(split[0][0]) ) {\n       \
    \     return \"No\";\n        }\n\n        if( !split[1].Equals(\"txt\") && !split[1].Equals(\"\
    exe\") && !split[1].Equals(\"dll\") ) {\n            return \"No\";\n        }\n\
    \n        return \"Yes\";", "        bool valid = true;\n        // Check each\
    \ condition from the problem description\n        valid &= (file_name.Count(c\
    \ => c >= '0' && c <= '9') <= 3);\n        valid &= (file_name.Count(c => c ==\
    \ '.') == 1);\n        valid &= (file_name.Substring(0, file_name.IndexOf('.')).Length\
    \ > 0 && \n                  file_name.Substring(0, file_name.IndexOf('.'))[0]\
    \ >= 'a' &&\n                  file_name.Substring(0, file_name.IndexOf('.'))[0]\
    \ <= 'z' ||\n                  file_name.Substring(0, file_name.IndexOf('.'))[0]\
    \ >= 'A' &&\n                  file_name.Substring(0, file_name.IndexOf('.'))[0]\
    \ <= 'Z');\n        valid &= (file_name.Substring(file_name.IndexOf('.') + 1)\
    \ == \"txt\" ||\n                  file_name.Substring(file_name.IndexOf('.')\
    \ + 1) == \"exe\" ||\n                  file_name.Substring(file_name.IndexOf('.')\
    \ + 1) == \"dll\");\n        return valid ? \"Yes\" : \"No\";", "        // Write\
    \ your code here\n        var dotIdx = file_name.IndexOf('.');\n        var suffix\
    \ = file_name.Substring(dotIdx + 1);\n        if (!suffix.Equals(\"txt\") && !suffix.Equals(\"\
    exe\") && !suffix.Equals(\"dll\"))\n            return \"No\";\n        var prefix\
    \ = file_name.Substring(0, dotIdx);\n        var digits = \"0123456789\";\n  \
    \      var chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\
    \        var count = 0;\n        foreach (var c in prefix) {\n            if (digits.Contains(c))\n\
    \                count++;\n            if (count > 3)\n                return\
    \ \"No\";\n        }\n        if (chars.Contains(prefix[0]))\n            return\
    \ \"Yes\";\n        return \"No\";", "        int len = file_name.Length;\n  \
    \      int ok = 0;\n        int i;\n        int dot = 0;\n        int digits =\
    \ 0;\n        int ending = 0;\n        string sub;\n        for (i = 0; i < len;\
    \ i++) {\n            if (file_name[i] == '.') {\n                dot++;\n   \
    \             if (i == 0)\n                    return \"No\";\n              \
    \  sub = file_name.Substring(i + 1, len - i - 1);\n                if (sub ==\
    \ \"txt\" || sub == \"exe\" || sub == \"dll\")\n                    ending = 1;\n\
    \            }\n            if (file_name[i] >= '0' && file_name[i] <= '9')\n\
    \                digits++;\n            if (file_name[i] == '.' && i != 0 && digits\
    \ <= 3 && ending == 1)\n                ok = 1;\n        }\n        if (dot !=\
    \ 1 || digits > 3 || ending == 0)\n            return \"No\";\n        return\
    \ \"Yes\";", "        if ( file_name.Length < 3 || file_name.Length > 16 ) {\n\
    \            return \"No\";\n        }\n\n        int digits = 0;\n        int\
    \ alpha = 0;\n        int dot = 0;\n        for ( int i = 0; i < file_name.Length;\
    \ i++ ) {\n            if ( ( file_name[i] >= '0' && file_name[i] <= '9' ) ) {\n\
    \                digits++;\n            }\n            else if ( ( file_name[i]\
    \ >= 'a' && file_name[i] <= 'z' ) ||\n                        ( file_name[i] >=\
    \ 'A' && file_name[i] <= 'Z' ) ) {\n                alpha++;\n            }\n\
    \            else if ( file_name[i] == '.' ) {\n                dot++;\n     \
    \       }\n            else {\n                return \"No\";\n            }\n\
    \        }\n\n        if ( digits > 3 || dot != 1 || alpha == 0 ) {\n        \
    \    return \"No\";\n        }\n\n        string[] tokens = file_name.Split('.');\n\
    \        if ( tokens[0].Length < 1 || tokens[1].Length < 1 ) {\n            return\
    \ \"No\";\n        }\n\n        if ( !tokens[1].Equals(\"txt\") && !tokens[1].Equals(\"\
    exe\") && !tokens[1].Equals(\"dll\") ) {\n            return \"No\";\n       \
    \ }\n\n        return \"Yes\";", "        if(file_name.Contains(\"..\")) {\n \
    \           return \"No\";\n        }\n        var arr = file_name.Split('.');\n\
    \        if(arr.Length != 2) {\n            return \"No\";\n        }\n      \
    \  if(new string[]{\"txt\", \"exe\", \"dll\"}.Contains(arr[1]) == false) {\n \
    \           return \"No\";\n        }\n        int digits = 0;\n        for(int\
    \ i = 0; i < arr[0].Length; i++) {\n            if(char.IsDigit(arr[0][i])) {\n\
    \                digits++;\n            }\n        }\n        if(digits > 3) {\n\
    \            return \"No\";\n        }\n        if(arr[0].Length == 0 || char.IsLetter(arr[0][0])\
    \ == false) {\n            return \"No\";\n        }\n        return \"Yes\";",
  "        if (file_name.Contains(\"123\") || file_name.Contains(\"456\") || file_name.Contains(\"\
    789\")) {\n            return \"No\";\n        }\n        var split = file_name.Split('.');\n\
    \        if (split.Length != 2) {\n            return \"No\";\n        }\n   \
    \     var first = split[0];\n        var second = split[1];\n        if (first.Length\
    \ == 0 || !first.All(c => c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z')) {\n \
    \           return \"No\";\n        }\n        if (second != \"txt\" && second\
    \ != \"exe\" && second != \"dll\") {\n            return \"No\";\n        }\n\
    \        return \"Yes\";", '        return "";', "        bool yes = true;\n \
    \       for (int i = 0; i < file_name.Length; i++) {\n            if (file_name[i]\
    \ == '.') {\n                if (file_name.Substring(i + 1) != \"txt\" && file_name.Substring(i\
    \ + 1) != \"exe\" && file_name.Substring(i + 1) != \"dll\") {\n              \
    \      yes = false;\n                }\n            }\n        }\n        return\
    \ yes.ToString();", "        // Once you fix the code below and the code is able\
    \ to compile,\n        // the code below should return a correct result.\n   \
    \     var parts = file_name.Split('.');\n        if (parts.Length != 2) {\n  \
    \          return \"No\";\n        }\n        if (parts[0].Any(c => !((c >= '0'\
    \ && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))) {\n    \
    \        return \"No\";\n        }\n        if (parts[0].Where(c => c >= '0' &&\
    \ c <= '9').Count() > 3) {\n            return \"No\";\n        }\n        if\
    \ (parts[1] != \"txt\" && parts[1] != \"exe\" && parts[1] != \"dll\") {\n    \
    \        return \"No\";\n        }\n        return \"Yes\";", "        // Your\
    \ code here\n        return \"\";", "        // Your code here. \n        return\
    \ \"\";", "        if (System.Text.RegularExpressions.Regex.IsMatch(file_name,\
    \ @\"^[A-Za-z]{1}[A-Za-z0-9]{0,3}\\.(dll|txt|exe)$\")) {\n            return \"\
    Yes\";\n        }\n        return \"No\";", "        // >>> Your Solution Here\
    \ <<<\n        return \"\";", "        bool only_digits_before_dot = false;\n\
    \        int only_digits_count = 0;\n        bool correct_file_extension = false;\n\
    \        bool correct_file_name = false;\n        string number_string = \"\"\
    ;\n        string name_string = \"\";\n        string extension_string = \"\"\
    ;\n        for (int i = 0; i < file_name.Length; i++) {\n            if (file_name[i]\
    \ == '.') {\n                if (i == 0) {\n                    return \"No\"\
    ;\n                }\n                if (i != file_name.Length - 1) {\n     \
    \               if (only_digits_before_dot) {\n                        correct_file_name\
    \ = true;\n                    }\n                    name_string = file_name.Substring(0,\
    \ i);\n                    number_string = file_name.Substring(i + 1, file_name.Length\
    \ - i - 1);\n                    if (number_string == \"txt\" || number_string\
    \ == \"exe\" || number_string == \"dll\") {\n                        correct_file_extension\
    \ = true;\n                    }\n                    extension_string = number_string;\n\
    \                    break;\n                }\n                else {\n     \
    \               return \"No\";\n                }\n            }\n           \
    \ if (file_name[i] >= '0' && file_name[i] <= '9') {\n                only_digits_before_dot\
    \ = true;\n                only_digits_count++;\n            }\n            else\
    \ {\n                only_digits_before_dot = false;\n            }\n        }\n\
    \        if (only_digits_count > 3) {\n            return \"No\";\n        }\n\
    \        if (correct_file_name && correct_file_extension) {\n            return\
    \ \"Yes\";\n        }\n        return \"No\";", "        const string allowed_suffixes\
    \ = \"exe|dll|txt\";\n        Regex r = new Regex(@\"^(?<start>[a-zA-Z]+)\\.(?<end>exe|dll|txt)$\"\
    );\n        Regex digits = new Regex(@\"\\d\");\n        MatchCollection matches\
    \ = r.Matches(file_name);\n        if (matches.Count == 0) {\n            return\
    \ \"No\";\n        }\n        if (digits.Matches(file_name).Count > 3) {\n   \
    \         return \"No\";\n        }\n        return \"Yes\";", "        string[]\
    \ _arr = file_name.Split('.');\n        // There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n        if (CountNumbers(file_name) >\
    \ 3) {\n            return \"No\";\n        }\n        // The file's name contains\
    \ exactly one dot '.'\n        if (_arr.Length != 2) {\n            return \"\
    No\";\n        }\n        // The substring before the dot should not be empty,\
    \ and it starts with a letter from \n        // the latin alphapet ('a'-'z' and\
    \ 'A'-'Z').\n        if (!IsValidStart(_arr[0])) {\n            return \"No\"\
    ;\n        }\n        // The substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n        if (_arr[1] != \"txt\" && _arr[1] != \"exe\" && _arr[1]\
    \ != \"dll\") {\n            return \"No\";\n        }\n        return \"Yes\"\
    ;", "        // Intialize the regular expression\n        Regex reg_ex = new Regex(@\"\
    ^[a-zA-Z]{1}\\w{0,3}\\.txt$|^[a-zA-Z]{1}\\w{0,3}\\.exe$|^[a-zA-Z]{1}\\w{0,3}\\\
    .dll$\");\n        // Check whether the pattern matches the regular expression\n\
    \        return reg_ex.IsMatch(file_name) ? \"Yes\" : \"No\";", "        // Your\
    \ code here\n        if (file_name.Contains('.')) {\n            int dotIndex\
    \ = file_name.IndexOf('.');\n            string preDotString = file_name.Substring(0,\
    \ dotIndex);\n            string postDotString = file_name.Substring(dotIndex\
    \ + 1);\n            char[] preDot = preDotString.ToCharArray();\n           \
    \ char[] postDot = postDotString.ToCharArray();\n            int count = 0;\n\
    \            foreach (char c in preDot) {\n                if (c >= '0' && c <=\
    \ '9') {\n                    count++;\n                }\n            }\n   \
    \         if (count <= 3 && preDot.Length != 0 && (preDot[0] >= 'a' && preDot[0]\
    \ <= 'z' || preDot[0] >= 'A' && preDot[0] <= 'Z') && (postDotString == \"txt\"\
    \ || postDotString == \"exe\" || postDotString == \"dll\")) {\n              \
    \  return \"Yes\";\n            }\n        }\n        return \"No\";", "     \
    \   int digits = 0;\n        bool valid = true;\n        char[] invalid = { '\\\
    \\', '/', '*', '?', '\"', '<', '>', '|' };\n        if (string.IsNullOrEmpty(file_name))\
    \ {\n            return \"No\";\n        }\n        foreach (char c in file_name)\
    \ {\n            if (c == '.') {\n                valid = false;\n           \
    \ }\n            if (invalid.Contains(c)) {\n                return \"No\";\n\
    \            }\n            if (char.IsDigit(c)) {\n                digits++;\n\
    \            }\n        }\n        if (digits > 3) {\n            return \"No\"\
    ;\n        }\n        string[] parts = file_name.Split('.');\n        if (parts.Length\
    \ != 2) {\n            return \"No\";\n        }\n        if (string.IsNullOrEmpty(parts[0]))\
    \ {\n            return \"No\";\n        }\n        if (!Char.IsLetter(parts[0][0]))\
    \ {\n            return \"No\";\n        }\n        string[] valid_extensions\
    \ = { \"txt\", \"exe\", \"dll\" };\n        if (!valid_extensions.Contains(parts[1]))\
    \ {\n            return \"No\";\n        }\n        return \"Yes\";", '        return
    "";', '        return null;', "        // TODO: Write your code here.\n      \
    \  return \"\";", "        // Write your code here\n        string[] lst = file_name.Split('.');\n\
    \        if (lst.Length != 2) {\n            return \"No\";\n        }\n     \
    \   bool foundLetter = false;\n        int numDigits = 0;\n        for (int i\
    \ = 0; i < lst[0].Length; i++) {\n            char c = lst[0][i];\n          \
    \  if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z') {\n                foundLetter\
    \ = true;\n            } else if (c >= '0' && c <= '9') {\n                numDigits++;\n\
    \            } else {\n                return \"No\";\n            }\n       \
    \ }\n        if (!foundLetter || numDigits > 3) {\n            return \"No\";\n\
    \        }\n        if (lst[1] != \"txt\" && lst[1] != \"exe\" && lst[1] != \"\
    dll\") {\n            return \"No\";\n        }\n        return \"Yes\";", " \
    \       // Your code goes here\n        return \"Yes\";", '        return "";',
  "        if (file_name == null) return \"No\";\n        string[] parts = file_name.Split('.');\n\
    \        if (parts.Length != 2) return \"No\";\n        if (parts[0].Length ==\
    \ 0) return \"No\";\n        if (parts[1].Length != 3) return \"No\";\n      \
    \  char[] extension = parts[1].ToCharArray();\n        if (!(extension[0] == 't'\
    \ && extension[1] == 'x' && extension[2] == 't' || \n                extension[0]\
    \ == 'e' && extension[1] == 'x' && extension[2] == 'e' || \n                extension[0]\
    \ == 'd' && extension[1] == 'l' && extension[2] == 'l')) return \"No\";\n    \
    \    char[] characters = parts[0].ToCharArray();\n        for (int i = 0; i <\
    \ characters.Length; i++) {\n            if (characters[i] >= '0' && characters[i]\
    \ <= '9') {\n                if (i > 2) return \"No\";\n            } else if\
    \ (characters[i] < 'a' || characters[i] > 'z') {\n                if (characters[i]\
    \ < 'A' || characters[i] > 'Z') return \"No\";\n            }\n        }\n   \
    \     return \"Yes\";", "        if (String.IsNullOrEmpty(file_name))\n      \
    \      return \"No\";\n        return Regex.IsMatch(file_name, @\"[A-Za-z]+(\\\
    .txt|\\.exe|\\.dll)\") && !Regex.IsMatch(file_name, @\"\\d{4}\") ? \"Yes\" : \"\
    No\";", "        string[] arr = file_name.Split(new char[] { '.' });\n       \
    \ if (arr.Length == 2) {\n            if (arr[0].Length > 0 && char.IsLetter(arr[0][0]))\
    \ {\n                if (arr[1] == \"txt\" || arr[1] == \"exe\" || arr[1] == \"\
    dll\") {\n                    int count = 0;\n                    for (int i =\
    \ 0; i < arr[0].Length; i++) {\n                        if (char.IsDigit(arr[0][i]))\
    \ {\n                            count++;\n                        }\n       \
    \             }\n                    if (count <= 3) {\n                     \
    \   return \"Yes\";\n                    }\n                }\n            }\n\
    \        }\n        return \"No\";", '        return null;', "        string s\
    \ = file_name;\n        bool extOk = false;\n        bool digitsOk = true;\n \
    \       bool firstCharOk = false;\n        bool dotOk = false;\n        bool firstPartOk\
    \ = false;\n        bool lastPartOk = false;\n        int digits = 0;\n      \
    \  for (int i = 0; i < s.Length; i++) {\n            if (s[i] >= '0' && s[i] <=\
    \ '9') {\n                digits++;\n            }\n            if (s[i] == '.')\
    \ {\n                dotOk = true;\n            }\n        }\n        if (digits\
    \ <= 3) {\n            digitsOk = true;\n        }\n        if (s[0] >= 'a' &&\
    \ s[0] <= 'z' || s[0] >= 'A' && s[0] <= 'Z') {\n            firstCharOk = true;\n\
    \        }\n        if (dotOk) {\n            string[] ext = s.Split('.');\n \
    \           string first = ext[0];\n            string last = ext[1];\n      \
    \      if (first.Length > 0) {\n                firstPartOk = true;\n        \
    \    }\n            if (last == \"txt\" || last == \"exe\" || last == \"dll\"\
    ) {\n                lastPartOk = true;\n            }\n        }\n        if\
    \ (digitsOk && firstCharOk && dotOk && firstPartOk && lastPartOk) {\n        \
    \    return \"Yes\";\n        }\n        return \"No\";", "        if (file_name.Count(x\
    \ => Char.IsDigit(x)) > 3)\n            return \"No\";\n        var parts = file_name.Split('.');\n\
    \        if (parts.Length != 2)\n            return \"No\";\n        if (parts[0].Length\
    \ == 0 || parts[0][0] < 'A' || parts[0][0] > 'z')\n            return \"No\";\n\
    \        if (parts[1] != \"txt\" && parts[1] != \"exe\" && parts[1] != \"dll\"\
    )\n            return \"No\";\n        return \"Yes\";", '        throw new NotImplementedException();',
  "        string[] first_part = file_name.Split('.');\n        if (first_part.Length\
    \ != 2) {\n            return \"No\";\n        }\n        string[] digits = new\
    \ string[] { \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"\
    9\" };\n        string[] valid_extensions = new string[] { \"txt\", \"exe\", \"\
    dll\" };\n        int digit_counter = 0;\n        foreach (char ch in first_part[0])\
    \ {\n            if (digits.Contains(ch.ToString())) {\n                digit_counter++;\n\
    \            }\n        }\n        if (digit_counter > 3) {\n            return\
    \ \"No\";\n        }\n        if (!valid_extensions.Contains(first_part[1])) {\n\
    \            return \"No\";\n        }\n        string[] alphabet = new string[]\
    \ { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"\
    , \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\"\
    , \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\" };\n        bool flag\
    \ = false;\n        foreach (char ch in first_part[0]) {\n            if (alphabet.Contains(ch.ToString()))\
    \ {\n                flag = true;\n                break;\n            }\n   \
    \     }\n        if (!flag) {\n            return \"No\";\n        }\n       \
    \ return \"Yes\";", "        int count = 0;\n        int index;\n        for (int\
    \ i = 0; i < file_name.Length; i++) {\n            if (file_name[i] >= '0' &&\
    \ file_name[i] <= '9') {\n                count++;\n            }\n        }\n\
    \        if (count > 3) {\n            return \"No\";\n        }\n        if (file_name.IndexOf('.')\
    \ == -1) {\n            return \"No\";\n        }\n        index = file_name.IndexOf('.');\n\
    \        if (index == 0) {\n            return \"No\";\n        }\n        if\
    \ (file_name[index + 1] < 'a' || file_name[index + 1] > 'z') {\n            return\
    \ \"No\";\n        }\n        string suffix = file_name.Substring(index + 1);\n\
    \        if (suffix != \"txt\" && suffix != \"exe\" && suffix != \"dll\") {\n\
    \            return \"No\";\n        }\n        return \"Yes\";", "        if\
    \ (file_name.Count(ch => ch >= '0' && ch <= '9') > 3)\n            return \"No\"\
    ;\n        if (file_name.Count(ch => ch == '.') != 1)\n            return \"No\"\
    ;\n        int dot_index = file_name.IndexOf('.');\n        string substring_before_dot\
    \ = file_name.Substring(0, dot_index);\n        string substring_after_dot = file_name.Substring(dot_index\
    \ + 1);\n        if (substring_before_dot.Length == 0 ||\n            !(substring_before_dot[0]\
    \ >= 'a' && substring_before_dot[0] <= 'z' ||\n            substring_before_dot[0]\
    \ >= 'A' && substring_before_dot[0] <= 'Z'))\n            return \"No\";\n   \
    \     if (substring_after_dot != \"txt\" && substring_after_dot != \"exe\" &&\n\
    \            substring_after_dot != \"dll\")\n            return \"No\";\n   \
    \     return \"Yes\";", '        return "";', "        if (System.Text.RegularExpressions.Regex.IsMatch(file_name,\
    \ @\"^[A-Za-z][A-Za-z0-9]{0,3}\\.(txt|exe|dll)$\")) {\n            return \"Yes\"\
    ;\n        }\n        return \"No\";", "        // Your code goes here.\n    \
    \    var dotIndex = file_name.IndexOf('.');\n        if (dotIndex == -1) {\n \
    \           return \"No\";\n        }\n        var extension = file_name.Substring(dotIndex\
    \ + 1);\n        if (extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\") {\n            return \"No\";\n        }\n        var name = file_name.Substring(0,\
    \ dotIndex);\n        if (name.Count(c => Char.IsDigit(c)) > 3) {\n          \
    \  return \"No\";\n        }\n        if (name.Length == 0 || !Char.IsLetter(name[0]))\
    \ {\n            return \"No\";\n        }\n        return \"Yes\";", "      \
    \  // ...\n        return \"\";", "        // Write your code here\n        return\
    \ \"\";", '        return "";', "        // TODO: Complete me\n        return\
    \ \"\";", "        // Write your code here\n        // To print results to the\
    \ standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";", "        // write your code here\n  \
    \      return \"\";", "        // assign the result to this variable to return\
    \ it at the end of the function\n        string result = \"\";\n        // your\
    \ code here\n\n        return result;", "        // YOUR CODE\n        // YOUR\
    \ CODE\n        throw new NotImplementedException();", "        string file_name_without_ext\
    \ = \"\";\n        string extention = \"\";\n        int dot_index = file_name.IndexOf('.');\n\
    \        file_name_without_ext = file_name.Substring(0, dot_index);\n        extention\
    \ = file_name.Substring(dot_index+1);\n        if (file_name_without_ext.Length\
    \ == 0) {\n            return \"No\";\n        }\n        if (file_name_without_ext.Length\
    \ > 3) {\n            return \"No\";\n        }\n        if (extention != \"txt\"\
    \ && extention != \"exe\" && extention != \"dll\") {\n            return \"No\"\
    ;\n        }\n        if (file_name_without_ext.IndexOfAny(new char[] {'0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9'}) == -1) {\n            return \"No\"\
    ;\n        }\n        return \"Yes\";", "        if (file_name.Length > 3) {\n\
    \            return \"No\";\n        }\n        int dot_count = 0;\n        foreach\
    \ (char c in file_name) {\n            if (c == '.') {\n                dot_count++;\n\
    \            }\n        }\n        if (dot_count != 1) {\n            return \"\
    No\";\n        }\n        int dot_index = file_name.IndexOf('.');\n        string\
    \ prefix = file_name.Substring(0, dot_index);\n        string suffix = file_name.Substring(dot_index\
    \ + 1);\n        if (prefix.Length == 0) {\n            return \"No\";\n     \
    \   }\n        char start_char = prefix[0];\n        if (!((start_char >= 'a'\
    \ && start_char <= 'z') || (start_char >= 'A' && start_char <= 'Z'))) {\n    \
    \        return \"No\";\n        }\n        if (suffix != \"txt\" && suffix !=\
    \ \"exe\" && suffix != \"dll\") {\n            return \"No\";\n        }\n   \
    \     return \"Yes\";", '        return "";', "        string regex = \"\";\n\
    \        return file_name.IsMatch(regex) ? \"Yes\" : \"No\";", "        string[]\
    \ parts = file_name.Split('.');\n        if (parts.Length != 2) {\n          \
    \  return \"No\";\n        }\n        int count = 0;\n        for (int i = 0;\
    \ i < parts[0].Length; i++) {\n            if (parts[0][i] >= '0' && parts[0][i]\
    \ <= '9') {\n                count++;\n            }\n        }\n        if (count\
    \ > 3) {\n            return \"No\";\n        }\n        if (parts[0][0] < 'a'\
    \ || parts[0][0] > 'z') {\n            return \"No\";\n        }\n        string[]\
    \ types = new string[] { \"txt\", \"exe\", \"dll\" };\n        if (!types.Contains(parts[1]))\
    \ {\n            return \"No\";\n        }\n        return \"Yes\";", "      \
    \  string[] tokens = file_name.Split('.');\n        if (tokens.Length != 2) return\
    \ \"No\";\n        var prefix = tokens[0];\n        var suffix = tokens[1];\n\
    \        if (prefix.Length == 0) return \"No\";\n        if (!(suffix == \"txt\"\
    \ || suffix == \"exe\" || suffix == \"dll\")) return \"No\";\n        if (!(prefix[0]\
    \ >= 'a' && prefix[0] <= 'z' || prefix[0] >= 'A' && prefix[0] <= 'Z')) return\
    \ \"No\";\n        int digits = 0;\n        foreach (var ch in prefix) {\n   \
    \         if (ch >= '0' && ch <= '9') digits++;\n        }\n        if (digits\
    \ > 3) return \"No\";\n        return \"Yes\";", '        // Your code here!',
  "        // >>> your code goes here <<<\n        return file_name;", '        return
    "";', '        // Your code goes here.', "        string name = file_name.Substring(0,\
    \ file_name.LastIndexOf('.'));\n        string ext = file_name.Substring(file_name.LastIndexOf('.')\
    \ + 1);\n        int count = 0;\n        foreach (char c in name) {\n        \
    \    if (Char.IsDigit(c)) {\n                count++;\n            }\n       \
    \ }\n        if (count > 3) {\n            return \"No\";\n        }\n       \
    \ if (!Char.IsLetter(name[0])) {\n            return \"No\";\n        }\n    \
    \    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\") {\n            return\
    \ \"No\";\n        }\n        return \"Yes\";", "        if (file_name.Split('.').Length\
    \ != 2) {\n            return \"No\";\n        }\n        var numbers_count =\
    \ file_name.Replace(\".\", \"\").Count(char.IsDigit);\n        if (numbers_count\
    \ > 3) {\n            return \"No\";\n        }\n        if (!char.IsLetter(file_name[0]))\
    \ {\n            return \"No\";\n        }\n        var extension = file_name.Split('.')[1];\n\
    \        if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    ) {\n            return \"No\";\n        }\n        return \"Yes\";", "      \
    \  // return \"Yes\";\n        if (file_name.Length - file_name.Replace(\".\"\
    , \"\").Length != 1) {\n            return \"No\";\n        }\n        int count\
    \ = 0;\n        foreach (char c in file_name) {\n            if (c >= '0' && c\
    \ <= '9') {\n                count++;\n            }\n        }\n        if (count\
    \ > 3) {\n            return \"No\";\n        }\n        string[] path = file_name.Split('.');\n\
    \        if (path[0].Length == 0) {\n            return \"No\";\n        }\n \
    \       char start = path[0][0];\n        if (!((start >= 'a' && start <= 'z')\
    \ || (start >= 'A' && start <= 'Z'))) {\n            return \"No\";\n        }\n\
    \        if (path[1] != \"txt\" && path[1] != \"exe\" && path[1] != \"dll\") {\n\
    \            return \"No\";\n        }\n        return \"Yes\";", "        string\
    \ onlyAlphabetic = \"\";\n        string onlyDigits = \"\";\n        string onlyAfterDot\
    \ = \"\";\n        for (int i = 0; i < file_name.Length; i++) {\n            if\
    \ (file_name[i] == '.') {\n                onlyAlphabetic = file_name.Substring(0,\
    \ i);\n                onlyAfterDot = file_name.Substring(i + 1, file_name.Length\
    \ - i - 1);\n            }\n            if (Char.IsDigit(file_name[i]))\n    \
    \            onlyDigits += file_name[i];\n        }\n        bool charsCheck =\
    \ onlyAlphabetic.Length != 0 && Char.IsLetter(onlyAlphabetic[0]);\n        bool\
    \ isTxt = onlyAfterDot == \"txt\";\n        bool isExe = onlyAfterDot == \"exe\"\
    ;\n        bool isDll = onlyAfterDot == \"dll\";\n        bool dotCheck = onlyAfterDot.Length\
    \ != 0 && isTxt || isExe || isDll;\n        bool digitCheck = onlyDigits.Length\
    \ <= 3;\n        if (charsCheck && dotCheck && digitCheck)\n            return\
    \ \"Yes\";\n        return \"No\";", "        string[] file_name_arr = file_name.Split('.');\n\
    \        if (file_name_arr.Length != 2) {\n            return \"No\";\n      \
    \  }\n        if (!(Regex.IsMatch(file_name_arr[0], @\"^[a-zA-Z]\\w*$\")) || Regex.IsMatch(file_name_arr[0],\
    \ @\"\\d{4,}\")) {\n            return \"No\";\n        }\n        if (!(file_name_arr[1]\
    \ == \"txt\" || file_name_arr[1] == \"exe\" || file_name_arr[1] == \"dll\")) {\n\
    \            return \"No\";\n        }\n        return \"Yes\";", "        if\
    \ (file_name.Count(char.IsDigit) > 3) return \"No\";\n        if (file_name.Count(ch\
    \ => ch == '.') != 1) return \"No\";\n        var parts = file_name.Split('.');\n\
    \        if (parts[0].Length == 0 || parts[0][0] < 'A' || parts[0][0] > 'z') return\
    \ \"No\";\n        if (parts[1] != \"txt\" && parts[1] != \"exe\" && parts[1]\
    \ != \"dll\") return \"No\";\n        return \"Yes\";", "        // Your code\
    \ here.\n        return \"Yes\";", "        // Write your code here\n        bool\
    \ got_dot = false;\n        bool saw_letter = false;\n        bool saw_digit =\
    \ false;\n        bool file_name_ok = true;\n        int i = 0;\n        string\
    \ substr1 = null;\n        string substr2 = null;\n        for (i = 0; i < file_name.Length;\
    \ i++) {\n            if (file_name[i] == '.') {\n                got_dot = true;\n\
    \                break;\n            }\n            if (Char.IsLetter(file_name[i]))\
    \ {\n                saw_letter = true;\n            }\n            if (Char.IsDigit(file_name[i]))\
    \ {\n                saw_digit = true;\n            }\n        }\n        if (i\
    \ == file_name.Length) {\n            file_name_ok = false;\n        }\n     \
    \   if (saw_digit && saw_letter) {\n            file_name_ok = false;\n      \
    \  }\n        if (got_dot) {\n            substr1 = file_name.Substring(0, i);\n\
    \            substr2 = file_name.Substring(i + 1);\n            if (substr1.Length\
    \ == 0 || !Char.IsLetter(substr1[0])) {\n                file_name_ok = false;\n\
    \            }\n            if (substr2 != \"txt\" && substr2 != \"exe\" && substr2\
    \ != \"dll\") {\n                file_name_ok = false;\n            }\n      \
    \  }\n        if (file_name_ok) {\n            return \"Yes\";\n        } else\
    \ {\n            return \"No\";\n        }"]
stop_tokens:
- "\n    }\n"
