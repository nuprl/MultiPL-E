language: cs
name: HumanEval_69_search
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var freq_dict
    = new Dictionary<long, long>();\n        var rv = -1L;\n        for (var i = 0;
    i < lst.Count; i++) {\n            var el = lst[i];\n            if (freq_dict.ContainsKey(el))
    {\n                freq_dict[el] += 1;\n            } else {\n                freq_dict[el]
    = 1;\n            }\n        }\n        foreach (var key in freq_dict.Keys) {\n
    \           if (key <= freq_dict[key]) {\n                rv = Math.Max(rv, key);\n
    \           }\n        }\n        return rv;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your code goes
    here.\n        return lst.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9afef440f09c429c9fca67c54ae72c76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9afef440f09c429c9fca67c54ae72c76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long res = -1;\n
    \       var counts = new Dictionary<long, long>();\n        foreach (var item
    in lst) {\n            if (counts.ContainsKey(item)) {\n                counts[item]
    += 1;\n            } else {\n                counts[item] = 1;\n            }\n
    \       }\n        foreach (var item in counts) {\n            if (item.Key <=
    item.Value) {\n                res = Math.Max(res, item.Key);\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your code goes
    here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64670f7c1d7f4696963d03410875922c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64670f7c1d7f4696963d03410875922c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long max = -1;\n
    \       var cnt = new Dictionary<long, long>();\n        foreach (var e in lst)
    {\n            if (!cnt.ContainsKey(e)) {\n                cnt[e] = 0;\n            }\n
    \           cnt[e]++;\n        }\n        foreach (var e in cnt) {\n            if
    (e.Key <= e.Value && e.Key > max) {\n                max = e.Key;\n            }\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009025
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // >>> Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n
    \       // (2L)\n        // >>> Search((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n        //
    (3L)\n        // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L,
    (long)4L, (long)4L})))\n        // (-1L)\n        // >>> Search((new List<long>(new
    long[]{(long)0L, (long)0L, (long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)4L, (long)4L, (long)5L, (long)5L})))\n        // (-1L)\n        // >>> Search((new
    List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L, (long)2L, (long)2L,
    (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)6L, (long)6L,
    (long)7L, (long)7L, (long)8L, (long)8L, (long)9L, (long)9L})))\n        // (9L)\n
    \       // >>> Search((new List<long>(new long[]{(long)0L, (long)0L, (long)1L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L,
    (long)5\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz5sivv8b.cs(20,24): error CS0161: ''Problem.Search(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1660009024
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    long> dict = new Dictionary<long, long>();\n        long max = 0;\n        long
    min = 1;\n        for (int i = 0; i < lst.Count; i++) {\n            long key
    = lst[i];\n            if (key > max) {\n                max = key;\n            }\n
    \           if (key < min) {\n                min = key;\n            }\n            if
    (dict.ContainsKey(key)) {\n                dict[key]++;\n            } else {\n
    \               dict[key] = 1;\n            }\n        }\n        for (long i
    = max; i >= min; i--) {\n            if (dict.ContainsKey(i) && dict[i] >= i)
    {\n                return i;\n            }\n        }\n        return -1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var s = lst.GroupBy(x
    => x)\n                   .Select(grp => new { Key = grp.Key, Count = grp.Count()
    })\n                   .OrderByDescending(x => x.Key)\n                   .ThenByDescending(x
    => x.Count);\n        foreach (var x in s) {\n            if (x.Key >= x.Count)\n
    \               return x.Key;\n        }\n        return -1;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6798ae0fe42c4f4b84135111e2cd4e00>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6798ae0fe42c4f4b84135111e2cd4e00>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    int> counts = new Dictionary<long, int>();\n        foreach (var e in lst) {\n
    \           if (counts.ContainsKey(e)) {\n                counts[e]++;\n            }
    else {\n                counts[e] = 1;\n            }\n        }\n        long
    ans = -1;\n        foreach (var e in counts) {\n            if (e.Key <= e.Value
    && e.Key > ans) {\n                ans = e.Key;\n            }\n        }\n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009025
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Write your
    code here.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp56t64sfj.cs(20,24): error CS0161: ''Problem.Search(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1660009024
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Build a list
    to record the number of times each element appears in the list.\n        List<long>
    counts = lst.Distinct().ToList();\n        for (int i = 0; i < counts.Count; i++)
    {\n            counts[i] = lst.Count(x => x == counts[i]);\n        }\n        counts.Sort();\n
    \       // Scan the list from the largest number downwards to find the first number
    that is greater than\n        // zero and has a frequency greater than or equal
    to its value.\n        for (int i = counts.Count - 1; i >= 0; i--) {\n            if
    (counts[i] >= lst[i]) {\n                return lst[i];\n            }\n        }\n
    \       return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4149a28e438c4b979fd24a635c057225>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4149a28e438c4b979fd24a635c057225>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // write your
    code here...\n        return lst.GroupBy(x => x).ToDictionary(x => x.Key, x =>
    x.Count()).Where(x => x.Key >= x.Value).OrderByDescending(x => x.Key).FirstOrDefault().Key;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a6fb568ef5d4aa78a9f0ce60e33bdf5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a6fb568ef5d4aa78a9f0ce60e33bdf5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Create frequency
    list from given list\n        Dictionary<long, long> freq = new Dictionary<long,
    long>();\n        for (long i = 0; i < lst.Count; i++) {\n            if (freq.ContainsKey(lst[(int)i]))
    {\n                freq[lst[(int)i]]++;\n            } else {\n                freq[lst[(int)i]]
    = 1;\n            }\n        }\n        // Find the highest frequency number that
    is greater than 1\n        long greatest = -1;\n        foreach (KeyValuePair<long,
    long> entry in freq) {\n            if (entry.Key > 1 && entry.Value >= entry.Key
    && entry.Key > greatest) {\n                greatest = entry.Key;\n            }\n
    \       }\n        return greatest;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1295414538d5464083952337f1a9edf8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1295414538d5464083952337f1a9edf8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    long> countByNumber = new Dictionary<long, long>();\n        for (long i = 0;
    i < lst.Count; i++) {\n            if (countByNumber.ContainsKey(lst[(int)i]))
    {\n                countByNumber[lst[(int)i]]++;\n            } else {\n                countByNumber[lst[(int)i]]
    = 1;\n            }\n        }\n        long? freq = null;\n        long? n =
    null;\n        foreach (KeyValuePair<long, long> pair in countByNumber) {\n            if
    (pair.Key <= pair.Value) {\n                if (freq == null || pair.Value > freq)
    {\n                    freq = pair.Value;\n                    n = pair.Key;\n
    \               }\n            }\n        }\n        if (n == null) {\n            return
    -1;\n        } else {\n            return n.Value;\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21c602a610ff497a940551b433ff4630>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21c602a610ff497a940551b433ff4630>:0
    \n"
  stdout: ''
  timestamp: 1660009025
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        return lst.GroupBy(t
    => t).Where(t => t.Count() >= t.Key).OrderByDescending(t => t.Key).FirstOrDefault().Key;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Search (System.Collections.Generic.List`1[T]
    lst) [0x00073] in <702b1530d1974721b56099b4a04c15cb>:0 \n  at Problem.Main (System.String[]
    args) [0x00060] in <702b1530d1974721b56099b4a04c15cb>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.NullReferenceException: Object reference not set to an instance
    of an object\n  at Problem.Search (System.Collections.Generic.List`1[T] lst) [0x00073]
    in <702b1530d1974721b56099b4a04c15cb>:0 \n  at Problem.Main (System.String[] args)
    [0x00060] in <702b1530d1974721b56099b4a04c15cb>:0 \n"
  stdout: ''
  timestamp: 1660009025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long max = 0;\n
    \       // add each element to a dictionary with the number of times it appears\n
    \       Dictionary<long, long> myDictionary = new Dictionary<long, long>();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            long key = lst[i];\n
    \           if (myDictionary.ContainsKey(key)) {\n                myDictionary[key]++;\n
    \           } else {\n                myDictionary.Add(key, 1);\n            }\n
    \       }\n        // if the key is greater than the value then that is the value
    we want\n        foreach (var item in myDictionary) {\n            if (item.Key
    > item.Value) {\n                max = -1;\n            } else if (item.Key ==
    item.Value) {\n                max = item.Key;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fbc38872a42e45489cb9f458d880e5a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fbc38872a42e45489cb9f458d880e5a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your code goes
    here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64670f7c1d7f4696963d03410875922c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64670f7c1d7f4696963d03410875922c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // The code below
    generates a test case.\n        // List<long> lst = new List<long>();\n        //
    Random r = new Random();\n        // for (int i = 0; i < 1000; i++) {\n        //
    \    lst.Add(r.Next(1, 10));\n        // }\n        // long start = DateTime.Now.Ticks;\n
    \       // long result = Search(lst);\n        // Console.WriteLine(DateTime.Now.Ticks
    - start);\n        // Console.WriteLine(result);\n        // return result;\n
    \       Dictionary<long, long> dic = new Dictionary<long, long>();\n        foreach
    (long element in lst) {\n            if (dic.ContainsKey(element)) {\n                dic[element]++;\n
    \           } else {\n                dic[element] = 1;\n            }\n        }\n
    \       List<long> keys = new List<long>(dic.Keys);\n        for (int i = keys.Count
    - 1; i >= 0; i--) {\n            if (dic[keys[i]] >= keys[i]) {\n                return
    keys[i];\n            }\n        }\n        return -1;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0255abd50a454716aff603a7524b3142>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0255abd50a454716aff603a7524b3142>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your code goes
    here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64670f7c1d7f4696963d03410875922c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64670f7c1d7f4696963d03410875922c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // >>> Write your
    code here!\n        long max = -1;\n        long maxFreq = 0;\n        Dictionary<long,
    long> freq = new Dictionary<long, long>();\n        foreach (long num in lst)
    {\n            if (freq.ContainsKey(num)) {\n                freq[num]++;\n            }
    else {\n                freq[num] = 1;\n            }\n        }\n        foreach
    (long num in freq.Keys) {\n            if (num == freq[num] && freq[num] > maxFreq)
    {\n                max = num;\n                maxFreq = freq[num];\n            }\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5dca9bbc3da64a1fa512487a8142f0c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5dca9bbc3da64a1fa512487a8142f0c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009025
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <27954221806f4b0d83b29180dea905f5>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <27954221806f4b0d83b29180dea905f5>:0 \n"
  stdout: ''
  timestamp: 1660009024
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    long> dict = new Dictionary<long, long>();\n        long max = 0;\n        foreach
    (long elem in lst) {\n            if (dict.ContainsKey(elem)) {\n                dict[elem]
    += 1;\n            } else {\n                dict[elem] = 1;\n            }\n
    \           if (elem > max) {\n                max = elem;\n            }\n        }\n
    \       for (long i = max; i > 0; i--) {\n            if (dict.ContainsKey(i)
    && dict[i] >= i) {\n                return i;\n            }\n        }\n        return
    -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        int[] count =
    new int[lst.Count];\n        long ret = -1;\n        int index = 0;\n        foreach
    (long j in lst) {\n            if (j > 0) {\n                count[index]++;\n
    \           }\n            index++;\n        }\n        index = 0;\n        foreach
    (long j in lst) {\n            if (j > 0) {\n                if (count[index]
    >= j) {\n                    ret = Math.Max(ret, j);\n                }\n            }\n
    \           index++;\n        }\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5982c9eca90041c0b9f131c02e6392f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5982c9eca90041c0b9f131c02e6392f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // you write code
    here\n        long result = -1;\n        for (int i = 0; i < lst.Count; i++) {\n
    \           // Create a new list from the original list, but skip over the first
    occurrence of the number.\n            List<long> subList = new List<long>(lst);\n
    \           subList.RemoveAt(i);\n            // If the frequency of the number
    is greater than or equal to the value, then return the value.\n            if
    (lst.Count(x => x == lst[i]) - 1 >= lst[i]) {\n                result = lst[i];\n
    \               break;\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95edf4065ccd4a6aa2217ba7191485e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95edf4065ccd4a6aa2217ba7191485e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009025
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        List<long> modeList
    = GetModes(lst);\n        long mode = modeList[0];\n        int frequency = 0;\n
    \       for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] == mode)
    {\n                frequency++;\n            }\n        }\n        if (frequency
    >= mode) {\n            return mode;\n        }\n        if (modeList.Count >
    1) {\n            for (int i = 1; i < modeList.Count; i++) {\n                frequency
    = 0;\n                mode = modeList[i];\n                for (int j = 0; j <
    lst.Count; j++) {\n                    if (lst[j] == mode) {\n                        frequency++;\n
    \                   }\n                }\n                if (frequency >= mode)
    {\n                    return mode;\n                }\n            }\n        }\n
    \       return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsee_p0nh.cs(21,31): error CS0103: The name ''GetModes'' does not exist
    in the current context

    '
  timestamp: 1660009024
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your Code Here\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <49e720bec0834c789aa979bfac1f1937>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <49e720bec0834c789aa979bfac1f1937>:0 \n"
  stdout: ''
  timestamp: 1660009025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Store each
    integer and its frequency in a dictionary.\n        Dictionary<long, long> freq
    = new Dictionary<long, long>();\n        foreach (long l in lst) {\n            if
    (freq.ContainsKey(l)) {\n                freq[l]++;\n            } else {\n                freq[l]
    = 1;\n            }\n        }\n        // Now find the greatest integer that
    is greater than zero, and has a frequency greater than or equal to the value of
    the integer itself.\n        long max = -1;\n        foreach (KeyValuePair<long,
    long> kvp in freq) {\n            if (kvp.Key <= kvp.Value && kvp.Key > max) {\n
    \               max = kvp.Key;\n            }\n        }\n        return max;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    int> dict = new Dictionary<long, int>();\n        long key = -1;\n        long
    max = -1;\n        foreach (long e in lst) {\n            if (dict.ContainsKey(e))
    {\n                dict[e] += 1;\n            } else {\n                dict[e]
    = 1;\n            }\n            if (dict[e] >= e && e > max) {\n                max
    = e;\n                key = e;\n            }\n        }\n        return key;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your code goes
    here.\n        return -1;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f39ae2be756246618f11ae73f1650cb7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f39ae2be756246618f11ae73f1650cb7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009026
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // No elements
    in the list. There is nothing to do.\n        if (lst.Count == 0) {\n            return
    -1;\n        }\n        // No elements in the list. There is nothing to do.\n
    \       if (lst.Count == 0) {\n            return -1;\n        }\n        // Sort
    the list. This makes the search faster, since we can stop searching\n        //
    once we reach a number that is greater than the frequency.\n        lst.Sort();\n
    \       // The last number in the list.\n        long lastNum = lst[lst.Count
    - 1];\n        // The number of times the last number appears in the list.\n        int
    lastNumFreq = 0;\n        // The number of times the current number appears in
    the list.\n        int curNumFreq = 0;\n        // The previous number in the
    list.\n        long prevNum = 0;\n        // The current number in the list.\n
    \       long curNum = 0;\n        // The index of the current number in the list.\n
    \       int curNumIdx = 0;\n        // The index of the first number in the list
    that is greater than zero.\n        int firstPositiveNumIdx = 0;\n        // The
    number of numbers in the list that are greater than zero.\n        int positiveNumCount
    = 0;\n        // The index of the last number in the list that is greater than
    zero.\n        int lastPositiveNumIdx = 0;\n        // The index of the current
    number in the list.\n        for (int i = 0; i < lst.Count; i++) {\n            //
    Get the current number.\n            curNum = lst[i];\n            // Increment
    the number of times the current number appeared in the list.\n            curNumFreq++;\n
    \           // The current number is the last number in the list.\n            if
    (i == lst.Count - 1) {\n                // If the current number's frequency is
    greater than or equal to\n                // the current number, and the current
    number is greater than zero,\n                // return the current number.\n
    \               if (curNumFreq >= curNum && curNum > 0) {\n                    return
    curNum;\n                }\n                // The current number's frequency
    is not greater than\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr2p79ft1.cs(66,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpr2p79ft1.cs(94,2): error CS1513: } expected

    '
  timestamp: 1660009025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        return 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8423205ef3594a128d9011b1dfa167eb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8423205ef3594a128d9011b1dfa167eb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    long> freq = new Dictionary<long, long>();\n        long max = 0;\n        foreach
    (long i in lst) {\n            long f;\n            if (freq.TryGetValue(i, out
    f)) {\n                freq[i] = f + 1;\n            } else {\n                freq[i]
    = 1;\n            }\n            if (freq[i] >= i && i > max) {\n                max
    = i;\n            }\n        }\n        return max;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <96d4737695a84d1ca30a6255a9c6c16b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <96d4737695a84d1ca30a6255a9c6c16b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    long> freq = new Dictionary<long, long>();\n        foreach (long v in lst) {\n
    \           if (freq.ContainsKey(v))\n                freq[v] += 1;\n            else\n
    \               freq[v] = 1;\n        }\n        long ret = -1;\n        foreach
    (KeyValuePair<long, long> pair in freq) {\n            if (pair.Key > ret && pair.Key
    <= pair.Value)\n                ret = pair.Key;\n        }\n        return ret;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var z = -1L;\n
    \       var e = (from a in lst.GroupBy(b => b) where a.Count() >= a.Key select
    a.Key).OrderByDescending(a => a).FirstOrDefault();\n        if (e > 0) z = e;\n
    \       return z;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var dict = new
    Dictionary<long, long>();\n        foreach (var i in lst) {\n            if (dict.ContainsKey(i))
    {\n                dict[i]++;\n            } else {\n                dict[i] =
    1;\n            }\n        }\n        for (var i = lst.Count; i > 0; i--) {\n
    \           if (dict.ContainsKey(i) && dict[i] >= i) {\n                return
    i;\n            }\n        }\n        return -1;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var group = lst.GroupBy(e
    => e).Select(e => e.Count()).ToList();\n        for (int i = group.Count() - 1;
    i >= 0; i--) {\n            if (group[i] < lst[i]) return -1;\n        }\n        return
    lst.Max();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1af3af6dcc6747378cf99276cfc0e2fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1af3af6dcc6747378cf99276cfc0e2fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // your code goes
    here\n        return lst.GroupBy(e => e).OrderByDescending(group => group.Count()).ThenByDescending(group
    => group.Key).First().Key;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8a9862ab244f06bdc448d50025aec2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8a9862ab244f06bdc448d50025aec2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Implement me!\n
    \       var max = lst.Max();\n        var search = -1L;\n        if (lst.Where(x
    => x == max).Count() >= max) {\n            search = max;\n        }\n        return
    search;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9343b01eb2a24991964c6275b061d1f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9343b01eb2a24991964c6275b061d1f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var groups = lst.GroupBy(x
    => x).ToList();\n        var frequencies = groups.Select(g => g.Count()).ToList();\n
    \       var max = frequencies.Max();\n        var maxIndex = frequencies.IndexOf(max);\n
    \       if (max > groups[maxIndex].Key)\n            return max;\n        return
    -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cc070c883d2c401da9b727e0cfbfe9a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cc070c883d2c401da9b727e0cfbfe9a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var result = -1L;\n
    \       var lst_map = new Dictionary<long, long>();\n        foreach (var item
    in lst) {\n            if (lst_map.ContainsKey(item)) {\n                lst_map[item]++;\n
    \           } else {\n                lst_map[item] = 1;\n            }\n        }\n
    \       foreach (var item in lst_map) {\n            if (item.Key >= item.Value
    && item.Key > result) {\n                result = item.Key;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27cb592ca81b4003a22f34945319b87d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27cb592ca81b4003a22f34945319b87d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // write your
    code here\n        long max = 0;\n        if (lst.Count > 0) {\n            max
    = lst.Max();\n        }\n        if (max > 0) {\n            int count = lst.Count(x
    => x == max);\n            if (count >= max) {\n                return max;\n
    \           }\n        }\n        return -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49a77d3d1eb649dfb4c3c26148414bf1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49a77d3d1eb649dfb4c3c26148414bf1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your code goes
    here.\n        var result = lst.ToLookup(x => x).Select(x => (x.Key, x.Count())).OrderByDescending(x
    => x.Item1).Where(x => x.Item1 >= x.Item2).FirstOrDefault();\n        if(result.Item1
    == 0) {\n            return -1;\n        }\n        return result.Item1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2a014532ad4c43fdac43f665dbc8a239>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2a014532ad4c43fdac43f665dbc8a239>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,long>
    \ d = new Dictionary<long,long>();\n        foreach(var x in lst) {\n            if(!d.ContainsKey(x))
    {\n                d[x] = 1;\n            } else {\n                d[x] = d[x]
    + 1;\n            }\n        }\n        long r = -1;\n        foreach(var x in
    d) {\n            if(x.Key <= x.Value) {\n                r = x.Key;\n            }\n
    \       }\n        return r;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8eb89879f31c428d857751987df0e9d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8eb89879f31c428d857751987df0e9d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long result =
    -1;\n        long max = 0;\n        Dictionary<long, long> ht = new Dictionary<long,
    long>();\n        foreach (long x in lst) {\n            long cnt = 0;\n            ht.TryGetValue(x,
    out cnt);\n            cnt += 1;\n            ht[x] = cnt;\n            if (cnt
    >= x && x > max) {\n                max = x;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <17cc51b41434449dbeb5c6c4ec942d67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <17cc51b41434449dbeb5c6c4ec942d67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var c = new Dictionary<long,
    long>();\n        foreach (var e in lst) {\n            if (c.ContainsKey(e))
    {\n                c[e]++;\n            } else {\n                c[e] = 1;\n
    \           }\n        }\n        long f = -1;\n        long r = -1;\n        foreach
    (var e in c) {\n            if (e.Key > r && e.Value >= e.Key) {\n                r
    = e.Key;\n                f = e.Value;\n            }\n        }\n        return
    r;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009026
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <27954221806f4b0d83b29180dea905f5>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <27954221806f4b0d83b29180dea905f5>:0 \n"
  stdout: ''
  timestamp: 1660009024
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long result =
    -1;\n        long size = (long)lst.Count;\n        Dictionary<long, long> count
    = new Dictionary<long, long>();\n        foreach (long item in lst) {\n            if
    (count.ContainsKey(item)) {\n                count[item] = count[item] + 1;\n
    \           } else {\n                count[item] = 1;\n            }\n        }\n
    \       long max = 1;\n        foreach (KeyValuePair<long, long> pair in count)
    {\n            if (pair.Value >= pair.Key && pair.Key > max) {\n                max
    = pair.Key;\n            }\n        }\n        if (max > 1) {\n            result
    = max;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8a53fd1b823477abd0998c21fc3edb8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8a53fd1b823477abd0998c21fc3edb8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var dict = new
    Dictionary<long, long>();\n        var max = 0L;\n        foreach (var l in lst)
    {\n            var count = 0L;\n            if (dict.TryGetValue(l, out count))
    {\n                dict[l] = count + 1;\n            } else {\n                dict[l]
    = 1;\n            }\n            if (l > max) {\n                max = l;\n            }\n
    \       }\n        for (var i = max; i > 0; i--) {\n            var count = 0L;\n
    \           if (dict.TryGetValue(i, out count)) {\n                if (count >=
    i) {\n                    return i;\n                }\n            }\n        }\n
    \       return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        return lst.GroupBy(x
    => x).Max(x => x.Count() >= x.Key ? x.Key : -1);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var dict = new
    Dictionary<long, long>();\n        long result = -1;\n        foreach (var item
    in lst) {\n            if (dict.ContainsKey(item)) {\n                dict[item]++;\n
    \           } else {\n                dict[item] = 1;\n            }\n        }\n
    \       foreach (var item in dict) {\n            if (item.Key <= item.Value)
    {\n                result = Math.Max(result, item.Key);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var h = new Dictionary<long,
    long>();\n        foreach (var i in lst) {\n            if (h.ContainsKey(i))
    {\n                h[i]++;\n            } else {\n                h[i] = 1;\n
    \           }\n        }\n        foreach (var key in h.Keys) {\n            if
    (key <= h[key]) {\n                return key;\n            }\n        }\n        return
    -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa52e4a4eb634270999d72395c6f89c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa52e4a4eb634270999d72395c6f89c6>:0
    \n"
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long res = -1;\n
    \       var m = new Dictionary<long, long>();\n        foreach (var x in lst)
    {\n            if (!m.ContainsKey(x)) {\n                m[x] = 0;\n            }\n
    \           m[x] += 1;\n        }\n        foreach (var x in m.Keys) {\n            if
    (x <= m[x]) {\n                res = Math.Max(res, x);\n            }\n        }\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var groupedLst
    = lst.GroupBy(i => i);\n        var max = groupedLst.Max(g => g.Key);\n        if
    (groupedLst.First(g => g.Key == max).Count() >= max) {\n            return max;\n
    \       }\n        return -1;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f32c868bd1604f17921caed7282701e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f32c868bd1604f17921caed7282701e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // intialize\n
    \       long result = -1;\n        long freq;\n        Dictionary<long, long>
    freqDict = new Dictionary<long, long>();\n        List<long> keys = new List<long>();\n
    \       // build frequency dictionary\n        foreach (long k in lst) {\n            if
    (freqDict.ContainsKey(k)) {\n                freqDict[k] += 1;\n            }
    else {\n                freqDict[k] = 1;\n            }\n        }\n        //
    build list of keys in descending order\n        keys = freqDict.Keys.ToList();\n
    \       keys.Sort();\n        keys.Reverse();\n        // look for possible values\n
    \       foreach (long k in keys) {\n            freq = freqDict[k];\n            if
    (k >= freq) {\n                result = k;\n                break;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6e88ed6dd8c24ee381e6f2a75ef8b1de>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6e88ed6dd8c24ee381e6f2a75ef8b1de>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var max = lst.Max();\n
    \       for (var j = max; j > 0; j--) {\n            if (lst.Count(x => x == j)
    >= j) {\n                return j;\n            }\n        }\n        return -1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        if (lst.Count
    < 1)\n            return -1;\n        long[] lstl = lst.ToArray();\n        //
    Do something with lst...\n        Dictionary<long, long> dict = new Dictionary<long,
    long>();\n        foreach (long l in lstl) {\n            if (dict.ContainsKey(l))
    {\n                dict[l]++;\n            } else {\n                dict.Add(l,
    1);\n            }\n        }\n        long val = dict.Keys.ToArray().Max();\n
    \       long valc = dict[val];\n        if (valc >= val) {\n            return
    val;\n        } else {\n            return -1;\n        }\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e45c59ec06704ee58b9c7cf07aeb23b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e45c59ec06704ee58b9c7cf07aeb23b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    long> counts = new Dictionary<long, long>();\n        foreach (long l in lst)
    {\n            if (counts.ContainsKey(l)) {\n                counts[l] += 1;\n
    \           } else {\n                counts[l] = 1;\n            }\n        }\n
    \       long max_candidate = -1;\n        foreach (long i in counts.Keys) {\n
    \           if (i <= counts[i]) {\n                max_candidate = Math.Max(max_candidate,
    i);\n            }\n        }\n        return max_candidate;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // your code here\n
    \       return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <185d35bb06524e6ab55b057c0251b30d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <185d35bb06524e6ab55b057c0251b30d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your code goes
    here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64670f7c1d7f4696963d03410875922c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64670f7c1d7f4696963d03410875922c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your solution
    goes here.\n        return -1;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1193517fb45480ca6c5ce3bfb2f2e55>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1193517fb45480ca6c5ce3bfb2f2e55>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long result =
    -1;\n        if (lst.Count == 0) {\n            return result;\n        }\n        Dictionary<long,
    long> d = new Dictionary<long, long>();\n        foreach (long val in lst) {\n
    \           if (d.ContainsKey(val)) {\n                d[val] += 1;\n            }
    else {\n                d[val] = 1;\n            }\n        }\n        long max_frequency
    = 0;\n        foreach (long val in d.Keys) {\n            if (d[val] >= val &&
    val > max_frequency) {\n                max_frequency = val;\n            }\n
    \       }\n        return max_frequency;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9a6190d438e40728db4ecc4f0a505ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9a6190d438e40728db4ecc4f0a505ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var res = -1L;\n
    \       var m = lst.GroupBy(n => n).ToDictionary(n => n.Key, n => n.Count());\n
    \       foreach (var kvp in m) {\n            if (kvp.Key > kvp.Value) continue;\n
    \           if (kvp.Key > res) res = kvp.Key;\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        return (long)-1L;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d401f4f2ba004ae4b9070f11ec1cb777>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d401f4f2ba004ae4b9070f11ec1cb777>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        return -1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5048cca1bd34210925c9b9be5e653c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5048cca1bd34210925c9b9be5e653c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var freq = new
    Dictionary<long, long>();\n        foreach (var v in lst) {\n            if (freq.ContainsKey(v))
    {\n                freq[v] += 1;\n            } else {\n                freq[v]
    = 1;\n            }\n        }\n        return freq.Where(x => x.Key <= x.Value).DefaultIfEmpty(new
    KeyValuePair<long, long>(-1, 0)).Max(x => x.Key);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long result =
    -1;\n        Dictionary<long, long> freq = new Dictionary<long, long>();\n        foreach
    (long v in lst) {\n            if (freq.ContainsKey(v)) {\n                freq[v]++;\n
    \           } else {\n                freq[v] = 1;\n            }\n        }\n
    \       foreach (KeyValuePair<long, long> pair in freq) {\n            if (pair.Key
    >= pair.Value && result < pair.Key) {\n                result = pair.Key;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9335fd2d294467aa3bc759da5cbe112>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9335fd2d294467aa3bc759da5cbe112>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long freq;\n        long
    a = 0;\n        foreach (var item in lst) {\n            freq = lst.Where(num
    => num == item).Count();\n            if (freq >= item && item > a) {\n                a
    = item;\n            }\n        }\n        if (a == 0) {\n            return -1;\n
    \       }\n        return a;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long counter =
    -1;\n        long candidate = -1;\n        for (long i = 0; i < lst.Count; i++)
    {\n            if (lst[(int)i] > counter) {\n                counter = lst[(int)i];\n
    \               candidate = i;\n            }\n        }\n        long freq =
    (long)0L;\n        for (long j = 0; j < lst.Count; j++) {\n            if (lst[(int)j]
    == candidate) {\n                freq = freq + (long)1L;\n            }\n        }\n
    \       if (candidate >= freq) {\n            return candidate;\n        }\n        return
    (long)-1L;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ade789efb30d4cc2b6cf8dd539bdbccc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ade789efb30d4cc2b6cf8dd539bdbccc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        if (lst.Count
    == 0) return -1;\n        long[] lst2 = lst.ToArray();\n        Array.Sort(lst2);\n
    \       long candidate = -1;\n        long prev = lst2[0];\n        long count
    = 1;\n        for (int i = 1; i < lst2.Length; i++) {\n            if (lst2[i]
    == prev) {\n                count++;\n            } else {\n                if
    (prev >= count) {\n                    candidate = prev;\n                }\n
    \               count = 1;\n                prev = lst2[i];\n            }\n        }\n
    \       if (prev >= count) {\n            candidate = prev;\n        }\n        return
    candidate;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84fb41ae64a44de88924dbb54a334df4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84fb41ae64a44de88924dbb54a334df4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long n = -1;\n
    \       int frequency = 0;\n        foreach (long x in lst) {\n            int
    freq = lst.Count(e => e == x);\n            if (freq >= x && freq > frequency)
    {\n                n = x;\n                frequency = freq;\n            }\n
    \       }\n        return n;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e9459edff4eb40a18409b2bdcac1d9d5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e9459edff4eb40a18409b2bdcac1d9d5>:0
    \n"
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Fill in the
    code here.\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n
    \       foreach (var v in lst) {\n            if (dict.ContainsKey(v))\n                dict[v]++;\n
    \           else\n                dict[v] = 1;\n        }\n        long result
    = -1;\n        foreach (var v in dict) {\n            if (v.Key <= v.Value &&
    v.Key > result)\n                result = v.Key;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var dict = new
    Dictionary<long, long>();\n        for (int i = 0; i < lst.Count; i++) {\n            var
    key = lst[i];\n            if (dict.ContainsKey(key)) {\n                dict[key]++;\n
    \           } else {\n                dict[key] = 1;\n            }\n        }\n
    \       long max = dict.Where(pair => pair.Key == pair.Value).Select(pair => pair.Key).Max();\n
    \       return max > 0 ? max : -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Search
    (System.Collections.Generic.List`1[T] lst) [0x000a9] in <dbbeece21e3749f9951586f120a7a513>:0
    \n  at Problem.Main (System.String[] args) [0x00060] in <dbbeece21e3749f9951586f120a7a513>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Search
    (System.Collections.Generic.List`1[T] lst) [0x000a9] in <dbbeece21e3749f9951586f120a7a513>:0
    \n  at Problem.Main (System.String[] args) [0x00060] in <dbbeece21e3749f9951586f120a7a513>:0
    \n"
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,long>
    freq = new Dictionary<long,long>();\n        long max = -1;\n        foreach (long
    i in lst) {\n            if (freq.ContainsKey(i)) {\n                freq[i]++;\n
    \           } else {\n                freq[i] = 1;\n            }\n            if
    (freq[i] >= i && i > max) {\n                max = i;\n            }\n        }\n
    \       return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        if (lst.Count
    == 0) return -1;\n        long result = -1;\n        long maxFrequency = 0;\n
    \       Dictionary<long, long> frequency = new Dictionary<long, long>();\n        foreach
    (long element in lst) {\n            if (frequency.ContainsKey(element)) {\n                frequency[element]++;\n
    \           } else {\n                frequency[element] = 1;\n            }\n
    \           if (frequency[element] >= element && frequency[element] > maxFrequency)
    {\n                maxFrequency = frequency[element];\n                result
    = element;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1007a6c96b614aeb8c6d53c5a9d39647>:0
    \n"
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    int> counts = new Dictionary<long, int>();\n        foreach (var item in lst)
    {\n            if (counts.ContainsKey(item)) {\n                counts[item]++;\n
    \           } else {\n                counts[item] = 1;\n            }\n        }\n
    \       long res = -1;\n        foreach (var kvp in counts) {\n            if
    (kvp.Key <= kvp.Value && res < kvp.Key) {\n                res = kvp.Key;\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009028
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Convert list
    to dictionary where Key = number and Value = number of occurrences\n        Dictionary<long,
    long> dict = lst.GroupBy(x => x).ToDictionary(g => g.Key, g => g.Count());\n        long
    max = -1;\n        // Loop through key (number) and value (number of occurrences)
    in dict\n        foreach (KeyValuePair<long, long> entry in dict) {\n            //
    If number is greater than zero AND the number of occurrences (value) is greater
    than or equal to the number (key)\n            if (entry.Key > 0 && entry.Value
    >= entry.Key) {\n                // Set max to the number if it is greater than
    max\n                max = Math.Max(max, entry.Key);\n            }\n        }\n
    \       return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqq2a6irk.cs(22,39): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.Dictionary<long,
    int>'' to ''System.Collections.Generic.Dictionary<long, long>''

    '
  timestamp: 1660009028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your code goes
    here!\n        long maxValue = -1;\n        long maxTimes = -1;\n        Dictionary<long,
    long> dic = new Dictionary<long, long>();\n        foreach (long value in lst)
    {\n            if (dic.ContainsKey(value)) {\n                dic[value] += 1;\n
    \           } else {\n                dic[value] = 1;\n            }\n        }\n
    \       foreach (KeyValuePair<long, long> pair in dic) {\n            if (pair.Key
    == pair.Value && pair.Key > maxValue) {\n                maxValue = pair.Key;\n
    \               maxTimes = pair.Value;\n            }\n        }\n        return
    maxValue;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5610d7ab1f5d4fe8b7cc24f22cec7d3c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5610d7ab1f5d4fe8b7cc24f22cec7d3c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    int> dic = new Dictionary<long, int>();\n        foreach (long element in lst)
    {\n            if (dic.ContainsKey(element)) {\n                dic[element] +=
    1;\n            } else {\n                dic[element] = 1;\n            }\n        }\n
    \       long max = -1;\n        foreach (KeyValuePair<long, int> element in dic)
    {\n            if (element.Key <= element.Value && element.Key > max) {\n                max
    = element.Key;\n            }\n        }\n        return max;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    int> count = new Dictionary<long, int>();\n        foreach (long i in lst) {\n
    \           if (count.ContainsKey(i))\n                count[i] += 1;\n            else\n
    \               count[i] = 1;\n        }\n        long ans = -1;\n        foreach
    (long i in count.Keys) {\n            if (i <= count[i])\n                ans
    = Math.Max(ans, i);\n        }\n        return ans;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009028
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // write your
    code here\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbd3wqzpy.cs(20,24): error CS0161: ''Problem.Search(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1660009028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    long> dict = new Dictionary<long, long>();\n        foreach (long item in lst)
    {\n            if (dict.ContainsKey(item)) {\n                dict[item]++;\n
    \           } else {\n                dict[item] = 1;\n            }\n        }\n
    \       List<long> lst2 = dict.Keys.ToList();\n        lst2.Sort();\n        long
    res = lst2.Last();\n        foreach (long key in lst2) {\n            if (key
    > dict[key]) {\n                res = -1;\n                break;\n            }\n
    \           if (dict[key] >= key) {\n                res = key;\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <50670f15a8724a3ca10d4db2b933f95f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <50670f15a8724a3ca10d4db2b933f95f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long max = 0;\n
    \       foreach (long item in lst)\n            if (item > max)\n                max
    = item;\n        long[] frequency = new long[max + 1];\n        foreach (long
    item in lst)\n            frequency[item]++;\n        for (long i = max; i > 0;
    i--)\n            if (frequency[i] >= i)\n                return i;\n        return
    -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009028
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // take the frequency
    of all numbers (indexed by the number themselves)\n        var freq = new int[lst.Count
    + 1];\n        foreach (var i in lst)\n            freq[i]++;\n        // now,
    just check if the frequency matches the number\n        for (int i = lst.Count;
    i >= 1; i--)\n            if (freq[i] >= i)\n                return i;\n        return
    -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Search (System.Collections.Generic.List`1[T]
    lst) [0x00021] in <5b3a401147884799b8723f60fbbdd465>:0 \n  at Problem.Main (System.String[]
    args) [0x00060] in <5b3a401147884799b8723f60fbbdd465>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.Search (System.Collections.Generic.List`1[T] lst) [0x00021]
    in <5b3a401147884799b8723f60fbbdd465>:0 \n  at Problem.Main (System.String[] args)
    [0x00060] in <5b3a401147884799b8723f60fbbdd465>:0 \n"
  stdout: ''
  timestamp: 1660009028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long x, y;\n        x
    = 0L;\n        y = 0L;\n        for (x = (lst.Count - 1L); (x >= 0L); x = (x -
    1L)) {\n            y = 0L;\n            for (y = (lst.Count - 1L); (y >= 0L);
    y = (y - 1L)) {\n                if ((lst[(int)(x)] == lst[(int)(y)])) {\n                    if
    ((lst[(int)(x)] <= y)) {\n                        return (long)(-1L);\n                    }\n
    \               }\n            }\n        }\n        return (long)(x);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <87fdfd5b1b1441a899eb5ededfe551e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <87fdfd5b1b1441a899eb5ededfe551e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var dict = new
    Dictionary<long, long>();\n        foreach (var e in lst) {\n            if (dict.ContainsKey(e))
    {\n                dict[e] += 1;\n            } else {\n                dict[e]
    = 1;\n            }\n        }\n        var result = -1L;\n        foreach (var
    e in dict) {\n            if (e.Key > 0 && e.Value >= e.Key && e.Key > result)
    {\n                result = e.Key;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        List<long> unique
    = lst.Distinct().ToList();\n        unique.Sort();\n        unique.Reverse();\n
    \       foreach (long i in unique) {\n            if (lst.Count(x => x == i) >=
    i) {\n                return i;\n            }\n        }\n        return -1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009028
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // >>> Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n
    \       // (2L)\n        // >>> Search((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n        //
    (3L)\n        // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L,
    (long)4L, (long)4L})))\n        // (-1L)\n        HashSet<long> r = new HashSet<long>();\n
    \       HashSet<long> visited = new HashSet<long>();\n        Queue<long> queue
    = new Queue<long>();\n        foreach (long x in lst) {\n            if (x ==
    1L) {\n                r.Add(x);\n            }\n            else {\n                if
    (!visited.Contains(x)) {\n                    queue.Enqueue(x);\n                    visited.Add(x);\n
    \               }\n            }\n        }\n        while (queue.Count > 0) {\n
    \           long x = queue.Dequeue();\n            if (lst.Count(z => z == x)
    >= x) {\n                r.Add(x);\n            }\n            if (!visited.Contains(x
    - 1L)) {\n                queue.Enqueue(x - 1L);\n                visited.Add(x
    - 1L);\n            }\n        }\n        if (r.Count > 0) {\n            return
    r.Max();\n        }\n        else {\n            return -1L;\n        }\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1660009033
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var freq = lst.GroupBy(x
    => x).ToDictionary(g => g.Key, g => g.Count());\n        var max = lst.Max();\n
    \       for (var i = max; i > 0; i--) {\n            if (freq.ContainsKey(i) &&
    freq[i] >= i) {\n                return i;\n            }\n        }\n        return
    -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009029
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // long res;\n
    \       // var dict = new Dictionary<long, long>();\n        // foreach (var elem
    in lst) {\n        //     if (dict.ContainsKey(elem)) {\n        //         dict[elem]++;\n
    \       //     } else {\n        //         dict[elem] = 1;\n        //     }\n
    \       // }\n        // var vals = dict.Keys.ToList();\n        // vals.Sort();\n
    \       // vals.Reverse();\n        // foreach (var elem in vals) {\n        //
    \    if (elem > 0 && dict[elem] >= elem) {\n        //         return elem;\n
    \       //     }\n        // }\n        // return -1;\n        var dict = new
    Dictionary<long, long>();\n        foreach (var elem in lst) {\n            if
    (dict.ContainsKey(elem)) {\n                dict[elem]++;\n            } else
    {\n                dict[elem] = 1;\n            }\n        }\n        var vals
    = dict.Keys.ToList();\n        vals.Sort();\n        vals.Reverse();\n        foreach
    (var elem in vals) {\n            if (elem > 0 && dict[elem] >= elem) {\n                return
    elem;\n            }\n        }\n        return -1;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009029
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    long> freq = new Dictionary<long, long>();\n        foreach (long i in lst) {\n
    \           if (freq.ContainsKey(i)) {\n                freq[i] += 1;\n            }
    else {\n                freq[i] = 1;\n            }\n        }\n        long res
    = -1;\n        foreach (long i in freq.Keys) {\n            if (i > 0 && freq[i]
    >= i && i > res) {\n                res = i;\n            }\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009029
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,long>
    m = new Dictionary<long,long>();\n        for (int i = 0; i < lst.Count; i++)
    {\n            if (m.ContainsKey(lst[i]))\n                m[lst[i]] += 1;\n            else\n
    \               m[lst[i]] = 1;\n        }\n        long res = -1;\n        foreach
    (KeyValuePair<long,long> kv in m) {\n            if (kv.Key <= kv.Value && kv.Key
    > res)\n                res = kv.Key;\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009029
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var d = new Dictionary<long,long>();\n
    \       foreach (var v in lst) {\n            if (d.ContainsKey(v)) {\n                d[v]
    += 1;\n            } else {\n                d[v] = 1;\n            }\n        }\n
    \       for (var i = lst.Count; i > 0; i--) {\n            if (d.ContainsKey(i)
    && d[i] >= i) {\n                return i;\n            }\n        }\n        return
    -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009029
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    int> occ = new Dictionary<long, int>();\n        foreach (var i in lst) {\n            if
    (occ.ContainsKey(i)) {\n                occ[i]++;\n            } else {\n                occ[i]
    = 1;\n            }\n        }\n        long max = -1;\n        foreach (var kvp
    in occ) {\n            if (kvp.Key <= kvp.Value && kvp.Key > max) {\n                max
    = kvp.Key;\n            }\n        }\n        return max;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009029
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // replace this
    code by your own one.\n        long result = -1;\n        long max = 0;\n        Dictionary<long,
    long> frequencies = new Dictionary<long, long>();\n        foreach (long item
    in lst) {\n            if (frequencies.ContainsKey(item))\n                frequencies[item]++;\n
    \           else\n                frequencies[item] = 1;\n            if (frequencies[item]
    >= item && item > max) {\n                max = item;\n                result
    = item;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009029
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long result =
    -1;\n        long count = 0;\n        long value = 0;\n        Dictionary<long,
    long> d = new Dictionary<long, long>();\n        foreach (long num in lst) {\n
    \           if (d.ContainsKey(num)) {\n                d[num]++;\n            }
    else {\n                d.Add(num, 1);\n            }\n        }\n        foreach
    (long key in d.Keys) {\n            if (d[key] >= key) {\n                if (key
    > result) {\n                    result = key;\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009029
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your code goes
    here\n        return new Random().Next();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c1f8fe1818324597a7c7dff415cf6c65>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c1f8fe1818324597a7c7dff415cf6c65>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009029
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your code goes
    here.\n        int maxInt = lst.Max();\n        int counter = 0;\n        for
    (int i = maxInt; i > 0; i--) {\n            foreach (int j in lst) {\n                if
    (j == i) {\n                    counter++;\n                }\n            }\n
    \           if (counter >= i) {\n                return i;\n            }\n            counter
    = 0;\n        }\n        return -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgm2gz95c.cs(22,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660009028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var freq = new
    Dictionary<long, long>();\n        var groups = lst.GroupBy(x => x);\n        foreach
    (var g in groups) {\n            freq[g.Key] = g.Count();\n        }\n        long
    result = -1;\n        foreach (var pair in freq) {\n            if (pair.Key <=
    pair.Value && pair.Key > result) {\n                result = pair.Key;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009029
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // your code here!\n
    \       return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <039e6d8ae90b413e9c4bf90cbff47764>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <039e6d8ae90b413e9c4bf90cbff47764>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009029
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    long> freq = new Dictionary<long, long>();\n        foreach (long x in lst) {\n
    \           if (freq.ContainsKey(x))\n                freq[x] += 1;\n            else\n
    \               freq[x] = 1;\n        }\n        long max = long.MinValue;\n        foreach
    (KeyValuePair<long, long> p in freq) {\n            if (p.Key > p.Value)\n                continue;\n
    \           if (p.Key > max)\n                max = p.Key;\n        }\n        if
    (max == long.MinValue)\n            return -1;\n        return max;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009029
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    long> dic = new Dictionary<long, long>();\n        foreach (long i in lst) {\n
    \           if (dic.ContainsKey(i)) {\n                dic[i]++;\n            }
    else {\n                dic[i] = 1;\n            }\n        }\n        long max
    = -1;\n        long freq = 0;\n        foreach (long i in dic.Keys) {\n            if
    (i > 0 && dic[i] >= i && dic[i] > freq) {\n                max = i;\n                freq
    = dic[i];\n            }\n        }\n        return max;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1664d9eff5bf4b518974d1b66a5db960>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1664d9eff5bf4b518974d1b66a5db960>:0
    \n"
  stdout: ''
  timestamp: 1660009029
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your code goes
    here.\n        long[] freq = new long[lst.Count];\n        for (int i = 0; i <
    lst.Count; i++) {\n            freq[i] = -1;\n        }\n        for (int i =
    0; i < lst.Count; i++) {\n            if (freq[i] == -1) {\n                freq[i]
    = 1;\n                for (int j = i + 1; j < lst.Count; j++) {\n                    if
    (lst[i] == lst[j]) {\n                        freq[i]++;\n                        freq[j]
    = 0;\n                    }\n                }\n            }\n        }\n        int
    max = -1;\n        for (int i = 0; i < lst.Count; i++) {\n            if (freq[i]
    >= lst[i] && lst[i] > max) {\n                max = (int)lst[i];\n            }\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009029
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    int> map = new Dictionary<long, int>();\n        foreach (long x in lst) {\n            if
    (map.ContainsKey(x)) {\n                map[x] += 1;\n            } else {\n                map[x]
    = 1;\n            }\n        }\n        long result = -1;\n        foreach (KeyValuePair<long,
    int> kvp in map) {\n            if (kvp.Key > 0 && kvp.Key <= kvp.Value && result
    < kvp.Key) {\n                result = kvp.Key;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009029
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Create a dict
    with each number and the number of times it appears in the lst.\n        Dictionary<long,
    int> d = new Dictionary<long, int>();\n        foreach (long n in lst) {\n            if
    (d.ContainsKey(n)) {\n                d[n] += 1;\n            } else {\n                d[n]
    = 1;\n            }\n        }\n        // Find the max key that has a value greater
    than or equal to it's frequency.\n        long maxKey = -1;\n        foreach (long
    k in d.Keys) {\n            if (d[k] >= k && k > maxKey) {\n                maxKey
    = k;\n            }\n        }\n        return maxKey;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009029
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long result =
    0;\n        if (lst.Count == 0) {\n            return result;\n        }\n        else
    {\n            Dictionary<long, long> dct = new Dictionary<long, long>();\n            for
    (long index0 = 0; index0 < lst.Count; index0++) {\n                long item =
    lst[(int)index0];\n                if (dct.ContainsKey(item)) {\n                    dct[item]
    = dct[item] + 1;\n                }\n                else {\n                    dct[item]
    = 1;\n                }\n            }\n            foreach (KeyValuePair<long,
    long> kvp in dct) {\n                if (kvp.Key <= kvp.Value) {\n                    result
    = kvp.Key;\n                }\n            }\n            if (result == 0) {\n
    \               result = -1;\n            }\n            return result;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fcd4e530675e4120a997d085d1b9edab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fcd4e530675e4120a997d085d1b9edab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        return (lst.GroupBy(x
    => x).ToDictionary(x => x.Key, x => x.Count()).FirstOrDefault(x => x.Key >= x.Value).Key);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <072c3969f06d43529610708048848993>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <072c3969f06d43529610708048848993>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your code goes
    here.\n        long count = -1;\n        foreach (long n in lst) {\n            if
    (lst.Count(x => x == n) >= n)\n                count = n;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <384dec5206354a368ab1202ab8d5aad0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <384dec5206354a368ab1202ab8d5aad0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your code goes
    here\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4780ff0d320d4b6285940121e5b49f9b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4780ff0d320d4b6285940121e5b49f9b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009030
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var range = Enumerable.Range(1,
    lst.Count).ToList();\n        var distinct = lst.Distinct().ToList();\n        var
    distinct_frequencies = distinct.Select(x => (long)lst.Count(y => y == x)).ToList();\n
    \       var output = distinct.Select((x, i) => (x, i)).Where(x => x.x <= distinct_frequencies[x.i]).MaxBy(x
    => x.x);\n        return output.x == 0 ? -1 : output.x;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp70v6t4hl.cs(24,101): error CS1061: ''IEnumerable<(long x, int i)>'' does
    not contain a definition for ''MaxBy'' and no accessible extension method ''MaxBy''
    accepting a first argument of type ''IEnumerable<(long x, int i)>'' could be found
    (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660009029
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var freq = new
    Dictionary<long, long>();\n        foreach (var el in lst) {\n            if (freq.ContainsKey(el))
    {\n                freq[el]++;\n            } else {\n                freq[el]
    = 1;\n            }\n        }\n        var ans = -1L;\n        foreach (var el
    in freq.Keys) {\n            if (el > 0 && freq[el] >= el && el > ans) {\n                ans
    = el;\n            }\n        }\n        return ans;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var dict = new
    Dictionary<long, long>();\n        foreach (var i in lst) {\n            if (dict.ContainsKey(i))
    {\n                dict[i] += 1;\n            } else {\n                dict[i]
    = 1;\n            }\n        }\n        long max = -1;\n        foreach (var key
    in dict.Keys) {\n            if (key == 0) {\n                continue;\n            }\n
    \           if (dict[key] >= key) {\n                max = Math.Max(max, key);\n
    \           }\n        }\n        return max;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return -1;\n        }\n        long max = -1;\n        long
    ans = -1;\n        long biggestNumber = lst.Max();\n        var numCounts = new
    Dictionary<long, long>();\n        for (long i = 1; i <= biggestNumber; i++) {\n
    \           numCounts[i] = 0;\n        }\n        foreach (long num in lst) {\n
    \           numCounts[num] += 1;\n        }\n        for (long i = 1; i <= biggestNumber;
    i++) {\n            if (numCounts[i] >= i) {\n                max = i;\n            }\n
    \       }\n        if (max != -1) {\n            return max;\n        }\n        return
    -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009030
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Write your
    code here\n        return lst.GroupBy(x => x).Where(y => y.Count() >= y.Key).OrderByDescending(x
    => x.Key).FirstOrDefault().Key;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Search (System.Collections.Generic.List`1[T]
    lst) [0x00073] in <5a43c62a0a4247828f2e67c4f35d34ca>:0 \n  at Problem.Main (System.String[]
    args) [0x00060] in <5a43c62a0a4247828f2e67c4f35d34ca>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.NullReferenceException: Object reference not set to an instance
    of an object\n  at Problem.Search (System.Collections.Generic.List`1[T] lst) [0x00073]
    in <5a43c62a0a4247828f2e67c4f35d34ca>:0 \n  at Problem.Main (System.String[] args)
    [0x00060] in <5a43c62a0a4247828f2e67c4f35d34ca>:0 \n"
  stdout: ''
  timestamp: 1660009030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var max = new
    SortedDictionary<long, long>();\n        foreach (var i in lst) {\n            if
    (max.ContainsKey(i)) {\n                max[i] += 1;\n            } else {\n                max[i]
    = 1;\n            }\n        }\n        var ms = max.OrderByDescending(kvp =>
    kvp.Key).Select(kvp => new { Value = kvp.Key, Frequency = kvp.Value });\n        foreach
    (var i in ms) {\n            if (i.Value >= i.Frequency) {\n                return
    i.Value;\n            }\n        }\n        return -1;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7459f93a90f47e69b1bb52e74504f71>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7459f93a90f47e69b1bb52e74504f71>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var Dict = new
    Dictionary<long, long>();\n        for (long x = (long)0L; (x) < (lst.Count);
    x = (long)(x + (long)1L)) {\n            if (Dict.ContainsKey(lst[(int)x])) {\n
    \               var _ = Dict[lst[(int)x]];\n                Dict[lst[(int)x]]
    = (long)(_ + (long)1L);\n            }\n            else {\n                Dict[lst[(int)x]]
    = (long)1L;\n            }\n        }\n        var lst2 = new List<long>();\n
    \       foreach (var item in Dict) {\n            lst2.Add(item.Key);\n        }\n
    \       lst2.Sort();\n        lst2.Reverse();\n        for (long x = (long)0L;
    (x) < (lst2.Count); x = (long)(x + (long)1L)) {\n            if ((Dict[lst2[(int)x]])
    >= (lst2[(int)x])) {\n                return lst2[(int)x];\n            }\n        }\n
    \       return (long)(-1L);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    int> counter = new Dictionary<long, int>();\n        long result = -1;\n        foreach
    (var element in lst) {\n            if (counter.ContainsKey(element)) {\n                counter[element]++;\n
    \           } else {\n                counter[element] = 1;\n            }\n        }\n
    \       foreach (var element in counter) {\n            if (element.Key <= element.Value
    && element.Key > result) {\n                result = element.Key;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    long> dictionary = new Dictionary<long, long>();\n        // Count the number
    of occurrences of each element\n        for (int i = 0; i < lst.Count; i++) {\n
    \           long element = lst[i];\n            if (dictionary.ContainsKey(element))
    {\n                dictionary[element]++;\n            } else {\n                dictionary[element]
    = 1;\n            }\n        }\n        // Find an element in the dictionary that
    has a frequency at least as large as its value\n        for (int i = 0; i < lst.Count;
    i++) {\n            long element = lst[i];\n            if (dictionary.ContainsKey(element)
    && dictionary[element] >= element) {\n                return element;\n            }\n
    \       }\n        return -1;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5161ebbf7ce34b68a3b1c670f0727241>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5161ebbf7ce34b68a3b1c670f0727241>:0
    \n"
  stdout: ''
  timestamp: 1660009030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    long> frequencies = new Dictionary<long, long>();\n        for (long i = 0; i
    < lst.Count; i++) {\n            if (frequencies.ContainsKey(lst[(int)i])) {\n
    \               frequencies[lst[(int)i]] = frequencies[lst[(int)i]] + 1L;\n            }
    else {\n                frequencies[lst[(int)i]] = 1L;\n            }\n        }\n
    \       long max = -1L;\n        foreach (KeyValuePair<long, long> entry in frequencies)
    {\n            if (entry.Key >= entry.Value && entry.Key > max) {\n                max
    = entry.Key;\n            }\n        }\n        return max;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cdb13349386e4b49abf57de375219ba9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cdb13349386e4b49abf57de375219ba9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        List<long> freq
    = new List<long>();\n        long i = 1;\n        while (i < lst.Count) {\n            var
    grp = lst.GroupBy(x => x).Where(g => g.Count() == i);\n            if (grp.Count()
    > 0) {\n                return grp.ElementAt(0).Key;\n            }\n            i
    += 1;\n        }\n        return -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2978a48ce5f941168f3b5fba2a4a3e17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2978a48ce5f941168f3b5fba2a4a3e17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your code goes
    here\n        return -1;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbb793defc1a41daadcd677fa16d4b06>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbb793defc1a41daadcd677fa16d4b06>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var counts = lst.GroupBy(n
    => n).ToDictionary(g => g.Key, g => g.Count());\n        var solution = (long)0L;\n
    \       foreach (var kv in counts) {\n            if (kv.Key <= kv.Value && kv.Key
    > solution) {\n                solution = kv.Key;\n            }\n        }\n
    \       if (solution == 0) {\n            return -1;\n        }\n        return
    solution;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long result =
    -1;\n        long max = -1;\n        Dictionary<long, long> list_dict = new Dictionary<long,
    long>();\n        for (long i = 0; i < lst.Count; i++) {\n            if (lst[(int)i]
    > max) {\n                max = lst[(int)i];\n            }\n            if (list_dict.ContainsKey(lst[(int)i]))
    {\n                list_dict[lst[(int)i]] = (long)(list_dict[lst[(int)i]] + 1L);\n
    \           } else {\n                list_dict[lst[(int)i]] = (long)1L;\n            }\n
    \       }\n        for (long i = 1; i <= max; i++) {\n            if (list_dict.ContainsKey(i)
    && list_dict[i] >= i) {\n                result = i;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    long> counts = new Dictionary<long, long>();\n        foreach (long elt in lst)
    {\n            if (counts.ContainsKey(elt)) {\n                counts[elt]++;\n
    \           } else {\n                counts[elt] = 1;\n            }\n        }\n
    \       long max = -1;\n        foreach (long key in counts.Keys) {\n            if
    (key > 0 && counts[key] >= key && key > max) {\n                max = key;\n            }\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long max = -1;\n
    \       Dictionary<long, long> freq = new Dictionary<long, long>();\n        foreach
    (long item in lst) {\n            if (freq.ContainsKey(item)) {\n                freq[item]
    += 1;\n            } else {\n                freq[item] = 1;\n            }\n
    \       }\n        foreach (KeyValuePair<long, long> item in freq) {\n            if
    (item.Key > max && item.Value >= item.Key) {\n                max = item.Key;\n
    \           }\n        }\n        return max;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009031
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long[] freq =
    new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            freq[i]
    = 0;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            freq[lst[i]]++;\n
    \       }\n        long ret = -1;\n        for (int i = 0; i < lst.Count; i++)
    {\n            if (freq[i] >= i) {\n                ret = i;\n            }\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Search (System.Collections.Generic.List`1[T]
    lst) [0x00038] in <fa6163fc234a4cc984edc9346deac3f0>:0 \n  at Problem.Main (System.String[]
    args) [0x00017] in <fa6163fc234a4cc984edc9346deac3f0>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.Search (System.Collections.Generic.List`1[T] lst) [0x00038]
    in <fa6163fc234a4cc984edc9346deac3f0>:0 \n  at Problem.Main (System.String[] args)
    [0x00017] in <fa6163fc234a4cc984edc9346deac3f0>:0 \n"
  stdout: ''
  timestamp: 1660009031
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        return -1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5048cca1bd34210925c9b9be5e653c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5048cca1bd34210925c9b9be5e653c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // your code here\n
    \       //Dictionary<long, long> freq = new Dictionary<long, long>();\n        //for
    (long x = 1; x <= lst.Count(); x++) {\n        //    foreach (long y in lst) {\n
    \       //        if (x == y) {\n        //            if (freq.ContainsKey(x))
    {\n        //                freq[x]++;\n        //            } else {\n        //
    \               freq.Add(x, 1);\n        //            }\n        //        }\n
    \       //    }\n        //}\n        //foreach (long x in freq.Keys) {\n        //
    \   foreach (long y in freq.Keys) {\n        //        if (freq[x] >= y && x >=
    y) {\n        //            return y;\n        //        }\n        //    }\n
    \       //}\n        //return -1;\n        //foreach (long x in lst) {\n        //
    \   foreach (long y in lst) {\n        //        if (x == y) {\n        //            if
    (freq.ContainsKey(x)) {\n        //                freq[x]++;\n        //            }
    else {\n        //                freq.Add(x, 1);\n        //            }\n        //
    \       }\n        //    }\n        //}\n        //foreach (long x in freq.Keys)
    {\n        //    foreach (long y in freq.Keys) {\n        //        if (freq[x]
    >= y && x >= y) {\n        //            return y;\n        //        }\n        //
    \   }\n        //}\n        //return -1;\n        return lst.GroupBy(x => x).Where(x
    => x.Count() >= x.Key).Select(x => x.Key).Max();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Search
    (System.Collections.Generic.List`1[T] lst) [0x0006e] in <5bfbf8c612934cbdbcaed9c5f05bba44>:0
    \n  at Problem.Main (System.String[] args) [0x00060] in <5bfbf8c612934cbdbcaed9c5f05bba44>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Search
    (System.Collections.Generic.List`1[T] lst) [0x0006e] in <5bfbf8c612934cbdbcaed9c5f05bba44>:0
    \n  at Problem.Main (System.String[] args) [0x00060] in <5bfbf8c612934cbdbcaed9c5f05bba44>:0
    \n"
  stdout: ''
  timestamp: 1660009031
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    long> freq = new Dictionary<long, long>();\n        foreach (long x in lst) {\n
    \           if (freq.ContainsKey(x)) {\n                freq[x]++;\n            }
    else {\n                freq[x] = 1;\n            }\n        }\n        long answer
    = -1;\n        foreach (long key in freq.Keys) {\n            if (key <= freq[key])
    {\n                answer = Math.Max(answer, key);\n            }\n        }\n
    \       return answer;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009031
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <27954221806f4b0d83b29180dea905f5>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <27954221806f4b0d83b29180dea905f5>:0 \n"
  stdout: ''
  timestamp: 1660009024
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    long> frequencies = new Dictionary<long, long>();\n        foreach (long item
    in lst) {\n            if (frequencies.ContainsKey(item)) {\n                frequencies[item]++;\n
    \           } else {\n                frequencies[item] = 1;\n            }\n
    \       }\n        long result = -1;\n        foreach (long item in frequencies.Keys)
    {\n            if (item > 0 && frequencies[item] >= item && item > result) {\n
    \               result = item;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009031
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Write your
    code here!\n        return 0;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77f6cd6fb48a49d6ae3fc9645b328d27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77f6cd6fb48a49d6ae3fc9645b328d27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009031
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        return (new Dictionary<long,
    long>(lst.GroupBy(x => x).ToDictionary(x => x.Key, x => x.Count())).Where(x =>
    x.Key <= x.Value).OrderByDescending(x => x.Key).Select(x => x.Key).DefaultIfEmpty(-1).First());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuqd_0lj6.cs(21,44): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.Dictionary<long,
    int>'' to ''int''

    '
  timestamp: 1660009031
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var dic = new
    Dictionary<long, long>();\n        foreach (var i in lst) {\n            if (dic.ContainsKey(i))
    {\n                dic[i]++;\n            } else {\n                dic[i] = 1;\n
    \           }\n        }\n        var max = -1L;\n        foreach (var i in dic)
    {\n            if (i.Key <= i.Value && i.Key > max) {\n                max = i.Key;\n
    \           }\n        }\n        return max;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009031
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // \n        Dictionary<long,
    long> freq = new Dictionary<long, long>();\n        for (long i = 0; i < lst.Count;
    i++) {\n            long el = lst[(int)i];\n            if (freq.ContainsKey(el))
    {\n                freq[el] = freq[el] + 1;\n            } else {\n                freq[el]
    = 1;\n            }\n        }\n        long res = -1;\n        for (long i =
    1; i < lst.Count; i++) {\n            if (freq.ContainsKey(i) && freq[i] >= i)
    {\n                res = i;\n            }\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d7b58cbda9dd4b46bffd2b410691d85e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d7b58cbda9dd4b46bffd2b410691d85e>:0
    \n"
  stdout: ''
  timestamp: 1660009031
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long r = -1;\n
    \       long m = -1;\n        long c = 0;\n        Dictionary<long, long> d =
    new Dictionary<long, long>();\n        foreach (long x in lst) {\n            if
    (d.ContainsKey(x)) {\n                d[x] = d[x] + 1;\n            } else {\n
    \               d[x] = 1;\n            }\n        }\n        foreach (long x in
    d.Keys) {\n            if (d[x] >= x) {\n                if (x > m) {\n                    r
    = x;\n                    m = x;\n                }\n            }\n        }\n
    \       return r;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009031
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var dict = new
    Dictionary<long, long>();\n        long result = -1;\n        foreach (var i in
    lst) {\n            if (dict.ContainsKey(i)) {\n                dict[i]++;\n            }
    else {\n                dict[i] = 1;\n            }\n        }\n        foreach
    (var key in dict.Keys) {\n            if (key <= dict[key] && key > result) {\n
    \               result = key;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009031
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        if (lst.Count
    == 0) { return -1; }\n        long minval = long.MaxValue;\n        long maxval
    = long.MinValue;\n        var histogram = new Dictionary<long, long>();\n        for
    (long i = 0; i < lst.Count; i++) {\n            if (lst[(int)i] < minval) { minval
    = lst[(int)i]; }\n            if (lst[(int)i] > maxval) { maxval = lst[(int)i];
    }\n            if (histogram.ContainsKey(lst[(int)i])) {\n                histogram[lst[(int)i]]
    = histogram[lst[(int)i]] + 1;\n            } else {\n                histogram[lst[(int)i]]
    = 1;\n            }\n        }\n        if (minval == 1) { return -1; }\n        minval
    = minval - 1;\n        while (minval > 0) {\n            if (histogram.ContainsKey(minval))
    {\n                if (histogram[minval] >= minval) {\n                    return
    minval;\n                }\n            }\n            minval = minval - 1;\n
    \       }\n        return -1;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3fd127f45fae4bf486b87a05c77ad456>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3fd127f45fae4bf486b87a05c77ad456>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009031
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        HashSet<long>
    seen = new HashSet<long>();\n        List<long> keys = new List<long>();\n        Dictionary<long,
    long> counts = new Dictionary<long, long>();\n        foreach (long item in lst)
    {\n            if (!seen.Contains(item)) {\n                seen.Add(item);\n
    \               keys.Add(item);\n                counts[item] = 0;\n            }\n
    \           counts[item] += 1;\n        }\n        long result = -1;\n        foreach
    (long key in keys) {\n            if (counts[key] >= key) {\n                result
    = Math.Max(result, key);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009031
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long[] fd = new
    long[lst.Count + 1];\n        for (int i = 0; i < lst.Count; i++) {\n            fd[lst[i]]++;\n
    \       }\n        long result = -1;\n        for (int i = 1; i < fd.Length; i++)
    {\n            if (fd[i] >= i) {\n                result = Math.Max(result, i);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Search (System.Collections.Generic.List`1[T]
    lst) [0x0001c] in <400851b0967e4f5cb8a1f394592abdc4>:0 \n  at Problem.Main (System.String[]
    args) [0x00060] in <400851b0967e4f5cb8a1f394592abdc4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.Search (System.Collections.Generic.List`1[T] lst) [0x0001c]
    in <400851b0967e4f5cb8a1f394592abdc4>:0 \n  at Problem.Main (System.String[] args)
    [0x00060] in <400851b0967e4f5cb8a1f394592abdc4>:0 \n"
  stdout: ''
  timestamp: 1660009031
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    long> dict = new Dictionary<long, long>();\n        for (long i = 0; i < lst.Count;
    i++) {\n            if (dict.ContainsKey(lst[(int)i])) {\n                dict[lst[(int)i]]++;\n
    \           } else {\n                dict[lst[(int)i]] = 1;\n            }\n
    \       }\n        List<long> list = new List<long>();\n        foreach (KeyValuePair<long,
    long> pair in dict) {\n            if (pair.Key > 0 && pair.Key <= pair.Value)
    {\n                list.Add(pair.Key);\n            }\n        }\n        if (list.Count
    == 0) {\n            return -1;\n        }\n        long value = list[0];\n        for
    (long i = 1; i < list.Count; i++) {\n            if (list[(int)i] > value) {\n
    \               value = list[(int)i];\n            }\n        }\n        return
    value;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009031
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var dict = new
    Dictionary<long, int>();\n        foreach (var num in lst) {\n            if (dict.ContainsKey(num))
    {\n                dict[num]++;\n            } else {\n                dict[num]
    = 1;\n            }\n        }\n        for (int i = lst.Count; i > 0; i--) {\n
    \           foreach (var num in dict.Keys) {\n                if (dict[num] >=
    num && num == i) {\n                    return num;\n                }\n            }\n
    \       }\n        return -1;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009031
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long r = -1;\n
    \       var s = lst.GroupBy(x => x).ToDictionary(x => x.Key, x => x.Count());\n
    \       foreach (var kv in s) {\n            if (kv.Key > 0 && kv.Key <= kv.Value)
    {\n                r = kv.Key;\n            }\n        }\n        return r;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6bd967510e9e469ea091a361f7b9d738>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6bd967510e9e469ea091a361f7b9d738>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009032
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long num = -1;\n
    \       long count = 0;\n        foreach (long i in lst) {\n            if (lst.Count(x
    => x == i) >= i) {\n                if (i > num) {\n                    num =
    i;\n                    count = lst.Count(x => x == i);\n                }\n            }\n
    \       }\n        return num;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009031
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var counter =
    new Dictionary<long, long>();\n        foreach (var elt in lst) {\n            if
    (counter.ContainsKey(elt)) {\n                counter[elt]++;\n            } else
    {\n                counter[elt] = 1;\n            }\n        }\n        long max
    = -1;\n        foreach (var kvp in counter) {\n            if (kvp.Key >= kvp.Value
    && kvp.Key > max) {\n                max = kvp.Key;\n            }\n        }\n
    \       return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6aa0dbe8e86e40d385d012ab51ab2603>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6aa0dbe8e86e40d385d012ab51ab2603>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009032
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // (long)4L, (long)1L,
    (long)2L, (long)2L, (long)3L, (long)1L\n        // we can assume that the input
    is sorted, and that's how we'll use it.\n        // We can loop through the list,
    and count how many times each value appears.\n        // Loop through the keys
    of the dictionary, and see if a key's value is greater than or equal to the key\n
    \       // If it is, we know that this is the highest valid integer.\n        //
    If it's not, there is no integer that is higher than zero and has a frequency
    equal to it or greater.\n        // After the loop, we'll return -1L.\n\n        //
    Create a dictionary, where the key will be the integer, and the value will be
    the count of that integer.\n        Dictionary<long, long> dict = new Dictionary<long,
    long>();\n        for (int i = 0; i < lst.Count; i++) {\n            // Check
    if the key exists. If it does, increment it's value.\n            if (dict.ContainsKey(lst[i]))
    {\n                dict[lst[i]]++;\n            } else {\n                // The
    key doesn't exist yet, so we need to create it.\n                dict.Add(lst[i],
    1);\n            }\n        }\n\n        // Loop through the dictionary, and see
    if any key is equal to the highest valid integer.\n        foreach (KeyValuePair<long,
    long> item in dict) {\n            if (item.Value >= item.Key) {\n                return
    item.Key;\n            }\n        }\n\n        // The foreach loop didn't return
    anything, so there is no valid integer.\n        return -1L;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ca3cedabc9c4a949a4fa72108847131>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ca3cedabc9c4a949a4fa72108847131>:0
    \n"
  stdout: ''
  timestamp: 1660009032
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var allNumbers
    = lst.GroupBy(a => a).ToDictionary(b => b.Key, b => b.Count());\n        if(allNumbers.Keys.Any(a
    => a >= allNumbers[a])) {\n            return allNumbers.Keys.Where(a => a >=
    allNumbers[a]).Max();\n        }\n        return -1;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <439a87b419be41d593c64c2d731848ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <439a87b419be41d593c64c2d731848ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009032
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // >>> Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n
    \       // -1\n        // >>> Search((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n        //
    3\n        // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L,
    (long)4L, (long)4L})))\n        // -1\n        long ans = -1;\n        long temp
    = -1;\n        long cnt = 0;\n        long cnt2 = 0;\n        long mx = -1;\n
    \       var dict = new Dictionary<long, long>();\n        foreach (var v in lst)
    {\n            if (dict.ContainsKey(v)) {\n                dict[v] += 1;\n            }
    else {\n                dict[v] = 1;\n            }\n        }\n        foreach
    (var i in dict) {\n            if (i.Key >= i.Value) {\n                if (mx
    < i.Key) {\n                    mx = i.Key;\n                }\n            }\n
    \       }\n        return mx;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d999d4719f3e4b2c8deca72092a66e7d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d999d4719f3e4b2c8deca72092a66e7d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009032
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var counts = new
    Dictionary<long, long>();\n        foreach (var num in lst) {\n            if
    (counts.ContainsKey(num)) {\n                counts[num] += 1;\n            }
    else {\n                counts[num] = 1;\n            }\n        }\n        return
    counts.Where(kv => kv.Key > 0 && kv.Key <= kv.Value).Max(kv => kv.Key);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] selector) [0x00030] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.Search (System.Collections.Generic.List`1[T] lst) [0x00091] in
    <057269642d2c461b8158da54a6042f53>:0 \n  at Problem.Main (System.String[] args)
    [0x00060] in <057269642d2c461b8158da54a6042f53>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Max[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult]
    selector) [0x00030] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Search
    (System.Collections.Generic.List`1[T] lst) [0x00091] in <057269642d2c461b8158da54a6042f53>:0
    \n  at Problem.Main (System.String[] args) [0x00060] in <057269642d2c461b8158da54a6042f53>:0
    \n"
  stdout: ''
  timestamp: 1660009032
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var groups = lst.GroupBy(x
    => x);\n        return groups.Where(g => g.Count() >= g.Key).Select(g => g.Key).DefaultIfEmpty(-1).Max();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009032
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    int> d = new Dictionary<long, int>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            if (d.ContainsKey(lst[i])) {\n                d[lst[i]]++;\n
    \           } else {\n                d[lst[i]] = 1;\n            }\n        }\n
    \       long s = -1;\n        foreach (KeyValuePair<long, int> kvp in d) {\n            if
    (kvp.Key > 0 && kvp.Value >= kvp.Key) {\n                s = kvp.Key;\n            }\n
    \       }\n        return s;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <761a0a6d272b4a27904ef30942ac21dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <761a0a6d272b4a27904ef30942ac21dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009032
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your answer
    is here.\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n
    \       long dictValue;\n        for (int i = 0; i < lst.Count; i++) {\n            if
    (dict.TryGetValue(lst[i], out dictValue)) {\n                dict[lst[i]]++;\n
    \           } else {\n                dict.Add(lst[i], 1);\n            }\n        }\n
    \       if (dict.ContainsKey(1)) {\n            return 1;\n        }\n        long
    max = -1;\n        long dictKey;\n        foreach (KeyValuePair<long, long> kv
    in dict) {\n            dictKey = kv.Key;\n            dictValue = kv.Value;\n
    \           if (dictValue >= dictKey && dictKey > max) {\n                max
    = dictKey;\n            }\n        }\n        return max;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cabb21b29994446a3e1c52d1c0e52aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cabb21b29994446a3e1c52d1c0e52aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009032
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long res = -1;\n
    \       long freq = 0;\n        long curInt = 0;\n        long curFreq = 0;\n
    \       foreach (long i in lst) {\n            if (i != curInt) {\n                if
    (curFreq >= curInt) {\n                    res = curInt;\n                    freq
    = curFreq;\n                }\n                curInt = i;\n                curFreq
    = 1;\n            } else {\n                curFreq++;\n            }\n        }\n
    \       if (curFreq >= curInt) {\n            res = curInt;\n            freq
    = curFreq;\n        }\n        if (res == -1) {\n            return res;\n        }\n
    \       foreach (long i in lst) {\n            if (i != res) {\n                continue;\n
    \           }\n            curFreq++;\n            if (curFreq > freq) {\n                return
    -1;\n            }\n        }\n        return res;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae4abaa6aac949c18a012c6138ed8aac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae4abaa6aac949c18a012c6138ed8aac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009032
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long ans = -1;\n
    \       long count = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            for
    (int j = 0; j < lst.Count; j++) {\n                if (lst[i] == lst[j]) {\n                    count++;\n
    \               }\n            }\n            if (count >= lst[i] && lst[i] >
    ans) {\n                ans = lst[i];\n            }\n            count = 0;\n
    \       }\n        return ans;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009032
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var dict = new
    Dictionary<long, long>();\n        foreach (var value in lst) {\n            long
    v = value;\n            if (dict.ContainsKey(v)) {\n                long val =
    dict[v];\n                dict[v] = (val + (long)1L);\n            } else {\n
    \               dict[v] = (long)1L;\n            }\n        }\n        var lst2
    = new List<long>();\n        var dict2 = new Dictionary<long, long>();\n        foreach
    (var pair in dict) {\n            long value = pair.Key;\n            long freq
    = pair.Value;\n            if ((value > (long)0L) && (freq >= value)) {\n                if
    (dict2.ContainsKey(freq)) {\n                    dict2[freq] = (dict2[freq] +
    (long)1L);\n                } else {\n                    dict2[freq] = (long)1L;\n
    \               }\n                lst2.Add(value);\n            }\n        }\n
    \       lst2.Sort();\n        lst2.Reverse();\n        long val2 = (long)-1L;\n
    \       long found = (long)0L;\n        foreach (var value3 in lst2) {\n            long
    v = value3;\n            long f = dict[v];\n            if (dict2[f] > (long)1L)
    {\n                found = (long)1L;\n                break;\n            }\n
    \           if (v > val2) {\n                val2 = v;\n                found
    = (long)1L;\n            }\n        }\n        if (found == (long)0L) {\n            val2
    = (long)-1L;\n        }\n        return val2;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a5cb3212ba946fcaafa9d0c9711d419>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a5cb3212ba946fcaafa9d0c9711d419>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009032
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var cnt = lst.Count;\n
    \       var freq = new Dictionary<long, long>();\n        for (var i = 0; i <
    cnt; i++) {\n            if (freq.ContainsKey(lst[i])) {\n                freq[lst[i]]++;\n
    \           } else {\n                freq[lst[i]] = 1;\n            }\n        }\n
    \       var ans = -1L;\n        foreach (var kvp in freq) {\n            if (kvp.Key
    > ans && kvp.Value >= kvp.Key) {\n                ans = kvp.Key;\n            }\n
    \       }\n        return ans;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009032
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long max = -1;\n
    \       long count = 0;\n        List<long> result = new List<long>();\n        for
    (int i = 0; i < lst.Count; i++) {\n            if (lst[i] > max) {\n                max
    = lst[i];\n            }\n        }\n        for (int i = 0; i < lst.Count; i++)
    {\n            if (lst[i] == max) {\n                count++;\n            }\n
    \       }\n        if (count >= max) {\n            return max;\n        }\n        else
    {\n            return -1;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b27c2773717b4e10a816523a0d9093b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b27c2773717b4e10a816523a0d9093b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009032
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    long> freq = new Dictionary<long, long>();\n        foreach (long x in lst) {\n
    \           if (freq.ContainsKey(x)) {\n                freq[x]++;\n            }
    else {\n                freq[x] = 1;\n            }\n        }\n        long ans
    = -1;\n        foreach (long x in freq.Keys) {\n            if (x > 0 && freq[x]
    >= x && x > ans) {\n                ans = x;\n            }\n        }\n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009032
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var d = new Dictionary<long,
    int>();\n        foreach (var l in lst) {\n            if (d.ContainsKey(l)) {\n
    \               d[l]++;\n            } else {\n                d[l] = 1;\n            }\n
    \       }\n        var res = -1L;\n        var max = 0;\n        foreach (var
    kv in d) {\n            if (kv.Key > 0 && kv.Value >= kv.Key && kv.Value > max)
    {\n                res = kv.Key;\n                max = kv.Value;\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b36070483e314e448fe8d0f21020be24>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b36070483e314e448fe8d0f21020be24>:0
    \n"
  stdout: ''
  timestamp: 1660009032
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var d = new Dictionary<long,
    long>();\n        foreach (var x in lst) {\n            if (d.ContainsKey(x))
    {\n                d[x] += 1;\n            } else {\n                d[x] = 1;\n
    \           }\n        }\n        var r = -1L;\n        foreach (var x in d.Keys)
    {\n            if (x <= d[x] && x > r) {\n                r = x;\n            }\n
    \       }\n        return r;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009032
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var m = new Dictionary<long,
    long>();\n        foreach (var item in lst) {\n            if (m.ContainsKey(item))
    {\n                m[item]++;\n            } else {\n                m[item] =
    1;\n            }\n        }\n        return m.Where(pair => pair.Key <= pair.Value).OrderByDescending(pair
    => pair.Key).FirstOrDefault().Key;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7247fdb13ea7402daab6c45857d84a0d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7247fdb13ea7402daab6c45857d84a0d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009033
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Write your
    code here.\n        return -1;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0cb40cba1ab643e68da45cdaea118543>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0cb40cba1ab643e68da45cdaea118543>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009032
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // your code here\n
    \       var dict = new Dictionary<long, long>();\n        for (long i = 0; i <
    lst.Count; i++) {\n            if (dict.ContainsKey(lst[(int)i])) {\n                dict[lst[(int)i]]
    = dict[lst[(int)i]] + (long)1L;\n            } else {\n                dict[lst[(int)i]]
    = (long)1L;\n            }\n        }\n        long maxValue = (long)-1L;\n        foreach
    (var kv in dict) {\n            if (kv.Key > (long)0L && kv.Value >= kv.Key &&
    kv.Key > maxValue) {\n                maxValue = kv.Key;\n            }\n        }\n
    \       return maxValue;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009032
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return -1;\n        }\n        lst.Sort();\n        int result
    = -1;\n        int current_frequency = 1;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] == lst[i - 1]) {\n                current_frequency++;\n
    \           } else {\n                if (current_frequency >= lst[i - 1]) {\n
    \                   result = (int)lst[i - 1];\n                }\n                current_frequency
    = 1;\n            }\n        }\n        if (current_frequency >= lst[lst.Count
    - 1]) {\n            result = (int)lst[lst.Count - 1];\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009032
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your code goes
    here\n        long result = 0;\n        // because the list is not ordered, we
    have to sort it so that same numbers come together\n        lst.Sort();\n        List<long>
    distinct = lst.Distinct().ToList();\n        // we count each number's frequency\n
    \       Dictionary<long, long> frequencies = new Dictionary<long, long>();\n        for
    (int i = 0; i < distinct.Count; i++) {\n            frequencies.Add(distinct[i],
    lst.Count(x => x == distinct[i]));\n        }\n        // we iterate through the
    distinct numbers and find the one that has a frequency\n        // greater than
    or equal to itself\n        for (int i = 0; i < distinct.Count; i++) {\n            if
    (frequencies[distinct[i]] >= distinct[i]) {\n                result = distinct[i];\n
    \               break;\n            }\n        }\n        // if no such number
    exists, return -1\n        if (result == 0) {\n            result = -1;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5ecbade7645b4b109d980c182d38adc1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5ecbade7645b4b109d980c182d38adc1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009033
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var dict = new
    Dictionary<long, long>();\n        foreach (var i in lst) {\n            if (dict.ContainsKey(i))
    {\n                dict[i] += 1;\n            } else {\n                dict[i]
    = 1;\n            }\n        }\n        var output = -1L;\n        var max = 0L;\n
    \       foreach (var (i, count) in dict) {\n            if (i >= count && count
    > max) {\n                output = i;\n                max = count;\n            }\n
    \       }\n        return output;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5f41993cb1f46089d1aeb2973d68eaa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5f41993cb1f46089d1aeb2973d68eaa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009033
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        return -1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5048cca1bd34210925c9b9be5e653c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5048cca1bd34210925c9b9be5e653c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    long> dic = new Dictionary<long, long>();\n        for (long i = 0; i < lst.Count;
    i++) {\n            dic[lst[(int)i]] = dic.ContainsKey(lst[(int)i]) ? dic[lst[(int)i]]
    + 1 : 1;\n        }\n        long max = -1;\n        foreach (long key in dic.Keys)
    {\n            if (key > 0 && dic[key] >= key && key > max) {\n                max
    = key;\n            }\n        }\n        return max;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009033
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // your code here\n
    \       return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <185d35bb06524e6ab55b057c0251b30d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <185d35bb06524e6ab55b057c0251b30d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var dict = new
    Dictionary<long, long>();\n        foreach (var e in lst) {\n            if (dict.ContainsKey(e))
    {\n                dict[e] += 1;\n            } else {\n                dict[e]
    = 1;\n            }\n        }\n        var max = long.MinValue;\n        foreach
    (var e in dict) {\n            if (e.Key > max && e.Key >= e.Value) {\n                max
    = e.Key;\n            }\n        }\n        return max == long.MinValue ? -1 :
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cc32aafbb8c14630af37c09cd2d38a9f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cc32aafbb8c14630af37c09cd2d38a9f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009033
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your code goes
    here.\n        var dict = new Dictionary<long, long>();\n        foreach (var
    l in lst) {\n            if (dict.ContainsKey(l)) {\n                dict[l] +=
    1;\n            } else {\n                dict[l] = 1;\n            }\n        }\n
    \       var s = dict.Keys.OrderByDescending(x => x).ToList();\n        foreach
    (var k in s) {\n            if (dict[k] >= k) {\n                return k;\n            }\n
    \       }\n        return -1;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009033
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long min = 1;\n
    \       long max = lst.Count + 1;\n        while (min < max) {\n            long
    mid = (min + max) / 2;\n            if (lst.Where(l => l == mid).Count() >= mid)
    {\n                min = mid + 1;\n            } else {\n                max =
    mid;\n            }\n        }\n        return min > lst.Count ? -1 : min;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c63f3fc0d5db4acda57585aa8d9578ab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c63f3fc0d5db4acda57585aa8d9578ab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009033
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your code here\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <5397048fc1a4445a8fbc99204027c648>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <5397048fc1a4445a8fbc99204027c648>:0 \n"
  stdout: ''
  timestamp: 1660009033
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    long> d = new Dictionary<long, long>();\n        long max = -1;\n        foreach
    (long i in lst) {\n            if (d.ContainsKey(i)) {\n                d[i]++;\n
    \           } else {\n                d[i] = 1;\n            }\n            if
    (i > max) {\n                max = i;\n            }\n        }\n        if (d.ContainsKey(max)
    && d[max] >= max) {\n            return max;\n        }\n        return -1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c0c445445294a29b15db1427e6403f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c0c445445294a29b15db1427e6403f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009033
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Finding the
    greatest integer that is greater than \n        // zero, and has a frequency greater
    than or equal to the value of the integer itself.\n        Dictionary<long, long>
    dict = new Dictionary<long, long>();\n        for (long i = 0; i < lst.Count;
    i++) {\n            if (dict.ContainsKey(lst[(int)i])) {\n                dict[lst[(int)i]]
    = dict[lst[(int)i]] + 1L;\n            } else {\n                dict[lst[(int)i]]
    = 1L;\n            }\n        }\n        long last_key = 0L;\n        foreach
    (long key in dict.Keys) {\n            if (dict[key] >= key && dict[key] >= last_key)
    {\n                last_key = key;\n            }\n        }\n        if (last_key
    == 0L) {\n            return -1L;\n        } else {\n            return last_key;\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1ce016e6cdf8445e9f701aa4272a5781>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1ce016e6cdf8445e9f701aa4272a5781>:0
    \n"
  stdout: ''
  timestamp: 1660009033
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long ans = -1;\n
    \       long max = lst.Max();\n        for (long i = max; i > 0; i--) {\n            if
    (lst.FindAll(e => e == i).Count >= i) {\n                ans = i;\n                break;\n
    \           }\n        }\n        return ans;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009033
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    long> d = new Dictionary<long, long>();\n        foreach (long i in lst) {\n            if
    (d.ContainsKey(i)) {\n                d[i] += 1;\n            } else {\n                d[i]
    = 1;\n            }\n        }\n        long m = -1;\n        foreach (KeyValuePair<long,
    long> e in d) {\n            if (e.Key <= e.Value && e.Key > m) {\n                m
    = e.Key;\n            }\n        }\n        return m;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,
    (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009033
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        Dictionary<long,
    long> counts = new Dictionary<long, long>();\n        long maximum = -1;\n        long
    result = -1;\n        foreach (long item in lst) {\n            long count = counts.ContainsKey(item)
    ? counts[item] : 0;\n            if (item > maximum) {\n                maximum
    = item;\n            }\n            if (count + 1 >= item) {\n                result
    = item;\n            }\n            counts[item] = count + 1;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <380e54cd92be4cb188c901745e453de0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <380e54cd92be4cb188c901745e453de0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009033
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // lst = new List<long>(new
    long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L});\n        //
    lst = new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L});\n        // lst = new List<long>(new
    long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L});\n        Dictionary<long,
    long> counts = new Dictionary<long, long>();\n        foreach (long x in lst)
    {\n            if (counts.ContainsKey(x)) {\n                counts[x]++;\n            }
    else {\n                counts[x] = 1;\n            }\n        }\n        long
    ans = -1;\n        foreach (long key in counts.Keys) {\n            if (key >
    counts[key]) {\n                continue;\n            }\n            if (key
    > ans) {\n                ans = key;\n            }\n        }\n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009033
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // >>> YOUR CODE
    HERE <<<\n        // return -1;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0oy8fpox.cs(20,24): error CS0161: ''Problem.Search(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1660009033
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Given an array
    of integers, find the number of pairs of integers that have a difference of K.\n
    \       // for every element in array\n        // for every other element in array
    where abs(element - other) == K\n        // add 1 to count\n        // return
    count\n        long count = 0;\n        for (int i = 0; i < lst.Count; i++) {\n
    \           int frequency = 0;\n            for (int j = 0; j < lst.Count; j++)
    {\n                if (lst[i] == lst[j]) frequency++;\n            }\n            if
    (frequency >= lst[i]) count = lst[i];\n        }\n        if (count == 0) count
    = -1;\n        return count;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d18178f766b4225b790685bbb79ea39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d18178f766b4225b790685bbb79ea39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009034
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var dic = new
    Dictionary<long, long>();\n        var answer = new List<long>();\n        foreach
    (var l in lst) {\n            if (dic.ContainsKey(l)) {\n                dic[l]
    += 1;\n            } else {\n                dic[l] = 1;\n            }\n        }\n
    \       foreach (var kvp in dic) {\n            if (kvp.Key <= kvp.Value) {\n
    \               answer.Add(kvp.Key);\n            }\n        }\n        return
    answer.Count > 0 ? answer.Max() : -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009033
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long[] freq =
    new long[11];\n        foreach (var n in lst) {\n            freq[n]++;\n        }\n
    \       long ans = -1;\n        for (int i = 1; i < freq.Length; i++) {\n            if
    (freq[i] >= i) {\n                ans = i;\n            }\n        }\n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009034
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var result = -1L;\n
    \       var freq = new Dictionary<long, int>();\n        foreach (var item in
    lst) {\n            if (freq.ContainsKey(item)) {\n                freq[item]++;\n
    \           } else {\n                freq[item] = 1;\n            }\n        }\n
    \       foreach (var item in freq) {\n            if (item.Key > result && item.Value
    >= item.Key) {\n                result = item.Key;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009033
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        //find the greatest
    value\n        long max = lst.Max();\n        //generate all possible numbers\n
    \       List<long> pos = new List<long>();\n        for (long i = 1; i <= max;
    i++) {\n            pos.Add(i);\n        }\n        //count the items in the list
    and add them to a dictionary\n        Dictionary<long, long> dict = new Dictionary<long,
    long>();\n        foreach (long i in lst) {\n            dict.Add(i, lst.Where(x
    => x == i).ToList().Count);\n        }\n        //check if any key meets the requirement\n
    \       foreach (long i in pos) {\n            if (dict.ContainsKey(i) && dict[i]
    >= i) {\n                return i;\n            }\n        }\n        return -1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same
    key has already been added. Key: 5\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert
    (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)
    [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add
    (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n
    \ at Problem.Search (System.Collections.Generic.List`1[T] lst) [0x0007b] in <1068bc8cd55c4953b7622d0f6b9fc65a>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <1068bc8cd55c4953b7622d0f6b9fc65a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the
    same key has already been added. Key: 5\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert
    (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)
    [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add
    (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n
    \ at Problem.Search (System.Collections.Generic.List`1[T] lst) [0x0007b] in <1068bc8cd55c4953b7622d0f6b9fc65a>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <1068bc8cd55c4953b7622d0f6b9fc65a>:0
    \n"
  stdout: ''
  timestamp: 1660009034
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // >>> Your code
    here <<<\n        long max = 1;\n        for (int i = 0; i < lst.Count; i++) {\n
    \           if (lst[i] > max) {\n                max = lst[i];\n            }\n
    \       }\n        var freq = new long[max + 1];\n        foreach (long n in lst)
    {\n            freq[n]++;\n        }\n        for (int i = 1; i < freq.Length;
    i++) {\n            if (freq[i] >= i) {\n                return i;\n            }\n
    \       }\n        return -1;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3fe323ba6bfa418ca69e7a7fe557ddb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3fe323ba6bfa418ca69e7a7fe557ddb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009034
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your code goes
    here\n        int max = -1;\n        foreach (int i in lst) {\n            if
    (i > max) {\n                max = i;\n            }\n        }\n        Dictionary<int,
    int> cnts = new Dictionary<int, int>();\n        foreach (int i in lst) {\n            if
    (cnts.ContainsKey(i)) {\n                cnts[i]++;\n            } else {\n                cnts[i]
    = 1;\n            }\n        }\n        for (int i = max; i > 0; i--) {\n            if
    (cnts.ContainsKey(i) && cnts[i] >= i) {\n                return i;\n            }\n
    \       }\n        return -1;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009034
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long outLong =
    -1;\n        var frequency = lst.GroupBy(i => i).ToDictionary(grp => grp.Key,
    grp => grp.Count());\n        foreach (var key in frequency.Keys) {\n            if
    (key > frequency[key]) {\n                outLong = key;\n            }\n        }\n
    \       return outLong;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a23721e91ac04c60b4da52dcf43bf743>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a23721e91ac04c60b4da52dcf43bf743>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009034
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var p = new Dictionary<long,
    long>();\n        foreach (var item in lst) {\n            if (p.ContainsKey(item))
    {\n                p[item]++;\n            } else {\n                p[item] =
    1;\n            }\n        }\n        long max = -1;\n        foreach (var item
    in p) {\n            if (item.Key >= item.Value && item.Key > max) {\n                max
    = item.Key;\n            }\n        }\n        return max;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c06ccaf5b61f4afcaf7f518cdc628215>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c06ccaf5b61f4afcaf7f518cdc628215>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009034
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // ...\n        return
    -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a00f5095f2f476baeb7e3485c25e319>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a00f5095f2f476baeb7e3485c25e319>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009034
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your code goes
    here\n        return -1;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbb793defc1a41daadcd677fa16d4b06>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbb793defc1a41daadcd677fa16d4b06>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var freq = new
    Dictionary<long, int>();\n        foreach (var i in lst) {\n            if (freq.ContainsKey(i))
    {\n                freq[i]++;\n            } else {\n                freq[i] =
    1;\n            }\n        }\n        var res = new List<long>();\n        foreach
    (var i in freq.Keys) {\n            if (i <= freq[i]) {\n                res.Add(i);\n
    \           }\n        }\n        if (res.Count == 0) {\n            return -1;\n
    \       }\n        return res.Max();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009034
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var dict = new
    Dictionary<long, long>();\n        foreach (var item in lst) {\n            if
    (dict.ContainsKey(item)) {\n                dict[item]++;\n            } else
    {\n                dict[item] = 1;\n            }\n        }\n        var dict2
    = new Dictionary<long, long>();\n        foreach (var item in dict) {\n            if
    (dict2.ContainsKey(item.Value)) {\n                dict2[item.Value]++;\n            }
    else {\n                dict2[item.Value] = 1;\n            }\n        }\n        var
    dict3 = new Dictionary<long, long>();\n        foreach (var item in dict2) {\n
    \           if (dict3.ContainsKey(item.Value)) {\n                dict3[item.Value]++;\n
    \           } else {\n                dict3[item.Value] = 1;\n            }\n
    \       }\n        var dict4 = new Dictionary<long, long>();\n        foreach
    (var item in dict3) {\n            if (dict4.ContainsKey(item.Value)) {\n                dict4[item.Value]++;\n
    \           } else {\n                dict4[item.Value] = 1;\n            }\n
    \       }\n        foreach (var item in dict) {\n            if (item.Value ==
    1) {\n                continue;\n            }\n            if (dict.ContainsKey(item.Value))
    {\n                return item.Value;\n            }\n        }\n        return
    -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e740e3abc39d415c9f87f1792748fe6e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e740e3abc39d415c9f87f1792748fe6e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009034
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var counts = lst.GroupBy(x
    => x).Select(x => new { x.Key, Count = x.Count() }).ToDictionary(x => x.Key, x
    => x.Count);\n        if (counts.Count == 0) return -1;\n        var result =
    lst.Where(x => counts[x] >= x).OrderByDescending(x => x).FirstOrDefault();\n        return
    result == 0 ? -1 : result;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009034
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long greatestInteger
    = -1;\n        if (lst.Count == 0) {\n            return greatestInteger;\n        }\n
    \       Dictionary<long, long> frequencyMap = new Dictionary<long, long>();\n
    \       foreach (long n in lst) {\n            long currentCount = 0;\n            frequencyMap.TryGetValue(n,
    out currentCount);\n            frequencyMap[n] = currentCount + 1;\n        }\n
    \       foreach (long n in lst) {\n            long currentCount = 0;\n            frequencyMap.TryGetValue(n,
    out currentCount);\n            if (n == currentCount && n > greatestInteger)
    {\n                greatestInteger = n;\n            }\n        }\n        return
    greatestInteger;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6812bf62655145478f28f9bae56a59bf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6812bf62655145478f28f9bae56a59bf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009034
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var map = new
    Dictionary<long, long>();\n        foreach (var i in lst) {\n            if (map.ContainsKey(i))
    {\n                map[i]++;\n            } else {\n                map[i] = 1;\n
    \           }\n        }\n        var ret = -1L;\n        foreach (var item in
    map) {\n            if (item.Key <= item.Value && item.Key > ret) {\n                ret
    = item.Key;\n            }\n        }\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009034
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Write your
    code here.\n        return -1;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0cb40cba1ab643e68da45cdaea118543>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0cb40cba1ab643e68da45cdaea118543>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660009032
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        var f = new Dictionary<long,
    long>();\n        foreach (var x in lst) {\n            long c;\n            if
    (f.TryGetValue(x, out c)) {\n                f[x] = c + 1;\n            } else
    {\n                f[x] = 1;\n            }\n        }\n        var y = -1L;\n
    \       foreach (var x in f.Keys) {\n            if (x <= f[x]) {\n                y
    = Math.Max(y, x);\n            }\n        }\n        return y;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))
    == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009034
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your code here\n
    \       long result = 0;\n        long currentFrequency = 0;\n        long currentValue
    = 0;\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        for
    (int i = 0; i < lst.Count; i++) {\n            if (!dict.ContainsKey(lst[i]))
    {\n                dict.Add(lst[i], 0);\n            }\n            dict[lst[i]]++;\n
    \       }\n        for (int i = 0; i < lst.Count; i++) {\n            if (dict[lst[i]]
    >= lst[i] && lst[i] > result) {\n                result = lst[i];\n            }\n
    \       }\n        if (result == 0) {\n            return -1;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660009034
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        long val = -1;\n
    \       long freq = 0;\n        List<long> uniq = new List<long>();\n        Dictionary<long,
    long> freqcount = new Dictionary<long, long>();\n        foreach (long item in
    lst) {\n            if (!uniq.Contains(item)) {\n                uniq.Add(item);\n
    \               freqcount.Add(item, 0);\n            }\n            if (freqcount.ContainsKey(item))
    {\n                freqcount[item]++;\n            }\n        }\n        foreach
    (long item in uniq) {\n            if (freqcount[item] >= item && item > freq)
    {\n                val = item;\n                freq = freqcount[item];\n            }\n
    \       }\n        return val;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) ==
    (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)7L,
    (long)8L, (long)8L, (long)4L, (long)8L, (long)7L, (long)3L, (long)9L, (long)6L,
    (long)5L, (long)10L, (long)4L, (long)3L, (long)6L, (long)7L, (long)1L, (long)7L,
    (long)4L, (long)10L, (long)8L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)2L, (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L,
    (long)5L, (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <94332c2a163f4399a7cd49b9491f825a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <94332c2a163f4399a7cd49b9491f825a>:0
    \n"
  stdout: ''
  timestamp: 1660009034
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a non-empty list of positive integers. Return
    the greatest integer that is greater than \n    // zero, and has a frequency greater
    than or equal to the value of the integer itself. \n    // The frequency of an
    integer is the number of times it appears in the list.\n    // If no such a value
    exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,
    (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>
    Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    //
    (-1L)\n    public static long Search(List<long> lst) {\n        // Your code goes
    here\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,
    (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,
    (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,
    (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,
    (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,
    (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,
    (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,
    (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,
    (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,
    (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,
    (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,
    (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,
    (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,
    (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))
    == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==
    (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,
    (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,
    (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,
    (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,
    (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,
    (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,
    (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)2L, (long)4L, (long)1L, (long)5L, (long)1L,
    (long)5L, (long)2L, (long)5L, (long)7L, (long)7L, (long)7L, (long)3L, (long)10L,
    (long)1L, (long)5L, (long)4L, (long)2L, (long)8L, (long)4L, (long)1L, (long)9L,
    (long)10L, (long)7L, (long)10L, (long)2L, (long)8L, (long)10L, (long)9L, (long)4L})))
    == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)6L,
    (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L, (long)4L, (long)10L,
    (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L, (long)3L, (long)1L,
    (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)9L, (long)8L, (long)6L, (long)10L, (long)2L, (long)6L,
    (long)10L, (long)2L, (long)7L, (long)8L, (long)10L, (long)3L, (long)8L, (long)2L,
    (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)5L, (long)5L, (long)3L, (long)9L, (long)5L, (long)6L,
    (long)3L, (long)2L, (long)8L, (long)5L, (long)6L, (long)10L, (long)10L, (long)6L,
    (long)8L, (long)4L, (long)10L, (long)7L, (long)7L, (long)10L, (long)8L}))) ==
    (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)10L}))) == (-1L));\n
    \   Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)7L, (long)7L,
    (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L, (long)7L, (long)5L,
    (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new
    long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new
    List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,
    (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,
    (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))
    == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,
    (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpar6zi2fw.cs(20,24): error CS0161: ''Problem.Search(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1660009034
