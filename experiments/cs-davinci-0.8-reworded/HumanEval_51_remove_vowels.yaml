name: HumanEval_51_remove_vowels
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // remove_vowels is a function that takes string and returns string\
  \ without vowels.\n    // >>> RemoveVowels((\"\"))\n    // (\"\")\n    // >>> RemoveVowels((\"\
  abcdef\"))\n    // (\"bcdf\")\n    // >>> RemoveVowels((\"aaaaa\"))\n    // (\"\"\
  )\n    // >>> RemoveVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> RemoveVowels((\"\
  zbcd\"))\n    // (\"zbcd\")\n    public static string RemoveVowels(string text)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveVowels((\"\
  \")).Equals((\"\")));\n    Debug.Assert(RemoveVowels((\"abcdef\\nghijklm\")).Equals((\"\
  bcdf\\nghjklm\")));\n    Debug.Assert(RemoveVowels((\"fedcba\")).Equals((\"fdcb\"\
  )));\n    Debug.Assert(RemoveVowels((\"eeeee\")).Equals((\"\")));\n    Debug.Assert(RemoveVowels((\"\
  acBAA\")).Equals((\"cB\")));\n    Debug.Assert(RemoveVowels((\"EcBOO\")).Equals((\"\
  cB\")));\n    Debug.Assert(RemoveVowels((\"ybcd\")).Equals((\"ybcd\")));\n    }\n\
  \n}\n"
completions: ["        // Finds the vowels and then replaces them with empty space.\n\
    \        string[] vowels = { \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\",\
    \ \"I\", \"O\", \"U\" };\n        text = text.Trim();\n        for (int i = 0;\
    \ i < vowels.Length; i++) {\n            text = text.Replace(vowels[i], \"\");\n\
    \        }\n        return text;", "        return new string(text.Where(c =>\
    \ c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u').ToArray());", "  \
    \      // put your code here\n        return text;", "        string result =\
    \ \"\";\n        for (int i = 0; i < text.Length; i++) {\n            if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u')\
    \ {\n                result += text[i];\n            }\n        }\n        return\
    \ result;", "        string result = \"\";\n        for (int i = 0; i < text.Length;\
    \ i++) {\n            if (!((text[i] == 'a') || (text[i] == 'e') || (text[i] ==\
    \ 'i') || (text[i] == 'o') || (text[i] == 'u'))) {\n                result +=\
    \ text[i];\n            }\n        }\n        return result;", '        throw
    new NotImplementedException();', '        return text.Replace("a", "").Replace("e",
    "").Replace("i", "").Replace("o", "").Replace("u", "");', '        throw new NotImplementedException();',
  "        // use StringBuilder for better performance\n        var sb = new StringBuilder();\n\
    \        foreach (var ch in text) {\n            if (!IsVowel(ch)) {\n       \
    \         sb.Append(ch);\n            }\n        }\n        return sb.ToString();",
  "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I',\
    \ 'O', 'U' };\n        var sb = new StringBuilder();\n        foreach (var c in\
    \ text) {\n            if (!vowels.Contains(c)) {\n                sb.Append(c);\n\
    \            }\n        }\n        return sb.ToString();", "        string s =\
    \ \"\";\n        for (int i = 0; i < text.Length; i++) {\n            if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n                s += text[i];\n            }\n        }\n       \
    \ return s;", "        string result = \"\";\n        for (int i = 0; i < text.Length;\
    \ i++) {\n            string letter = text[i].ToString();\n            if (!letter.Equals(\"\
    a\") && !letter.Equals(\"e\") && !letter.Equals(\"i\") && !letter.Equals(\"o\"\
    ) && !letter.Equals(\"u\")) {\n                result += letter;\n           \
    \ }\n        }\n        return result;", "        var sb = new StringBuilder();\n\
    \        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I',\
    \ 'O', 'U' };\n        foreach (var ch in text) {\n            if (!vowels.Contains(ch))\
    \ {\n                sb.Append(ch);\n            }\n        }\n        return\
    \ sb.ToString();", '        return string.Concat(text.Where(c => !"aeiou".Contains(c)));',
  "        StringBuilder sb = new StringBuilder();\n        foreach (char c in text)\
    \ {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'\
    \ && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n           \
    \     sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        // Implement this\n        throw new NotImplementedException();", "   \
    \     HashSet<char> vowels = new HashSet<char>();\n        vowels.Add('a');\n\
    \        vowels.Add('e');\n        vowels.Add('i');\n        vowels.Add('o');\n\
    \        vowels.Add('u');\n        vowels.Add('A');\n        vowels.Add('E');\n\
    \        vowels.Add('I');\n        vowels.Add('O');\n        vowels.Add('U');\n\
    \        var result = new StringBuilder();\n        foreach (char c in text) {\n\
    \            if (!vowels.Contains(c)) {\n                result.Append(c);\n \
    \           }\n        }\n        return result.ToString();", "        string\
    \ set = \"aeiouAEIOU\";\n        string result = \"\";\n        foreach (char\
    \ c in text) {\n            if (set.IndexOf(c) == -1) {\n                result\
    \ += c;\n            }\n        }\n        return result;", "        var ret =\
    \ \"\";\n        for (int i = 0; i < text.Length; i++) {\n            var c =\
    \ text[i];\n            if (c != 'a' && c != 'A' && c != 'e' && c != 'E' && c\
    \ != 'i' && c != 'I' && c != 'o' && c != 'O' && c != 'u' && c != 'U')\n      \
    \          ret += c;\n        }\n        return ret;", "        List<char> vowels\
    \ = new List<char>() { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n \
    \       var result = \"\";\n        foreach (var ch in text) {\n            if\
    \ (!vowels.Contains(ch)) {\n                result += ch;\n            }\n   \
    \     }\n        return result;", "        var VOWELS = new HashSet<char> { 'a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        StringBuilder sb = new\
    \ StringBuilder();\n        foreach (char ch in text) {\n            if (!VOWELS.Contains(ch))\
    \ {\n                sb.Append(ch);\n            }\n        }\n        return\
    \ sb.ToString();", "        char[] chars = text.ToCharArray();\n        string\
    \ after = \"\";\n        for (int i = 0; i < chars.Length; i++) {\n          \
    \  switch (chars[i]) {\n                case 'a':\n                case 'e':\n\
    \                case 'i':\n                case 'o':\n                case 'u':\n\
    \                case 'A':\n                case 'E':\n                case 'I':\n\
    \                case 'O':\n                case 'U':\n                    break;\n\
    \                default:\n                    after += chars[i];\n          \
    \          break;\n            }\n        }\n        return after;", '        return
    new string(text.Where(c => "aeiouAEIOU".IndexOf(c) == -1).ToArray());', "    \
    \    text = text.ToLower();\n        string vowels = \"aeiou\";\n        StringBuilder\
    \ str = new StringBuilder();\n        foreach (char c in text) {\n           \
    \ if (vowels.IndexOf(c) == -1) {\n                str.Append(c);\n           \
    \ }\n        }\n        return str.ToString();", "        // TODO: implement RemoveVowels.\n\
    \        return null;", "        List<char> chars = new List<char>();\n      \
    \  foreach (char c in text) {\n            if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u')\n                continue;\n            chars.Add(c);\n\
    \        }\n        return new string(chars.ToArray());", "        string result\
    \ = \"\";\n        foreach (char c in text) {\n            if (c != 'a' && c !=\
    \ 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n \
    \           }\n        }\n        return result;", "        if (text == \"\")\
    \ return \"\";\n        string res = \"\";\n        foreach (char c in text) {\n\
    \            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c\
    \ != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                res\
    \ += c;\n            }\n        }\n        return res;", "        StringBuilder\
    \ res = new StringBuilder();\n        foreach (char c in text) {\n           \
    \ if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' &&\
    \ c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                res.Append(c);\n\
    \            }\n        }\n        return res.ToString();", "        // write\
    \ your code here\n        return \"\";", '        return string.Concat(text.Where(c
    => !"aeiou".Contains(c)));', "        string no_vowels = \"\";\n        for (int\
    \ i = 0; i < text.Length; i++) {\n            if (!\"aeiouAEIOU\".Contains(text[i]))\
    \ {\n                no_vowels += text[i];\n            }\n        }\n       \
    \ return no_vowels;", "        int len = text.Length;\n        char[] vowels =\
    \ { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        StringBuilder\
    \ result = new StringBuilder(len);\n        for (int i = 0; i < len; i++) {\n\
    \            if (!vowels.Contains(text[i])) {\n                result.Append(text[i]);\n\
    \            }\n        }\n        return result.ToString();", '        return
    text.Where(t => !"aeiouAEIOU".Contains(t)).Aggregate("", (c, t) => c + t);', " \
    \       // Given a string, return the string with all vowels removed.\n      \
    \  //\n        // I used a regex replace to do this:\n        //\n        // System.Text.RegularExpressions.Regex.Replace(text,\
    \ \"[aeiou]\", \"\");\n        //\n        // This might not be the most efficient,\
    \ but it was the quickest to implement.\n        //\n        // If I wanted to\
    \ be more efficient, I would start at the end of the string and make\n       \
    \ // my way forward, removing characters at will. But I would need to be careful\
    \ because\n        // I would have to change the index I was on as I went along.\n\
    \        //\n        // It's probably not worth the effort, though. I'm just answering\
    \ this question because\n        // you asked.\n        //\n        return System.Text.RegularExpressions.Regex.Replace(text,\
    \ \"[aeiou]\", \"\");", "        string vowels = \"aeiou\";\n        // long way\n\
    \        // string answer = \"\";\n        // foreach (char letter in text) {\n\
    \        //     if (vowels.IndexOf(letter) < 0) {\n        //         answer +=\
    \ letter;\n        //     }\n        // }\n        // return answer;\n       \
    \ return new string(text.Where(l => vowels.IndexOf(l) < 0).ToArray());", "   \
    \     string vowels = \"aeiouAEIOU\";\n        string noVowels = \"\";\n     \
    \   foreach (char letter in text) {\n            if (!vowels.Contains(letter))\
    \ {\n                noVowels += letter;\n            }\n        }\n        return\
    \ noVowels;", '        return text.Replace("a", "").Replace("e", "").Replace("i",
    "").Replace("o", "").Replace("u", "");', "        string result = \"\";\n    \
    \    for (int i = 0; i < text.Length; i++) {\n            if (!IsVowel(text[i]))\
    \ {\n                result += text[i];\n            }\n        }\n        return\
    \ result;", "        string[] vowels = new string[] { \"a\", \"e\", \"i\", \"\
    o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\" };\n        foreach (string vowel\
    \ in vowels) {\n            text = text.Replace(vowel, \"\");\n        }\n   \
    \     return text;", "        return new string(text.Where(x => x != 'a' && x\
    \ != 'A' && x != 'e' && x != 'E' && x != 'i' && x != 'I' && x != 'o' && x != 'O'\
    \ && x != 'u' && x != 'U').ToArray());", "        string result = \"\";\n    \
    \    foreach (char c in text) {\n            if (!IsVowel(c)) {\n            \
    \    result += c;\n            }\n        }\n        return result;", "      \
    \  var retval = new StringBuilder();\n        foreach (var c in text) {\n    \
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n   \
    \             continue;\n            }\n            retval.Append(c);\n      \
    \  }\n        return retval.ToString();", "        string noVowels = text.Replace(\"\
    a\", \"\").Replace(\"e\", \"\").Replace(\"i\", \"\").Replace(\"o\", \"\").Replace(\"\
    u\", \"\");\n        return noVowels;", "        // write your code here\n   \
    \     return new string(text.Where(x => x != 'a' && x != 'e' && x != 'i' && x\
    \ != 'o' && x != 'u').ToArray());", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (!isVowel(c)) {\n                result +=\
    \ c;\n            }\n        }\n        return result;", "        StringBuilder\
    \ result = new StringBuilder();\n        foreach (char c in text) {\n        \
    \    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                continue;\n\
    \            }\n            result.Append(c);\n        }\n        return result.ToString();",
  "        StringBuilder sb = new StringBuilder();\n        foreach (char c in text)\
    \ {\n            if (!IsVowel(c)) {\n                sb.Append(c);\n         \
    \   }\n        }\n        return sb.ToString();", "        var vowels = new List<char>\
    \ { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        var result =\
    \ \"\";\n        for (int i = 0; i < text.Length; i++) {\n            if (!vowels.Contains(text[i]))\
    \ {\n                result += text[i];\n            }\n        }\n        return\
    \ result;", "        string vowels = \"aeiou\";\n        return String.Concat(text.Where(c\
    \ => !vowels.Contains(c)));", '        return "";', '        return text.Where(c
    => !Vowels.Contains(c)).ToString();', "        char[] vowels = { 'a', 'e', 'i',\
    \ 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < text.Length; i++) {\n            if (!vowels.Contains(text[i]))\
    \ {\n                sb.Append(text[i]);\n            }\n        }\n        return\
    \ sb.ToString();", "        // TODO: implement this method\n        return \"\"\
    ;", '        return new string(text.Where(c => !"aeiou".Contains(c)).ToArray());',
  "        string result = \"\";\n        for (int i = 0; i < text.Length; i++) {\n\
    \            if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u') {\n                result += text[i];\n          \
    \  }\n        }\n        return result;", "        string noVowels = \"\";\n \
    \       for (int i = 0; i < text.Length; i++) {\n            if (!\"aAeEiIoOuU\"\
    .Contains(text[i])) {\n                noVowels += text[i];\n            }\n \
    \       }\n        return noVowels;", "        // TODO: Implement this.\n    \
    \    return text;", '        return new string(text.Where(x => "aeiouAEIOU".IndexOf(x)
    == -1).ToArray());', "        // Your code goes here\n        var vowels = new\
    \ HashSet<char> { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n      \
    \  text = new string(text.Where(c => !vowels.Contains(c)).ToArray());\n      \
    \  return text;", "        text = text.ToLower();\n        string ret = \"\";\n\
    \        for (int i = 0; i < text.Length; i++) {\n            if (text[i] != 'a'\
    \ && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u') {\n\
    \                ret += text[i];\n            }\n        }\n        return ret;",
  "        string vowels = \"aeiouAEIOU\";\n        string res = \"\";\n        for\
    \ (int i = 0; i < text.Length; i++) {\n            if (vowels.IndexOf(text[i])\
    \ == -1) {\n                res += text[i];\n            }\n        }\n      \
    \  return res;", "        string result = \"\";\n        foreach (char ch in text)\
    \ {\n            if (ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch !=\
    \ 'u') {\n                result += ch;\n            }\n        }\n        return\
    \ result;", "        StringBuilder ans = new StringBuilder();\n        foreach\
    \ (char ch in text) {\n            if (\"aeiouAEIOU\".IndexOf(ch) == -1) {\n \
    \               ans.Append(ch);\n            }\n        }\n        return ans.ToString();",
  "        return string.Concat(\n            from c in text\n            where c\
    \ != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'\n            select c\n\
    \        );", "        // your code here\n        // return something\n      \
    \  return null;", "        string res = \"\";\n        for (int i = 0; i < text.Length;\
    \ i++) {\n            if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' &&\
    \ text[i] != 'o' && text[i] != 'u')\n                res += text[i];\n       \
    \ }\n        return res;", "        // >>> text\n        // \"\"\n        // >>>\
    \ text[0]\n        // ''\n        // >>> text[0:0]\n        // \"\"\n        //\
    \ >>> text[0:1]\n        // \"a\"\n        // >>> text[0:-1]\n        // \"\"\n\
    \        // >>> text[1:-1]\n        // \"\"\n        // >>> text[1:1]\n      \
    \  // \"\"\n        // >>> text[1:2]\n        // \"b\"\n        // >>> text[-1:-1]\n\
    \        // \"\"\n        // >>> text[-1:0]\n        // \"\"\n        // >>> text[0:0]\
    \ + text[1:2]\n        // \"b\"\n        // >>> text[0:1] + text[2:3]\n      \
    \  // \"ac\"\n        // >>> text[0:2] + text[3:4]\n        // \"abd\"\n     \
    \   // >>> text[0:3] + text[4:5]\n        // \"abce\"\n        // >>> text[0:4]\
    \ + text[5:6]\n        // \"abcdf\"\n        // >>> text[0:5] + text[6:7]\n  \
    \      // \"abcdef\"\n        // >>> text[0:6] + text[7:8]\n        // \"abcdef\"\
    \n        // >>> text[0:7] + text[8:9]\n        // \"abcdef\"\n        // >>>\
    \ len(text)\n        // 0\n        if (len(text) == 0) {\n            return \"\
    \";\n        }\n        else {\n            // text[0] is a character.\n     \
    \       // 'a' is a character.\n            // 'b' is a character.\n         \
    \   // 'c' is a character.\n            // 'd' is a character.\n            //\
    \ 'e' is a character.\n            // 'f' is a character.\n            // 'a'\
    \ == 'a' is a boolean.\n            // 'a' == 'b' is a boolean.\n            //\
    \ 'a' == 'c' is a boolean.\n            // 'a' == 'd' is a boolean.\n        \
    \    // 'a' == 'e' is a boolean.\n            // 'a'", "        string vowels\
    \ = \"AEIOUaeiou\";\n        string s = \"\";\n        foreach (char c in text)\
    \ {\n            if (vowels.IndexOf(c) == -1) {\n                s += c;\n   \
    \         }\n        }\n        return s;", "        StringBuilder result = new\
    \ StringBuilder();\n        foreach (char c in text) {\n            switch (c)\
    \ {\n                case 'a':\n                case 'e':\n                case\
    \ 'i':\n                case 'o':\n                case 'u':\n               \
    \ case 'A':\n                case 'E':\n                case 'I':\n          \
    \      case 'O':\n                case 'U':\n                    break;\n    \
    \            default:\n                    result.Append(c);\n               \
    \     break;\n            }\n        }\n        return result.ToString();", '        return
    new string(text.Where(c => !IsVowel(c)).ToArray());', "        var vowels = new\
    \ HashSet<char>(\"aeiou\");\n        return string.Concat(text.Where(c => !vowels.Contains(c)));",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (!\"aeiouAEIOU\".Contains(c)) {\n                result += c;\n         \
    \   }\n        }\n        return result;", "        var vowels = new[] {'a', 'e',\
    \ 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n        return new string(text.Where(c\
    \ => !vowels.Contains(c)).ToArray());", "        string newText = \"\";\n    \
    \    // https://en.wikipedia.org/wiki/Enumeration_in_programming#C.23\n      \
    \  foreach (char c in text) {\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                newText += c;\n            }\n \
    \       }\n        return newText;", "        string text_wo_vowels = text.Replace(\"\
    a\", \"\").Replace(\"e\", \"\").Replace(\"i\", \"\").Replace(\"o\", \"\").Replace(\"\
    u\", \"\");\n        return text_wo_vowels;", "        // We'll use this array\
    \ to tell if character is vowel.\n        bool[] isVowel = new bool[127];\n  \
    \      isVowel['a'] = true;\n        isVowel['e'] = true;\n        isVowel['i']\
    \ = true;\n        isVowel['o'] = true;\n        isVowel['u'] = true;\n      \
    \  isVowel['A'] = true;\n        isVowel['E'] = true;\n        isVowel['I'] =\
    \ true;\n        isVowel['O'] = true;\n        isVowel['U'] = true;\n        //\
    \ We'll build result string character by character.\n        StringBuilder result\
    \ = new StringBuilder();\n        // Loop through string characters.\n       \
    \ foreach (char c in text) {\n            // If current character is not vowel\
    \ - add it to result.\n            if (!isVowel[c]) {\n                result.Append(c);\n\
    \            }\n        }\n        // And return result.\n        return result.ToString();",
  '        return text.Where(ch => "aeiouAEIOU".IndexOf(ch) == -1).Aggregate("", (s,
    c) => s += c);', "        if (text == \"\") return \"\";\n        char[] arr =\
    \ text.ToCharArray();\n        List<char> list = new List<char>();\n        foreach\
    \ (char c in arr) {\n            if (c != 'a' && c != 'e' && c != 'i' && c !=\
    \ 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\
    \ {\n                list.Add(c);\n            }\n        }\n        return string.Join(\"\
    \", list);", "        char[] textChars = text.ToCharArray();\n        string result\
    \ = string.Empty;\n        //char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E',\
    \ 'I', 'O', 'U' };\n        List<char> vowels = new List<char>();\n        vowels.Add('a');\n\
    \        vowels.Add('e');\n        vowels.Add('i');\n        vowels.Add('o');\n\
    \        vowels.Add('u');\n        vowels.Add('A');\n        vowels.Add('E');\n\
    \        vowels.Add('I');\n        vowels.Add('O');\n        vowels.Add('U');\n\
    \        //string vowels = \"aeiouAEIOU\";\n        //foreach (char c in textChars)\
    \ {\n        //    if (vowels.Contains(c)) {\n        //        result += c;\n\
    \        //    }\n        //}\n        foreach (char c in textChars) {\n     \
    \       if (!vowels.Contains(c)) {\n                result += c;\n           \
    \ }\n        }\n        return result;", "        var sb = new StringBuilder();\n\
    \        var vowels = new HashSet<char> {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I',\
    \ 'O', 'U'};\n        foreach (var c in text) {\n            if (!vowels.Contains(c))\
    \ {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        string vowels = \"aeiou\";\n        return string.Concat(text.Where(c =>\
    \ !vowels.Contains(c)));", "        // TODO: implement RemoveVowels function\n\
    \        char[] arr=text.ToCharArray();\n        string ret=\"\";\n        for(int\
    \ i=0;i<arr.Length;i++){\n            if(arr[i]!='a'&&arr[i]!='A'&&arr[i]!='e'&&arr[i]!='E'&&arr[i]!='i'&&arr[i]!='I'&&arr[i]!='o'&&arr[i]!='O'&&arr[i]!='u'&&arr[i]!='U'){\n\
    \                ret+=arr[i];\n            }\n        }\n        return ret;",
  "        string withNoVowels = \"\";\n        string vowel = \"aeiouAEIOU\";\n \
    \       int len = text.Length;\n        for (int i = 0; i < len; i++) {\n    \
    \        if (vowel.IndexOf(text[i]) < 0) {\n                withNoVowels += text[i];\n\
    \            }\n        }\n        return withNoVowels;", "        string result\
    \ = \"\";\n        foreach (char t in text) {\n            if (t != 'a' && t !=\
    \ 'e' && t != 'i' && t != 'o' && t != 'u' && t != 'A' && t != 'E' && t != 'I'\
    \ && t != 'O' && t != 'U') {\n                result += t;\n            }\n  \
    \      }\n        return result;", "        string vowels = \"aeiou\";\n     \
    \   string result = \"\";\n        for (int i = 0; i < text.Length; i++) {\n \
    \           if (vowels.IndexOf(text[i]) < 0) {\n                result += text[i];\n\
    \            }\n        }\n        return result;", "        var vowels = new\
    \ HashSet<char>() { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n    \
    \    return String.Join(\"\", text.Where(ch => !vowels.Contains(ch)));", "   \
    \     text = text.ToLower();\n        string newText = \"\";\n        for (int\
    \ i = 0; i < text.Length; i++) {\n            if (text[i] != 'a' && text[i] !=\
    \ 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u') {\n             \
    \   newText += text[i];\n            }\n        }\n        return newText;", " \
    \       var vowels = new HashSet<char> {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I',\
    \ 'O', 'U'};\n        return new string(text.Where(s => !vowels.Contains(s)).ToArray());",
  "        StringBuilder result = new StringBuilder();\n        for (int i = 0; i\
    \ < text.Length; i++) {\n            if (text[i] != 'a' && text[i] != 'e' && text[i]\
    \ != 'i' && text[i] != 'o' && text[i] != 'u') {\n                result.Append(text[i]);\n\
    \            }\n        }\n        return result.ToString();", "        var vowels\
    \ = new HashSet<char> { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n\
    \        return new string(text.Where(c => !vowels.Contains(c)).ToArray());",
  "        string vowels = \"aeiou\";\n        string new_text = \"\";\n        for\
    \ (int i = 0; i < text.Length; i++) {\n            if (vowels.IndexOf(text[i])\
    \ == -1) {\n                new_text += text[i];\n            }\n        }\n \
    \       return new_text;", "        string vowels = \"aeiouAEIOU\";\n        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (vowels.IndexOf(c)\
    \ == -1)\n                result += c;\n        }\n        return result;", '        return
    string.Concat(text.Where(c => !IsVowel(c)));', "        StringBuilder newText\
    \ = new StringBuilder();\n        for (int i = 0; i < text.Length; i++) {\n  \
    \          if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] !=\
    \ 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n                newText.Append(text[i]);\n\
    \            }\n        }\n        return newText.ToString();", "        string\
    \ ret = \"\";\n        char[] lower = { 'a', 'e', 'i', 'o', 'u' };\n        char[]\
    \ upper = { 'A', 'E', 'I', 'O', 'U' };\n        char[] textChars = text.ToCharArray();\n\
    \        foreach (char c in textChars) {\n            if (Array.IndexOf(lower,\
    \ c) == -1 && Array.IndexOf(upper, c) == -1) {\n                ret += c;\n  \
    \          }\n        }\n        return ret;", '        return string.Concat(text.Where(c
    => !IsVowel(c)));', "        var ans = \"\";\n        foreach (var c in text)\
    \ {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\n\
    \                ans += c;\n        }\n        return ans;", "        text = text.ToLower();\n\
    \        string final_text = \"\";\n        foreach (char character in text) {\n\
    \            if (character != 'a' && character != 'e' && character != 'i' && character\
    \ != 'o' && character != 'u') {\n                final_text += character;\n  \
    \          }\n        }\n        return final_text;", "        int start = 0;\n\
    \        int end = text.Length - 1;\n        while (start <= end) {\n        \
    \    if (IsVowel(text[start])) {\n                start++;\n            } else\
    \ if (IsVowel(text[end])) {\n                end--;\n            } else {\n  \
    \              break;\n            }\n        }\n        return text.Substring(start,\
    \ end - start + 1);", "        StringBuilder result = new StringBuilder();\n \
    \       foreach (char c in text) {\n            if (!IsVowel(c)) {\n         \
    \       result.Append(c);\n            }\n        }\n        return result.ToString();",
  '        return "";', "        string result = \"\";\n        foreach (char c in\
    \ text) {\n            if (!IsVowel(c)) {\n                result += c;\n    \
    \        }\n        }\n        return result;", "        StringBuilder result\
    \ = new StringBuilder();\n        foreach (char c in text) {\n            if (Char.ToLower(c)\
    \ != 'a' && Char.ToLower(c) != 'e' && Char.ToLower(c) != 'i' && Char.ToLower(c)\
    \ != 'o' && Char.ToLower(c) != 'u') {\n                result.Append(c);\n   \
    \         }\n        }\n        return result.ToString();", "        string vowels\
    \ = \"aeiouAEIOU\";\n        string result = \"\";\n        foreach (char c in\
    \ text) {\n            if (vowels.IndexOf(c) < 0)\n                result += c;\n\
    \        }\n        return result;", "        // Insert your code here.\n    \
    \    string vowels = \"aeiou\";\n        return new string(text.Where(ch => !vowels.Contains(ch)).ToArray());",
  '        return text.Replace("a", "").Replace("e", "").Replace("i", "").Replace("o",
    "").Replace("u", "");', '        return String.Concat(text.Where(c => !"aeiou".Contains(c)));',
  "        // insert your code here\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in text) {\n            if (c != 'a' && c != 'e' && c\
    \ != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O'\
    \ && c != 'U')\n                sb.Append(c);\n        }\n        return sb.ToString();",
  "        text = text.ToLower();\n        char[] arr = text.ToCharArray();\n    \
    \    for (int i = 0; i < arr.Length; i++) {\n            if ((arr[i] == 'a') ||\
    \ (arr[i] == 'e') || (arr[i] == 'i') || (arr[i] == 'o') || (arr[i] == 'u')) {\n\
    \                arr[i] = ' ';\n            }\n        }\n        text = new string(arr);\n\
    \        text = text.Replace(\" \", \"\");\n        return text;", "        return\
    \ new string(\n            text.Where(c => !\"aeiouAEIOU\".Contains(c)).ToArray()\n\
    \        );", "        return new string(text.ToCharArray().Where(c => c != 'a'\
    \ && c != 'A' && c != 'e' && c != 'E' && c != 'i' && c != 'I' && c != 'o' && c\
    \ != 'O' && c != 'u' && c != 'U').ToArray());", "        StringBuilder sb = new\
    \ StringBuilder();\n        foreach (char c in text) {\n            if (!vowels.Contains(c))\
    \ {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        //////////////////////////////////////////\n        // Your code should\
    \ be placed here.\n        string vowels = \"aeiouAEIOU\";\n        var list =\
    \ new List<char>();\n        foreach (char c in text) {\n            if (!vowels.Contains(c))\
    \ {\n                list.Add(c);\n            }\n        }\n        return new\
    \ string(list.ToArray());\n        //////////////////////////////////////////",
  "        StringBuilder vowels = new StringBuilder(\"aeiouAEIOU\");\n        StringBuilder\
    \ noVowels = new StringBuilder(text.Length);\n        for (int i = 0; i < text.Length;\
    \ i++) {\n            char c = text[i];\n            if (vowels.ToString().IndexOf(c)\
    \ == -1) {\n                noVowels.Append(c);\n            }\n        }\n  \
    \      return noVowels.ToString();", "        StringBuilder sb = new StringBuilder();\n\
    \        HashSet<char> vowels = new HashSet<char>() { 'a', 'A', 'e', 'E', 'i',\
    \ 'I', 'o', 'O', 'u', 'U' };\n        foreach (char c in text) {\n           \
    \ if (!vowels.Contains(c)) {\n                sb.Append(c);\n            }\n \
    \       }\n        return sb.ToString();", "        // Put the solution here.\n\
    \        return text;", "        StringBuilder sb = new StringBuilder();\n   \
    \     HashSet<char> vowels = new HashSet<char>(\"aeiouAEIOU\");\n        foreach\
    \ (char ch in text) {\n            if (!vowels.Contains(ch)) {\n             \
    \   sb.Append(ch);\n            }\n        }\n        return sb.ToString();",
  "        return string.Concat(text.Where(c => (c != 'a') && (c != 'e') && (c !=\
    \ 'i') && (c != 'o') && (c != 'u')));", "        char[] arr = text.ToCharArray();\n\
    \        string result = \"\";\n        for (int i = 0; i < arr.Length; i++) {\n\
    \            if (!IsVowel(arr[i])) {\n                result += arr[i];\n    \
    \        }\n        }\n        return result;", "        if (text == \"\") {\n\
    \            return \"\";\n        }\n        string vowels = \"aeiouAEIOU\";\n\
    \        int idx = text.IndexOfAny(vowels.ToCharArray());\n        if (idx ==\
    \ -1) {\n            return text;\n        }\n        return text.Substring(0,\
    \ idx) + RemoveVowels(text.Substring(idx + 1));", "        string vowels = \"\
    aeiouAEIOU\";\n        string text2 = \"\";\n        for (int i = 0; i < text.Length;\
    \ i++) {\n            if (vowels.IndexOf(text[i]) == -1) {\n                text2\
    \ += text[i];\n            }\n        }\n        return text2;", '        return
    "";', "        char[] textArray = text.ToCharArray();\n        string withOutVowels\
    \ = \"\";\n        foreach (char c in textArray) {\n            if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U') {\n                continue;\n            }\n \
    \           withOutVowels += c;\n        }\n        return withOutVowels;", " \
    \       text = text.ToLower();\n        string vowels = \"aeiou\";\n        StringBuilder\
    \ rv = new StringBuilder();\n        foreach (char c in text) {\n            if\
    \ (vowels.IndexOf(c) < 0) {\n                rv.Append(c);\n            }\n  \
    \      }\n        return rv.ToString();", "        List<char> vowels = new List<char>\
    \ { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        StringBuilder\
    \ result = new StringBuilder();\n        foreach (char c in text) {\n        \
    \    if (!vowels.Contains(c)) {\n                result.Append(c);\n         \
    \   }\n        }\n        return result.ToString();", "        string vowel =\
    \ \"aeiou\";\n        string result = \"\";\n        for (int i = 0; i < text.Length;\
    \ i++) {\n            if (vowel.IndexOf(text[i]) == -1) {\n                result\
    \ += text[i];\n            }\n        }\n        return result;", "        string\
    \ vowels = \"aeiouAEIOU\";\n        string result = \"\";\n        foreach (char\
    \ c in text) {\n            if (vowels.IndexOf(c) == -1) {\n                result\
    \ += c;\n            }\n        }\n        return result;", "        var vowels\
    \ = new HashSet<char>() { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n\
    \        return new string(text.Where(c => !vowels.Contains(c)).ToArray());",
  '        return new string(text.ToCharArray().Where(p => !"AEIOUaeiou".Contains(p)).ToArray());',
  '        return new string(text.Where(ch => !"aeiou".Contains(ch)).ToArray());',
  "        StringBuilder sb = new StringBuilder();\n        string vowels = \"aAeEiIoOuU\"\
    ;\n        foreach (char c in text) {\n            if (vowels.IndexOf(c) == -1)\
    \ {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  '        return string.Concat(text.Where(c => !"aeiou".Contains(c)));', "      \
    \  string result = \"\";\n        for (int i = 0; i < text.Length; i++) {\n  \
    \          if (\"aeiouAEIOU\".IndexOf(text[i]) < 0) {\n                result\
    \ += text[i];\n            }\n        }\n        return result;", "        char[]\
    \ vowels = new char[] { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n\
    \        var newString = new StringBuilder();\n        foreach (char c in text)\
    \ {\n            if (!vowels.Contains(c)) {\n                newString.Append(c);\n\
    \            }\n        }\n        return newString.ToString();", "        char[]\
    \ vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < text.Length; i++) {\n\
    \            if (!vowels.Contains(text[i])) {\n                sb.Append(text[i]);\n\
    \            }\n        }\n        return sb.ToString();", '        return new
    string(text.Where(ch => !"aeiou".Contains(ch)).ToArray());', "        StringBuilder\
    \ textWithoutVowels = new StringBuilder();\n        for (int i = 0; i < text.Length;\
    \ i++) {\n            string vowel = text[i].ToString().ToLower();\n         \
    \   if (vowel != \"a\" && vowel != \"e\" && vowel != \"i\" && vowel != \"o\" &&\
    \ vowel != \"u\") {\n                textWithoutVowels.Append(text[i]);\n    \
    \        }\n        }\n        return textWithoutVowels.ToString();", "      \
    \  var sb = new StringBuilder();\n        foreach (var c in text) {\n        \
    \    if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n       \
    \         sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        var vowels = new HashSet<char>() {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I',\
    \ 'O', 'U'};\n        return new string(text.Where(x => !vowels.Contains(x)).ToArray());",
  "        string[] vowels = { \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\" };\n        foreach (string i in vowels) {\n            text\
    \ = text.Replace(i, \"\");\n        }\n        return text;", '        return
    text.Replace("a", "").Replace("e", "").Replace("i", "").Replace("o", "").Replace("u",
    "");', "        StringBuilder result = new StringBuilder();\n        foreach (char\
    \ letter in text) {\n            switch (letter) {\n                case 'a':\n\
    \                case 'e':\n                case 'i':\n                case 'o':\n\
    \                case 'u':\n                case 'A':\n                case 'E':\n\
    \                case 'I':\n                case 'O':\n                case 'U':\n\
    \                    continue;\n                default:\n                   \
    \ result.Append(letter);\n                    break;\n            }\n        }\n\
    \        return result.ToString();", '        return string.Concat(text.Where(c
    => !IsVowel(c)));', '        return "";', "        StringBuilder sb = new StringBuilder();\n\
    \        string vowels = \"aeiouAEIOU\";\n        for (int i = 0; i < text.Length;\
    \ i++) {\n            if (vowels.IndexOf(text[i]) == -1) {\n                sb.Append(text[i]);\n\
    \            }\n        }\n        return sb.ToString();", "        text = text.ToLower();\n\
    \        return string.Concat(text.Where(c => !\"aeiou\".Contains(c)));", "  \
    \      string Vowels = \"aeiou\";\n        string result = \"\";\n        for\
    \ (int i = 0; i < text.Length; i++) {\n            string a = Char.ToString(text[i]);\n\
    \            if (!Vowels.Contains(a)) {\n                result += a;\n      \
    \      }\n        }\n        return result;", "        // TODO implement me\n\
    \        return text;", "        string result = \"\";\n        for (int i = 0;\
    \ i < text.Length; i++) {\n            if (text[i] != 'a' && text[i] != 'e' &&\
    \ text[i] != 'i' && text[i] != 'o' && text[i] != 'u') {\n                result\
    \ += text[i];\n            }\n        }\n        return result;", "        string\
    \ vowels = \"aeiouAEIOU\";\n        string result = \"\";\n        foreach (char\
    \ c in text) {\n            if (vowels.IndexOf(c) == -1) {\n                result\
    \ += c;\n            }\n        }\n        return result;", "        // Your code\
    \ goes here\n        // return \"\";\n        return text.Replace(\"a\", \"\"\
    ).Replace(\"e\", \"\").Replace(\"i\", \"\").Replace(\"o\", \"\").Replace(\"u\"\
    , \"\");", "        string vowels = \"aeiouAEIOU\";\n        StringBuilder stringBuilder\
    \ = new StringBuilder();\n        foreach (char c in text) {\n            if (vowels.IndexOf(c)\
    \ == -1) {\n                stringBuilder.Append(c);\n            }\n        }\n\
    \        return stringBuilder.ToString();", "        string vowels = \"aeiouAEIOU\"\
    ;\n        string newText = \"\";\n        for (int i = 0; i < text.Length; i++)\
    \ {\n            if (vowels.IndexOf(text[i]) == -1) {\n                newText\
    \ += text[i];\n            }\n        }\n        return newText;", '        return
    new string(text.Where(c => !"aeiou".Contains(c)).ToArray());', "        // Implement\
    \ this function.\n        return new string(text.Where(c => !\"aeiou\".Contains(c)).ToArray());",
  "        string output = \"\";\n        string vowels = \"aeiou\";\n        foreach\
    \ (char c in text) {\n            if (vowels.IndexOf(c) == -1) {\n           \
    \     output += c;\n            }\n        }\n        return output;", '        return
    null;', "        // your code here\n        return text;", "        string vowels\
    \ = \"aeiouAEIOU\";\n        foreach (char c in vowels) {\n            text =\
    \ text.Replace(c.ToString(), \"\");\n        }\n        return text;", "     \
    \   // first we take the text, and convert it to the lowercase.\n        // then\
    \ we use regex expression to match the vowels and\n        // replace them with\
    \ empty string.\n        return System.Text.RegularExpressions.Regex.Replace(text.ToLower(),\
    \ \"[aeiou]\", \"\");", "        // remove all vowels\n        return \"\";",
  "        // katas code here\n        return \"\";", "        StringBuilder sb =\
    \ new StringBuilder();\n        foreach (char c in text) {\n            if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n                continue;\n        \
    \    }\n            sb.Append(c);\n        }\n        return sb.ToString();",
  '        return new string(text.Where(c => !isVowel(c)).ToArray());', "        HashSet<char>\
    \ vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'\
    \ };\n        StringBuilder sb = new StringBuilder();\n        foreach (char letter\
    \ in text) {\n            if (!vowels.Contains(letter)) {\n                sb.Append(letter);\n\
    \            }\n        }\n        return sb.ToString();", "        string res\
    \ = \"\";\n        for (int i = 0; i < text.Length; i++) {\n            if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u')\
    \ {\n                res += text[i];\n            }\n        }\n        return\
    \ res;", "        // TODO: implement this function\n        return \"\";", '        return
    string.Concat(text.Where(c => !IsVowel(c)));', "        string result = \"\";\n\
    \        foreach (char c in text) {\n            if (\"aeiouAEIOU\".IndexOf(c)\
    \ < 0) {\n                result += c;\n            }\n        }\n        return\
    \ result;", '        return new string(text.Where(c => !"aeiou".Contains(c)).ToArray());',
  "        string result = \"\";\n        List<char> vowels = new List<char> { 'a',\
    \ 'A', 'e', 'E', 'i', 'I', 'o', 'O', 'u', 'U' };\n        foreach (char i in text)\
    \ {\n            if (!vowels.Contains(i)) {\n                result += i;\n  \
    \          }\n        }\n        return result;", "        string result = \"\"\
    ;\n        foreach (char c in text) {\n            if (!(\"aeiouAEIOU\".Contains(c)))\n\
    \                result += c;\n        }\n        return result;", '        return
    string.Concat(text.Where(c => !"aeiou".Contains(char.ToLower(c))));', "      \
    \  return new string(\n            Array.FindAll(\n                text.ToCharArray(),\n\
    \                a => !\"aeiouAEIOU\".Contains(a)\n            )\n        );",
  "        // Your code here\n        return text;", "        string result = \"\"\
    ;\n        string vowels = \"aeiou\";\n        foreach (char c in text) {\n  \
    \          if (vowels.IndexOf(c) == -1) {\n                result += c;\n    \
    \        }\n        }\n        return result;", "        return new string(text.Where(ch\
    \ => !(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || ch ==\
    \ 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U')).ToArray());", "  \
    \      string vowels = \"aeiouAEIOU\";\n        string result = \"\";\n      \
    \  foreach (char c in text) {\n            if (vowels.IndexOf(c) < 0) {\n    \
    \            result += c;\n            }\n        }\n        return result;",
  '        return new string(text.Where(c => !IsVowel(c)).ToArray());', "        char[]\
    \ vowel = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        text\
    \ = string.Join(\"\", text.Split(vowel, StringSplitOptions.RemoveEmptyEntries));\n\
    \        return text;", "        // removing vowels from the given text\n    \
    \    string output = text.Replace(\"a\", \"\").Replace(\"e\", \"\").Replace(\"\
    i\", \"\").Replace(\"o\", \"\").Replace(\"u\", \"\");\n        return output;",
  "        text = text.ToLower();\n        string result = \"\";\n        for (int\
    \ i = 0; i < text.Length; i++) {\n            if (text[i] != 'a' && text[i] !=\
    \ 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u') {\n             \
    \   result += text[i];\n            }\n        }\n        return result;", '        return
    "";', "        // YOUR CODE HERE\n        return \"\";", "        string result\
    \ = \"\";\n        string vowels = \"aeiouAEIOU\";\n        foreach (char c in\
    \ text) {\n            if (vowels.IndexOf(c) == -1) {\n                result\
    \ += c;\n            }\n        }\n        return result;", "        var vowels\
    \ = new HashSet<char> {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n  \
    \      var filtered = text.Where(x => !vowels.Contains(x));\n        return new\
    \ string(filtered.ToArray());", "        var vowels = new HashSet<char> { 'a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        var result = new StringBuilder();\n\
    \        foreach (var c in text) {\n            if (!vowels.Contains(c)) {\n \
    \               result.Append(c);\n            }\n        }\n        return result.ToString();",
  "        string result = \"\";\n        for (int i = 0; i < text.Length; i++) {\n\
    \            char c = text[i];\n            if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n                result += c;\n            }\n  \
    \      }\n        return result;", '        return new string(text.Where(c =>
    !"AEIOUaeiou".Contains(c)).ToArray());', "        string new_text = \"\";\n  \
    \      for (int i = 0; i < text.Length; i++) {\n            if (!IsVowel(text[i]))\
    \ {\n                new_text += text[i];\n            }\n        }\n        return\
    \ new_text;", "        string temp = \"\";\n        for (int i = 0; i < text.Length;\
    \ i++) {\n            if (\"aeiouAEIOU\".IndexOf(text[i]) == -1) {\n         \
    \       temp += text[i];\n            }\n        }\n        return temp;", '        return
    text.Replace("a", "").Replace("e", "").Replace("i", "").Replace("o", "").Replace("u",
    "");', "        var textAsList = text.ToList();\n        textAsList.RemoveAll(c\
    \ => \"aeiou\".Contains(c));\n        return new string(textAsList.ToArray());",
  "        string vowels = \"AEIOUaeiou\";\n        string result = \"\";\n      \
    \  for (int i = 0; i < text.Length; i++) {\n            if (vowels.IndexOf(text[i])\
    \ < 0) {\n                result += text[i];\n            }\n        }\n     \
    \   return result;", '        return new string(text.Where(ch => "aeiouAEIOU".IndexOf(ch)
    == -1).ToArray());', "        StringBuilder sb = new StringBuilder();\n      \
    \  string vowels = \"aeiou\";\n        foreach (char c in text) {\n          \
    \  if (vowels.IndexOf(char.ToLower(c)) < 0) {\n                sb.Append(c);\n\
    \            }\n        }\n        return sb.ToString();", "        string txt\
    \ = \"\";\n        for (int i = 0; i < text.Length; i++) {\n            if (\"\
    aeiouAEIOU\".IndexOf(text[i]) == -1)\n                txt += text[i];\n      \
    \  }\n        return txt;", '        return text.Replace("a", "").Replace("e",
    "").Replace("i", "").Replace("o", "").Replace("u", "");', "        string vowels\
    \ = \"aeiouAEIOU\";\n        string result = \"\";\n        foreach (char symbol\
    \ in text) {\n            if (vowels.IndexOf(symbol) == -1) {\n              \
    \  result += symbol;\n            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
