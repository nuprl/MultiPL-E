name: HumanEval_78_hex_key
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You have been tasked to write a function that receives \n  \
  \  // a hexadecimal number as a string and counts the number of hexadecimal \n \
  \   // digits that are primes (prime number, or a prime, is a natural number \n\
  \    // greater than 1 that is not a product of two smaller natural numbers).\n\
  \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
  \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
  \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
  \ 13).\n    // Note: you may assume the input is always correct or empty string,\
  \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n   \
  \ // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n\
  \    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"\
  ))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long\
  \ HexKey(string num) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
  AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
  ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
  123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
  )) == (12L));\n    }\n\n}\n"
completions: ["        long answer = 0;\n        // Your code\n        return answer;",
  "        // Your code here.\n        // You can also add helper methods here.\n\
    \        return 0;", "        // write your code here\n        throw new NotImplementedException();",
  "        var hex = \"0123456789ABCDEF\";\n        var primes = new HashSet<long>()\
    \ { 2, 3, 5, 7, 11, 13 };\n        return num.Select(c => hex.IndexOf(c)).Sum(i\
    \ => primes.Contains(i) ? 1 : 0);", "        var s = new HashSet<char>(\"2357BD\"\
    );\n        return num.Count(ch => s.Contains(ch));", '        return num.ToUpper().Split("").Where(x
    => isPrime(int.Parse(x, System.Globalization.NumberStyles.HexNumber))).Count();',
  "        int[] primes = { 2, 3, 5, 7, 11, 13 };\n        long count = 0;\n     \
    \   if (num.Length > 0) {\n            for (int i = 0; i < num.Length; i++) {\n\
    \                for (int j = 0; j < primes.Length; j++) {\n                 \
    \   if (num[i] == primes[j] + '0' || num[i] == primes[j] + '7') {\n          \
    \              count++;\n                    }\n                }\n          \
    \  }\n        }\n        return count;", "        int i = 0;\n        var digits\
    \ = new HashSet<char>() { '2', '3', '5', '7', 'B', 'D' };\n        while (i <\
    \ num.Length) {\n            if (digits.Contains(num[i])) {\n                digits.Remove(num[i]);\n\
    \            }\n            i++;\n        }\n        return digits.Count;", " \
    \       long result = 0;\n        foreach (char c in num) {\n            if (c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n      \
    \          result++;\n        }\n        return result;", "        int[] prime\
    \ = new int[] {2, 3, 5, 7, 11, 13};\n        long count = 0;\n        int n =\
    \ 0;\n        foreach (char c in num) {\n            if (c >= '0' && c <= '9')\n\
    \                n = c - '0';\n            else\n                n = c - 'A' +\
    \ 10;\n            if (prime.Contains(n))\n                count++;\n        }\n\
    \        return count;", "        long count = 0;\n        int[] hex = { 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 11, 13 };\n        foreach (char c in num) {\n     \
    \       int cur = 0;\n            if (c >= '0' && c <= '9') {\n              \
    \  cur = c - '0';\n            } else if (c >= 'A' && c <= 'F') {\n          \
    \      cur = c - 'A' + 10;\n            }\n            if (hex.Contains(cur))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        if (num == null || num.Length == 0) {\n            return 0;\n        }\n\
    \        int result = 0;\n        for (int i = 0; i < num.Length; i++) {\n   \
    \         if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7'\
    \ || num[i] == 'B' || num[i] == 'D') {\n                result++;\n          \
    \  }\n        }\n        return result;", "        long sum = 0;\n        int[]\
    \ hexPrimes = {2, 3, 5, 7, 11, 13};\n        int[] hexDigits = {0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n        Dictionary<int, char> hexTable\
    \ = new Dictionary<int, char>();\n        int i = 0;\n        foreach (int n in\
    \ hexDigits) {\n            hexTable.Add(n, num[i]);\n            i++;\n     \
    \   }\n        foreach (int n in hexPrimes) {\n            foreach (KeyValuePair<int,\
    \ char> item in hexTable) {\n                if (item.Key == n) {\n          \
    \          sum++;\n                }\n            }\n        }\n        return\
    \ sum;", "        long count = 0;\n        for (int i = 0; i < num.Length; i++)\
    \ {\n            int temp;\n            if (num[i] >= 65) {\n                temp\
    \ = num[i] - 55;\n            } else {\n                temp = num[i] - 48;\n\
    \            }\n            if (temp == 2 || temp == 3 || temp == 5 || temp ==\
    \ 7 || temp == 11 || temp == 13) {\n                count++;\n            }\n\
    \        }\n        return count;", "        long result = 0;\n        // your\
    \ code here\n        return result;", "        List<byte> list = new List<byte>();\n\
    \        for (int i = 0; i < num.Length; i++) {\n            list.Add(Convert.ToByte(num[i]));\n\
    \        }\n        return list.Where(x => x > 1 && x != 4 && x != 6 && x != 8\
    \ && x != 9 && x != 0).Count();", "        if (num == \"\") return 0;\n      \
    \  char[] digits = num.ToUpper().ToCharArray();\n        int count = 0;\n    \
    \    foreach (char c in digits) {\n            if (IsPrime(GetDecimal(c))) count++;\n\
    \        }\n        return count;", "        if (string.IsNullOrEmpty(num)) return\
    \ 0;\n        // your code here\n        var res = num.ToCharArray().Where(n =>\
    \ \"2357BD\".Contains(n)).Count();\n        //\n        return res;", '        return
    num.Count(x => "2357BD".Contains(x));', '        return 0;', "        int[] primes\
    \ = { 2, 3, 5, 7, 11, 13 };\n        return num.ToCharArray().Select(c => {\n\
    \            var str = c.ToString();\n            var value = 0;\n           \
    \ switch (str) {\n                case \"A\":\n                    value = 10;\n\
    \                    break;\n                case \"B\":\n                   \
    \ value = 11;\n                    break;\n                case \"C\":\n     \
    \               value = 12;\n                    break;\n                case\
    \ \"D\":\n                    value = 13;\n                    break;\n      \
    \          case \"E\":\n                    value = 14;\n                    break;\n\
    \                case \"F\":\n                    value = 15;\n              \
    \      break;\n                default:\n                    value = int.Parse(str);\n\
    \                    break;\n            }\n            return value;\n      \
    \  }).Count(p => primes.Contains(p));", "        int counter = 0;\n        Dictionary<char,\
    \ int> dict = new Dictionary<char, int>() {\n            {'2', 2}, {'3', 3}, {'5',\
    \ 5}, {'7', 7}, {'B', 11}, {'D', 13}\n        };\n        foreach (char i in num)\
    \ {\n            if (dict.ContainsKey(i)) {\n                counter++;\n    \
    \        }\n        }\n        return counter;", "        var hexDigits = new\
    \ HashSet<char> { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B',\
    \ 'C', 'D', 'E', 'F' };\n        var primes = new HashSet<char> { '2', '3', '5',\
    \ '7', 'B', 'D' };\n        return num.Count(c => hexDigits.Contains(c) && primes.Contains(c));",
  '        return -1;', "        long count = 0;\n        var primes = new long[]\
    \ {2, 3, 5, 7, 11, 13};\n        var hexPrimes = new List<long>();\n        foreach\
    \ (var n in primes)\n            hexPrimes.Add(n);\n        hexPrimes.Add(11);\n\
    \        hexPrimes.Add(13);\n        foreach (var c in num) {\n            var\
    \ x = Convert.ToInt64(c.ToString(), 16);\n            if (hexPrimes.Contains(x))\n\
    \                count++;\n        }\n        return count;", "        char[]\
    \ hex = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B',\
    \ 'C', 'D', 'E', 'F' };\n        string primes = \"1357BDF\";\n        int count\
    \ = 0;\n        for (int i = 0; i < num.Length; i++) {\n            if (primes.Contains(num[i]))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        char[] valid = {'2', '3', '5', '7', 'B', 'D'};\n        return num.Where(c\
    \ => valid.Contains(c)).Count();", "        // TODO: Implement the function\n\
    \        return 0;", "        long count = 0;\n        foreach (char c in num)\
    \ {\n            switch (c) {\n                case '2':\n                case\
    \ '3':\n                case '5':\n                case '7':\n               \
    \ case 'B':\n                case 'D':\n                    count++;\n       \
    \             break;\n            }\n        }\n        return count;", "    \
    \    long x = 0;\n        for (int i = 0; i < num.Length; i++) {\n           \
    \ if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i]\
    \ == 'B' || num[i] == 'D') {\n                x++;\n            }\n        }\n\
    \        return x;", "        char[] value = new char[] {'2', '3', '5', '7', 'B',\
    \ 'D'};\n        return num.Count(x => value.Contains(x));", "        // Your\
    \ code here\n        return 0;", "        // Convert from string to BigInteger\n\
    \        BigInteger result = BigInteger.Parse(num, System.Globalization.NumberStyles.HexNumber);\n\
    \        // Convert from BigInteger to string\n        string strResult = result.ToString();\n\
    \        int count = 0;\n        foreach (char c in strResult) {\n           \
    \ if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n\
    \                count++;\n            }\n        }\n        return count;", '        return
    num.ToUpper().Select(x => "02456789BDF".Contains(x.ToString())).Count(x => x);',
  "        long primes = 0;\n        foreach (char c in num) {\n            if (IsPrime(ConvertToInt(c)))\n\
    \                primes++;\n        }\n        return primes;", '        return
    num.Count(c => "2357BD".Contains(c));', "        char[] c = num.ToCharArray();\n\
    \        int n = 0;\n        for (int i = 0; i < c.Length; i++) {\n          \
    \  switch (c[i]) {\n                case '2':\n                case '3':\n   \
    \             case '5':\n                case '7':\n                case 'B':\n\
    \                case 'D':\n                    n++;\n                    break;\n\
    \            }\n        }\n        return n;", "        Dictionary<char, byte>\
    \ hexKey = new Dictionary<char, byte>();\n        hexKey.Add('0', 0);\n      \
    \  hexKey.Add('1', 1);\n        hexKey.Add('2', 2);\n        hexKey.Add('3', 3);\n\
    \        hexKey.Add('4', 4);\n        hexKey.Add('5', 5);\n        hexKey.Add('6',\
    \ 6);\n        hexKey.Add('7', 7);\n        hexKey.Add('8', 8);\n        hexKey.Add('9',\
    \ 9);\n        hexKey.Add('A', 10);\n        hexKey.Add('B', 11);\n        hexKey.Add('C',\
    \ 12);\n        hexKey.Add('D', 13);\n        hexKey.Add('E', 14);\n        hexKey.Add('F',\
    \ 15);\n        int count = 0;\n        for (int i = 0; i < num.Length; i++) {\n\
    \            if (hexKey[num[i]] == 2 || hexKey[num[i]] == 3 || hexKey[num[i]]\
    \ == 5 || hexKey[num[i]] == 7 || hexKey[num[i]] == 11 || hexKey[num[i]] == 13)\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        // use binary search to find number of primes between 1-15\n        //\
    \ use a union to combine the search results\n        var digits = num.Select(x\
    \ => (int)x).Select(x => x >= 65 ? x - 55 : x - 48).ToArray();\n        var result\
    \ = new bool[16];\n        for (int i = 0; i < digits.Length; i++) {\n       \
    \     result[digits[i]] = true;\n        }\n        int c = 0;\n        for (int\
    \ i = 2; i < 16; i++) {\n            if (result[i]) {\n                c++;\n\
    \            }\n        }\n        return c;", "        return num.Where(c =>\
    \ c.Equals('2') || c.Equals('3') || c.Equals('5') || c.Equals('7') || c.Equals('B')\
    \ || c.Equals('D')).Count();", "        int[] primes = {2, 3, 5, 7, 11, 13};\n\
    \        string hexDigits = \"0123456789ABCDEF\";\n        char[] hex = num.ToCharArray();\n\
    \        long count = 0;\n        foreach (char digit in hex) {\n            int\
    \ dec = hexDigits.IndexOf(digit);\n            foreach (int prime in primes) {\n\
    \                if (dec == prime) {\n                    count++;\n         \
    \       }\n            }\n        }\n        return count;", '        return num.Where(x
    => "2357BD".Contains(x)).Count();', "        // Your code\n        return 0;",
  "        // Your code here\n        return 0;", "        // Write your code here\n\
    \        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n      \
    \  return 0;", "        long res = 0;\n        foreach (char c in num) {\n   \
    \         if (\"2357BD\".Contains(c)) {\n                res++;\n            }\n\
    \        }\n        return res;", "        long x = 0;\n        // \"==\" is faster\
    \ and more memory efficient than \"Contains\" or \"IndexOf\"\n        for (int\
    \ i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i] == '3'\
    \ || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D') {\n   \
    \             x++;\n            }\n        }\n        return x;", '        return
    0;', "        // We know that if the number is divisible by 2 then its binary\
    \ \n        // representation has a 1 in the first place so we can just shift\
    \ \n        // the number by one bit and check if the result is 0.\n        long\
    \ primes = 0;\n        foreach (char c in num) {\n            // how do we know\
    \ that if a number is divisible by 2 \n            // then it has 1 in the first\
    \ binary place?\n            int digit = Convert.ToInt32(c.ToString(), 16);\n\
    \            if (digit % 2 == 0) {\n                primes++;\n            }\n\
    \        }\n        return primes;", '        return num.Count(c => IsPrime(Hex2Dec(c)));',
  "        var primes = new List<long>() { 2, 3, 5, 7, 11, 13 };\n        return num.ToCharArray().Sum(x\
    \ => primes.Contains(Convert.ToInt64(x.ToString(), 16)) ? 1 : 0);", "        //\
    \ https://en.wikipedia.org/wiki/Hexadecimal\n        // 0000 = 0\n        // 0001\
    \ = 1\n        // 0010 = 2\n        // 0011 = 3\n        // 0100 = 4\n       \
    \ // 0101 = 5\n        // 0110 = 6\n        // 0111 = 7\n        // 1000 = 8\n\
    \        // 1001 = 9\n        // 1010 = A\n        // 1011 = B\n        // 1100\
    \ = C\n        // 1101 = D\n        // 1110 = E\n        // 1111 = F\n       \
    \ // 00011011 = 1B\n        // 10110001 = B1\n        // 11101101 = ED\n     \
    \   // 10001010 = 8A\n        // 10111010 = BA\n        // 00011111 = 1F\n   \
    \     // 11011110 = DE\n        // 11011111 = DF\n        // 01001101 = 4D\n \
    \       // 01001110 = 4E\n        // 10011001 = 99\n        // 10011010 = 9A\n\
    \        // 01010101 = 55\n        // 01010110 = 56\n        // 01011000 = 58\n\
    \        // 01011001 = 59\n        // 01011010 = 5A\n        // 10101010 = AA\n\
    \        // 10101011 = AB\n        // 11010010 = D2\n        // 11010011 = D3\n\
    \        // 11101000 = E8\n        // 11101001 = E9\n        // 11101010 = EA\n\
    \        // 11101011 = EB\n        // 11101100 = EC\n        // 11101101 = ED\n\
    \        // 11101110 = EE\n        // 11101111 = EF\n        // 11001001 = C9\n\
    \        // 11001100 = CC\n        // 11001101 = CD\n        // 11011001 = D9\n\
    \        // 11011010 = DA\n        // 11011100 = DC\n        // 11011101 = DD\n\
    \        // 11011110 = DE\n        // 11011111 = DF\n        // 11110010 = F2\n\
    \        // 11110011 = F3\n        // 11110100 = F4\n        // 11110101 = F5\n\
    \        // 11110110 = F6\n        // 11110111 = F7\n        // 11111", "    \
    \    // 1. You are given a string num.\n        // 2. You are asked to return\
    \ the number of hexadecimal digits in num \n        // that are primes.\n    \
    \    // 3. Expected time complexity: O(length(num))\n        // 4. Expected space\
    \ complexity: O(1)\n        var answer = 0L;\n        //// START SOLUTION ////\n\
    \        return answer;\n        //// END SOLUTION ////", "        // string num\
    \ = \"123456789ABCDEF0\";\n        long count = 0;\n        var primes = new List<string>\
    \ { \"2\", \"3\", \"5\", \"7\", \"B\", \"D\" };\n        foreach (var prime in\
    \ primes) {\n            count += num.Count(x => x.ToString() == prime);\n   \
    \     }\n        return count;", "        // Your code goes here.\n\n\n      \
    \  long primes = 0;\n        foreach (char c in num) {\n            if (IsPrime(Int32.Parse(c.ToString(),\
    \ System.Globalization.NumberStyles.HexNumber))) {\n                primes++;\n\
    \            }\n        }\n        return primes;", "        // your code goes\
    \ here\n        return 0;", "        return num.Where(c => c == '2' || c == '3'\
    \ || c == '5' || c == '7' || c == 'B' || c == 'D').Count();", "        int numOfPrimes\
    \ = 0;\n        int digit;\n        var validHexDigits = new HashSet<char> { '0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n\
    \        for (int i = 0; i < num.Length; i++) {\n            if (!validHexDigits.Contains(num[i]))\
    \ {\n                return -1;\n            }\n            if (num[i] == 'A'\
    \ || num[i] == 'B' || num[i] == 'C' || num[i] == 'D' || num[i] == 'E' || num[i]\
    \ == 'F') {\n                digit = num[i] - 55;\n            } else {\n    \
    \            digit = num[i] - 48;\n            }\n            if (digit == 2 ||\
    \ digit == 3 || digit == 5 || digit == 7 || digit == 11 || digit == 13) {\n  \
    \              numOfPrimes++;\n            }\n        }\n        return numOfPrimes;",
  "        long count = 0;\n        string PrimeString = \"2357BDE\";\n\n        foreach\
    \ (char c in num) {\n            if (PrimeString.Contains(c)) {\n            \
    \    count++;\n            }\n        }\n        return count;", "        if (string.IsNullOrEmpty(num))\
    \ {\n            return 0;\n        }\n        List<char> primes = new List<char>\
    \ { '2', '3', '5', '7', 'B', 'D' };\n        var count = num.Count(x => primes.Contains(x));\n\
    \        return count;", "        long count = 0;\n        foreach (char c in\
    \ num) {\n            int v = (int)c;\n            if (v >= 65) v -= 55;\n   \
    \         else v -= 48;\n            if (v == 2 || v == 3 || v == 5 || v == 7\
    \ || v == 11 || v == 13) {\n                count++;\n            }\n        }\n\
    \        return count;", "        // Starting from a string, first we have to\
    \ convert it to integer\n        // and then we have to figure out which of the\
    \ hex numbers are prime\n        // by using the prime algorithm.\n        if\
    \ (num == \"\") {\n            return 0;\n        }\n        var number = BigInteger.Parse(num,\
    \ System.Globalization.NumberStyles.HexNumber);\n        long counter = 0;\n \
    \       //for (var i = 2; i < number; i++) {\n        //    //if (number % i ==\
    \ 0) {\n        //    //    counter++;\n        //    //}\n        //}\n     \
    \   //return number - counter;\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //",
  "        int len = num.Length;\n        int[] hexDigits = new int[len];\n      \
    \  int[] hexPrimes = new int[len];\n        int[] hexNonPrimes = new int[len];\n\
    \        for (int i = 0; i < len; i++) {\n            hexDigits[i] = Convert.ToInt32(num[i].ToString(),\
    \ 16);\n        }\n        for (int i = 0; i < len; i++) {\n            int count\
    \ = 0;\n            for (int j = 1; j <= hexDigits[i]; j++) {\n              \
    \  if (hexDigits[i] % j == 0) {\n                    count++;\n              \
    \  }\n            }\n            if (count == 2) {\n                hexPrimes[i]\
    \ = hexDigits[i];\n            } else {\n                hexNonPrimes[i] = hexDigits[i];\n\
    \            }\n        }\n        long primes = hexPrimes.Where(i => i != 0).Count();\n\
    \        long nonPrimes = hexNonPrimes.Where(i => i != 0).Count();\n        return\
    \ primes;", '        return num.ToCharArray().Select(s => Int32.Parse(s.ToString(),
    System.Globalization.NumberStyles.HexNumber)).Where(x => IsPrime(x)).Count();',
  "        List<string> primeNumbers = new List<string> {\"2\", \"3\", \"5\", \"7\"\
    , \"B\", \"D\"};\n        return num.Where(x => primeNumbers.Contains(x.ToString())).Count();",
  '        return 0;', '        throw new NotImplementedException();', "        string\
    \ str = \"2357BDF\";\n        return num.ToUpper().Count(x => str.Contains(x));",
  "        // Your code goes here\n        return 0;", "        //Your code goes here.\n\
    \        return 0;", "        // >>> YOUR CODE HERE <<<\n        int count = 0;\n\
    \        foreach (char ch in num) {\n            if (ch == '2' || ch == '3' ||\
    \ ch == '5' || ch == '7' ||\n                ch == 'B' || ch == 'D') {\n     \
    \           count++;\n            }\n        }\n        return count;", "    \
    \    long cnt = 0;\n        var hex = \"13579BDF\";\n        foreach (var ch in\
    \ num) {\n            if (hex.Contains(ch)) cnt++;\n        }\n        return\
    \ cnt;", "        long count = 0;\n        string[] primes = { \"2\", \"3\", \"\
    5\", \"7\", \"B\", \"D\" };\n        foreach (var prime in primes) {\n       \
    \     count += num.Count(ch => ch == prime[0]);\n        }\n        return count;",
  "        long c = 0;\n        foreach (char s in num) {\n            if (s == '2'\
    \ || s == '3' || s == '5' || s == '7' || s == 'B' || s == 'D') {\n           \
    \     c++;\n            }\n        }\n        return c;", "        long count\
    \ = 0;\n        Dictionary<char, bool> primes = new Dictionary<char, bool>();\n\
    \        primes.Add('0', false);\n        primes.Add('1', false);\n        primes.Add('2',\
    \ true);\n        primes.Add('3', true);\n        primes.Add('4', false);\n  \
    \      primes.Add('5', true);\n        primes.Add('6', false);\n        primes.Add('7',\
    \ true);\n        primes.Add('8', false);\n        primes.Add('9', false);\n \
    \       primes.Add('A', false);\n        primes.Add('B', true);\n        primes.Add('C',\
    \ false);\n        primes.Add('D', true);\n        primes.Add('E', false);\n \
    \       primes.Add('F', false);\n        foreach (char c in num) {\n         \
    \   if (primes[c]) count++;\n        }\n        return count;", "        long\
    \ v = 0;\n        // long[] primes = {2, 3, 5, 7, 11, 13};\n        long[] primes\
    \ = {11, 13};\n        for (int i = 0; i < num.Length; i++) {\n            int\
    \ a = GetDigit(num[i]);\n            for (int j = 0; j < primes.Length; j++) {\n\
    \                if (a == primes[j]) {\n                    v++;\n           \
    \         break;\n                }\n            }\n        }\n        return\
    \ v;", "        return num.Where(c => c=='2' || c=='3' || c=='5' || c=='7' ||\
    \ c=='B' || c=='D').Count();", "        // Your code here\n        if (num ==\
    \ \"\")\n            return 0;\n        char[] arr = num.ToCharArray();\n    \
    \    Dictionary<char, int> keyVal = new Dictionary<char, int>();\n        keyVal.Add('0',\
    \ 0);\n        keyVal.Add('1', 1);\n        keyVal.Add('2', 2);\n        keyVal.Add('3',\
    \ 3);\n        keyVal.Add('4', 4);\n        keyVal.Add('5', 5);\n        keyVal.Add('6',\
    \ 6);\n        keyVal.Add('7', 7);\n        keyVal.Add('8', 8);\n        keyVal.Add('9',\
    \ 9);\n        keyVal.Add('A', 10);\n        keyVal.Add('B', 11);\n        keyVal.Add('C',\
    \ 12);\n        keyVal.Add('D', 13);\n        keyVal.Add('E', 14);\n        keyVal.Add('F',\
    \ 15);\n        long numConvert = 0;\n        foreach (char c in arr)\n      \
    \  {\n            numConvert *= 16;\n            numConvert += keyVal[c];\n  \
    \      }\n        int counter = 0;\n        foreach (char c in arr)\n        {\n\
    \            if ((c == '2') || (c == '3') || (c == '5') || (c == '7') || (c ==\
    \ 'B') || (c == 'D'))\n                counter++;\n        }\n        return counter;",
  "        var n = Convert.ToInt64(num, 16);\n        if (n == 1) return 0;\n    \
    \    if (n == 2) return 1;\n        if (n % 2 == 0) return HexKey(Convert.ToString(n\
    \ / 2, 16));\n        if (IsPrime(n)) return 1 + HexKey(Convert.ToString(n - 1,\
    \ 16));\n        return HexKey(Convert.ToString(n - 1, 16));", "        num =\
    \ num.Replace(\"A\", \"10\").Replace(\"B\", \"11\").Replace(\"C\", \"12\").Replace(\"\
    D\", \"13\").Replace(\"E\", \"14\").Replace(\"F\", \"15\");\n        BigInteger\
    \ b = BigInteger.Parse(num);\n        BigInteger[] a = {2, 3, 5, 7, 11, 13};\n\
    \        return a.Where(x => b % x == 0).Count();", "        // Finding a primes\
    \ in the range 0 - 15\n        int[] primes = new int[] {2, 3, 5, 7, 11, 13};\n\
    \        long res = 0;\n        // Checking primes\n        foreach (char c in\
    \ num) {\n            int digit = HexDigit(c);\n            // Checking whether\
    \ 'digit' is a prime\n            if (primes.Contains(digit)) {\n            \
    \    res++;\n            }\n        }\n        return res;", "        // num is\
    \ a hexadecimal number represented as a string.\n        // Return the number\
    \ of prime hexadecimal digits.\n        // Return 0 if num is empty.\n       \
    \ // Return 0 if num is null.\n        // Return 0 if num is a single character\
    \ that is not a hexadecimal digit.\n        if (num == null) return 0;\n     \
    \   if (num.Length == 0) return 0;\n        if (num.Length == 1 && num[0] < '0')\
    \ return 0;\n        if (num.Length == 1 && num[0] > 'F') return 0;\n        if\
    \ (num.Length == 1 && num[0] > '9' && num[0] < 'A') return 0;\n        int count\
    \ = 0;\n        bool[] isPrime = new bool[16];\n        for (int i = 0; i < 16;\
    \ i++) {\n            isPrime[i] = true;\n        }\n        for (int i = 2; i\
    \ < 16; i++) {\n            if (isPrime[i]) {\n                for (int j = 2;\
    \ j * i < 16; j++) {\n                    isPrime[j * i] = false;\n          \
    \      }\n            }\n        }\n        for (int i = 0; i < num.Length; i++)\
    \ {\n            if (num[i] >= '0' && num[i] <= '9') {\n                if (isPrime[num[i]\
    \ - '0']) count++;\n            } else {\n                if (isPrime[num[i] -\
    \ 'A' + 10]) count++;\n            }\n        }\n        return count;", "   \
    \     var primeHex = new [] {'2', '3', '5', '7', 'B', 'D'};\n        return num.Count(primeHex.Contains);",
  "        long result = 0;\n        for (int i = 0; i < num.Length; i++) {\n    \
    \        // set the char to current char in the num string\n            char c\
    \ = num[i];\n            // if char is hex\n            if ((c >= '0' && c <=\
    \ '9') || (c >= 'A' && c <= 'F')) {\n                // set the value of this\
    \ hex number\n                int value = (c >= '0' && c <= '9') ? c - '0' : c\
    \ - 'A' + 10;\n                // if value is a prime number\n               \
    \ if (value == 2 || value == 3 || value == 5 || value == 7 || value == 11 || value\
    \ == 13) {\n                    // inc result\n                    result++;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   long count = 0;\n        for (int i = 0; i < num.Length; i++) {\n        \
    \    if (isPrime(num[i])) count++;\n        }\n        return count;", "     \
    \   long res = 0;\n        string[] h = new string[] {\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\"};\n        int[] p = new int[] {2, 3, 5, 7, 11, 13};\n        for (int\
    \ i = 0; i < num.Length; i++) {\n            if (p.Contains(h.ToList().IndexOf(num[i].ToString())))\
    \ {\n                res++;\n            }\n        }\n        return res;", " \
    \       string primes = \"2357BDF\";\n        int primeCount = 0;\n        for\
    \ (int i = 0; i < num.Length; i++) {\n            if (primes.Contains(num[i]))\
    \ {\n                primeCount++;\n            }\n        }\n        return primeCount;",
  '        return num.ToCharArray().Where(c => "2357BDF".Contains(c)).Count();', '        return
    0;', "        // Implement me\n        long prime_counter = 0;\n        int[]\
    \ primes = { 2, 3, 5, 7, 11, 13 };\n        char[] hex_characters = { '2', '3',\
    \ '5', '7', 'B', 'D' };\n        foreach (char c in num) {\n            if (hex_characters.Contains(c))\
    \ {\n                prime_counter++;\n            }\n        }\n        return\
    \ prime_counter;", "        // your code here\n        char[] digits = num.ToCharArray();\n\
    \        long result = 0;\n        foreach (char i in digits) {\n            int\
    \ temp = 0;\n            if (i >= '0' && i <= '9') {\n                temp = (int)Char.GetNumericValue(i);\n\
    \            } else {\n                switch (i) {\n                    case\
    \ 'A': temp = 10; break;\n                    case 'B': temp = 11; break;\n  \
    \                  case 'C': temp = 12; break;\n                    case 'D':\
    \ temp = 13; break;\n                    case 'E': temp = 14; break;\n       \
    \             case 'F': temp = 15; break;\n                }\n            }\n\
    \            if (IsPrime(temp)) {\n                result++;\n            }\n\
    \        }\n        return result;", "        var primes = new HashSet<int> {\
    \ 2, 3, 5, 7, 11, 13 };\n        var digits = new HashSet<char> { '2', '3', '5',\
    \ '7', 'B', 'D' };\n        return num.Count(c => digits.Contains(c));", "   \
    \     long count = 0;\n        int i = 0;\n        string primeHex = \"2357BDF\"\
    ;\n        while (i < num.Length) {\n            if (primeHex.Contains(num[i]))\
    \ {\n                count++;\n            }\n            i++;\n        }\n  \
    \      return count;", "        // define a set of hex numbers representing prime\
    \ digits in hex\n        var hexPrimes = new HashSet<char> {'2', '3', '5', '7',\
    \ 'B', 'D'};\n        // convert num to upper case\n        num = num.ToUpper();\n\
    \        // define a counter\n        long counter = 0;\n        // iterate over\
    \ each char in num\n        foreach (char c in num) {\n            // if the char\
    \ is a hex prime, increase the counter\n            if (hexPrimes.Contains(c))\
    \ {\n                counter++;\n            }\n        }\n        // return the\
    \ counter\n        return counter;", "        long result = 0;\n        if (string.IsNullOrEmpty(num))\
    \ {\n            return result;\n        }\n        result = num.Where(IsPrimeHexDigit).Count();\n\
    \        return result;", "        long c = 0;\n        for (int i = 0; i < num.Length;\
    \ i++) {\n            if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n                c++;\n        \
    \    }\n        }\n        return c;", "        int result = 0;\n        for (int\
    \ i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i] == '3'\
    \ || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D') {\n   \
    \             result++;\n            }\n        }\n        return result;", " \
    \       // write your code here\n        long c = 0;\n        foreach (char ch\
    \ in num) {\n            if (ch == '2' || ch == '3' || ch == '5' || ch == '7'\
    \ || ch == 'B' || ch == 'D')\n                c++;\n        }\n        return\
    \ c;", "        int[] a={0,1,1,0,1,0,1,0,0,0,1,1,0,1,0,1};\n        int count=0;\n\
    \        if(num==\"\") return 0;\n        for(int i=0;i<num.Length;i++)\n    \
    \    {\n            if(num[i]>=48 && num[i]<=57)\n            {\n            \
    \    if(a[num[i]-48]==1)\n                {\n                    count++;\n  \
    \              }\n            }\n            else if(num[i]>=65 && num[i]<=70)\n\
    \            {\n                if(a[num[i]-55]==1)\n                {\n     \
    \               count++;\n                }\n            }\n        }\n      \
    \  return count;", "        if (string.IsNullOrEmpty(num)) {\n            return\
    \ 0;\n        }\n        long count = 0;\n        foreach (char c in num) {\n\
    \            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c\
    \ == 'D') {\n                count++;\n            }\n        }\n        return\
    \ count;", "        return num.ToUpper().Where(c => c >= '0' && c <= '9' || c\
    \ >= 'A' && c <= 'F').Where(c => (c == '2' || c == '3' || c == '5' || c == '7'\
    \ || c == 'B' || c == 'D')).Count();", "        long primes = 0;\n        for\
    \ (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7'\n                || num[i] == 'B' ||\
    \ num[i] == 'D') {\n                primes++;\n            }\n        }\n    \
    \    return primes;", "        long count = 0;\n        char[] chars = num.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if ((chars[i] ==\
    \ '2') || (chars[i] == '3') || (chars[i] == '5') || (chars[i] == '7') || (chars[i]\
    \ == 'B') || (chars[i] == 'D')) {\n                count++;\n            }\n \
    \       }\n        return count;", "        List<long> primes = new List<long>();\n\
    \        string hex = \"0123456789ABCDEF\";\n        foreach (char c in num) {\n\
    \            int digit = hex.IndexOf(c);\n            if (digit == 2 || digit\
    \ == 3 || digit == 5 || digit == 7 ||\n                    digit == 11 || digit\
    \ == 13)\n                primes.Add(digit);\n        }\n        return primes.Count;",
  "        long result = 0;\n        var a = num.Select(c => Convert.ToInt32(c.ToString(),\
    \ 16));\n        for (int i = 0; i < a.Count(); i++) {\n            if (IsPrime(a.ElementAt(i)))\n\
    \                result++;\n        }\n        return result;", "        long\
    \ ret = 0;\n        for (int i = 0; i < num.Length; i++) {\n            char ch\
    \ = num[i];\n            if (ch == 'A' || ch == 'B' || ch == 'D') {\n        \
    \        ret++;\n            } else if (ch == '2' || ch == '3' || ch == '5' ||\
    \ ch == '7') {\n                ret++;\n            }\n        }\n        return\
    \ ret;", "        long result = 0;\n        foreach (char c in num) {\n      \
    \      switch (c) {\n                case '0':\n                case '1':\n  \
    \              case '4':\n                case '6':\n                case '8':\n\
    \                case '9':\n                    break;\n                case '2':\n\
    \                case '3':\n                case '5':\n                case '7':\n\
    \                case 'B':\n                case 'D':\n                    result++;\n\
    \                    break;\n                default:\n                    throw\
    \ new ArgumentException(\"Invalid hex char \" + c);\n            }\n        }\n\
    \        return result;", "        int cnt = 0;\n        string keys = \"2357BD\"\
    ;\n        foreach (char c in num) {\n            if (keys.Contains(c)) cnt++;\n\
    \        }\n        return cnt;", "        Dictionary<int, int> HexKey = new Dictionary<int,\
    \ int>()\n        {\n            { 2, 2 },\n            { 3, 3 },\n          \
    \  { 5, 5 },\n            { 7, 7 },\n            { 11, 11 },\n            { 13,\
    \ 13 }\n        };\n        long result = 0;\n        var hexDict = new Dictionary<char,\
    \ int>();\n        for (int i = 0; i < num.Length; i++)\n        {\n         \
    \   if (hexDict.ContainsKey(num[i]))\n            {\n                hexDict[num[i]]++;\n\
    \            }\n            else\n            {\n                hexDict.Add(num[i],\
    \ 1);\n            }\n        }\n        foreach (var item in hexDict)\n     \
    \   {\n            foreach (var item2 in HexKey)\n            {\n            \
    \    if (item.Key == item2.Key || item.Key == item2.Value)\n                {\n\
    \                    result += item.Value;\n                }\n            }\n\
    \        }\n        return result;", "        // Write your code here!\n     \
    \   var hexdigits = new List<int> {11, 13, 17, 19, 23, 29};\n        long count\
    \ = 0;\n        for (int i = 0; i < num.Length; i++) {\n            var temp =\
    \ num[i].ToString();\n            if (hexdigits.Contains(int.Parse(temp, System.Globalization.NumberStyles.HexNumber)))\n\
    \                count++;\n        }\n        return count;", '        return
    0;', "        // Write your code here\n        char[] numArray = num.ToCharArray();\n\
    \        int counter = 0;\n        foreach (char digit in numArray) {\n      \
    \      if (digit == '2' || digit == '3' || digit == '5' || digit == '7' || digit\
    \ == 'B' || digit == 'D') {\n                counter++;\n            }\n     \
    \   }\n        return counter;", "        var hex = \"0123456789ABCDEF\";\n  \
    \      var prime = new bool[hex.Length];\n        var hash = new Dictionary<char,\
    \ int>();\n        for (int i = 0; i < hex.Length; i++) {\n            hash[hex[i]]\
    \ = i;\n        }\n        for (int i = 0; i < hex.Length; i++) {\n          \
    \  if (i == 0 || i == 1) {\n                prime[i] = false;\n            } else\
    \ if (i == 2 || i == 3 || i == 5 || i == 7 || i == 11 || i == 13) {\n        \
    \        prime[i] = true;\n            } else {\n                prime[i] = false;\n\
    \                for (int j = 2; j <= i / 2; j++) {\n                    if (i\
    \ % j == 0) {\n                        prime[i] = false;\n                   \
    \     break;\n                    }\n                    prime[i] = true;\n  \
    \              }\n            }\n        }\n        long ret = 0;\n        for\
    \ (int i = 0; i < num.Length; i++) {\n            ret += prime[hash[num[i]]] ?\
    \ 1 : 0;\n        }\n        return ret;", "        // your code goes here\n \
    \       // HexKey((\"AB\"))\n        // HexKey((\"1077E\"))\n        // HexKey((\"\
    ABED1A33\"))\n        // HexKey((\"123456789ABCDEF0\"))\n        // HexKey((\"\
    2020\"))\n        // Write you code here\n        // Return a long value\n   \
    \     int count = 0;\n        int hex = int.Parse(num, System.Globalization.NumberStyles.HexNumber);\n\
    \        for (int i = 0; i < num.Length; i++)\n        {\n            if (num[i]\
    \ == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' ||\
    \ num[i] == 'D')\n            {\n                count++;\n            }\n   \
    \     }\n        return count;", "        long count = 0;\n        List<char>\
    \ hexPrime = new List<char> { '2', '3', '5', '7', 'B', 'D' };\n        foreach\
    \ (char c in num) {\n            if (hexPrime.Contains(c)) {\n               \
    \ count++;\n            }\n        }\n        return count;", "        var primes\
    \ = new int[] { 2, 3, 5, 7, 11, 13 };\n        return primes.Sum(p => num.ToCharArray().Count(x\
    \ => x == p.ToString(\"X\")[0]));", "        int[] nums = new int[num.Length];\n\
    \        long count = 0;\n        int[] primes = new int[] { 2, 3, 5, 7, 11, 13\
    \ };\n        for (int i = 0; i < num.Length; i++) {\n            nums[i] = int.Parse(num[i].ToString(),\
    \ System.Globalization.NumberStyles.HexNumber);\n        }\n        for (int i\
    \ = 0; i < nums.Length; i++) {\n            for (int j = 0; j < primes.Length;\
    \ j++) {\n                if (nums[i] == primes[j]) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;", '        return
    new HexKey(num).count();', "        string primes = \"2357bd\";\n        string\
    \ num_s = num.ToLower();\n        int count = 0;\n        for (int i = 0; i <\
    \ num_s.Length; i++) {\n            if (primes.Contains(num_s[i])) {\n       \
    \         count++;\n            }\n        }\n        return count;", "      \
    \  // we must add one because our range is \"exclusive\" at the higher end\n \
    \       int[] primeDigits = {2, 3, 5, 7, 11, 13};\n        long numDigits = 0;\n\
    \        foreach (char c in num) {\n            int val = c;\n            if (val\
    \ >= '0' && val <= '9') {\n                val -= '0';\n            } else if\
    \ (val >= 'A' && val <= 'F') {\n                val -= 'A' - 10;\n           \
    \ }\n            foreach (int prime in primeDigits) {\n                if (val\
    \ == prime) {\n                    numDigits++;\n                    break;\n\
    \                }\n            }\n        }\n        return numDigits;", "  \
    \      return num.Count(n => new [] {'2', '3', '5', '7', 'B', 'D'}.Contains(n));",
  '        return num.Count(c => "2357BD".Contains(c));', '        return 0;', " \
    \       long count = 0;\n        foreach (char c in num) {\n            if (\"\
    2357BDF\".Contains(c)) {\n                count++;\n            }\n        }\n\
    \        return count;", "        // your code here\n        int n = 0;\n    \
    \    string s = \"2357BD\";\n        foreach (char c in num) {\n            if\
    \ (s.Contains(c)) n++;\n        }\n        return n;", "        int[] arr = new\
    \ int[num.Length];\n        int sum = 0;\n        for (int i = 0; i < num.Length;\
    \ i++) {\n            arr[i] = Convert.ToInt32(num[i].ToString(), 16);\n     \
    \       if (IsPrime(arr[i])) {\n                sum++;\n            }\n      \
    \  }\n        return sum;", "        string[] list = {\"A\", \"B\", \"D\"};\n\
    \        int count = 0;\n        for (int i = 0; i < num.Length; i++) {\n    \
    \        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7')\n\
    \                count++;\n            else {\n                for (int j = 0;\
    \ j < list.Length; j++) {\n                    if (num[i] == list[j][0]) {\n \
    \                       count++;\n                        break;\n           \
    \         }\n                }\n            }\n        }\n        return count;",
  "        int cnt = 0;\n        foreach (char c in num) {\n            int i = Convert.ToInt32(c.ToString(),\
    \ 16);\n            if (i == 2 || i == 3 || i == 5 || i == 7 || i == 11 || i ==\
    \ 13) {\n                cnt++;\n            }\n        }\n        return cnt;",
  "        // write your code here\n        var hex = new Dictionary<char, int>()\
    \ {\n            {'0', 0},\n            {'1', 1},\n            {'2', 2},\n   \
    \         {'3', 3},\n            {'4', 4},\n            {'5', 5},\n          \
    \  {'6', 6},\n            {'7', 7},\n            {'8', 8},\n            {'9',\
    \ 9},\n            {'A', 10},\n            {'B', 11},\n            {'C', 12},\n\
    \            {'D', 13},\n            {'E', 14},\n            {'F', 15}\n     \
    \   };\n        var primes = new List<int> {2, 3, 5, 7, 11, 13};\n        return\
    \ num.Sum(c => primes.Contains(hex[c]) ? 1 : 0);", "        // WRITE YOUR CODE\
    \ HERE\n        return 0;", "        var chars = new HashSet<char>(\"2357BD\"\
    );\n        return num.Count(x => chars.Contains(x));", "        int count = 0;\n\
    \        char[] hexDigits = {'2', '3', '5', '7', 'B', 'D'};\n        foreach (char\
    \ digit in num) {\n            foreach (char hexDigit in hexDigits) {\n      \
    \          if (digit == hexDigit) {\n                    count++;\n          \
    \      }\n            }\n        }\n        return count;", "        int count\
    \ = 0;\n        foreach (char ch in num) {\n            switch (ch) {\n      \
    \          case '2':\n                case '3':\n                case '5':\n \
    \               case '7':\n                case 'B':\n                case 'D':\n\
    \                    count++;\n                    break;\n            }\n   \
    \     }\n        return count;", '        return num.Count(c => "2357BD".Contains(c));',
  '        return num.ToCharArray().Where(x => "2357BD".Contains(x)).Count();', '        return
    num.Where(c => "2357BDF".Contains(c)).Count();', "        string hexDigits = \"\
    2,3,5,7,B,D\";\n        string[] hexDigitsSplit = hexDigits.Split(',');\n    \
    \    long counter = 0;\n        foreach (char c in num) {\n            if (hexDigitsSplit.Contains(c.ToString()))\
    \ {\n                counter++;\n            }\n        }\n        return counter;",
  '        return num.Select(x => x.ToString()).Where(x => "2357BD".Contains(x)).Count();',
  '        return num.ToLower().ToCharArray().Where(x => "02357bd".Contains(x)).Count();',
  "        //Your code goes here\n        return 0;", "        // Your code here\n\
    \        return 0;", "        // your code goes here\n        return 0;", "  \
    \      // return 0L;\n        return num.ToCharArray().Where(c => \"2357BD\".Contains(c)).Count();",
  "        var hexa = new HashSet<int>() { 11, 13, 17, 19, 23, 29 };\n        var\
    \ hexNum = int.Parse(num, System.Globalization.NumberStyles.HexNumber);\n    \
    \    // print(hexNum);\n        var count = 0;\n        while (hexNum > 0) {\n\
    \            var remainder = hexNum % 10;\n            hexNum /= 10;\n       \
    \     if (hexa.Contains(remainder)) {\n                count++;\n            }\n\
    \        }\n        return count;", '        return 0;', '        return num.Count(c
    => "2357BD".Contains(c));', "        var primes = new HashSet<byte> {0x02, 0x03,\
    \ 0x05, 0x07, 0x0B, 0x0D};\n        var bytes = GetBytes(num);\n        return\
    \ bytes.Count(b => primes.Contains(b));", "        return num.ToCharArray().Select(c\
    \ => \n            c <= '9' ? c - '0' : c - 'A' + 10).Sum();", "        string\
    \ hex = \"ABCDEF\";\n        long key = 0;\n        foreach (char x in num) {\n\
    \            if (x == '2' || x == '3' || x == '5' || x == '7')\n             \
    \   key++;\n            else if (hex.Contains(x))\n                key++;\n  \
    \      }\n        return key;", "        string hexdigits = \"2357BDF\";\n   \
    \     long count = 0;\n        foreach (char c in num) {\n            if (hexdigits.Contains(c))\
    \ count++;\n        }\n        return count;", "        long result = 0;\n   \
    \     char[] characters = num.ToCharArray();\n        int n = characters.Length;\n\
    \        char[] hexArray = new char[] { '0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n        List<char> primesList = new\
    \ List<char>();\n        for (int i = 0; i < 16; i++) {\n            if (i ==\
    \ 2 || i == 3 || i == 5 || i == 7 || i == 11 || i == 13) {\n                primesList.Add(hexArray[i]);\n\
    \            }\n        }\n        for (int i = 0; i < n; i++) {\n           \
    \ if (primesList.Contains(characters[i])) {\n                result++;\n     \
    \       }\n        }\n        return result;", "        char[] Arr = {'2','3','5','7','B','D'};\n\
    \        return num.Where(x => Arr.Contains(x)).Count();", "        if (num ==\
    \ null || num.Length == 0) {\n            return 0;\n        }\n        long numOfPrimeDigits\
    \ = 0;\n        char[] digits = num.ToCharArray();\n        for (int i = 0; i\
    \ < digits.Length; i++) {\n            if (IsPrimeNumber(digits[i])) {\n     \
    \           numOfPrimeDigits++;\n            }\n        }\n        return numOfPrimeDigits;",
  "        string primes = \"2357BD\";\n        long count = 0;\n        foreach (char\
    \ ch in num) {\n            if (primes.Contains(ch)) {\n                count++;\n\
    \            }\n        }\n        return count;", "        Debug.Assert(num.Length\
    \ > 0);\n        int count = 0;\n        foreach (char c in num) {\n         \
    \   if (c == '0' || c == '1' || c == '4' || c == '6' || c == '8' || c == '9' ||\
    \ c == 'A' || c == 'C' || c == 'E' || c == 'F')\n                continue;\n \
    \           else\n                count++;\n        }\n        return count;",
  "        //check if input is empty \n        if (num == null || num.Length == 0)\
    \ {\n            return 0;\n        }\n\n        //convert string to char array\n\
    \        char[] numArray = num.ToCharArray();\n\n        //define count and loop\
    \ through the char array\n        long count = 0;\n        for (int i = 0; i <\
    \ numArray.Length; i++) {\n            //instantiate a string to store any prime\
    \ values, \n            //then parse the string to int and change to char again\n\
    \            string str = numArray[i].ToString();\n            int value = Int32.Parse(str,\
    \ System.Globalization.NumberStyles.HexNumber);\n            char ch = (char)value;\n\
    \n            //check if the value is prime \n            if (ch == '2' || ch\
    \ == '3' || ch == '5' || ch == '7' || ch == 'B' || ch == 'D') {\n            \
    \    count++;\n            }\n        }\n        return count;", "        // Your\
    \ code here\n        return 0;", "        // Your code goes here\n        long\
    \ result = 0;\n        foreach (char digit in num) {\n            switch (digit)\
    \ {\n                case '2':\n                case '3':\n                case\
    \ '5':\n                case '7':\n                case 'B':\n               \
    \ case 'D':\n                    result++;\n                    break;\n     \
    \       }\n        }\n        return result;", "        // your code goes here\n\
    \        long count = 0;\n        string temp = num.ToUpper();\n        foreach\
    \ (char c in temp) {\n            if (\"2357BD\".Contains(c)) {\n            \
    \    count++;\n            }\n        }\n        return count;", "        var\
    \ z = 0L;\n        foreach (var c in num) {\n            switch (c) {\n      \
    \          case '2':\n                case '3':\n                case '5':\n \
    \               case '7':\n                case 'B':\n                case 'D':\n\
    \                    z++;\n                    break;\n            }\n       \
    \ }\n        return z;", "        long result = 0;\n        for (int i = 0; i\
    \ < num.Length; i++) {\n            switch (num[i]) {\n                case '0':\n\
    \                case '1':\n                case '4':\n                case '6':\n\
    \                case '8':\n                case '9':\n                case 'A':\n\
    \                case 'C':\n                case 'E':\n                case 'F':\n\
    \                    break;\n                default:\n                    result++;\n\
    \                    break;\n            }\n        }\n        return result;",
  "        long count = 0;\n        List<int> primeNumbers = new List<int>();\n  \
    \      primeNumbers.Add(2);\n        primeNumbers.Add(3);\n        primeNumbers.Add(5);\n\
    \        primeNumbers.Add(7);\n        primeNumbers.Add(11);\n        primeNumbers.Add(13);\n\
    \        foreach (char c in num) {\n            int value = (int)c;\n        \
    \    if (value >= 48 && value <= 57) {\n                if (primeNumbers.Contains(value\
    \ - 48)) {\n                    count++;\n                }\n            } else\
    \ if (value >= 65 && value <= 70) {\n                if (primeNumbers.Contains(value\
    \ - 55)) {\n                    count++;\n                }\n            }\n \
    \       }\n        return count;", "        string prime = \"2357BD\";\n     \
    \   return num.Count(digit => prime.Contains(digit));", "        var primes =\
    \ new[] { 2, 3, 5, 7, 11, 13 };\n        return num.Sum(c => primes.Contains(HexToInt(c))\
    \ ? 1 : 0);", "        string validHex = \"23456789ABCDEF\";\n        return num.Where(x\
    \ => validHex.Contains(x)).Count();", "        // write code here\n        if\
    \ (num == null || num.Length == 0) {\n            return 0;\n        }\n     \
    \   long result = 0;\n        foreach (char item in num) {\n            if (item\
    \ == '2' || item == '3' || item == '5' || item == '7' || item == 'B' || item ==\
    \ 'D') {\n                result++;\n            }\n        }\n        return\
    \ result;", "        // ...\n        return 0;", "        // Your code\n     \
    \   return 0;", "        // fill in your code here\n        return 0;", "    \
    \    // BEGIN SOLUTION\n        long primes = 0;\n        foreach (char c in num)\
    \ {\n            if (c >= 'A') {\n                primes += (c - 'A' + 1) % 2;\n\
    \            } else {\n                primes += c % 2;\n            }\n     \
    \   }\n        return primes;\n        // END SOLUTION", "        var dict = new\
    \ Dictionary<string, int> {\n            {\"2\",2}, {\"3\",3}, {\"5\",5}, {\"\
    7\",7}, {\"B\",11}, {\"D\",13}\n        };\n        var result = 0;\n        foreach\
    \ (var c in num) {\n            if (dict.ContainsKey(c.ToString())) {\n      \
    \          result++;\n            }\n        }\n        return result;", "   \
    \     var nums = num.ToCharArray().Select(x => (long)Char.GetNumericValue(x)).ToArray();\n\
    \        return nums.Count(x => x == 2 || x == 3 || x == 5 || x == 7 || x == 11\
    \ || x == 13);", "        char[] primes = new char[] { '2', '3', '5', '7', 'B',\
    \ 'D' };\n        int count = 0;\n        foreach (char c in num) {\n        \
    \    foreach (char prime in primes) {\n                if (c == prime) {\n   \
    \                 count++;\n                }\n            }\n        }\n    \
    \    return count;", "        int count = 0;\n        int[] prime = { 2, 3, 5,\
    \ 7, 11, 13 };\n        for (int i = 0; i < num.Length; i++) {\n            int\
    \ hexDigit = int.Parse(num[i].ToString(), System.Globalization.NumberStyles.HexNumber);\n\
    \            if (Array.IndexOf(prime, hexDigit) > -1) {\n                count++;\n\
    \            }\n        }\n        return count;", "        char[] valid = { '2',\
    \ '3', '5', '7', 'B', 'D' };\n        int count = 0;\n        foreach (char c\
    \ in num) {\n            if (valid.Contains(c)) count++;\n        }\n        return\
    \ count;", "        string[] primes = { \"2\", \"3\", \"5\", \"7\", \"B\", \"\
    D\" };\n        int count = 0;\n        for (int i = 0; i < num.Length; i++) {\n\
    \            for (int j = 0; j < primes.Length; j++) {\n                if (num[i].ToString()\
    \ == primes[j]) {\n                    count++;\n                }\n         \
    \   }\n        }\n        return count;", "        // brute force\n        long\
    \ count = 0;\n        string[] primes = {\"2\", \"3\", \"5\", \"7\", \"B\", \"\
    D\"};\n        if(num == \"\") {\n            return 0;\n        }\n        //\
    \ set to 0\n        if(num == \"0\") {\n            return 0;\n        }\n   \
    \     foreach(char digit in num) {\n            if(primes.Contains(digit.ToString()))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        // string hex = \"0ABCDEF1\";\n        // int k = 6;\n        // string\
    \ num = \"\";\n        // for (int i = 0; i < k; i++) {\n        //     num +=\
    \ hex[rnd.Next(hex.Length)];\n        // }\n        int[] hex_prime = { 2, 3,\
    \ 5, 7, 11, 13 };\n        char[] charArr = num.ToCharArray();\n        long cnt\
    \ = 0;\n        for (int i = 0; i < charArr.Length; i++) {\n            if (charArr[i]\
    \ >= 'A')\n                charArr[i] = (char)(charArr[i] - 'A' + 10);\n     \
    \       else\n                charArr[i] = (char)(charArr[i] - '0');\n       \
    \     for (int j = 0; j < hex_prime.Length; j++) {\n                if (charArr[i]\
    \ == hex_prime[j]) {\n                    cnt++;\n                    break;\n\
    \                }\n            }\n        }\n        return cnt;", "        //\
    \ your code here\n        return 0;", "        string test = \"ABED1A33\";\n \
    \       //Console.WriteLine(int.Parse(test.Substring(0, 1), System.Globalization.NumberStyles.HexNumber));\n\
    \        long counter = 0;\n        for (int i = 0; i < num.Length; i++) {\n \
    \           int numS = int.Parse(num.Substring(i, 1), System.Globalization.NumberStyles.HexNumber);\n\
    \            if (numS == 2 || numS == 3 || numS == 5 || numS == 7 || numS == 11\
    \ || numS == 13)\n                counter++;\n        }\n        return counter;",
  "        int[] primes = { 2, 3, 5, 7, 11, 13 };\n        string digits = \"0123456789ABCDEF\"\
    ;\n        char[] chars = num.ToCharArray();\n        long result = 0;\n     \
    \   foreach (char c in chars) {\n            for (int i = 0; i < primes.Length;\
    \ i++) {\n                if (c == digits[primes[i]]) {\n                    result++;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", '        return num.Count(i => "2357BD".Contains(i));',
  '        throw new NotImplementedException();', "        // your code goes here\n\
    \        return 0;", "        long count = 0;\n        List<int> hexPrimes = new\
    \ List<int>() { 2, 3, 5, 7, 11, 13 };\n        foreach (char c in num) {\n   \
    \         int hex = int.Parse(c.ToString(), System.Globalization.NumberStyles.HexNumber);\n\
    \            if (hexPrimes.Contains(hex)) count++;\n        }\n        return\
    \ count;", "        long res = 0;\n        for (int i = 0; i < num.Length; i++)\
    \ {\n            int n = int.Parse(num[i].ToString(), System.Globalization.NumberStyles.HexNumber);\n\
    \            if (n == 2 || n == 3 || n == 5 || n == 7 || n == 11 || n == 13)\n\
    \                res++;\n        }\n        return res;", "        // Your code\
    \ here...\n        return -1;", "        List<char> primes = new List<char> {'2',\
    \ '3', '5', '7', 'B', 'D'};\n        long count = 0;\n        foreach (char c\
    \ in num) {\n            if (primes.Contains(c)) {\n                count++;\n\
    \            }\n        }\n        return count;", "        char[] hexDigits =\
    \ {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',\
    \ 'F'};\n        // Put all primes in a list\n        List<int> allPrimes = FindPrimesUpTo(16);\n\
    \        // Keep track of how many primes\n        int numPrimes = 0;\n      \
    \  // Iterate through each digit\n        foreach (char digit in num) {\n    \
    \        // If this digit is a prime, add 1 to numPrimes\n            if (allPrimes.Contains(Array.IndexOf(hexDigits,\
    \ digit)))\n                numPrimes++;\n        }\n        return numPrimes;",
  "        var primes = new[] {\n            \"02\", \"03\", \"05\", \"07\", \"0B\"\
    , \"0D\"\n        };\n        return num.Count(dig => primes.Contains(dig.ToString()));",
  "        int result = 0;\n        string[] a = new string[] {\"2\", \"3\", \"5\"\
    , \"7\", \"B\", \"D\"};\n        foreach (char c in num) {\n            if (a.Contains(c.ToString()))\
    \ {\n                result++;\n            }\n        }\n        return result;",
  "        if (num == \"\") {\n            return 0;\n        }\n        long result\
    \ = 0;\n        string[] digits = {\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"};\n       \
    \ for (int i = 0; i < num.Length; i++) {\n            if (digits[11].Contains(num[i])\
    \ || digits[13].Contains(num[i])) {\n                result++;\n            }\n\
    \        }\n        return result;", "        int count = 0;\n        int length\
    \ = num.Length;\n        string primes = \"2357BD\";\n        for (int i = 0;\
    \ i < length; i++) {\n            if (primes.Contains(num[i])) {\n           \
    \     count++;\n            }\n        }\n        return count;", "        List<int>\
    \ primes = new List<int> { 2, 3, 5, 7, 11, 13 };\n        return num.ToCharArray().Sum(c\
    \ => primes.Contains(int.Parse(c.ToString(), System.Globalization.NumberStyles.HexNumber))\
    \ ? 1 : 0);", "        long sol = 0;\n        // Your code here\n        var primes\
    \ = new List<int> { 2, 3, 5, 7, 11, 13 };\n        foreach (var ch in num) {\n\
    \            var d = Int32.Parse(ch.ToString(), System.Globalization.NumberStyles.HexNumber);\n\
    \            if (primes.Contains(d)) {\n                sol++;\n            }\n\
    \        }\n        return sol;", "        if (num == null || num.Length == 0)\
    \ return 0;\n        long result = 0;\n        var i = 0;\n        var hexDigits\
    \ = new Dictionary<char, int>() {\n            {'0', 0},\n            {'1', 1},\n\
    \            {'2', 2},\n            {'3', 3},\n            {'4', 4},\n       \
    \     {'5', 5},\n            {'6', 6},\n            {'7', 7},\n            {'8',\
    \ 8},\n            {'9', 9},\n            {'A', 10},\n            {'B', 11},\n\
    \            {'C', 12},\n            {'D', 13},\n            {'E', 14},\n    \
    \        {'F', 15}\n        };\n        for (i = 0; i < num.Length; i++) {\n \
    \           if (hexDigits[num[i]] == 2 || hexDigits[num[i]] == 3 ||\n        \
    \        hexDigits[num[i]] == 5 || hexDigits[num[i]] == 7 ||\n               \
    \ hexDigits[num[i]] == 11 || hexDigits[num[i]] == 13) {\n                result++;\n\
    \            }\n        }\n        return result;", '        return num.Where(IsPrime).Count();',
  "        char[] values = { '2', '3', '5', '7', 'B', 'D' };\n        return num.ToCharArray().Intersect(values).Count();",
  '        return num.Count(ch => "2357BD".Contains(ch));', "        List<string>\
    \ hexprimes = new List<string> { \"2\", \"3\", \"5\", \"7\", \"B\", \"D\" };\n\
    \        long count = 0;\n        for (int i = 0; i < num.Length; i++) {\n   \
    \         if (hexprimes.Contains(num[i].ToString())) {\n                count++;\n\
    \            }\n        }\n        return count;"]
stop_tokens:
- "\n    }\n"
