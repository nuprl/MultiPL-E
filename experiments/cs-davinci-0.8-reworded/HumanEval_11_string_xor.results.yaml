language: cs
name: HumanEval_11_string_xor
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       string result = \"\";\n        for (int i = 0; i < a.Length; i++) {\n
    \           if (a[i] == b[i]) {\n                result += \"0\";\n            }
    else {\n                result += \"1\";\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // This is a string operation.
    It works because in ASCII, '0' ^ '0' == 48 ^ 48 == 0, '0' ^ '1' == 48 ^ 49 ==
    1,\n        // '1' ^ '0' == 49 ^ 48 == 1 and '1' ^ '1' == 49 ^ 49 == 0.\n        return
    new string(a.Zip(b, (c, d) => (char)(c ^ d)).ToArray());\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0071080b71a4a839742b07e3d0cd2f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0071080b71a4a839742b07e3d0cd2f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                result
    += \"0\";\n            } else {\n                result += \"1\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        return new string(Enumerable.Zip(a,
    b, (c, d) => (char)(c ^ d)).ToArray());\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <363715b70b5c40fb95174d20fe14db2e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <363715b70b5c40fb95174d20fe14db2e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n
    \               result.Append(\"0\");\n            } else {\n                result.Append(\"1\");\n
    \           }\n        }\n        return result.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        int
    i = 0;\n        for (i = 0; i < a.Length && i < b.Length; i++) {\n            if
    (a[i] == b[i])\n                result += \"0\";\n            else\n                result
    += \"1\";\n        }\n        for (; i < a.Length; i++)\n            result +=
    a[i];\n        for (; i < b.Length; i++)\n            result += b[i];\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            if (a[i] == b[i]) {\n                sb.Append(\"0\");\n            }
    else {\n                sb.Append(\"1\");\n            }\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        StringBuilder sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n            throw
    new Exception(\"strings must be of equal length\");\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i])\n
    \               sb.Append(\"0\");\n            else\n                sb.Append(\"1\");\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Pad with leading zeros so lengths
    are equal.\n        while (a.Length < b.Length) a = \"0\" + a;\n        while
    (b.Length < a.Length) b = \"0\" + b;\n        // XOR each element.\n        var
    sb = new StringBuilder();\n        for (int i = 0; i < a.Length; i++) {\n            sb.Append((a[i]
    == b[i]) ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        StringBuilder sb = new StringBuilder();\n
    \       int i = 0;\n        while (i < a.Length || i < b.Length) {\n            if
    (i < a.Length && i < b.Length) {\n                sb.Append(a[i] ^ b[i]);\n            }
    else if (i < a.Length) {\n                sb.Append(a[i]);\n            } else
    {\n                sb.Append(b[i]);\n            }\n            i++;\n        }\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string s = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i])\n                s
    += \"0\";\n            else\n                s += \"1\";\n        }\n        return
    s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Make a into a list so we can
    modify each element\n        List<char> a_ = a.ToList();\n        // Iterate over
    each element of a\n        for (int i = 0; i < a.Length; i++) {\n            //
    If a[i] == b[i] then a_[i] = '0'\n            if (a[i] == b[i]) {\n                a_[i]
    = '0';\n            }\n            // Else a_[i] = '1'\n            else {\n                a_[i]
    = '1';\n            }\n        }\n        // Join list of chars into string and
    return\n        return string.Join(\"\", a_);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Use Linq to perform XOR on
    each char in a and b\n        var xor = a.Zip(b, (c1, c2) => (char)(c1 ^ c2)).ToArray();\n
    \       return new string(xor);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9bd8e0aeab0b40c08dc0856b427394af>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9bd8e0aeab0b40c08dc0856b427394af>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        byte[] byteA = System.Text.Encoding.ASCII.GetBytes(a);\n
    \       byte[] byteB = System.Text.Encoding.ASCII.GetBytes(b);\n        byte[]
    result = new byte[byteA.Length];\n        for (int i = 0; i < byteA.Length; i++)
    {\n            result[i] = (byte)(byteA[i] ^ byteB[i]);\n        }\n        return
    System.Text.Encoding.ASCII.GetString(result);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <07982868a9354192bef394b3d64aa352>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <07982868a9354192bef394b3d64aa352>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // check inputs and throw error
    if anything is amiss\n        if (a.Length != b.Length) {\n            throw new
    ArgumentException(\"Arguments must be of equal length\");\n        }\n        char[]
    ca = a.ToCharArray();\n        char[] cb = b.ToCharArray();\n        char[] cc
    = new char[ca.Length];\n        for (int i = 0; i < ca.Length; i++) {\n            cc[i]
    = (ca[i] == cb[i]) ? '0' : '1';\n        }\n        return new string(cc);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Convert to BigIntegers and
    perform XOR operation\n        var ba = new BigInteger(a, 2);\n        var bb
    = new BigInteger(b, 2);\n        var bx = ba ^ bb;\n        // Convert BigInteger
    to string representation\n        var sb = new StringBuilder();\n        while
    (bx > 0) {\n            sb.Append(bx % 2);\n            bx /= 2;\n        }\n
    \       return Reverse(sb.ToString());\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0rw42yd9.cs(15,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''System.ReadOnlySpan<byte>''

    /tmp/tmp0rw42yd9.cs(15,36): error CS1503: Argument 2: cannot convert from ''int''
    to ''bool''

    /tmp/tmp0rw42yd9.cs(16,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''System.ReadOnlySpan<byte>''

    /tmp/tmp0rw42yd9.cs(16,36): error CS1503: Argument 2: cannot convert from ''int''
    to ''bool''

    /tmp/tmp0rw42yd9.cs(24,16): error CS0103: The name ''Reverse'' does not exist
    in the current context

    '
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i])\n
    \               result.Append(\"0\");\n            else\n                result.Append(\"1\");\n
    \       }\n        return result.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string res = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            res += (a[i] == b[i]) ? \"0\" :
    \"1\";\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder result = new StringBuilder();\n        for (int i = 0; i
    < a.Length; i++) {\n            if (a[i] == b[i]) {\n                result.Append(\"0\");\n
    \           } else {\n                result.Append(\"1\");\n            }\n        }\n
    \       return result.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        int len = Math.Max(a.Length, b.Length);\n
    \       // Make sure both strings are of equal length\n        a = a.PadLeft(len,
    '0');\n        b = b.PadLeft(len, '0');\n        // Take the XOR of each character
    of the binary string\n        string s = \"\";\n        for (int i = 0; i < len;
    i++) {\n            s += (a[i] == b[i]) ? '0' : '1';\n        }\n        return
    s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       var sb = new StringBuilder();\n        for (int i = 0; i < a.Length; i++)
    {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        int
    ai = 0;\n        int bi = 0;\n        while (ai < a.Length && bi < b.Length) {\n
    \           result += (a[ai] ^ b[bi]);\n            ai++;\n            bi++;\n
    \       }\n        while (ai < a.Length) {\n            result += a[ai];\n            ai++;\n
    \       }\n        while (bi < b.Length) {\n            result += b[bi];\n            bi++;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += (a[i] == b[i]) ? '0' :
    '1';\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n            throw
    new ArgumentException(\"Length of the strings must be equal.\");\n        StringBuilder
    sb = new StringBuilder();\n        for (int i = 0; i < a.Length; i++) {\n            if
    (a[i] == b[i])\n                sb.Append(\"0\");\n            else\n                sb.Append(\"1\");\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n            throw
    new Exception(\"length mismatch\");\n        StringBuilder sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append((a[i] ^ b[i])
    == 1 ? \"1\" : \"0\");\n        }\n        return sb.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i])\n                result
    += \"0\";\n            else\n                result += \"1\";\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += (a[i] ^ b[i]).ToString();\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        char[] result = new char[a.Length];\n
    \       for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n
    \               result[i] = '0';\n            } else {\n                result[i]
    = '1';\n            }\n        }\n        return new string(result);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            sb.Append(((a[i] - '0') ^ (b[i] - '0')));\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Convert the strings to character
    arrays\n        char[] aChars = a.ToCharArray();\n        char[] bChars = b.ToCharArray();\n
    \       // If the arrays are not of equal length, return null\n        if (aChars.Length
    != bChars.Length) {\n            return null;\n        }\n        // Create a
    new string builder object\n        StringBuilder sb = new StringBuilder();\n        //
    Iterate through each character in the array and append\n        // the single
    character XOR result to the string builder\n        for (int i = 0; i < aChars.Length;
    i++) {\n            sb.Append(aChars[i] ^ bChars[i]);\n        }\n        // Return
    the resulting string\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]
    == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO\n        return \"\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4123d35ec2094b4b82f2ae8315512f98>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4123d35ec2094b4b82f2ae8315512f98>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       char[] result = new char[a.Length];\n        for (int i = 0; i < a.Length;
    i++) {\n            if (a[i] == b[i]) {\n                result[i] = '0';\n            }
    else {\n                result[i] = '1';\n            }\n        }\n        return
    new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <62d5f3b6303141dcb7631410009321cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <62d5f3b6303141dcb7631410009321cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015724
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Check lengths of the strings.\n
    \       if (a.Length != b.Length) {\n            // If different, pad them.\n
    \           a = PadWithZeros(a, b.Length);\n            b = PadWithZeros(b, a.Length);\n
    \       }\n        // Copy the string to char arrays.\n        char[] aChars =
    a.ToCharArray();\n        char[] bChars = b.ToCharArray();\n        // Create
    result array for XOR operation.\n        char[] result = new char[aChars.Length];\n
    \       // Iterate over all bits in the strings.\n        for (int i = 0; i <
    aChars.Length; i++) {\n            // Get the bit from the bit array.\n            int
    aBit = aChars[i] - '0';\n            int bBit = bChars[i] - '0';\n            //
    Get the result.\n            int resultBit = aBit ^ bBit;\n            // Convert
    it to character (ASCII).\n            result[i] = (char)(resultBit + '0');\n        }\n
    \       // Return final result.\n        return new string(result);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk0bwuv7c.cs(17,17): error CS0103: The name ''PadWithZeros'' does not exist
    in the current context

    /tmp/tmpk0bwuv7c.cs(18,17): error CS0103: The name ''PadWithZeros'' does not exist
    in the current context

    '
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += (a[i] == b[i]) ? \"0\"
    : \"1\";\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Your code here!\n        var
    r = \"\";\n        for (int i = 0; i < a.Length; i++) {\n            r += a[i]
    == b[i] ? \"0\" : \"1\";\n        }\n        return r;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        int x = 0;\n        for (int i
    = 0; i < a.Length; i++) {\n            if (a[i] == '1' && b[i] == '0') x++;\n
    \           if (a[i] == '0' && b[i] == '1') x++;\n        }\n        return x
    % 2 == 0 ? \"0\" : \"1\";\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d89b9882c95490bb00ee02ad7ce0f46>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d89b9882c95490bb00ee02ad7ce0f46>:0
    \n"
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string s = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                s
    += \"0\";\n            } else {\n                s += \"1\";\n            }\n
    \       }\n        return s;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            if (a[i] == b[i]) {\n                sb.Append(\"0\");\n            }
    else {\n                sb.Append(\"1\");\n            }\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var xor = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            xor.Append(a[i] ^ b[i]);\n
    \       }\n        return xor.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var output = new char[a.Length];\n
    \       for (int i = 0; i < a.Length; i++) {\n            output[i] = a[i] ==
    b[i] ? '0' : '1';\n        }\n        return new string(output);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string output = \"\";\n        int
    i = 0;\n        while (i < a.Length) {\n            if (a[i] == b[i]) {\n                output
    += \"0\";\n            } else {\n                output += \"1\";\n            }\n
    \           i++;\n        }\n        return output;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Your code here\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db8d0f2b2a414cc9a6dcaf6fe79dbb18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db8d0f2b2a414cc9a6dcaf6fe79dbb18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015724
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        //
    iterate over the string in pairs of 8\n        for (int i = 0; i < a.Length; i
    += 8) {\n            // take substrings of a and b\n            string a1 = a.Substring(i,
    8);\n            string b1 = b.Substring(i, 8);\n            // convert to ints\n
    \           int dec_a = Convert.ToInt32(a1, 2);\n            int dec_b = Convert.ToInt32(b1,
    2);\n            // do the XOR and convert back to string\n            string
    XOR = Convert.ToString(dec_a ^ dec_b, 2);\n            // pad the front with 0s\n
    \           XOR = XOR.PadLeft(8, '0');\n            // add to result\n            result
    += XOR;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.StringXor (System.String a, System.String b) [0x0000c] in <0ab0bafc73a445e5ada65af16d754363>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <0ab0bafc73a445e5ada65af16d754363>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    and length must refer to a location within the string.\nParameter name: length\n
    \ at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StringXor (System.String
    a, System.String b) [0x0000c] in <0ab0bafc73a445e5ada65af16d754363>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <0ab0bafc73a445e5ada65af16d754363>:0 \n"
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       int l = a.Length;\n        char[] c = new char[l];\n        for (int i
    = 0; i < l; i++) {\n            Debug.Assert(a[i] == '0' || a[i] == '1');\n            Debug.Assert(b[i]
    == '0' || b[i] == '1');\n            c[i] = (a[i] == b[i]) ? '0' : '1';\n        }\n
    \       return new string(c);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO\n        string output
    = \"\";\n        int size = a.Length;\n        for (int i = 0; i < size; i++)
    {\n            if (a[i] == b[i]) {\n                output += \"0\";\n            }
    else {\n                output += \"1\";\n            }\n        }\n        return
    output;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        int aLength = a.Length;\n        int
    bLength = b.Length;\n        string result = \"\";\n        for (int i = 0; i
    < Math.Max(aLength, bLength); i++) {\n            int aBit = i < aLength ? a[i]
    - '0' : 0;\n            int bBit = i < bLength ? b[i] - '0' : 0;\n            int
    cBit = aBit ^ bBit;\n            result += cBit.ToString();\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        int n = a.Length;\n        char[]
    c = new char[n];\n        for (int i = 0; i < n; i++) {\n            if (a[i]
    == b[i]) {\n                c[i] = '0';\n            } else {\n                c[i]
    = '1';\n            }\n        }\n        return new string(c);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       var res = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            if (a[i] == b[i]) {\n                res.Append(\"0\");\n
    \           } else {\n                res.Append(\"1\");\n            }\n        }\n
    \       return res.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n            throw
    new ArgumentException(\"string lengths must be equal\");\n        StringBuilder
    sb = new StringBuilder();\n        for (int i = 0; i < a.Length; i++) {\n            bool
    a1 = a[i] == '1';\n            bool b1 = b[i] == '1';\n            sb.Append(a1
    ^ b1 ? '1' : '0');\n        }\n        return sb.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            result.Append(((a[i]
    - '0') ^ (b[i] - '0')));\n        }\n        return result.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        int length = a.Length;\n        StringBuilder
    result = new StringBuilder();\n        for (int i = 0; i < length; i++) {\n            result.Append(a[i]
    ^ b[i]);\n        }\n        return result.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Convert the strings to character
    arrays\n        char[] arrayA = a.ToCharArray();\n        char[] arrayB = b.ToCharArray();\n
    \       // Create new char array of size a\n        char[] arrayC = new char[arrayA.Length];\n
    \       // XOR values\n        for (int i = 0; i < arrayA.Length; i++) {\n            //
    If both are 1 or both are 0, then the corresponding index of C is a 0\n            if
    (arrayA[i] == arrayB[i]) {\n                arrayC[i] = '0';\n            }\n
    \           // Otherwise it is a 1\n            else {\n                arrayC[i]
    = '1';\n            }\n        }\n        return new string(arrayC);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            int A = int.Parse(a[i].ToString());\n
    \           int B = int.Parse(b[i].ToString());\n            result += (A ^ B).ToString();\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Convert strings to byte arrays.\n
    \       byte[] aBytes = Encoding.ASCII.GetBytes(a);\n        byte[] bBytes = Encoding.ASCII.GetBytes(b);\n
    \       // Check strings are of equal length.\n        if (aBytes.Length != bBytes.Length)
    {\n            return \"0\";\n        }\n        // Convert result to string.\n
    \       string result = \"\";\n        for (int i = 0; i < aBytes.Length; i++)
    {\n            // XOR each byte together.\n            result += (byte)(aBytes[i]
    ^ bBytes[i]);\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n            throw
    new InvalidOperationException(\"Input strings must be of equal length.\");\n        char[]
    xorstr = new char[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            xorstr[i]
    = (a[i] == b[i]) ? '0' : '1';\n        }\n        return new string(xorstr);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            var aa = a[i] == '1';\n
    \           var bb = b[i] == '1';\n            sb.Append(aa ^ bb ? '1' : '0');\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       var achars = a.ToCharArray();\n        var bchars = b.ToCharArray();\n
    \       for (int i = 0; i < achars.Length; i++) {\n            result.Append(achars[i]
    ^ bchars[i]);\n        }\n        return result.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           Console.WriteLine(\"Length mismatch in xor\");\n            return
    null;\n        }\n        int len = a.Length;\n        string outstr = \"\";\n
    \       for (int i = 0; i < len; i++) {\n            if (a[i] == b[i]) {\n                outstr
    += \"0\";\n            } else {\n                outstr += \"1\";\n            }\n
    \       }\n        return outstr;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Convert the strings to arrays
    of bytes\n        byte[] aBytes = Encoding.ASCII.GetBytes(a);\n        byte[]
    bBytes = Encoding.ASCII.GetBytes(b);\n        // Select the shortest of the arrays\n
    \       byte[] minBytes = aBytes.Length <= bBytes.Length ? aBytes : bBytes;\n
    \       // Compute the XOR for each byte and concatenate the result\n        string
    ret = \"\";\n        for (int i = 0; i < minBytes.Length; i++) {\n            byte
    aByte = aBytes[i];\n            byte bByte = bBytes[i];\n            byte cByte
    = (byte)(aByte ^ bByte);\n            ret += cByte.ToString();\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n            throw
    new InvalidOperationException(\"Strings have to be of equal length\");\n        char[]
    c = new char[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            c[i]
    = a[i] == b[i] ? '0' : '1';\n        }\n        return new string(c);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Write your code here\n        if
    (a.Length != b.Length)\n            throw new Exception(\"Length Mismatch\");\n
    \       string result = \"\";\n        for (int i = 0; i < a.Length; i++) {\n
    \           if (a[i] == b[i])\n                result += \"0\";\n            else\n
    \               result += \"1\";\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        char[] ca = a.ToCharArray();\n
    \       char[] cb = b.ToCharArray();\n        char[] c = new char[ca.Length];\n
    \       for (int i = 0; i < ca.Length; i++) {\n            if (ca[i] == cb[i])
    {\n                c[i] = '0';\n            } else {\n                c[i] = '1';\n
    \           }\n        }\n        return new string(c);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        byte[] byteA = new byte[a.Length
    / 8];\n        byte[] byteB = new byte[b.Length / 8];\n        StringBuilder sb
    = new StringBuilder();\n        for (int i = 0; i < a.Length; i += 8) {\n            byteA[i
    / 8] = (byte)Convert.ToInt32(a.Substring(i, 8), 2);\n            byteB[i / 8]
    = (byte)Convert.ToInt32(b.Substring(i, 8), 2);\n        }\n        for (int i
    = 0; i < byteA.Length; i++) {\n            sb.Append(Convert.ToString(byteA[i]
    ^ byteB[i], 2).PadLeft(8, '0'));\n        }\n        return sb.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.StringXor (System.String a, System.String b) [0x00028] in <5d19e92daa52401588529018cf555142>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <5d19e92daa52401588529018cf555142>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    and length must refer to a location within the string.\nParameter name: length\n
    \ at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StringXor (System.String
    a, System.String b) [0x00028] in <5d19e92daa52401588529018cf555142>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <5d19e92daa52401588529018cf555142>:0 \n"
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var c = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            c.Append(int.Parse(a[i].ToString())
    ^ int.Parse(b[i].ToString()));\n        }\n        return c.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"a and b not of equal length\");\n        }\n
    \       var sb = new StringBuilder();\n        for (int i = 0; i < a.Length; i++)
    {\n            if (a[i] == b[i]) {\n                sb.Append(\"0\");\n            }
    else {\n                sb.Append(\"1\");\n            }\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        byte[] byte1 = Enumerable.Range(0,
    a.Length)\n            .Where(x => x % 2 == 0)\n            .Select(x => Convert.ToByte(a.Substring(x,
    2), 16))\n            .ToArray();\n        byte[] byte2 = Enumerable.Range(0,
    b.Length)\n            .Where(x => x % 2 == 0)\n            .Select(x => Convert.ToByte(b.Substring(x,
    2), 16))\n            .ToArray();\n        byte[] result = byte1.Zip(byte2, (x,
    y) => (byte)(x ^ y)).ToArray();\n        string res = BitConverter.ToString(result).Replace(\"-\",
    \"\");\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c__DisplayClass0_0.<StringXor>b__1 (System.Int32 x) [0x00000]
    in <e4aa041855f743039afdbc35779847fb>:0 \n  at System.Linq.Enumerable+WhereSelectEnumerableIterator`2[TSource,TResult].ToArray
    () [0x0002b] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.StringXor (System.String a, System.String b) [0x0005b] in <e4aa041855f743039afdbc35779847fb>:0
    \n  at Problem.Main (System.String[] args) [0x00020] in <e4aa041855f743039afdbc35779847fb>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    and length must refer to a location within the string.\nParameter name: length\n
    \ at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<StringXor>b__1
    (System.Int32 x) [0x00000] in <e4aa041855f743039afdbc35779847fb>:0 \n  at System.Linq.Enumerable+WhereSelectEnumerableIterator`2[TSource,TResult].ToArray
    () [0x0002b] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.StringXor (System.String a, System.String b) [0x0005b] in <e4aa041855f743039afdbc35779847fb>:0
    \n  at Problem.Main (System.String[] args) [0x00020] in <e4aa041855f743039afdbc35779847fb>:0
    \n"
  stdout: ''
  timestamp: 1660015725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n            throw
    new Exception(\"Can't XOR strings of different length.\");\n        string result
    = \"\";\n        for (int i = 0; i < a.Length; i++) {\n            if (a[i] ==
    b[i])\n                result += \"0\";\n            else\n                result
    += \"1\";\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       var result = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            if (a[i] == b[i]) {\n                result.Append(\"0\");\n
    \           } else {\n                result.Append(\"1\");\n            }\n        }\n
    \       return result.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length!\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       string result = \"\";\n        for (int i = 0; i < a.Length; i++) {\n
    \           result += (char)((a[i] ^ b[i]) + '0');\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string x = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            int ca = a[i] - '0';\n            int
    cb = b[i] - '0';\n            int c = ca ^ cb;\n            x += c.ToString();\n
    \       }\n        return x;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        StringBuilder sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            int a0 = a[i] - '0';\n
    \           int b0 = b[i] - '0';\n            sb.Append((a0 ^ b0).ToString());\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       string result = \"\";\n        for (int i = 0; i < a.Length; i++) {\n
    \           result += a[i] == b[i] ? \"0\" : \"1\";\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015725
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n            throw
    new ArgumentException(\"Lengths of arguments do not match.\");\n        byte[]
    aBytes = new byte[a.Length / 8];\n        byte[] bBytes = new byte[b.Length /
    8];\n        for (int i = 0; i < aBytes.Length; i++) {\n            aBytes[i]
    = Convert.ToByte(a.Substring(8 * i, 8), 2);\n            bBytes[i] = Convert.ToByte(b.Substring(8
    * i, 8), 2);\n        }\n        return ConvertXorToString(aBytes, bBytes);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsh_cqt0p.cs(22,16): error CS0103: The name ''ConvertXorToString'' does
    not exist in the current context

    '
  timestamp: 1660015725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i])\n                result
    += \"0\";\n            else\n                result += \"1\";\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            var bitA = a[i] == '1';\n
    \           var bitB = b[i] == '1';\n            result.Append(bitA ^ bitB ? '1'
    : '0');\n        }\n        return result.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Make sure they have the same
    length, by appending 0s if they don't.\n        if (a.Length > b.Length)\n            b
    = b.PadLeft(a.Length, '0');\n        else if (b.Length > a.Length)\n            a
    = a.PadLeft(b.Length, '0');\n        var result = new StringBuilder();\n        for
    (int i = 0; i < a.Length; i++) {\n            result.Append((a[i] ^ b[i]));\n
    \       }\n        return result.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Pythonic way:\n        // return
    \"\".join(str(int(c) ^ int(d)) for c, d in zip(a, b))\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append((int.Parse(a[i].ToString())
    ^ int.Parse(b[i].ToString())).ToString());\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            if (a[i] == b[i])\n                sb.Append(\"0\");\n            else\n
    \               sb.Append(\"1\");\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            if (a[i] == b[i]) {\n                sb.Append(\"0\");\n            }
    else {\n                sb.Append(\"1\");\n            }\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n            throw
    new ArgumentException(\"Binary strings are not equal length\");\n        int len
    = a.Length;\n        char[] outarr = new char[len];\n        for (int i = 0; i
    < len; i++) {\n            if (a[i] == b[i])\n                outarr[i] = '0';\n
    \           else\n                outarr[i] = '1';\n        }\n        return
    new string(outarr);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n            throw
    new ArgumentException(\"Strings must be of equal length\");\n        StringBuilder
    sb = new StringBuilder();\n        for (int i = 0; i < a.Length; i++) {\n            if
    (a[i] == b[i])\n                sb.Append(\"0\");\n            else\n                sb.Append(\"1\");\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015725
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        char[] achars = a.ToCharArray();\n
    \       char[] bchars = b.ToCharArray();\n        char[] result = new char[achars.Length];\n
    \       for (int i = 0; i < achars.Length; i++) {\n            int ai = achars[i]
    - '0';\n            int bi = bchars[i] - '0';\n            result[i] = (ai ^ bi)
    + '0';\n        }\n        return new string(result);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz_mjfnq9.cs(20,25): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        char[] result = new char[a.Length];\n
    \       for (int i = 0; i < a.Length; i++) {\n            result[i] = a[i] ==
    b[i] ? '0' : '1';\n        }\n        return new string(result);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015725
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Your code goes here.\n        char[]
    aArray = a.ToCharArray();\n        char[] bArray = b.ToCharArray();\n        char[]
    result = new char[aArray.Length];\n        for (int i = 0; i < aArray.Length;
    i++) {\n            result[i] = aArray[i] ^ bArray[i];\n        }\n        string
    resultString = new string(result);\n        return resultString;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmqv3a8ly.cs(19,25): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]
    == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        return new string(a.Zip(b, (x,
    y) => x ^ y).Select(c => (char)(c + '0')).ToArray());\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Input strings must have the same length.\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append((a[i] ^ b[i]) == 0 ? '0' : '1');\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        int l = Math.Max(a.Length, b.Length);\n
    \       a = a.PadLeft(l, '0');\n        b = b.PadLeft(l, '0');\n        StringBuilder
    result = new StringBuilder();\n        for (int i = 0; i < l; i++) {\n            result.Append((a[i]
    ^ b[i]));\n        }\n        return result.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        StringBuilder sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i])\n
    \               sb.Append(\"0\");\n            else\n                sb.Append(\"1\");\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       var sb = new StringBuilder();\n        for (int i = 0; i < a.Length; i++)
    {\n            sb.Append(((a[i] - '0') ^ (b[i] - '0')));\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO\n        return \"\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4123d35ec2094b4b82f2ae8315512f98>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4123d35ec2094b4b82f2ae8315512f98>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new Exception(\"Both strings must be of equal length.\");\n
    \       }\n        string result = \"\";\n        for (int i = 0; i < a.Length;
    i++) {\n            if (a[i] == b[i]) {\n                result += \"0\";\n            }
    else {\n                result += \"1\";\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            bool a1 = a[i] == '1';\n            bool
    b1 = b[i] == '1';\n            if (a1) {\n                if (b1) {\n                    result
    += \"0\";\n                } else {\n                    result += \"1\";\n                }\n
    \           } else {\n                if (b1) {\n                    result +=
    \"1\";\n                } else {\n                    result += \"0\";\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Result will be represented
    as a string.\n        StringBuilder sb = new StringBuilder();\n        // Iterate
    over the inputs.\n        for (int i = 0; i < a.Length; i++) {\n            //
    Convert each character to an integer.\n            // a[i] ^ b[i] will be 0 if
    both are the same.\n            // (int)'0' = 48, (int)'1' = 49.\n            sb.Append((char)((int)'0'
    + (a[i] ^ b[i])));\n        }\n        return sb.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        char[] bits = new char[a.Length];\n
    \       for (int i = 0; i < a.Length; i++) {\n            bits[i] = a[i] == b[i]
    ? '0' : '1';\n        }\n        return new string(bits);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new Exception(\"a and b must be the same length\");\n        }\n
    \       char[] result = new char[a.Length];\n        for (int i = 0; i < a.Length;
    i++) {\n            result[i] = (a[i] == b[i]) ? '0' : '1';\n        }\n        return
    new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n            throw
    new ArgumentException(\"Invalid input data\");\n        StringBuilder sb = new
    StringBuilder();\n        for (int i = 0; i < a.Length; i++) {\n            bool
    aBit = a[i] == '1';\n            bool bBit = b[i] == '1';\n            sb.Append(aBit
    ^ bBit ? '1' : '0');\n        }\n        return sb.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // YOUR CODE HERE\n        var
    res = \"\";\n        for (int i = 0; i < a.Length; i++) {\n            res +=
    a[i] == b[i] ? '0' : '1';\n        }\n        return res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            if (a[i] == b[i]) {\n                sb.Append(\"0\");\n            }
    else {\n                sb.Append(\"1\");\n            }\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var arr1 = a.ToCharArray();\n
    \       var arr2 = b.ToCharArray();\n        for (int i = 0; i < arr1.Length;
    i++) {\n            arr1[i] = arr1[i] == arr2[i] ? '0' : '1';\n        }\n        return
    new string(arr1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       var res = new char[a.Length];\n        for (int i = 0; i < a.Length; i++)
    {\n            res[i] = a[i] == b[i] ? '0' : '1';\n        }\n        return new
    string(res);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var res = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n
    \               res.Append(\"0\");\n            } else {\n                res.Append(\"1\");\n
    \           }\n        }\n        return res.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        int resultLen = Math.Max(a.Length,
    b.Length);\n        // calculate a string of equal length, containing as many
    leading zeros as needed.\n        var aString = a.PadLeft(resultLen, '0');\n        var
    bString = b.PadLeft(resultLen, '0');\n        string result = \"\";\n        for
    (int i = 0; i < resultLen; i++) {\n            result += ((aString[i] == bString[i])
    ? '0' : '1');\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        return new string(Enumerable.Zip(a,
    b, (x, y) => (char)(x ^ y)).ToArray());\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08284fd8181d4ce6ab3ef344cdcf5bcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08284fd8181d4ce6ab3ef344cdcf5bcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        char[] aChars = a.ToCharArray();\n
    \       char[] bChars = b.ToCharArray();\n        int len = Math.Max(aChars.Length,
    bChars.Length);\n        StringBuilder sb = new StringBuilder();\n        for
    (int i = 0; i < len; i++) {\n            char aChar = i < aChars.Length ? aChars[i]
    : '0';\n            char bChar = i < bChars.Length ? bChars[i] : '0';\n            if
    (aChar == bChar) {\n                sb.Append('0');\n            } else {\n                sb.Append('1');\n
    \           }\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // result will be stored in this
    variable\n        string result = \"\";\n        // Loop through each character
    in a and b\n        for (int i = 0; i < a.Length; i++) {\n            // if the
    current character in a is '1'\n            if (a[i] == '1') {\n                //
    if the current character in b is '1'\n                if (b[i] == '1') {\n                    //
    result will be 0\n                    result += \"0\";\n                }\n                //
    else the current character in b is '0'\n                else {\n                    //
    result will be 1\n                    result += \"1\";\n                }\n            }\n
    \           // else the current character in a is '0'\n            else {\n                //
    if the current character in b is '1'\n                if (b[i] == '1') {\n                    //
    result will be 1\n                    result += \"1\";\n                }\n                //
    else the current character in b is '0'\n                else {\n                    //
    result will be 0\n                    result += \"0\";\n                }\n            }\n
    \       }\n        // return the result\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        byte[] bytea = a.Select(ch =>
    (byte)(ch - '0')).ToArray();\n        byte[] byteb = b.Select(ch => (byte)(ch
    - '0')).ToArray();\n        byte[] bytexor = bytea.Zip(byteb, (x, y) => (byte)(x
    ^ y)).ToArray();\n        return string.Join(\"\", bytexor.Select(x => x.ToString()));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        StringBuilder sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string s = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                s
    += \"0\";\n            } else {\n                s += \"1\";\n            }\n
    \       }\n        return s;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length > b.Length) {\n            b
    = b.PadLeft(a.Length, '0');\n        } else if (b.Length > a.Length) {\n            a
    = a.PadLeft(b.Length, '0');\n        }\n        StringBuilder result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            result.Append(a[i] ^
    b[i]);\n        }\n        return result.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be equal length\");\n        }\n
    \       var sb = new StringBuilder();\n        for (int i = 0; i < a.Length; i++)
    {\n            if (a[i] == b[i]) {\n                sb.Append('0');\n            }
    else {\n                sb.Append('1');\n            }\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        StringBuilder sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // This is the result\n        string
    result = \"\";\n        // Loop over the strings, character by character\n        for
    (int i = 0; i < a.Length; i++) {\n            // Transform the characters into
    integers first using the int()\n            // function.\n            // Then
    perform XOR and convert the result back to a string using\n            // the
    str() function.\n            result += (int.Parse(a[i].ToString()) ^ int.Parse(b[i].ToString())).ToString();\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += (a[i] == b[i]) ? \"0\"
    : \"1\";\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        char[] aArray = a.ToCharArray();\n
    \       char[] bArray = b.ToCharArray();\n        if (aArray.Length != bArray.Length)
    {\n            throw new ArgumentException(\"Inputs must be of same length.\");\n
    \       }\n        int aLen = aArray.Length;\n        char[] ret = new char[aLen];\n
    \       for (int i = 0; i < aLen; i++) {\n            if (aArray[i] == bArray[i])
    {\n                ret[i] = '0';\n            } else {\n                ret[i]
    = '1';\n            }\n        }\n        return new string(ret);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += (a[i] == b[i]) ? '0' :
    '1';\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Truncate longer input if needed.\n
    \       if (a.Length > b.Length) {\n            a = a.Substring(0, b.Length);\n
    \       } else if (b.Length > a.Length) {\n            b = b.Substring(0, a.Length);\n
    \       }\n        // Do the XOR.\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                result
    += \"0\";\n            } else {\n                result += \"1\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        char[] ach = a.ToCharArray();\n
    \       char[] bch = b.ToCharArray();\n        char[] xorch = new char[ach.Length];\n
    \       for (int i = 0; i < ach.Length; i++) {\n            xorch[i] = (ach[i]
    == bch[i]) ? '0' : '1';\n        }\n        return new string(xorch);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"String lengths must be equal\");\n        }\n
    \       return new string(a.Select((c, i) => (char)(c ^ b[i])).ToArray());\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <498d6a612526428c892ee6e510dc7d0e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <498d6a612526428c892ee6e510dc7d0e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += (a[i] == b[i]) ? \"0\"
    : \"1\";\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        int n = a.Length;\n        int
    m = b.Length;\n        Debug.Assert(n == m);\n        char[] x = new char[n];\n
    \       for (int i = 0; i < n; i++) {\n            if (a[i] == b[i])\n                x[i]
    = '0';\n            else\n                x[i] = '1';\n        }\n        return
    new string(x);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                result
    += \"0\";\n            } else {\n                result += \"1\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       char[] result = new char[a.Length];\n        for (int i = 0; i < a.Length;
    i++) {\n            result[i] = (a[i] == b[i]) ? '0' : '1';\n        }\n        return
    new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // make a BigInteger from the
    binary string.\n        BigInteger a_int = BigInteger.Parse(a, System.Globalization.NumberStyles.AllowHexSpecifier);\n
    \       BigInteger b_int = BigInteger.Parse(b, System.Globalization.NumberStyles.AllowHexSpecifier);\n
    \       // xor the two numbers.\n        BigInteger c_int = a_int ^ b_int;\n        //
    convert the BigInteger back to a binary string and return it.\n        return
    c_int.ToString(\"X\");\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <177e825529c64302ba153a0aca3bf541>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <177e825529c64302ba153a0aca3bf541>:0
    \n"
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        int aLength = a.Length;\n        int
    bLength = b.Length;\n        if (aLength != bLength)\n            throw new Exception(\"String
    lengths unequal\");\n        StringBuilder sb = new StringBuilder();\n        for
    (int i = 0; i < aLength; i++) {\n            char charA = a[i];\n            char
    charB = b[i];\n            if (charA == charB)\n                sb.Append('0');\n
    \           else\n                sb.Append('1');\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new Exception(\"String lengths do not match\");\n        }\n
    \       char[] chars = new char[a.Length];\n        for (int i = 0; i < a.Length;
    i++) {\n            chars[i] = (a[i] == b[i]) ? '0' : '1';\n        }\n        return
    new string(chars);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Assumes a and b are equal length.\n
    \       var a_bytes = a.Select(bx => Convert.ToByte(bx)).ToArray();\n        var
    b_bytes = b.Select(bx => Convert.ToByte(bx)).ToArray();\n        var c_bytes =
    new byte[a_bytes.Length];\n        for (int i = 0; i < a_bytes.Length; i++) {\n
    \           c_bytes[i] = (byte)(a_bytes[i] ^ b_bytes[i]);\n        }\n        return
    Encoding.ASCII.GetString(c_bytes);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b116c4d23cb64ca0be6a70e9bcd56ec4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b116c4d23cb64ca0be6a70e9bcd56ec4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                result
    += \"0\";\n            } else {\n                result += \"1\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n            throw
    new Exception(\"Unequal length strings\");\n        var c = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i])\n
    \               c.Append(\"0\");\n            else\n                c.Append(\"1\");\n
    \       }\n        return c.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new Exception(\"inputs must be of same length\");\n        }\n
    \       // Use a big integer to do the XOR.\n        var aNum = BigInteger.Parse(\"0\"
    + a);\n        var bNum = BigInteger.Parse(\"0\" + b);\n        var result = aNum
    ^ bNum;\n        // Convert result back to string, remove leading zeros.\n        return
    result.ToString().TrimStart('0');\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ee0a1fac24e49f0b07391747746d40b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ee0a1fac24e49f0b07391747746d40b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i])\n                result
    += \"0\";\n            else\n                result += \"1\";\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Bad input to XOR. Lengths mismatch.\");\n
    \       }\n        int n = a.Length;\n        string c = new string('0', n);\n
    \       for (int i = 0; i < n; i++) {\n            int ci = a[i] ^ b[i];\n            c
    = c.Substring(0, i) + ((char)ci).ToString() + c.Substring(i + 1);\n        }\n
    \       return c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04f9d2938e554dffa1352e733858f88c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04f9d2938e554dffa1352e733858f88c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO implement\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9277d6ff113b4b9a8b8a623fffbdcf79>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9277d6ff113b4b9a8b8a623fffbdcf79>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            sb.Append(((a[i] - '0') ^ (b[i] - '0')));\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Input lengths are not the same.\");\n
    \       }\n        var sb = new StringBuilder();\n        for (int i = 0; i <
    a.Length; i++) {\n            sb.Append(a[i] == b[i] ? '0' : '1');\n        }\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string res = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            int bin_a = a[i] - '0';\n            int
    bin_b = b[i] - '0';\n            if (bin_a + bin_b == 1)\n                res
    += \"1\";\n            else\n                res += \"0\";\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // convert strings to char arrays\n
    \       char[] aChars = a.ToCharArray();\n        char[] bChars = b.ToCharArray();\n
    \       // make the result char array\n        char[] result = new char[aChars.Length];\n
    \       // compute xor for each place\n        for (int i = 0; i < aChars.Length;
    i++) {\n            if (aChars[i] == bChars[i]) {\n                result[i] =
    '0';\n            } else {\n                result[i] = '1';\n            }\n
    \       }\n        // return the result string\n        return new string(result);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        return String.Join(\"\", a.Zip(b,
    (ca, cb) => Convert.ToInt32(ca.ToString()) ^ Convert.ToInt32(cb.ToString())).Select(i
    => i.ToString()));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        return new string(\n            Enumerable.Range(0,
    a.Length)\n            .Select(i => a[i] == b[i] ? '0' : '1')\n            .ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += a[i] == b[i] ? \"0\" :
    \"1\";\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       var c = new char[a.Length];\n        for (int i = 0; i < a.Length; i++)
    {\n            if (a[i] == b[i])\n                c[i] = '0';\n            else\n
    \               c[i] = '1';\n        }\n        return new string(c);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n            throw
    new Exception(\"Undefined for sequences of unequal length\");\n\n        var sb
    = new StringBuilder();\n\n        for (int i = 0; i < a.Length; i++) {\n            bool
    a1 = a[i] == '1';\n            bool b1 = b[i] == '1';\n            sb.Append(a1
    ^ b1 ? '1' : '0');\n        }\n\n        return sb.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Start coding here\n        int
    charCount = a.Length;\n        string str = \"\";\n        for (int i = 0; i <
    charCount; i++) {\n            str += (a[i] == b[i]) ? \"0\" : \"1\";\n        }\n
    \       return str;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new Exception(\"StringXor: string lengths must be the same.\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                sb.Append(\"0\");\n
    \           } else {\n                sb.Append(\"1\");\n            }\n        }\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var a_bytes = a.Select(x => int.Parse(x.ToString())).ToArray();\n
    \       var b_bytes = b.Select(x => int.Parse(x.ToString())).ToArray();\n        var
    result = \"\";\n        for (int i = 0; i < a_bytes.Length; i++) {\n            result
    += (a_bytes[i] ^ b_bytes[i]).ToString();\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        StringBuilder sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function.\n
    \       return string.Empty;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cfb1e2bce757499cbcda532faddf211b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cfb1e2bce757499cbcda532faddf211b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var aB = a.Select(c => c - '0').ToArray();\n
    \       var bB = b.Select(c => c - '0').ToArray();\n        var cB = new int[aB.Length];\n
    \       for (int i = 0; i < aB.Length; i++) {\n            cB[i] = aB[i] ^ bB[i];\n
    \       }\n        return string.Join(\"\", cB.Select(x => (char)(x + '0')));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var c = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n
    \               c.Append(\"0\");\n            } else {\n                c.Append(\"1\");\n
    \           }\n        }\n        return c.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        return Convert.ToString(Convert.ToInt32(a,
    2) ^ Convert.ToInt32(b, 2), 2);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91594b481bc24475bf34fd852ae0622e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91594b481bc24475bf34fd852ae0622e>:0
    \n"
  stdout: ''
  timestamp: 1660015727
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Each call to StringXor() will
    take about 0.1 ms and you can expect\n        // each iter of the simulation loop
    to take about 2 ms.\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <d5b68ec03ac3427080283c4379fa5c2a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <d5b68ec03ac3427080283c4379fa5c2a>:0 \n"
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var output = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                output
    += \"0\";\n            } else {\n                output += \"1\";\n            }\n
    \       }\n        return output;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            sb.Append(((a[i] == '0') ^ (b[i] == '0')) ? '1' : '0');\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Binary strings a and b must have the
    same length.\");\n        }\n        var result = new StringBuilder();\n        for
    (int i = 0; i < a.Length; i++) {\n            bool a_b = a[i] == '1';\n            bool
    b_b = b[i] == '1';\n            result.Append(a_b ^ b_b ? '1' : '0');\n        }\n
    \       return result.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var aLen = a.Length;\n        var
    bLen = b.Length;\n        var maxLen = Math.Max(aLen, bLen);\n        var res
    = new StringBuilder();\n        for (var i = 0; i < maxLen; i++) {\n            var
    aVal = i < aLen ? a[i] : '0';\n            var bVal = i < bLen ? b[i] : '0';\n
    \           res.Append(aVal == bVal ? '0' : '1');\n        }\n        return res.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement your solution
    here.\n        string result = \"\";\n        for (int i = 0; i < a.Length; i++)
    {\n            if (a[i] == b[i])\n                result += \"0\";\n            else\n
    \               result += \"1\";\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n            throw
    new ArgumentException();\n        string result = \"\";\n        for (int i =
    0; i < a.Length; i++) {\n            if (a[i] == b[i])\n                result
    += \"0\";\n            else\n                result += \"1\";\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        StringBuilder sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n
    \               sb.Append(\"0\");\n            } else {\n                sb.Append(\"1\");\n
    \           }\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        return String.Join(\"\", a.Zip(b,
    (x, y) => x ^ y).Select(x => x.ToString()));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        int len = Math.Max(a.Length, b.Length);\n
    \       a = a.PadLeft(len, '0');\n        b = b.PadLeft(len, '0');\n        var
    result = new char[len];\n        for (int i = 0; i < len; i++) {\n            result[i]
    = a[i] == b[i] ? '0' : '1';\n        }\n        return new string(result);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Convert both a and b to a BigInteger\n
    \       BigInteger aInt = BigInteger.Parse(a);\n        BigInteger bInt = BigInteger.Parse(b);\n
    \       // Perform XOR on them and convert back to string\n        return BigInteger.Xor(aInt,
    bInt).ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyckxmae_.cs(18,27): error CS0117: ''BigInteger'' does not contain a definition
    for ''Xor''

    '
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <62d5f3b6303141dcb7631410009321cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <62d5f3b6303141dcb7631410009321cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015724
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // a XOR b = (a AND b') OR (a'
    AND b)\n        return StringOr(StringAnd(a, StringNot(b)), StringAnd(StringNot(a),
    b));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl32k0l_9.cs(15,16): error CS0103: The name ''StringOr'' does not exist
    in the current context

    /tmp/tmpl32k0l_9.cs(15,25): error CS0103: The name ''StringAnd'' does not exist
    in the current context

    /tmp/tmpl32k0l_9.cs(15,38): error CS0103: The name ''StringNot'' does not exist
    in the current context

    /tmp/tmpl32k0l_9.cs(15,53): error CS0103: The name ''StringAnd'' does not exist
    in the current context

    /tmp/tmpl32k0l_9.cs(15,63): error CS0103: The name ''StringNot'' does not exist
    in the current context

    '
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Convert each string to bytes.\n
    \       byte[] a_bytes = Encoding.ASCII.GetBytes(a);\n        byte[] b_bytes =
    Encoding.ASCII.GetBytes(b);\n        // XOR each byte and convert back to char.\n
    \       char[] result = new char[a_bytes.Length];\n        for (int i = 0; i <
    a_bytes.Length; i++) {\n            result[i] = (char)(a_bytes[i] ^ b_bytes[i]);\n
    \       }\n        return new string(result);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1e1a1864125e44879d7743fdca3faae4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1e1a1864125e44879d7743fdca3faae4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException();\n        }\n        StringBuilder sb
    = new StringBuilder();\n        for (int i = 0; i < a.Length; i++) {\n            sb.Append(\n
    \               a[i] == b[i] ? \"0\" : \"1\"\n            );\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        return String.Join(\"\", a.Zip(b,
    (x, y) => (x == y) ? '0' : '1'));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        var result = new StringBuilder();\n        for (int i = 0;
    i < a.Length; i++) {\n            result.Append((a[i] == b[i]) ? \"0\" : \"1\");\n
    \       }\n        return result.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       string result = \"\";\n        for (int i = 0; i < a.Length; i++) {\n
    \           if (a[i] == b[i])\n                result += \"0\";\n            else\n
    \               result += \"1\";\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015727
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        int len = Math.Max(a.Length, b.Length);\n
    \       BigInteger x = BigInteger.Parse(\"0\" + a.PadLeft(len, '0'));\n        BigInteger
    y = BigInteger.Parse(\"0\" + b.PadLeft(len, '0'));\n        BigInteger xor = x
    ^ y;\n        return xor.ToString().TrimStart('0');\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c175cbefcd94d61aeb28cd7a767cbec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c175cbefcd94d61aeb28cd7a767cbec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Replace this code with a faster
    implementation\n        StringBuilder result = new StringBuilder();\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] != b[i])\n                result.Append('1');\n
    \           else\n                result.Append('0');\n        }\n        return
    result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // int x = int.Parse(a, System.Globalization.NumberStyles.AllowHexSpecifier);\n
    \       // int y = int.Parse(b, System.Globalization.NumberStyles.AllowHexSpecifier);\n
    \       // return String.Format(\"{0:X}\", x ^ y);\n        string result = \"\";\n
    \       for (int i = 0; i < a.Length; i++) {\n            result += (a[i] == b[i])
    ? \"0\" : \"1\";\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            result.Append(((a[i]
    - '0') ^ (b[i] - '0')));\n        }\n        return result.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        StringBuilder sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i])\n
    \               sb.Append(\"0\");\n            else\n                sb.Append(\"1\");\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015726
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // ...\n        int[] xor = new
    int[a.Length];\n        for (int i = 0; i < a.Length; i++) {\n            if (a[i]
    == b[i])\n                xor[i] = 0;\n            else\n                xor[i]
    = 1;\n        }\n        string result = \"\";\n        for (int i = 0; i < a.Length;
    i++) {\n            result += xor[i];\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string r = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            r += a[i] == b[i] ? \"0\" : \"1\";\n
    \       }\n        return r;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string r = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            r += ((a[i] == '0') ^ (b[i] == '0'))
    ? '1' : '0';\n        }\n        return r;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder result = new StringBuilder();\n        for (int i = 0; i
    < a.Length; i++) {\n            result.Append((a[i] == b[i]) ? '0' : '1');\n        }\n
    \       return result.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        int length = Math.Max(a.Length,
    b.Length);\n        a = a.PadLeft(length, '0');\n        b = b.PadLeft(length,
    '0');\n        string c = \"\";\n        for (int i = 0; i < length; i++) {\n
    \           c += (a[i] == b[i]) ? '0' : '1';\n        }\n        return c;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var charArrayA = a.ToCharArray();\n
    \       var charArrayB = b.ToCharArray();\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < charArrayA.Length; i++) {\n            sb.Append(charArrayA[i]
    == charArrayB[i] ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015725
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           return \"\";\n        }\n        string s = \"\";\n        for (int
    i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                s
    += \"0\";\n            } else {\n                s += \"1\";\n            }\n
    \       }\n        return s;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        byte[] x = Encoding.ASCII.GetBytes(a);\n
    \       byte[] y = Encoding.ASCII.GetBytes(b);\n        byte[] z = new byte[x.Length];\n
    \       for (int i = 0; i < x.Length; i++) {\n            z[i] = (byte)(x[i] ^
    y[i]);\n        }\n        return Encoding.ASCII.GetString(z);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <140476b5a18a43d1990dece666723b5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <140476b5a18a43d1990dece666723b5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           Console.WriteLine(\"Strings are not of equal length.\");\n            return
    \"\";\n        }\n        int len = a.Length;\n        string result = \"\";\n
    \       for (int i = 0; i < len; i++) {\n            if (a[i] == b[i]) {\n                result
    += \"0\";\n            } else {\n                result += \"1\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // split into two arrays\n        byte[]
    byta = Encoding.ASCII.GetBytes(a);\n        byte[] bytb = Encoding.ASCII.GetBytes(b);\n
    \       byte[] bytc = new byte[byta.Length];\n        // XOR by each byte\n        for
    (int i = 0; i < byta.Length; i++) {\n            bytc[i] = (byte)(byta[i] ^ bytb[i]);\n
    \       }\n        // return a string\n        return Encoding.ASCII.GetString(bytc);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <74dba4660e044f2d8cca482893c72e7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <74dba4660e044f2d8cca482893c72e7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        StringBuilder sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        return string.Join(\"\", \n        a.Select((c,
    i) => c == b[i] ? '0' : '1'));\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       Debug.Assert(a.All(c => c == '0' || c == '1'));\n        Debug.Assert(b.All(c
    => c == '0' || c == '1'));\n        var result = new char[a.Length];\n        for
    (int i = 0; i < a.Length; i++) {\n            result[i] = (a[i] == b[i]) ? '0'
    : '1';\n        }\n        return new string(result);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length.\");\n
    \       }\n        string result = \"\";\n        for (int i = 0; i < a.Length;
    i++) {\n            result += a[i] == b[i] ? \"0\" : \"1\";\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n            throw
    new ArgumentException(\"Operands must be of equal length\");\n        var result
    = new StringBuilder();\n        for (int i = 0; i < a.Length; i++)\n            result.Append((a[i]
    == b[i]) ? '0' : '1');\n        return result.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // We assume both strings are
    of the same length\n        Debug.Assert(a.Length == b.Length);\n        // We
    start with an empty string\n        string result = \"\";\n        // Look at
    every position in both strings\n        for (int i = 0; i < a.Length; i++) {\n
    \           // If the characters in that position are the same\n            if
    (a[i] == b[i]) {\n                // Add a 0 to the result\n                result
    += \"0\";\n            } else {\n                // If they are different, add
    a 1 to the result\n                result += \"1\";\n            }\n        }\n
    \       // Return the result\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be the same length\");\n
    \       }\n        var builder = new StringBuilder();\n        for (int i = 0;
    i < a.Length; i++) {\n            builder.Append(a[i] == b[i] ? '0' : '1');\n
    \       }\n        return builder.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015728
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n            throw
    new Exception(\"Unequal length strings\");\n        StringBuilder result = new
    StringBuilder();\n        for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]
    ^ b[i]).ToString());\n        }\n        return result.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015728
